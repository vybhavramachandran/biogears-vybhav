// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BioGearsPhysiology.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_PHYSIOLOGY_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_PHYSIOLOGY_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BioGearsBloodChemistrySystemData;
        class BioGearsCardiovascularSystemData;
        class BioGearsDrugSystemData;
        class BioGearsEndocrineSystemData;
        class BioGearsEnergySystemData;
        class BioGearsGastrointestinalSystemData;
        class BioGearsHepaticSystemData;
        class BioGearsNervousSystemData;
        class BioGearsRenalSystemData;
        class BioGearsRespiratorySystemData;
        class BioGearsTissueSystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../cdm/Physiology.hxx"

#include "../cdm/PatientActions.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BioGearsBloodChemistrySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsBloodChemistrySystemData: public ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData
        {
          public:
          /**
           * @name ArterialOxygenAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialOxygenAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenAverage_mmHg_type, char > ArterialOxygenAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialOxygenAverage_mmHg_type&
          ArterialOxygenAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialOxygenAverage_mmHg_type&
          ArterialOxygenAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenAverage_mmHg (const ArterialOxygenAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialOxygenAverage_mmHg (::std::unique_ptr< ArterialOxygenAverage_mmHg_type > p);

          //@}

          /**
           * @name ArterialCarbonDioxideAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxideAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialCarbonDioxideAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxideAverage_mmHg_type, char > ArterialCarbonDioxideAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCarbonDioxideAverage_mmHg_type&
          ArterialCarbonDioxideAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCarbonDioxideAverage_mmHg_type&
          ArterialCarbonDioxideAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxideAverage_mmHg (const ArterialCarbonDioxideAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialCarbonDioxideAverage_mmHg (::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > p);

          //@}

          /**
           * @name RhFactorMismatch_ct
           *
           * @brief Accessor and modifier functions for the %RhFactorMismatch_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RhFactorMismatch_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RhFactorMismatch_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > RhFactorMismatch_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RhFactorMismatch_ct_type&
          RhFactorMismatch_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RhFactorMismatch_ct_type&
          RhFactorMismatch_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RhFactorMismatch_ct (const RhFactorMismatch_ct_type& x);

          //@}

          /**
           * @name RhTransfusionReactionVolume_mL
           *
           * @brief Accessor and modifier functions for the %RhTransfusionReactionVolume_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RhTransfusionReactionVolume_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RhTransfusionReactionVolume_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RhTransfusionReactionVolume_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RhTransfusionReactionVolume_mL_type&
          RhTransfusionReactionVolume_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RhTransfusionReactionVolume_mL_type&
          RhTransfusionReactionVolume_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RhTransfusionReactionVolume_mL (const RhTransfusionReactionVolume_mL_type& x);

          //@}

          /**
           * @name DonorRBC_ct
           *
           * @brief Accessor and modifier functions for the %DonorRBC_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DonorRBC_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DonorRBC_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > DonorRBC_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DonorRBC_ct_type&
          DonorRBC_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DonorRBC_ct_type&
          DonorRBC_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DonorRBC_ct (const DonorRBC_ct_type& x);

          //@}

          /**
           * @name PatientRBC_ct
           *
           * @brief Accessor and modifier functions for the %PatientRBC_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PatientRBC_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PatientRBC_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > PatientRBC_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PatientRBC_ct_type&
          PatientRBC_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PatientRBC_ct_type&
          PatientRBC_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PatientRBC_ct (const PatientRBC_ct_type& x);

          //@}

          /**
           * @name TwoCellAgglutinates_ct
           *
           * @brief Accessor and modifier functions for the %TwoCellAgglutinates_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TwoCellAgglutinates_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TwoCellAgglutinates_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > TwoCellAgglutinates_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TwoCellAgglutinates_ct_type&
          TwoCellAgglutinates_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TwoCellAgglutinates_ct_type&
          TwoCellAgglutinates_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TwoCellAgglutinates_ct (const TwoCellAgglutinates_ct_type& x);

          //@}

          /**
           * @name ThreeCellPatAgglutinates_ct
           *
           * @brief Accessor and modifier functions for the %ThreeCellPatAgglutinates_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ThreeCellPatAgglutinates_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ThreeCellPatAgglutinates_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > ThreeCellPatAgglutinates_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ThreeCellPatAgglutinates_ct_type&
          ThreeCellPatAgglutinates_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ThreeCellPatAgglutinates_ct_type&
          ThreeCellPatAgglutinates_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ThreeCellPatAgglutinates_ct (const ThreeCellPatAgglutinates_ct_type& x);

          //@}

          /**
           * @name ThreeCellDonAgglutinates_ct
           *
           * @brief Accessor and modifier functions for the %ThreeCellDonAgglutinates_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ThreeCellDonAgglutinates_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ThreeCellDonAgglutinates_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > ThreeCellDonAgglutinates_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ThreeCellDonAgglutinates_ct_type&
          ThreeCellDonAgglutinates_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ThreeCellDonAgglutinates_ct_type&
          ThreeCellDonAgglutinates_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ThreeCellDonAgglutinates_ct (const ThreeCellDonAgglutinates_ct_type& x);

          //@}

          /**
           * @name FourCellAgglutinates_ct
           *
           * @brief Accessor and modifier functions for the %FourCellAgglutinates_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ FourCellAgglutinates_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FourCellAgglutinates_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > FourCellAgglutinates_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FourCellAgglutinates_ct_type&
          FourCellAgglutinates_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FourCellAgglutinates_ct_type&
          FourCellAgglutinates_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FourCellAgglutinates_ct (const FourCellAgglutinates_ct_type& x);

          //@}

          /**
           * @name RemovedRBC_ct
           *
           * @brief Accessor and modifier functions for the %RemovedRBC_ct
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RemovedRBC_ct_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RemovedRBC_ct_type, char, ::xsd::cxx::tree::schema_type::double_ > RemovedRBC_ct_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RemovedRBC_ct_type&
          RemovedRBC_ct () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RemovedRBC_ct_type&
          RemovedRBC_ct ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RemovedRBC_ct (const RemovedRBC_ct_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsBloodChemistrySystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsBloodChemistrySystemData (const ArterialOxygenAverage_mmHg_type&,
                                            const ArterialCarbonDioxideAverage_mmHg_type&,
                                            const RhFactorMismatch_ct_type&,
                                            const RhTransfusionReactionVolume_mL_type&,
                                            const DonorRBC_ct_type&,
                                            const PatientRBC_ct_type&,
                                            const TwoCellAgglutinates_ct_type&,
                                            const ThreeCellPatAgglutinates_ct_type&,
                                            const ThreeCellDonAgglutinates_ct_type&,
                                            const FourCellAgglutinates_ct_type&,
                                            const RemovedRBC_ct_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsBloodChemistrySystemData (::std::unique_ptr< ArterialOxygenAverage_mmHg_type >,
                                            ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type >,
                                            const RhFactorMismatch_ct_type&,
                                            const RhTransfusionReactionVolume_mL_type&,
                                            const DonorRBC_ct_type&,
                                            const PatientRBC_ct_type&,
                                            const TwoCellAgglutinates_ct_type&,
                                            const ThreeCellPatAgglutinates_ct_type&,
                                            const ThreeCellDonAgglutinates_ct_type&,
                                            const FourCellAgglutinates_ct_type&,
                                            const RemovedRBC_ct_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsBloodChemistrySystemData (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsBloodChemistrySystemData (const BioGearsBloodChemistrySystemData& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsBloodChemistrySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsBloodChemistrySystemData&
          operator= (const BioGearsBloodChemistrySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsBloodChemistrySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ArterialOxygenAverage_mmHg_type > ArterialOxygenAverage_mmHg_;
          ::xsd::cxx::tree::one< ArterialCarbonDioxideAverage_mmHg_type > ArterialCarbonDioxideAverage_mmHg_;
          ::xsd::cxx::tree::one< RhFactorMismatch_ct_type > RhFactorMismatch_ct_;
          ::xsd::cxx::tree::one< RhTransfusionReactionVolume_mL_type > RhTransfusionReactionVolume_mL_;
          ::xsd::cxx::tree::one< DonorRBC_ct_type > DonorRBC_ct_;
          ::xsd::cxx::tree::one< PatientRBC_ct_type > PatientRBC_ct_;
          ::xsd::cxx::tree::one< TwoCellAgglutinates_ct_type > TwoCellAgglutinates_ct_;
          ::xsd::cxx::tree::one< ThreeCellPatAgglutinates_ct_type > ThreeCellPatAgglutinates_ct_;
          ::xsd::cxx::tree::one< ThreeCellDonAgglutinates_ct_type > ThreeCellDonAgglutinates_ct_;
          ::xsd::cxx::tree::one< FourCellAgglutinates_ct_type > FourCellAgglutinates_ct_;
          ::xsd::cxx::tree::one< RemovedRBC_ct_type > RemovedRBC_ct_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsCardiovascularSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsCardiovascularSystemData: public ::mil::tatrc::physiology::datamodel::CardiovascularSystemData
        {
          public:
          /**
           * @name StartSystole
           *
           * @brief Accessor and modifier functions for the %StartSystole
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean StartSystole_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StartSystole_type, char > StartSystole_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StartSystole_type&
          StartSystole () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StartSystole_type&
          StartSystole ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StartSystole (const StartSystole_type& x);

          //@}

          /**
           * @name HeartFlowDetected
           *
           * @brief Accessor and modifier functions for the %HeartFlowDetected
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean HeartFlowDetected_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartFlowDetected_type, char > HeartFlowDetected_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartFlowDetected_type&
          HeartFlowDetected () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartFlowDetected_type&
          HeartFlowDetected ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartFlowDetected (const HeartFlowDetected_type& x);

          //@}

          /**
           * @name EnterCardiacArrest
           *
           * @brief Accessor and modifier functions for the %EnterCardiacArrest
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean EnterCardiacArrest_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnterCardiacArrest_type, char > EnterCardiacArrest_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EnterCardiacArrest_type&
          EnterCardiacArrest () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EnterCardiacArrest_type&
          EnterCardiacArrest ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnterCardiacArrest (const EnterCardiacArrest_type& x);

          //@}

          /**
           * @name CardiacCyclePeriod_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePeriod_s_type&
          CardiacCyclePeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePeriod_s_type&
          CardiacCyclePeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePeriod_s (const CardiacCyclePeriod_s_type& x);

          //@}

          /**
           * @name CurrentCardiacCycleDuration_s
           *
           * @brief Accessor and modifier functions for the %CurrentCardiacCycleDuration_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CurrentCardiacCycleDuration_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CurrentCardiacCycleDuration_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CurrentCardiacCycleDuration_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CurrentCardiacCycleDuration_s_type&
          CurrentCardiacCycleDuration_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CurrentCardiacCycleDuration_s_type&
          CurrentCardiacCycleDuration_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CurrentCardiacCycleDuration_s (const CurrentCardiacCycleDuration_s_type& x);

          //@}

          /**
           * @name LeftHeartElastanceModifier
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceModifier_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceModifier_type&
          LeftHeartElastanceModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceModifier_type&
          LeftHeartElastanceModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceModifier (const LeftHeartElastanceModifier_type& x);

          //@}

          /**
           * @name LeftHeartElastance_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastance_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastance_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastance_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastance_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastance_mmHg_Per_mL_type&
          LeftHeartElastance_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastance_mmHg_Per_mL_type&
          LeftHeartElastance_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastance_mmHg_Per_mL (const LeftHeartElastance_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name LeftHeartElastanceMax_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMax_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceMax_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMax_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceMax_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceMax_mmHg_Per_mL_type&
          LeftHeartElastanceMax_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceMax_mmHg_Per_mL_type&
          LeftHeartElastanceMax_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMax_mmHg_Per_mL (const LeftHeartElastanceMax_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name LeftHeartElastanceMin_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMin_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceMin_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMin_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceMin_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceMin_mmHg_Per_mL_type&
          LeftHeartElastanceMin_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceMin_mmHg_Per_mL_type&
          LeftHeartElastanceMin_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMin_mmHg_Per_mL (const LeftHeartElastanceMin_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastance_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastance_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastance_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastance_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastance_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastance_mmHg_Per_mL_type&
          RightHeartElastance_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastance_mmHg_Per_mL_type&
          RightHeartElastance_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastance_mmHg_Per_mL (const RightHeartElastance_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastanceMax_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMax_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastanceMax_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMax_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastanceMax_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastanceMax_mmHg_Per_mL_type&
          RightHeartElastanceMax_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastanceMax_mmHg_Per_mL_type&
          RightHeartElastanceMax_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMax_mmHg_Per_mL (const RightHeartElastanceMax_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastanceMin_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMin_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastanceMin_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMin_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastanceMin_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastanceMin_mmHg_Per_mL_type&
          RightHeartElastanceMin_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastanceMin_mmHg_Per_mL_type&
          RightHeartElastanceMin_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMin_mmHg_Per_mL (const RightHeartElastanceMin_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name CompressionTime_s
           *
           * @brief Accessor and modifier functions for the %CompressionTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionTime_s_type&
          CompressionTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionTime_s_type&
          CompressionTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionTime_s (const CompressionTime_s_type& x);

          //@}

          /**
           * @name CompressionRatio
           *
           * @brief Accessor and modifier functions for the %CompressionRatio
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionRatio_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionRatio_type&
          CompressionRatio () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionRatio_type&
          CompressionRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionRatio (const CompressionRatio_type& x);

          //@}

          /**
           * @name CompressionPeriod_s
           *
           * @brief Accessor and modifier functions for the %CompressionPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionPeriod_s_type&
          CompressionPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionPeriod_s_type&
          CompressionPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionPeriod_s (const CompressionPeriod_s_type& x);

          //@}

          /**
           * @name CurrentCardiacCycleTime_s
           *
           * @brief Accessor and modifier functions for the %CurrentCardiacCycleTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CurrentCardiacCycleTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CurrentCardiacCycleTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CurrentCardiacCycleTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CurrentCardiacCycleTime_s_type&
          CurrentCardiacCycleTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CurrentCardiacCycleTime_s_type&
          CurrentCardiacCycleTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CurrentCardiacCycleTime_s (const CurrentCardiacCycleTime_s_type& x);

          //@}

          /**
           * @name CardiacCycleDiastolicVolume_mL
           *
           * @brief Accessor and modifier functions for the %CardiacCycleDiastolicVolume_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleDiastolicVolume_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleDiastolicVolume_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleDiastolicVolume_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleDiastolicVolume_mL_type&
          CardiacCycleDiastolicVolume_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleDiastolicVolume_mL_type&
          CardiacCycleDiastolicVolume_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleDiastolicVolume_mL (const CardiacCycleDiastolicVolume_mL_type& x);

          //@}

          /**
           * @name CardiacCycleAortaPressureLow_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleAortaPressureLow_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleAortaPressureLow_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleAortaPressureLow_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleAortaPressureLow_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleAortaPressureLow_mmHg_type&
          CardiacCycleAortaPressureLow_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleAortaPressureLow_mmHg_type&
          CardiacCycleAortaPressureLow_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleAortaPressureLow_mmHg (const CardiacCycleAortaPressureLow_mmHg_type& x);

          //@}

          /**
           * @name CardiacCycleAortaPressureHigh_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleAortaPressureHigh_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleAortaPressureHigh_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleAortaPressureHigh_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleAortaPressureHigh_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleAortaPressureHigh_mmHg_type&
          CardiacCycleAortaPressureHigh_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleAortaPressureHigh_mmHg_type&
          CardiacCycleAortaPressureHigh_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleAortaPressureHigh_mmHg (const CardiacCycleAortaPressureHigh_mmHg_type& x);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressureLow_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressureLow_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePulmonaryArteryPressureLow_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressureLow_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePulmonaryArteryPressureLow_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&
          CardiacCyclePulmonaryArteryPressureLow_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressureLow_mmHg_type&
          CardiacCyclePulmonaryArteryPressureLow_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressureLow_mmHg (const CardiacCyclePulmonaryArteryPressureLow_mmHg_type& x);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressureHigh_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressureHigh_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePulmonaryArteryPressureHigh_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressureHigh_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePulmonaryArteryPressureHigh_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&
          CardiacCyclePulmonaryArteryPressureHigh_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&
          CardiacCyclePulmonaryArteryPressureHigh_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressureHigh_mmHg (const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& x);

          //@}

          /**
           * @name LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg (const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& x);

          //@}

          /**
           * @name CardiacCycleStrokeVolume_mL
           *
           * @brief Accessor and modifier functions for the %CardiacCycleStrokeVolume_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleStrokeVolume_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleStrokeVolume_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleStrokeVolume_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleStrokeVolume_mL_type&
          CardiacCycleStrokeVolume_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleStrokeVolume_mL_type&
          CardiacCycleStrokeVolume_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleStrokeVolume_mL (const CardiacCycleStrokeVolume_mL_type& x);

          //@}

          /**
           * @name CardiacCycleArterialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleArterialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleArterialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleArterialPressure_mmHg_type, char > CardiacCycleArterialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleArterialPressure_mmHg_type&
          CardiacCycleArterialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleArterialPressure_mmHg_type&
          CardiacCycleArterialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleArterialPressure_mmHg (const CardiacCycleArterialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleArterialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleArterialCO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleArterialCO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleArterialCO2PartialPressure_mmHg_type, char > CardiacCycleArterialCO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleArterialCO2PartialPressure_mmHg_type&
          CardiacCycleArterialCO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleArterialCO2PartialPressure_mmHg_type&
          CardiacCycleArterialCO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleArterialCO2PartialPressure_mmHg (const CardiacCycleArterialCO2PartialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleArterialCO2PartialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type, char > CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type, char > CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryShuntFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryShuntFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type, char > CardiacCyclePulmonaryShuntFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&
          CardiacCyclePulmonaryShuntFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&
          CardiacCyclePulmonaryShuntFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryShuntFlow_mL_Per_s (const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryShuntFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressure_mmHg_type, char > CardiacCyclePulmonaryArteryPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressure_mmHg_type&
          CardiacCyclePulmonaryArteryPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressure_mmHg_type&
          CardiacCyclePulmonaryArteryPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressure_mmHg (const CardiacCyclePulmonaryArteryPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryArteryPressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleCentralVenousPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleCentralVenousPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleCentralVenousPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleCentralVenousPressure_mmHg_type, char > CardiacCycleCentralVenousPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleCentralVenousPressure_mmHg_type&
          CardiacCycleCentralVenousPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleCentralVenousPressure_mmHg_type&
          CardiacCycleCentralVenousPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleCentralVenousPressure_mmHg (const CardiacCycleCentralVenousPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleCentralVenousPressure_mmHg (::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleSkinFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCycleSkinFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleSkinFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleSkinFlow_mL_Per_s_type, char > CardiacCycleSkinFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleSkinFlow_mL_Per_s_type&
          CardiacCycleSkinFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleSkinFlow_mL_Per_s_type&
          CardiacCycleSkinFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleSkinFlow_mL_Per_s (const CardiacCycleSkinFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleSkinFlow_mL_Per_s (::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsCardiovascularSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsCardiovascularSystemData (const StartSystole_type&,
                                            const HeartFlowDetected_type&,
                                            const EnterCardiacArrest_type&,
                                            const CardiacCyclePeriod_s_type&,
                                            const CurrentCardiacCycleDuration_s_type&,
                                            const LeftHeartElastanceModifier_type&,
                                            const LeftHeartElastance_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMax_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMin_mmHg_Per_mL_type&,
                                            const RightHeartElastance_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMax_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMin_mmHg_Per_mL_type&,
                                            const CompressionTime_s_type&,
                                            const CompressionRatio_type&,
                                            const CompressionPeriod_s_type&,
                                            const CurrentCardiacCycleTime_s_type&,
                                            const CardiacCycleDiastolicVolume_mL_type&,
                                            const CardiacCycleAortaPressureLow_mmHg_type&,
                                            const CardiacCycleAortaPressureHigh_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&,
                                            const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCycleStrokeVolume_mL_type&,
                                            const CardiacCycleArterialPressure_mmHg_type&,
                                            const CardiacCycleArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&,
                                            const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&,
                                            const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&,
                                            const CardiacCyclePulmonaryArteryPressure_mmHg_type&,
                                            const CardiacCycleCentralVenousPressure_mmHg_type&,
                                            const CardiacCycleSkinFlow_mL_Per_s_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsCardiovascularSystemData (const StartSystole_type&,
                                            const HeartFlowDetected_type&,
                                            const EnterCardiacArrest_type&,
                                            const CardiacCyclePeriod_s_type&,
                                            const CurrentCardiacCycleDuration_s_type&,
                                            const LeftHeartElastanceModifier_type&,
                                            const LeftHeartElastance_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMax_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMin_mmHg_Per_mL_type&,
                                            const RightHeartElastance_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMax_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMin_mmHg_Per_mL_type&,
                                            const CompressionTime_s_type&,
                                            const CompressionRatio_type&,
                                            const CompressionPeriod_s_type&,
                                            const CurrentCardiacCycleTime_s_type&,
                                            const CardiacCycleDiastolicVolume_mL_type&,
                                            const CardiacCycleAortaPressureLow_mmHg_type&,
                                            const CardiacCycleAortaPressureHigh_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&,
                                            const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCycleStrokeVolume_mL_type&,
                                            ::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsCardiovascularSystemData (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsCardiovascularSystemData (const BioGearsCardiovascularSystemData& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsCardiovascularSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsCardiovascularSystemData&
          operator= (const BioGearsCardiovascularSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsCardiovascularSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< StartSystole_type > StartSystole_;
          ::xsd::cxx::tree::one< HeartFlowDetected_type > HeartFlowDetected_;
          ::xsd::cxx::tree::one< EnterCardiacArrest_type > EnterCardiacArrest_;
          ::xsd::cxx::tree::one< CardiacCyclePeriod_s_type > CardiacCyclePeriod_s_;
          ::xsd::cxx::tree::one< CurrentCardiacCycleDuration_s_type > CurrentCardiacCycleDuration_s_;
          ::xsd::cxx::tree::one< LeftHeartElastanceModifier_type > LeftHeartElastanceModifier_;
          ::xsd::cxx::tree::one< LeftHeartElastance_mmHg_Per_mL_type > LeftHeartElastance_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< LeftHeartElastanceMax_mmHg_Per_mL_type > LeftHeartElastanceMax_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< LeftHeartElastanceMin_mmHg_Per_mL_type > LeftHeartElastanceMin_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastance_mmHg_Per_mL_type > RightHeartElastance_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastanceMax_mmHg_Per_mL_type > RightHeartElastanceMax_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastanceMin_mmHg_Per_mL_type > RightHeartElastanceMin_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< CompressionTime_s_type > CompressionTime_s_;
          ::xsd::cxx::tree::one< CompressionRatio_type > CompressionRatio_;
          ::xsd::cxx::tree::one< CompressionPeriod_s_type > CompressionPeriod_s_;
          ::xsd::cxx::tree::one< CurrentCardiacCycleTime_s_type > CurrentCardiacCycleTime_s_;
          ::xsd::cxx::tree::one< CardiacCycleDiastolicVolume_mL_type > CardiacCycleDiastolicVolume_mL_;
          ::xsd::cxx::tree::one< CardiacCycleAortaPressureLow_mmHg_type > CardiacCycleAortaPressureLow_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleAortaPressureHigh_mmHg_type > CardiacCycleAortaPressureHigh_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressureLow_mmHg_type > CardiacCyclePulmonaryArteryPressureLow_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressureHigh_mmHg_type > CardiacCyclePulmonaryArteryPressureHigh_mmHg_;
          ::xsd::cxx::tree::one< LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type > LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleStrokeVolume_mL_type > CardiacCycleStrokeVolume_mL_;
          ::xsd::cxx::tree::one< CardiacCycleArterialPressure_mmHg_type > CardiacCycleArterialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleArterialCO2PartialPressure_mmHg_type > CardiacCycleArterialCO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > CardiacCyclePulmonaryShuntFlow_mL_Per_s_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressure_mmHg_type > CardiacCyclePulmonaryArteryPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleCentralVenousPressure_mmHg_type > CardiacCycleCentralVenousPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleSkinFlow_mL_Per_s_type > CardiacCycleSkinFlow_mL_Per_s_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsDrugSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsDrugSystemData: public ::mil::tatrc::physiology::datamodel::DrugSystemData
        {
          public:
          /**
           * @name BolusAdministration
           *
           * @brief Accessor and modifier functions for the %BolusAdministration
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstanceBolusStateData BolusAdministration_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< BolusAdministration_type > BolusAdministration_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef BolusAdministration_sequence::iterator BolusAdministration_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef BolusAdministration_sequence::const_iterator BolusAdministration_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BolusAdministration_type, char > BolusAdministration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const BolusAdministration_sequence&
          BolusAdministration () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          BolusAdministration_sequence&
          BolusAdministration ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          BolusAdministration (const BolusAdministration_sequence& s);

          //@}

          /**
           * @name NasalStates
           *
           * @brief Accessor and modifier functions for the %NasalStates
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::NasalStateData NasalStates_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< NasalStates_type > NasalStates_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef NasalStates_sequence::iterator NasalStates_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef NasalStates_sequence::const_iterator NasalStates_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NasalStates_type, char > NasalStates_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const NasalStates_sequence&
          NasalStates () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          NasalStates_sequence&
          NasalStates ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          NasalStates (const NasalStates_sequence& s);

          //@}

          /**
           * @name TransmucosalStates
           *
           * @brief Accessor and modifier functions for the %TransmucosalStates
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::TransmucosalStateData TransmucosalStates_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< TransmucosalStates_type > TransmucosalStates_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef TransmucosalStates_sequence::iterator TransmucosalStates_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef TransmucosalStates_sequence::const_iterator TransmucosalStates_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmucosalStates_type, char > TransmucosalStates_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const TransmucosalStates_sequence&
          TransmucosalStates () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          TransmucosalStates_sequence&
          TransmucosalStates ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          TransmucosalStates (const TransmucosalStates_sequence& s);

          //@}

          /**
           * @name SarinRbcAcetylcholinesteraseComplex_nM
           *
           * @brief Accessor and modifier functions for the %SarinRbcAcetylcholinesteraseComplex_nM
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ SarinRbcAcetylcholinesteraseComplex_nM_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SarinRbcAcetylcholinesteraseComplex_nM_type, char, ::xsd::cxx::tree::schema_type::double_ > SarinRbcAcetylcholinesteraseComplex_nM_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SarinRbcAcetylcholinesteraseComplex_nM_type&
          SarinRbcAcetylcholinesteraseComplex_nM () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SarinRbcAcetylcholinesteraseComplex_nM_type&
          SarinRbcAcetylcholinesteraseComplex_nM ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SarinRbcAcetylcholinesteraseComplex_nM (const SarinRbcAcetylcholinesteraseComplex_nM_type& x);

          //@}

          /**
           * @name AgedRbcAcetylcholinesterase_nM
           *
           * @brief Accessor and modifier functions for the %AgedRbcAcetylcholinesterase_nM
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ AgedRbcAcetylcholinesterase_nM_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AgedRbcAcetylcholinesterase_nM_type, char, ::xsd::cxx::tree::schema_type::double_ > AgedRbcAcetylcholinesterase_nM_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AgedRbcAcetylcholinesterase_nM_type&
          AgedRbcAcetylcholinesterase_nM () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AgedRbcAcetylcholinesterase_nM_type&
          AgedRbcAcetylcholinesterase_nM ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AgedRbcAcetylcholinesterase_nM (const AgedRbcAcetylcholinesterase_nM_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsDrugSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsDrugSystemData (const SarinRbcAcetylcholinesteraseComplex_nM_type&,
                                  const AgedRbcAcetylcholinesterase_nM_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsDrugSystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsDrugSystemData (const BioGearsDrugSystemData& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsDrugSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsDrugSystemData&
          operator= (const BioGearsDrugSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsDrugSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          BolusAdministration_sequence BolusAdministration_;
          NasalStates_sequence NasalStates_;
          TransmucosalStates_sequence TransmucosalStates_;
          ::xsd::cxx::tree::one< SarinRbcAcetylcholinesteraseComplex_nM_type > SarinRbcAcetylcholinesteraseComplex_nM_;
          ::xsd::cxx::tree::one< AgedRbcAcetylcholinesterase_nM_type > AgedRbcAcetylcholinesterase_nM_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsEndocrineSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsEndocrineSystemData: public ::mil::tatrc::physiology::datamodel::EndocrineSystemData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsEndocrineSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsEndocrineSystemData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsEndocrineSystemData (const BioGearsEndocrineSystemData& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsEndocrineSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsEndocrineSystemData ();
        };

        /**
         * @brief Class corresponding to the %BioGearsEnergySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsEnergySystemData: public ::mil::tatrc::physiology::datamodel::EnergySystemData
        {
          public:
          /**
           * @name BloodpH
           *
           * @brief Accessor and modifier functions for the %BloodpH
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData BloodpH_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodpH_type, char > BloodpH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BloodpH_type&
          BloodpH () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BloodpH_type&
          BloodpH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodpH (const BloodpH_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BloodpH (::std::unique_ptr< BloodpH_type > p);

          //@}

          /**
           * @name BicarbonateMolarity_mmol_Per_L
           *
           * @brief Accessor and modifier functions for the %BicarbonateMolarity_mmol_Per_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData BicarbonateMolarity_mmol_Per_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BicarbonateMolarity_mmol_Per_L_type, char > BicarbonateMolarity_mmol_Per_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BicarbonateMolarity_mmol_Per_L_type&
          BicarbonateMolarity_mmol_Per_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BicarbonateMolarity_mmol_Per_L_type&
          BicarbonateMolarity_mmol_Per_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BicarbonateMolarity_mmol_Per_L (const BicarbonateMolarity_mmol_Per_L_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BicarbonateMolarity_mmol_Per_L (::std::unique_ptr< BicarbonateMolarity_mmol_Per_L_type > p);

          //@}

          /**
           * @name PackOn
           *
           * @brief Accessor and modifier functions for the %PackOn
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean PackOn_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PackOn_type, char > PackOn_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PackOn_type&
          PackOn () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PackOn_type&
          PackOn ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PackOn (const PackOn_type& x);

          //@}

          /**
           * @name PreviousWeightPack_kg
           *
           * @brief Accessor and modifier functions for the %PreviousWeightPack_kg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PreviousWeightPack_kg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PreviousWeightPack_kg_type, char, ::xsd::cxx::tree::schema_type::double_ > PreviousWeightPack_kg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PreviousWeightPack_kg_type&
          PreviousWeightPack_kg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PreviousWeightPack_kg_type&
          PreviousWeightPack_kg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PreviousWeightPack_kg (const PreviousWeightPack_kg_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsEnergySystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsEnergySystemData (const BloodpH_type&,
                                    const BicarbonateMolarity_mmol_Per_L_type&,
                                    const PackOn_type&,
                                    const PreviousWeightPack_kg_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsEnergySystemData (::std::unique_ptr< BloodpH_type >,
                                    ::std::unique_ptr< BicarbonateMolarity_mmol_Per_L_type >,
                                    const PackOn_type&,
                                    const PreviousWeightPack_kg_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsEnergySystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsEnergySystemData (const BioGearsEnergySystemData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsEnergySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsEnergySystemData&
          operator= (const BioGearsEnergySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsEnergySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< BloodpH_type > BloodpH_;
          ::xsd::cxx::tree::one< BicarbonateMolarity_mmol_Per_L_type > BicarbonateMolarity_mmol_Per_L_;
          ::xsd::cxx::tree::one< PackOn_type > PackOn_;
          ::xsd::cxx::tree::one< PreviousWeightPack_kg_type > PreviousWeightPack_kg_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsGastrointestinalSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsGastrointestinalSystemData: public ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsGastrointestinalSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsGastrointestinalSystemData (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsGastrointestinalSystemData (const BioGearsGastrointestinalSystemData& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsGastrointestinalSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsGastrointestinalSystemData ();
        };

        /**
         * @brief Class corresponding to the %BioGearsHepaticSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsHepaticSystemData: public ::mil::tatrc::physiology::datamodel::HepaticSystemData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsHepaticSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsHepaticSystemData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsHepaticSystemData (const BioGearsHepaticSystemData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsHepaticSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsHepaticSystemData ();
        };

        /**
         * @brief Class corresponding to the %BioGearsNervousSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsNervousSystemData: public ::mil::tatrc::physiology::datamodel::NervousSystemData
        {
          public:
          /**
           * @name AfferentChemoreceptor_Hz
           *
           * @brief Accessor and modifier functions for the %AfferentChemoreceptor_Hz
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ AfferentChemoreceptor_Hz_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AfferentChemoreceptor_Hz_type, char, ::xsd::cxx::tree::schema_type::double_ > AfferentChemoreceptor_Hz_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AfferentChemoreceptor_Hz_type&
          AfferentChemoreceptor_Hz () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AfferentChemoreceptor_Hz_type&
          AfferentChemoreceptor_Hz ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AfferentChemoreceptor_Hz (const AfferentChemoreceptor_Hz_type& x);

          //@}

          /**
           * @name AfferentPulmonaryStrechReceptor_Hz
           *
           * @brief Accessor and modifier functions for the %AfferentPulmonaryStrechReceptor_Hz
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ AfferentPulmonaryStrechReceptor_Hz_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AfferentPulmonaryStrechReceptor_Hz_type, char, ::xsd::cxx::tree::schema_type::double_ > AfferentPulmonaryStrechReceptor_Hz_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AfferentPulmonaryStrechReceptor_Hz_type&
          AfferentPulmonaryStrechReceptor_Hz () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AfferentPulmonaryStrechReceptor_Hz_type&
          AfferentPulmonaryStrechReceptor_Hz ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AfferentPulmonaryStrechReceptor_Hz (const AfferentPulmonaryStrechReceptor_Hz_type& x);

          //@}

          /**
           * @name AorticBaroreceptorStrain
           *
           * @brief Accessor and modifier functions for the %AorticBaroreceptorStrain
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ AorticBaroreceptorStrain_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AorticBaroreceptorStrain_type, char, ::xsd::cxx::tree::schema_type::double_ > AorticBaroreceptorStrain_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AorticBaroreceptorStrain_type&
          AorticBaroreceptorStrain () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AorticBaroreceptorStrain_type&
          AorticBaroreceptorStrain ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AorticBaroreceptorStrain (const AorticBaroreceptorStrain_type& x);

          //@}

          /**
           * @name ArterialOxygenBaseline_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenBaseline_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialOxygenBaseline_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenBaseline_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialOxygenBaseline_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialOxygenBaseline_mmHg_type&
          ArterialOxygenBaseline_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialOxygenBaseline_mmHg_type&
          ArterialOxygenBaseline_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenBaseline_mmHg (const ArterialOxygenBaseline_mmHg_type& x);

          //@}

          /**
           * @name ArterialCarbonDioxideBaseline_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxideBaseline_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialCarbonDioxideBaseline_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxideBaseline_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialCarbonDioxideBaseline_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCarbonDioxideBaseline_mmHg_type&
          ArterialCarbonDioxideBaseline_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCarbonDioxideBaseline_mmHg_type&
          ArterialCarbonDioxideBaseline_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxideBaseline_mmHg (const ArterialCarbonDioxideBaseline_mmHg_type& x);

          //@}

          /**
           * @name BaroreceptorOperatingPoint_mmHg
           *
           * @brief Accessor and modifier functions for the %BaroreceptorOperatingPoint_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ BaroreceptorOperatingPoint_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BaroreceptorOperatingPoint_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > BaroreceptorOperatingPoint_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BaroreceptorOperatingPoint_mmHg_type&
          BaroreceptorOperatingPoint_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BaroreceptorOperatingPoint_mmHg_type&
          BaroreceptorOperatingPoint_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BaroreceptorOperatingPoint_mmHg (const BaroreceptorOperatingPoint_mmHg_type& x);

          //@}

          /**
           * @name CardiopulmonaryInputBaseline_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiopulmonaryInputBaseline_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiopulmonaryInputBaseline_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiopulmonaryInputBaseline_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiopulmonaryInputBaseline_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiopulmonaryInputBaseline_mmHg_type&
          CardiopulmonaryInputBaseline_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiopulmonaryInputBaseline_mmHg_type&
          CardiopulmonaryInputBaseline_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiopulmonaryInputBaseline_mmHg (const CardiopulmonaryInputBaseline_mmHg_type& x);

          //@}

          /**
           * @name CardiopulmonaryInput_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiopulmonaryInput_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiopulmonaryInput_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiopulmonaryInput_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiopulmonaryInput_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiopulmonaryInput_mmHg_type&
          CardiopulmonaryInput_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiopulmonaryInput_mmHg_type&
          CardiopulmonaryInput_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiopulmonaryInput_mmHg (const CardiopulmonaryInput_mmHg_type& x);

          //@}

          /**
           * @name CarotidBaroreceptorStrain
           *
           * @brief Accessor and modifier functions for the %CarotidBaroreceptorStrain
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CarotidBaroreceptorStrain_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarotidBaroreceptorStrain_type, char, ::xsd::cxx::tree::schema_type::double_ > CarotidBaroreceptorStrain_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CarotidBaroreceptorStrain_type&
          CarotidBaroreceptorStrain () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CarotidBaroreceptorStrain_type&
          CarotidBaroreceptorStrain ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarotidBaroreceptorStrain (const CarotidBaroreceptorStrain_type& x);

          //@}

          /**
           * @name CerebralArteriesEffectors_Large
           *
           * @brief Accessor and modifier functions for the %CerebralArteriesEffectors_Large
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralArteriesEffectors_Large_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< CerebralArteriesEffectors_Large_type > CerebralArteriesEffectors_Large_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef CerebralArteriesEffectors_Large_sequence::iterator CerebralArteriesEffectors_Large_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef CerebralArteriesEffectors_Large_sequence::const_iterator CerebralArteriesEffectors_Large_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralArteriesEffectors_Large_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralArteriesEffectors_Large_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const CerebralArteriesEffectors_Large_sequence&
          CerebralArteriesEffectors_Large () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          CerebralArteriesEffectors_Large_sequence&
          CerebralArteriesEffectors_Large ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          CerebralArteriesEffectors_Large (const CerebralArteriesEffectors_Large_sequence& s);

          //@}

          /**
           * @name CerebralArteriesEffectors_Small
           *
           * @brief Accessor and modifier functions for the %CerebralArteriesEffectors_Small
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralArteriesEffectors_Small_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< CerebralArteriesEffectors_Small_type > CerebralArteriesEffectors_Small_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef CerebralArteriesEffectors_Small_sequence::iterator CerebralArteriesEffectors_Small_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef CerebralArteriesEffectors_Small_sequence::const_iterator CerebralArteriesEffectors_Small_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralArteriesEffectors_Small_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralArteriesEffectors_Small_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const CerebralArteriesEffectors_Small_sequence&
          CerebralArteriesEffectors_Small () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          CerebralArteriesEffectors_Small_sequence&
          CerebralArteriesEffectors_Small ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          CerebralArteriesEffectors_Small (const CerebralArteriesEffectors_Small_sequence& s);

          //@}

          /**
           * @name CerebralBloodFlowBaseline_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CerebralBloodFlowBaseline_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralBloodFlowBaseline_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralBloodFlowBaseline_mL_Per_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralBloodFlowBaseline_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CerebralBloodFlowBaseline_mL_Per_s_type&
          CerebralBloodFlowBaseline_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CerebralBloodFlowBaseline_mL_Per_s_type&
          CerebralBloodFlowBaseline_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralBloodFlowBaseline_mL_Per_s (const CerebralBloodFlowBaseline_mL_Per_s_type& x);

          //@}

          /**
           * @name CerebralBloodFlowInput_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CerebralBloodFlowInput_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralBloodFlowInput_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralBloodFlowInput_mL_Per_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralBloodFlowInput_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CerebralBloodFlowInput_mL_Per_s_type&
          CerebralBloodFlowInput_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CerebralBloodFlowInput_mL_Per_s_type&
          CerebralBloodFlowInput_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralBloodFlowInput_mL_Per_s (const CerebralBloodFlowInput_mL_Per_s_type& x);

          //@}

          /**
           * @name CentralFrequencyDelta_Per_min
           *
           * @brief Accessor and modifier functions for the %CentralFrequencyDelta_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CentralFrequencyDelta_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CentralFrequencyDelta_Per_min_type, char, ::xsd::cxx::tree::schema_type::double_ > CentralFrequencyDelta_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CentralFrequencyDelta_Per_min_type&
          CentralFrequencyDelta_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CentralFrequencyDelta_Per_min_type&
          CentralFrequencyDelta_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CentralFrequencyDelta_Per_min (const CentralFrequencyDelta_Per_min_type& x);

          //@}

          /**
           * @name CentralPressureDelta_cmH2O
           *
           * @brief Accessor and modifier functions for the %CentralPressureDelta_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CentralPressureDelta_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CentralPressureDelta_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > CentralPressureDelta_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CentralPressureDelta_cmH2O_type&
          CentralPressureDelta_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CentralPressureDelta_cmH2O_type&
          CentralPressureDelta_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CentralPressureDelta_cmH2O (const CentralPressureDelta_cmH2O_type& x);

          //@}

          /**
           * @name CerebralOxygenSaturationBaseline
           *
           * @brief Accessor and modifier functions for the %CerebralOxygenSaturationBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralOxygenSaturationBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralOxygenSaturationBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralOxygenSaturationBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CerebralOxygenSaturationBaseline_type&
          CerebralOxygenSaturationBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CerebralOxygenSaturationBaseline_type&
          CerebralOxygenSaturationBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralOxygenSaturationBaseline (const CerebralOxygenSaturationBaseline_type& x);

          //@}

          /**
           * @name CerebralPerfusionPressureBaseline_mmHg
           *
           * @brief Accessor and modifier functions for the %CerebralPerfusionPressureBaseline_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CerebralPerfusionPressureBaseline_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralPerfusionPressureBaseline_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CerebralPerfusionPressureBaseline_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CerebralPerfusionPressureBaseline_mmHg_type&
          CerebralPerfusionPressureBaseline_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CerebralPerfusionPressureBaseline_mmHg_type&
          CerebralPerfusionPressureBaseline_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralPerfusionPressureBaseline_mmHg (const CerebralPerfusionPressureBaseline_mmHg_type& x);

          //@}

          /**
           * @name ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz
           *
           * @brief Accessor and modifier functions for the %ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type, char, ::xsd::cxx::tree::schema_type::double_ > ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type&
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type&
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz (const ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type& x);

          //@}

          /**
           * @name ChemoreceptorFiringRateSetPoint_Hz
           *
           * @brief Accessor and modifier functions for the %ChemoreceptorFiringRateSetPoint_Hz
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ChemoreceptorFiringRateSetPoint_Hz_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ChemoreceptorFiringRateSetPoint_Hz_type, char, ::xsd::cxx::tree::schema_type::double_ > ChemoreceptorFiringRateSetPoint_Hz_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ChemoreceptorFiringRateSetPoint_Hz_type&
          ChemoreceptorFiringRateSetPoint_Hz () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ChemoreceptorFiringRateSetPoint_Hz_type&
          ChemoreceptorFiringRateSetPoint_Hz ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ChemoreceptorFiringRateSetPoint_Hz (const ChemoreceptorFiringRateSetPoint_Hz_type& x);

          //@}

          /**
           * @name ComplianceModifier
           *
           * @brief Accessor and modifier functions for the %ComplianceModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ComplianceModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ComplianceModifier_type, char, ::xsd::cxx::tree::schema_type::double_ > ComplianceModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ComplianceModifier_type&
          ComplianceModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ComplianceModifier_type&
          ComplianceModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ComplianceModifier (const ComplianceModifier_type& x);

          //@}

          /**
           * @name HeartElastanceModifier
           *
           * @brief Accessor and modifier functions for the %HeartElastanceModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HeartElastanceModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartElastanceModifier_type, char, ::xsd::cxx::tree::schema_type::double_ > HeartElastanceModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartElastanceModifier_type&
          HeartElastanceModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartElastanceModifier_type&
          HeartElastanceModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartElastanceModifier (const HeartElastanceModifier_type& x);

          //@}

          /**
           * @name HeartOxygenBaseline
           *
           * @brief Accessor and modifier functions for the %HeartOxygenBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HeartOxygenBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartOxygenBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > HeartOxygenBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartOxygenBaseline_type&
          HeartOxygenBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartOxygenBaseline_type&
          HeartOxygenBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartOxygenBaseline (const HeartOxygenBaseline_type& x);

          //@}

          /**
           * @name HeartRateModifierSympathetic
           *
           * @brief Accessor and modifier functions for the %HeartRateModifierSympathetic
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HeartRateModifierSympathetic_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateModifierSympathetic_type, char, ::xsd::cxx::tree::schema_type::double_ > HeartRateModifierSympathetic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartRateModifierSympathetic_type&
          HeartRateModifierSympathetic () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartRateModifierSympathetic_type&
          HeartRateModifierSympathetic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateModifierSympathetic (const HeartRateModifierSympathetic_type& x);

          //@}

          /**
           * @name HeartRateModifierVagal
           *
           * @brief Accessor and modifier functions for the %HeartRateModifierVagal
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HeartRateModifierVagal_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateModifierVagal_type, char, ::xsd::cxx::tree::schema_type::double_ > HeartRateModifierVagal_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartRateModifierVagal_type&
          HeartRateModifierVagal () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartRateModifierVagal_type&
          HeartRateModifierVagal ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateModifierVagal (const HeartRateModifierVagal_type& x);

          //@}

          /**
           * @name HypercapniaThresholdHeart
           *
           * @brief Accessor and modifier functions for the %HypercapniaThresholdHeart
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HypercapniaThresholdHeart_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HypercapniaThresholdHeart_type, char, ::xsd::cxx::tree::schema_type::double_ > HypercapniaThresholdHeart_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HypercapniaThresholdHeart_type&
          HypercapniaThresholdHeart () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HypercapniaThresholdHeart_type&
          HypercapniaThresholdHeart ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HypercapniaThresholdHeart (const HypercapniaThresholdHeart_type& x);

          //@}

          /**
           * @name HypercapniaThresholdPeripheral
           *
           * @brief Accessor and modifier functions for the %HypercapniaThresholdPeripheral
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HypercapniaThresholdPeripheral_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HypercapniaThresholdPeripheral_type, char, ::xsd::cxx::tree::schema_type::double_ > HypercapniaThresholdPeripheral_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HypercapniaThresholdPeripheral_type&
          HypercapniaThresholdPeripheral () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HypercapniaThresholdPeripheral_type&
          HypercapniaThresholdPeripheral ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HypercapniaThresholdPeripheral (const HypercapniaThresholdPeripheral_type& x);

          //@}

          /**
           * @name HypoxiaThresholdHeart
           *
           * @brief Accessor and modifier functions for the %HypoxiaThresholdHeart
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HypoxiaThresholdHeart_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HypoxiaThresholdHeart_type, char, ::xsd::cxx::tree::schema_type::double_ > HypoxiaThresholdHeart_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HypoxiaThresholdHeart_type&
          HypoxiaThresholdHeart () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HypoxiaThresholdHeart_type&
          HypoxiaThresholdHeart ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HypoxiaThresholdHeart (const HypoxiaThresholdHeart_type& x);

          //@}

          /**
           * @name HypoxiaThresholdPeripheral
           *
           * @brief Accessor and modifier functions for the %HypoxiaThresholdPeripheral
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ HypoxiaThresholdPeripheral_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HypoxiaThresholdPeripheral_type, char, ::xsd::cxx::tree::schema_type::double_ > HypoxiaThresholdPeripheral_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HypoxiaThresholdPeripheral_type&
          HypoxiaThresholdPeripheral () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HypoxiaThresholdPeripheral_type&
          HypoxiaThresholdPeripheral ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HypoxiaThresholdPeripheral (const HypoxiaThresholdPeripheral_type& x);

          //@}

          /**
           * @name MeanLungVolume_L
           *
           * @brief Accessor and modifier functions for the %MeanLungVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ MeanLungVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanLungVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > MeanLungVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MeanLungVolume_L_type&
          MeanLungVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MeanLungVolume_L_type&
          MeanLungVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanLungVolume_L (const MeanLungVolume_L_type& x);

          //@}

          /**
           * @name MuscleOxygenBaseline
           *
           * @brief Accessor and modifier functions for the %MuscleOxygenBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ MuscleOxygenBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MuscleOxygenBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > MuscleOxygenBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MuscleOxygenBaseline_type&
          MuscleOxygenBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MuscleOxygenBaseline_type&
          MuscleOxygenBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MuscleOxygenBaseline (const MuscleOxygenBaseline_type& x);

          //@}

          /**
           * @name OxygenAutoregulatorHeart
           *
           * @brief Accessor and modifier functions for the %OxygenAutoregulatorHeart
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ OxygenAutoregulatorHeart_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenAutoregulatorHeart_type, char, ::xsd::cxx::tree::schema_type::double_ > OxygenAutoregulatorHeart_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const OxygenAutoregulatorHeart_type&
          OxygenAutoregulatorHeart () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          OxygenAutoregulatorHeart_type&
          OxygenAutoregulatorHeart ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenAutoregulatorHeart (const OxygenAutoregulatorHeart_type& x);

          //@}

          /**
           * @name OxygenAutoregulatorMuscle
           *
           * @brief Accessor and modifier functions for the %OxygenAutoregulatorMuscle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ OxygenAutoregulatorMuscle_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenAutoregulatorMuscle_type, char, ::xsd::cxx::tree::schema_type::double_ > OxygenAutoregulatorMuscle_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const OxygenAutoregulatorMuscle_type&
          OxygenAutoregulatorMuscle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          OxygenAutoregulatorMuscle_type&
          OxygenAutoregulatorMuscle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenAutoregulatorMuscle (const OxygenAutoregulatorMuscle_type& x);

          //@}

          /**
           * @name PeripheralFrequencyDelta_Per_min
           *
           * @brief Accessor and modifier functions for the %PeripheralFrequencyDelta_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PeripheralFrequencyDelta_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeripheralFrequencyDelta_Per_min_type, char, ::xsd::cxx::tree::schema_type::double_ > PeripheralFrequencyDelta_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PeripheralFrequencyDelta_Per_min_type&
          PeripheralFrequencyDelta_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PeripheralFrequencyDelta_Per_min_type&
          PeripheralFrequencyDelta_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeripheralFrequencyDelta_Per_min (const PeripheralFrequencyDelta_Per_min_type& x);

          //@}

          /**
           * @name PeripheralPressureDelta_cmH2O
           *
           * @brief Accessor and modifier functions for the %PeripheralPressureDelta_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PeripheralPressureDelta_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeripheralPressureDelta_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > PeripheralPressureDelta_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PeripheralPressureDelta_cmH2O_type&
          PeripheralPressureDelta_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PeripheralPressureDelta_cmH2O_type&
          PeripheralPressureDelta_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeripheralPressureDelta_cmH2O (const PeripheralPressureDelta_cmH2O_type& x);

          //@}

          /**
           * @name ResistanceModifierExtrasplanchnic
           *
           * @brief Accessor and modifier functions for the %ResistanceModifierExtrasplanchnic
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ResistanceModifierExtrasplanchnic_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceModifierExtrasplanchnic_type, char, ::xsd::cxx::tree::schema_type::double_ > ResistanceModifierExtrasplanchnic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ResistanceModifierExtrasplanchnic_type&
          ResistanceModifierExtrasplanchnic () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ResistanceModifierExtrasplanchnic_type&
          ResistanceModifierExtrasplanchnic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceModifierExtrasplanchnic (const ResistanceModifierExtrasplanchnic_type& x);

          //@}

          /**
           * @name ResistanceModifierMuscle
           *
           * @brief Accessor and modifier functions for the %ResistanceModifierMuscle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ResistanceModifierMuscle_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceModifierMuscle_type, char, ::xsd::cxx::tree::schema_type::double_ > ResistanceModifierMuscle_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ResistanceModifierMuscle_type&
          ResistanceModifierMuscle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ResistanceModifierMuscle_type&
          ResistanceModifierMuscle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceModifierMuscle (const ResistanceModifierMuscle_type& x);

          //@}

          /**
           * @name ResistanceModifierSplanchnic
           *
           * @brief Accessor and modifier functions for the %ResistanceModifierSplanchnic
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ResistanceModifierSplanchnic_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceModifierSplanchnic_type, char, ::xsd::cxx::tree::schema_type::double_ > ResistanceModifierSplanchnic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ResistanceModifierSplanchnic_type&
          ResistanceModifierSplanchnic () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ResistanceModifierSplanchnic_type&
          ResistanceModifierSplanchnic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceModifierSplanchnic (const ResistanceModifierSplanchnic_type& x);

          //@}

          /**
           * @name SympatheticPeripheralSignalBaseline
           *
           * @brief Accessor and modifier functions for the %SympatheticPeripheralSignalBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ SympatheticPeripheralSignalBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SympatheticPeripheralSignalBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > SympatheticPeripheralSignalBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SympatheticPeripheralSignalBaseline_type&
          SympatheticPeripheralSignalBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SympatheticPeripheralSignalBaseline_type&
          SympatheticPeripheralSignalBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SympatheticPeripheralSignalBaseline (const SympatheticPeripheralSignalBaseline_type& x);

          //@}

          /**
           * @name SympatheticSinoatrialSignalBaseline
           *
           * @brief Accessor and modifier functions for the %SympatheticSinoatrialSignalBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ SympatheticSinoatrialSignalBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SympatheticSinoatrialSignalBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > SympatheticSinoatrialSignalBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SympatheticSinoatrialSignalBaseline_type&
          SympatheticSinoatrialSignalBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SympatheticSinoatrialSignalBaseline_type&
          SympatheticSinoatrialSignalBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SympatheticSinoatrialSignalBaseline (const SympatheticSinoatrialSignalBaseline_type& x);

          //@}

          /**
           * @name SympatheticPeripheralSignalFatigue
           *
           * @brief Accessor and modifier functions for the %SympatheticPeripheralSignalFatigue
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ SympatheticPeripheralSignalFatigue_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SympatheticPeripheralSignalFatigue_type, char, ::xsd::cxx::tree::schema_type::double_ > SympatheticPeripheralSignalFatigue_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SympatheticPeripheralSignalFatigue_type&
          SympatheticPeripheralSignalFatigue () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SympatheticPeripheralSignalFatigue_type&
          SympatheticPeripheralSignalFatigue ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SympatheticPeripheralSignalFatigue (const SympatheticPeripheralSignalFatigue_type& x);

          //@}

          /**
           * @name VagalSignalBaseline
           *
           * @brief Accessor and modifier functions for the %VagalSignalBaseline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ VagalSignalBaseline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VagalSignalBaseline_type, char, ::xsd::cxx::tree::schema_type::double_ > VagalSignalBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VagalSignalBaseline_type&
          VagalSignalBaseline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VagalSignalBaseline_type&
          VagalSignalBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VagalSignalBaseline (const VagalSignalBaseline_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsNervousSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsNervousSystemData (const AfferentChemoreceptor_Hz_type&,
                                     const AfferentPulmonaryStrechReceptor_Hz_type&,
                                     const AorticBaroreceptorStrain_type&,
                                     const ArterialOxygenBaseline_mmHg_type&,
                                     const ArterialCarbonDioxideBaseline_mmHg_type&,
                                     const BaroreceptorOperatingPoint_mmHg_type&,
                                     const CardiopulmonaryInputBaseline_mmHg_type&,
                                     const CardiopulmonaryInput_mmHg_type&,
                                     const CarotidBaroreceptorStrain_type&,
                                     const CerebralBloodFlowBaseline_mL_Per_s_type&,
                                     const CerebralBloodFlowInput_mL_Per_s_type&,
                                     const CentralFrequencyDelta_Per_min_type&,
                                     const CentralPressureDelta_cmH2O_type&,
                                     const CerebralOxygenSaturationBaseline_type&,
                                     const CerebralPerfusionPressureBaseline_mmHg_type&,
                                     const ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type&,
                                     const ChemoreceptorFiringRateSetPoint_Hz_type&,
                                     const ComplianceModifier_type&,
                                     const HeartElastanceModifier_type&,
                                     const HeartOxygenBaseline_type&,
                                     const HeartRateModifierSympathetic_type&,
                                     const HeartRateModifierVagal_type&,
                                     const HypercapniaThresholdHeart_type&,
                                     const HypercapniaThresholdPeripheral_type&,
                                     const HypoxiaThresholdHeart_type&,
                                     const HypoxiaThresholdPeripheral_type&,
                                     const MeanLungVolume_L_type&,
                                     const MuscleOxygenBaseline_type&,
                                     const OxygenAutoregulatorHeart_type&,
                                     const OxygenAutoregulatorMuscle_type&,
                                     const PeripheralFrequencyDelta_Per_min_type&,
                                     const PeripheralPressureDelta_cmH2O_type&,
                                     const ResistanceModifierExtrasplanchnic_type&,
                                     const ResistanceModifierMuscle_type&,
                                     const ResistanceModifierSplanchnic_type&,
                                     const SympatheticPeripheralSignalBaseline_type&,
                                     const SympatheticSinoatrialSignalBaseline_type&,
                                     const SympatheticPeripheralSignalFatigue_type&,
                                     const VagalSignalBaseline_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsNervousSystemData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsNervousSystemData (const BioGearsNervousSystemData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsNervousSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsNervousSystemData&
          operator= (const BioGearsNervousSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsNervousSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< AfferentChemoreceptor_Hz_type > AfferentChemoreceptor_Hz_;
          ::xsd::cxx::tree::one< AfferentPulmonaryStrechReceptor_Hz_type > AfferentPulmonaryStrechReceptor_Hz_;
          ::xsd::cxx::tree::one< AorticBaroreceptorStrain_type > AorticBaroreceptorStrain_;
          ::xsd::cxx::tree::one< ArterialOxygenBaseline_mmHg_type > ArterialOxygenBaseline_mmHg_;
          ::xsd::cxx::tree::one< ArterialCarbonDioxideBaseline_mmHg_type > ArterialCarbonDioxideBaseline_mmHg_;
          ::xsd::cxx::tree::one< BaroreceptorOperatingPoint_mmHg_type > BaroreceptorOperatingPoint_mmHg_;
          ::xsd::cxx::tree::one< CardiopulmonaryInputBaseline_mmHg_type > CardiopulmonaryInputBaseline_mmHg_;
          ::xsd::cxx::tree::one< CardiopulmonaryInput_mmHg_type > CardiopulmonaryInput_mmHg_;
          ::xsd::cxx::tree::one< CarotidBaroreceptorStrain_type > CarotidBaroreceptorStrain_;
          CerebralArteriesEffectors_Large_sequence CerebralArteriesEffectors_Large_;
          CerebralArteriesEffectors_Small_sequence CerebralArteriesEffectors_Small_;
          ::xsd::cxx::tree::one< CerebralBloodFlowBaseline_mL_Per_s_type > CerebralBloodFlowBaseline_mL_Per_s_;
          ::xsd::cxx::tree::one< CerebralBloodFlowInput_mL_Per_s_type > CerebralBloodFlowInput_mL_Per_s_;
          ::xsd::cxx::tree::one< CentralFrequencyDelta_Per_min_type > CentralFrequencyDelta_Per_min_;
          ::xsd::cxx::tree::one< CentralPressureDelta_cmH2O_type > CentralPressureDelta_cmH2O_;
          ::xsd::cxx::tree::one< CerebralOxygenSaturationBaseline_type > CerebralOxygenSaturationBaseline_;
          ::xsd::cxx::tree::one< CerebralPerfusionPressureBaseline_mmHg_type > CerebralPerfusionPressureBaseline_mmHg_;
          ::xsd::cxx::tree::one< ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type > ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_;
          ::xsd::cxx::tree::one< ChemoreceptorFiringRateSetPoint_Hz_type > ChemoreceptorFiringRateSetPoint_Hz_;
          ::xsd::cxx::tree::one< ComplianceModifier_type > ComplianceModifier_;
          ::xsd::cxx::tree::one< HeartElastanceModifier_type > HeartElastanceModifier_;
          ::xsd::cxx::tree::one< HeartOxygenBaseline_type > HeartOxygenBaseline_;
          ::xsd::cxx::tree::one< HeartRateModifierSympathetic_type > HeartRateModifierSympathetic_;
          ::xsd::cxx::tree::one< HeartRateModifierVagal_type > HeartRateModifierVagal_;
          ::xsd::cxx::tree::one< HypercapniaThresholdHeart_type > HypercapniaThresholdHeart_;
          ::xsd::cxx::tree::one< HypercapniaThresholdPeripheral_type > HypercapniaThresholdPeripheral_;
          ::xsd::cxx::tree::one< HypoxiaThresholdHeart_type > HypoxiaThresholdHeart_;
          ::xsd::cxx::tree::one< HypoxiaThresholdPeripheral_type > HypoxiaThresholdPeripheral_;
          ::xsd::cxx::tree::one< MeanLungVolume_L_type > MeanLungVolume_L_;
          ::xsd::cxx::tree::one< MuscleOxygenBaseline_type > MuscleOxygenBaseline_;
          ::xsd::cxx::tree::one< OxygenAutoregulatorHeart_type > OxygenAutoregulatorHeart_;
          ::xsd::cxx::tree::one< OxygenAutoregulatorMuscle_type > OxygenAutoregulatorMuscle_;
          ::xsd::cxx::tree::one< PeripheralFrequencyDelta_Per_min_type > PeripheralFrequencyDelta_Per_min_;
          ::xsd::cxx::tree::one< PeripheralPressureDelta_cmH2O_type > PeripheralPressureDelta_cmH2O_;
          ::xsd::cxx::tree::one< ResistanceModifierExtrasplanchnic_type > ResistanceModifierExtrasplanchnic_;
          ::xsd::cxx::tree::one< ResistanceModifierMuscle_type > ResistanceModifierMuscle_;
          ::xsd::cxx::tree::one< ResistanceModifierSplanchnic_type > ResistanceModifierSplanchnic_;
          ::xsd::cxx::tree::one< SympatheticPeripheralSignalBaseline_type > SympatheticPeripheralSignalBaseline_;
          ::xsd::cxx::tree::one< SympatheticSinoatrialSignalBaseline_type > SympatheticSinoatrialSignalBaseline_;
          ::xsd::cxx::tree::one< SympatheticPeripheralSignalFatigue_type > SympatheticPeripheralSignalFatigue_;
          ::xsd::cxx::tree::one< VagalSignalBaseline_type > VagalSignalBaseline_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsRenalSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsRenalSystemData: public ::mil::tatrc::physiology::datamodel::RenalSystemData
        {
          public:
          /**
           * @name Urinating
           *
           * @brief Accessor and modifier functions for the %Urinating
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean Urinating_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Urinating_type, char > Urinating_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Urinating_type&
          Urinating () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Urinating_type&
          Urinating ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Urinating (const Urinating_type& x);

          //@}

          /**
           * @name LeftAfferentResistance_mmHg_s_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftAfferentResistance_mmHg_s_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftAfferentResistance_mmHg_s_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftAfferentResistance_mmHg_s_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftAfferentResistance_mmHg_s_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftAfferentResistance_mmHg_s_Per_mL_type&
          LeftAfferentResistance_mmHg_s_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftAfferentResistance_mmHg_s_Per_mL_type&
          LeftAfferentResistance_mmHg_s_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftAfferentResistance_mmHg_s_Per_mL (const LeftAfferentResistance_mmHg_s_Per_mL_type& x);

          //@}

          /**
           * @name RightAfferentResistance_mmHg_s_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightAfferentResistance_mmHg_s_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightAfferentResistance_mmHg_s_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightAfferentResistance_mmHg_s_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightAfferentResistance_mmHg_s_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightAfferentResistance_mmHg_s_Per_mL_type&
          RightAfferentResistance_mmHg_s_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightAfferentResistance_mmHg_s_Per_mL_type&
          RightAfferentResistance_mmHg_s_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightAfferentResistance_mmHg_s_Per_mL (const RightAfferentResistance_mmHg_s_Per_mL_type& x);

          //@}

          /**
           * @name LeftSodiumFlowSetPoint_mg_Per_s
           *
           * @brief Accessor and modifier functions for the %LeftSodiumFlowSetPoint_mg_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftSodiumFlowSetPoint_mg_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftSodiumFlowSetPoint_mg_Per_s_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftSodiumFlowSetPoint_mg_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftSodiumFlowSetPoint_mg_Per_s_type&
          LeftSodiumFlowSetPoint_mg_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftSodiumFlowSetPoint_mg_Per_s_type&
          LeftSodiumFlowSetPoint_mg_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftSodiumFlowSetPoint_mg_Per_s (const LeftSodiumFlowSetPoint_mg_Per_s_type& x);

          //@}

          /**
           * @name RightSodiumFlowSetPoint_mg_Per_s
           *
           * @brief Accessor and modifier functions for the %RightSodiumFlowSetPoint_mg_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightSodiumFlowSetPoint_mg_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightSodiumFlowSetPoint_mg_Per_s_type, char, ::xsd::cxx::tree::schema_type::double_ > RightSodiumFlowSetPoint_mg_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightSodiumFlowSetPoint_mg_Per_s_type&
          RightSodiumFlowSetPoint_mg_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightSodiumFlowSetPoint_mg_Per_s_type&
          RightSodiumFlowSetPoint_mg_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightSodiumFlowSetPoint_mg_Per_s (const RightSodiumFlowSetPoint_mg_Per_s_type& x);

          //@}

          /**
           * @name UrineProductionRate_mL_Per_min
           *
           * @brief Accessor and modifier functions for the %UrineProductionRate_mL_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData UrineProductionRate_mL_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineProductionRate_mL_Per_min_type, char > UrineProductionRate_mL_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UrineProductionRate_mL_Per_min_type&
          UrineProductionRate_mL_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UrineProductionRate_mL_Per_min_type&
          UrineProductionRate_mL_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineProductionRate_mL_Per_min (const UrineProductionRate_mL_Per_min_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          UrineProductionRate_mL_Per_min (::std::unique_ptr< UrineProductionRate_mL_Per_min_type > p);

          //@}

          /**
           * @name UrineOsmolarity_mOsm_Per_L
           *
           * @brief Accessor and modifier functions for the %UrineOsmolarity_mOsm_Per_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData UrineOsmolarity_mOsm_Per_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolarity_mOsm_Per_L_type, char > UrineOsmolarity_mOsm_Per_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UrineOsmolarity_mOsm_Per_L_type&
          UrineOsmolarity_mOsm_Per_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UrineOsmolarity_mOsm_Per_L_type&
          UrineOsmolarity_mOsm_Per_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolarity_mOsm_Per_L (const UrineOsmolarity_mOsm_Per_L_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          UrineOsmolarity_mOsm_Per_L (::std::unique_ptr< UrineOsmolarity_mOsm_Per_L_type > p);

          //@}

          /**
           * @name SodiumConcentration_mg_Per_mL
           *
           * @brief Accessor and modifier functions for the %SodiumConcentration_mg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData SodiumConcentration_mg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SodiumConcentration_mg_Per_mL_type, char > SodiumConcentration_mg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SodiumConcentration_mg_Per_mL_type&
          SodiumConcentration_mg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SodiumConcentration_mg_Per_mL_type&
          SodiumConcentration_mg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SodiumConcentration_mg_Per_mL (const SodiumConcentration_mg_Per_mL_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SodiumConcentration_mg_Per_mL (::std::unique_ptr< SodiumConcentration_mg_Per_mL_type > p);

          //@}

          /**
           * @name SodiumExcretionRate_mg_Per_min
           *
           * @brief Accessor and modifier functions for the %SodiumExcretionRate_mg_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData SodiumExcretionRate_mg_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SodiumExcretionRate_mg_Per_min_type, char > SodiumExcretionRate_mg_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SodiumExcretionRate_mg_Per_min_type&
          SodiumExcretionRate_mg_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SodiumExcretionRate_mg_Per_min_type&
          SodiumExcretionRate_mg_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SodiumExcretionRate_mg_Per_min (const SodiumExcretionRate_mg_Per_min_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SodiumExcretionRate_mg_Per_min (::std::unique_ptr< SodiumExcretionRate_mg_Per_min_type > p);

          //@}

          /**
           * @name LeftSodiumFlow_mg_Per_s
           *
           * @brief Accessor and modifier functions for the %LeftSodiumFlow_mg_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData LeftSodiumFlow_mg_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftSodiumFlow_mg_Per_s_type, char > LeftSodiumFlow_mg_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftSodiumFlow_mg_Per_s_type&
          LeftSodiumFlow_mg_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftSodiumFlow_mg_Per_s_type&
          LeftSodiumFlow_mg_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftSodiumFlow_mg_Per_s (const LeftSodiumFlow_mg_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LeftSodiumFlow_mg_Per_s (::std::unique_ptr< LeftSodiumFlow_mg_Per_s_type > p);

          //@}

          /**
           * @name RightSodiumFlow_mg_Per_s
           *
           * @brief Accessor and modifier functions for the %RightSodiumFlow_mg_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData RightSodiumFlow_mg_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightSodiumFlow_mg_Per_s_type, char > RightSodiumFlow_mg_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightSodiumFlow_mg_Per_s_type&
          RightSodiumFlow_mg_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightSodiumFlow_mg_Per_s_type&
          RightSodiumFlow_mg_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightSodiumFlow_mg_Per_s (const RightSodiumFlow_mg_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RightSodiumFlow_mg_Per_s (::std::unique_ptr< RightSodiumFlow_mg_Per_s_type > p);

          //@}

          /**
           * @name LeftRenalArterialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %LeftRenalArterialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData LeftRenalArterialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftRenalArterialPressure_mmHg_type, char > LeftRenalArterialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftRenalArterialPressure_mmHg_type&
          LeftRenalArterialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftRenalArterialPressure_mmHg_type&
          LeftRenalArterialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftRenalArterialPressure_mmHg (const LeftRenalArterialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LeftRenalArterialPressure_mmHg (::std::unique_ptr< LeftRenalArterialPressure_mmHg_type > p);

          //@}

          /**
           * @name RightRenalArterialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %RightRenalArterialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData RightRenalArterialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightRenalArterialPressure_mmHg_type, char > RightRenalArterialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightRenalArterialPressure_mmHg_type&
          RightRenalArterialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightRenalArterialPressure_mmHg_type&
          RightRenalArterialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightRenalArterialPressure_mmHg (const RightRenalArterialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RightRenalArterialPressure_mmHg (::std::unique_ptr< RightRenalArterialPressure_mmHg_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsRenalSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsRenalSystemData (const Urinating_type&,
                                   const LeftAfferentResistance_mmHg_s_Per_mL_type&,
                                   const RightAfferentResistance_mmHg_s_Per_mL_type&,
                                   const LeftSodiumFlowSetPoint_mg_Per_s_type&,
                                   const RightSodiumFlowSetPoint_mg_Per_s_type&,
                                   const UrineProductionRate_mL_Per_min_type&,
                                   const UrineOsmolarity_mOsm_Per_L_type&,
                                   const SodiumConcentration_mg_Per_mL_type&,
                                   const SodiumExcretionRate_mg_Per_min_type&,
                                   const LeftSodiumFlow_mg_Per_s_type&,
                                   const RightSodiumFlow_mg_Per_s_type&,
                                   const LeftRenalArterialPressure_mmHg_type&,
                                   const RightRenalArterialPressure_mmHg_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsRenalSystemData (const Urinating_type&,
                                   const LeftAfferentResistance_mmHg_s_Per_mL_type&,
                                   const RightAfferentResistance_mmHg_s_Per_mL_type&,
                                   const LeftSodiumFlowSetPoint_mg_Per_s_type&,
                                   const RightSodiumFlowSetPoint_mg_Per_s_type&,
                                   ::std::unique_ptr< UrineProductionRate_mL_Per_min_type >,
                                   ::std::unique_ptr< UrineOsmolarity_mOsm_Per_L_type >,
                                   ::std::unique_ptr< SodiumConcentration_mg_Per_mL_type >,
                                   ::std::unique_ptr< SodiumExcretionRate_mg_Per_min_type >,
                                   ::std::unique_ptr< LeftSodiumFlow_mg_Per_s_type >,
                                   ::std::unique_ptr< RightSodiumFlow_mg_Per_s_type >,
                                   ::std::unique_ptr< LeftRenalArterialPressure_mmHg_type >,
                                   ::std::unique_ptr< RightRenalArterialPressure_mmHg_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsRenalSystemData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRenalSystemData (const BioGearsRenalSystemData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsRenalSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRenalSystemData&
          operator= (const BioGearsRenalSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsRenalSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Urinating_type > Urinating_;
          ::xsd::cxx::tree::one< LeftAfferentResistance_mmHg_s_Per_mL_type > LeftAfferentResistance_mmHg_s_Per_mL_;
          ::xsd::cxx::tree::one< RightAfferentResistance_mmHg_s_Per_mL_type > RightAfferentResistance_mmHg_s_Per_mL_;
          ::xsd::cxx::tree::one< LeftSodiumFlowSetPoint_mg_Per_s_type > LeftSodiumFlowSetPoint_mg_Per_s_;
          ::xsd::cxx::tree::one< RightSodiumFlowSetPoint_mg_Per_s_type > RightSodiumFlowSetPoint_mg_Per_s_;
          ::xsd::cxx::tree::one< UrineProductionRate_mL_Per_min_type > UrineProductionRate_mL_Per_min_;
          ::xsd::cxx::tree::one< UrineOsmolarity_mOsm_Per_L_type > UrineOsmolarity_mOsm_Per_L_;
          ::xsd::cxx::tree::one< SodiumConcentration_mg_Per_mL_type > SodiumConcentration_mg_Per_mL_;
          ::xsd::cxx::tree::one< SodiumExcretionRate_mg_Per_min_type > SodiumExcretionRate_mg_Per_min_;
          ::xsd::cxx::tree::one< LeftSodiumFlow_mg_Per_s_type > LeftSodiumFlow_mg_Per_s_;
          ::xsd::cxx::tree::one< RightSodiumFlow_mg_Per_s_type > RightSodiumFlow_mg_Per_s_;
          ::xsd::cxx::tree::one< LeftRenalArterialPressure_mmHg_type > LeftRenalArterialPressure_mmHg_;
          ::xsd::cxx::tree::one< RightRenalArterialPressure_mmHg_type > RightRenalArterialPressure_mmHg_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsRespiratorySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsRespiratorySystemData: public ::mil::tatrc::physiology::datamodel::RespiratorySystemData
        {
          public:
          /**
           * @name InitialExpiratoryReserveVolume_L
           *
           * @brief Accessor and modifier functions for the %InitialExpiratoryReserveVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialExpiratoryReserveVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialExpiratoryReserveVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialExpiratoryReserveVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialExpiratoryReserveVolume_L_type&
          InitialExpiratoryReserveVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialExpiratoryReserveVolume_L_type&
          InitialExpiratoryReserveVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialExpiratoryReserveVolume_L (const InitialExpiratoryReserveVolume_L_type& x);

          //@}

          /**
           * @name InitialFunctionalResidualCapacity_L
           *
           * @brief Accessor and modifier functions for the %InitialFunctionalResidualCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialFunctionalResidualCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialFunctionalResidualCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialFunctionalResidualCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialFunctionalResidualCapacity_L_type&
          InitialFunctionalResidualCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialFunctionalResidualCapacity_L_type&
          InitialFunctionalResidualCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialFunctionalResidualCapacity_L (const InitialFunctionalResidualCapacity_L_type& x);

          //@}

          /**
           * @name InitialInspiratoryCapacity_L
           *
           * @brief Accessor and modifier functions for the %InitialInspiratoryCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialInspiratoryCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialInspiratoryCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialInspiratoryCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialInspiratoryCapacity_L_type&
          InitialInspiratoryCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialInspiratoryCapacity_L_type&
          InitialInspiratoryCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialInspiratoryCapacity_L (const InitialInspiratoryCapacity_L_type& x);

          //@}

          /**
           * @name InitialResidualVolume_L
           *
           * @brief Accessor and modifier functions for the %InitialResidualVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialResidualVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialResidualVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialResidualVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialResidualVolume_L_type&
          InitialResidualVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialResidualVolume_L_type&
          InitialResidualVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialResidualVolume_L (const InitialResidualVolume_L_type& x);

          //@}

          /**
           * @name NotBreathing
           *
           * @brief Accessor and modifier functions for the %NotBreathing
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean NotBreathing_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NotBreathing_type, char > NotBreathing_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NotBreathing_type&
          NotBreathing () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NotBreathing_type&
          NotBreathing ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NotBreathing (const NotBreathing_type& x);

          //@}

          /**
           * @name TopBreathTotalVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathTotalVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathTotalVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathTotalVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathTotalVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathTotalVolume_L_type&
          TopBreathTotalVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathTotalVolume_L_type&
          TopBreathTotalVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathTotalVolume_L (const TopBreathTotalVolume_L_type& x);

          //@}

          /**
           * @name TopBreathAlveoliVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathAlveoliVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathAlveoliVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathAlveoliVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathAlveoliVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathAlveoliVolume_L_type&
          TopBreathAlveoliVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathAlveoliVolume_L_type&
          TopBreathAlveoliVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathAlveoliVolume_L (const TopBreathAlveoliVolume_L_type& x);

          //@}

          /**
           * @name TopBreathDeadSpaceVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathDeadSpaceVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathDeadSpaceVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathDeadSpaceVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathDeadSpaceVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathDeadSpaceVolume_L_type&
          TopBreathDeadSpaceVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathDeadSpaceVolume_L_type&
          TopBreathDeadSpaceVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathDeadSpaceVolume_L (const TopBreathDeadSpaceVolume_L_type& x);

          //@}

          /**
           * @name TopBreathPleuralPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %TopBreathPleuralPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathPleuralPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathPleuralPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathPleuralPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathPleuralPressure_cmH2O_type&
          TopBreathPleuralPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathPleuralPressure_cmH2O_type&
          TopBreathPleuralPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathPleuralPressure_cmH2O (const TopBreathPleuralPressure_cmH2O_type& x);

          //@}

          /**
           * @name LastCardiacCycleBloodPH
           *
           * @brief Accessor and modifier functions for the %LastCardiacCycleBloodPH
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LastCardiacCycleBloodPH_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LastCardiacCycleBloodPH_type, char, ::xsd::cxx::tree::schema_type::double_ > LastCardiacCycleBloodPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LastCardiacCycleBloodPH_type&
          LastCardiacCycleBloodPH () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LastCardiacCycleBloodPH_type&
          LastCardiacCycleBloodPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LastCardiacCycleBloodPH (const LastCardiacCycleBloodPH_type& x);

          //@}

          /**
           * @name PreviousTotalLungVolume_L
           *
           * @brief Accessor and modifier functions for the %PreviousTotalLungVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PreviousTotalLungVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PreviousTotalLungVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > PreviousTotalLungVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PreviousTotalLungVolume_L_type&
          PreviousTotalLungVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PreviousTotalLungVolume_L_type&
          PreviousTotalLungVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PreviousTotalLungVolume_L (const PreviousTotalLungVolume_L_type& x);

          //@}

          /**
           * @name BloodPHRunningAverage
           *
           * @brief Accessor and modifier functions for the %BloodPHRunningAverage
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData BloodPHRunningAverage_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodPHRunningAverage_type, char > BloodPHRunningAverage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BloodPHRunningAverage_type&
          BloodPHRunningAverage () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BloodPHRunningAverage_type&
          BloodPHRunningAverage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodPHRunningAverage (const BloodPHRunningAverage_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BloodPHRunningAverage (::std::unique_ptr< BloodPHRunningAverage_type > p);

          //@}

          /**
           * @name BreathingCycle
           *
           * @brief Accessor and modifier functions for the %BreathingCycle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean BreathingCycle_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathingCycle_type, char > BreathingCycle_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathingCycle_type&
          BreathingCycle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathingCycle_type&
          BreathingCycle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathingCycle (const BreathingCycle_type& x);

          //@}

          /**
           * @name ArterialOxygenPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialOxygenPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenPressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialOxygenPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialOxygenPressure_mmHg_type&
          ArterialOxygenPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialOxygenPressure_mmHg_type&
          ArterialOxygenPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenPressure_mmHg (const ArterialOxygenPressure_mmHg_type& x);

          //@}

          /**
           * @name ArterialCarbonDioxidePressure_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxidePressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialCarbonDioxidePressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxidePressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialCarbonDioxidePressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCarbonDioxidePressure_mmHg_type&
          ArterialCarbonDioxidePressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCarbonDioxidePressure_mmHg_type&
          ArterialCarbonDioxidePressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxidePressure_mmHg (const ArterialCarbonDioxidePressure_mmHg_type& x);

          //@}

          /**
           * @name ArterialOxygenAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialOxygenAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenAverage_mmHg_type, char > ArterialOxygenAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialOxygenAverage_mmHg_type&
          ArterialOxygenAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialOxygenAverage_mmHg_type&
          ArterialOxygenAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenAverage_mmHg (const ArterialOxygenAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialOxygenAverage_mmHg (::std::unique_ptr< ArterialOxygenAverage_mmHg_type > p);

          //@}

          /**
           * @name ArterialCarbonDioxideAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxideAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialCarbonDioxideAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxideAverage_mmHg_type, char > ArterialCarbonDioxideAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCarbonDioxideAverage_mmHg_type&
          ArterialCarbonDioxideAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCarbonDioxideAverage_mmHg_type&
          ArterialCarbonDioxideAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxideAverage_mmHg (const ArterialCarbonDioxideAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialCarbonDioxideAverage_mmHg (::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > p);

          //@}

          /**
           * @name BreathingCycleTime_s
           *
           * @brief Accessor and modifier functions for the %BreathingCycleTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ BreathingCycleTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathingCycleTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > BreathingCycleTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathingCycleTime_s_type&
          BreathingCycleTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathingCycleTime_s_type&
          BreathingCycleTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathingCycleTime_s (const BreathingCycleTime_s_type& x);

          //@}

          /**
           * @name BreathTimeExhale_min
           *
           * @brief Accessor and modifier functions for the %BreathTimeExhale_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ BreathTimeExhale_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathTimeExhale_min_type, char, ::xsd::cxx::tree::schema_type::double_ > BreathTimeExhale_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathTimeExhale_min_type&
          BreathTimeExhale_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathTimeExhale_min_type&
          BreathTimeExhale_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathTimeExhale_min (const BreathTimeExhale_min_type& x);

          //@}

          /**
           * @name DefaultDrivePressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %DefaultDrivePressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DefaultDrivePressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultDrivePressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DefaultDrivePressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DefaultDrivePressure_cmH2O_type&
          DefaultDrivePressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DefaultDrivePressure_cmH2O_type&
          DefaultDrivePressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultDrivePressure_cmH2O (const DefaultDrivePressure_cmH2O_type& x);

          //@}

          /**
           * @name DriverPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %DriverPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DriverPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DriverPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DriverPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DriverPressure_cmH2O_type&
          DriverPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DriverPressure_cmH2O_type&
          DriverPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DriverPressure_cmH2O (const DriverPressure_cmH2O_type& x);

          //@}

          /**
           * @name DriverPressureMin_cmH2O
           *
           * @brief Accessor and modifier functions for the %DriverPressureMin_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DriverPressureMin_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DriverPressureMin_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DriverPressureMin_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DriverPressureMin_cmH2O_type&
          DriverPressureMin_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DriverPressureMin_cmH2O_type&
          DriverPressureMin_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DriverPressureMin_cmH2O (const DriverPressureMin_cmH2O_type& x);

          //@}

          /**
           * @name ElapsedBreathingCycleTime_min
           *
           * @brief Accessor and modifier functions for the %ElapsedBreathingCycleTime_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ElapsedBreathingCycleTime_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElapsedBreathingCycleTime_min_type, char, ::xsd::cxx::tree::schema_type::double_ > ElapsedBreathingCycleTime_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElapsedBreathingCycleTime_min_type&
          ElapsedBreathingCycleTime_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElapsedBreathingCycleTime_min_type&
          ElapsedBreathingCycleTime_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElapsedBreathingCycleTime_min (const ElapsedBreathingCycleTime_min_type& x);

          //@}

          /**
           * @name IEscaleFactor
           *
           * @brief Accessor and modifier functions for the %IEscaleFactor
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ IEscaleFactor_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IEscaleFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > IEscaleFactor_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IEscaleFactor_type&
          IEscaleFactor () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IEscaleFactor_type&
          IEscaleFactor ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IEscaleFactor (const IEscaleFactor_type& x);

          //@}

          /**
           * @name InstantaneousFunctionalResidualCapacity_L
           *
           * @brief Accessor and modifier functions for the %InstantaneousFunctionalResidualCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InstantaneousFunctionalResidualCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InstantaneousFunctionalResidualCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InstantaneousFunctionalResidualCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InstantaneousFunctionalResidualCapacity_L_type&
          InstantaneousFunctionalResidualCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InstantaneousFunctionalResidualCapacity_L_type&
          InstantaneousFunctionalResidualCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InstantaneousFunctionalResidualCapacity_L (const InstantaneousFunctionalResidualCapacity_L_type& x);

          //@}

          /**
           * @name MaxDriverPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %MaxDriverPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ MaxDriverPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaxDriverPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > MaxDriverPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MaxDriverPressure_cmH2O_type&
          MaxDriverPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MaxDriverPressure_cmH2O_type&
          MaxDriverPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaxDriverPressure_cmH2O (const MaxDriverPressure_cmH2O_type& x);

          //@}

          /**
           * @name PeakRespiratoryDrivePressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %PeakRespiratoryDrivePressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PeakRespiratoryDrivePressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeakRespiratoryDrivePressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > PeakRespiratoryDrivePressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PeakRespiratoryDrivePressure_cmH2O_type&
          PeakRespiratoryDrivePressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PeakRespiratoryDrivePressure_cmH2O_type&
          PeakRespiratoryDrivePressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeakRespiratoryDrivePressure_cmH2O (const PeakRespiratoryDrivePressure_cmH2O_type& x);

          //@}

          /**
           * @name VentilationFrequency_Per_min
           *
           * @brief Accessor and modifier functions for the %VentilationFrequency_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ VentilationFrequency_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilationFrequency_Per_min_type, char, ::xsd::cxx::tree::schema_type::double_ > VentilationFrequency_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VentilationFrequency_Per_min_type&
          VentilationFrequency_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VentilationFrequency_Per_min_type&
          VentilationFrequency_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilationFrequency_Per_min (const VentilationFrequency_Per_min_type& x);

          //@}

          /**
           * @name ConsciousBreathing
           *
           * @brief Accessor and modifier functions for the %ConsciousBreathing
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean ConsciousBreathing_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousBreathing_type, char > ConsciousBreathing_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousBreathing_type&
          ConsciousBreathing () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousBreathing_type&
          ConsciousBreathing ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousBreathing (const ConsciousBreathing_type& x);

          //@}

          /**
           * @name ConsciousRespirationPeriod_s
           *
           * @brief Accessor and modifier functions for the %ConsciousRespirationPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousRespirationPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousRespirationPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousRespirationPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousRespirationPeriod_s_type&
          ConsciousRespirationPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousRespirationPeriod_s_type&
          ConsciousRespirationPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousRespirationPeriod_s (const ConsciousRespirationPeriod_s_type& x);

          //@}

          /**
           * @name ConsciousRespirationRemainingPeriod_s
           *
           * @brief Accessor and modifier functions for the %ConsciousRespirationRemainingPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousRespirationRemainingPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousRespirationRemainingPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousRespirationRemainingPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousRespirationRemainingPeriod_s_type&
          ConsciousRespirationRemainingPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousRespirationRemainingPeriod_s_type&
          ConsciousRespirationRemainingPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousRespirationRemainingPeriod_s (const ConsciousRespirationRemainingPeriod_s_type& x);

          //@}

          /**
           * @name ExpiratoryReserveVolumeFraction
           *
           * @brief Accessor and modifier functions for the %ExpiratoryReserveVolumeFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ExpiratoryReserveVolumeFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryReserveVolumeFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > ExpiratoryReserveVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x);

          //@}

          /**
           * @name InspiratoryCapacityFraction
           *
           * @brief Accessor and modifier functions for the %InspiratoryCapacityFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InspiratoryCapacityFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryCapacityFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > InspiratoryCapacityFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x);

          //@}

          /**
           * @name ConsciousStartPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %ConsciousStartPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousStartPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousStartPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousStartPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousStartPressure_cmH2O_type&
          ConsciousStartPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousStartPressure_cmH2O_type&
          ConsciousStartPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousStartPressure_cmH2O (const ConsciousStartPressure_cmH2O_type& x);

          //@}

          /**
           * @name ConsciousEndPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %ConsciousEndPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousEndPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousEndPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousEndPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousEndPressure_cmH2O_type&
          ConsciousEndPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousEndPressure_cmH2O_type&
          ConsciousEndPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousEndPressure_cmH2O (const ConsciousEndPressure_cmH2O_type& x);

          //@}

          /**
           * @name HadAirwayObstruction
           *
           * @brief Accessor and modifier functions for the %HadAirwayObstruction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean HadAirwayObstruction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HadAirwayObstruction_type, char > HadAirwayObstruction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HadAirwayObstruction_type&
          HadAirwayObstruction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HadAirwayObstruction_type&
          HadAirwayObstruction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HadAirwayObstruction (const HadAirwayObstruction_type& x);

          //@}

          /**
           * @name HadBronchoconstriction
           *
           * @brief Accessor and modifier functions for the %HadBronchoconstriction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean HadBronchoconstriction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HadBronchoconstriction_type, char > HadBronchoconstriction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HadBronchoconstriction_type&
          HadBronchoconstriction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HadBronchoconstriction_type&
          HadBronchoconstriction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HadBronchoconstriction (const HadBronchoconstriction_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsRespiratorySystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type&,
                                         const InitialFunctionalResidualCapacity_L_type&,
                                         const InitialInspiratoryCapacity_L_type&,
                                         const InitialResidualVolume_L_type&,
                                         const NotBreathing_type&,
                                         const TopBreathTotalVolume_L_type&,
                                         const TopBreathAlveoliVolume_L_type&,
                                         const TopBreathDeadSpaceVolume_L_type&,
                                         const TopBreathPleuralPressure_cmH2O_type&,
                                         const LastCardiacCycleBloodPH_type&,
                                         const PreviousTotalLungVolume_L_type&,
                                         const BloodPHRunningAverage_type&,
                                         const BreathingCycle_type&,
                                         const ArterialOxygenPressure_mmHg_type&,
                                         const ArterialCarbonDioxidePressure_mmHg_type&,
                                         const ArterialOxygenAverage_mmHg_type&,
                                         const ArterialCarbonDioxideAverage_mmHg_type&,
                                         const BreathingCycleTime_s_type&,
                                         const BreathTimeExhale_min_type&,
                                         const DefaultDrivePressure_cmH2O_type&,
                                         const DriverPressure_cmH2O_type&,
                                         const DriverPressureMin_cmH2O_type&,
                                         const ElapsedBreathingCycleTime_min_type&,
                                         const IEscaleFactor_type&,
                                         const InstantaneousFunctionalResidualCapacity_L_type&,
                                         const MaxDriverPressure_cmH2O_type&,
                                         const PeakRespiratoryDrivePressure_cmH2O_type&,
                                         const VentilationFrequency_Per_min_type&,
                                         const ConsciousBreathing_type&,
                                         const ConsciousRespirationPeriod_s_type&,
                                         const ConsciousRespirationRemainingPeriod_s_type&,
                                         const ExpiratoryReserveVolumeFraction_type&,
                                         const InspiratoryCapacityFraction_type&,
                                         const ConsciousStartPressure_cmH2O_type&,
                                         const ConsciousEndPressure_cmH2O_type&,
                                         const HadAirwayObstruction_type&,
                                         const HadBronchoconstriction_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type&,
                                         const InitialFunctionalResidualCapacity_L_type&,
                                         const InitialInspiratoryCapacity_L_type&,
                                         const InitialResidualVolume_L_type&,
                                         const NotBreathing_type&,
                                         const TopBreathTotalVolume_L_type&,
                                         const TopBreathAlveoliVolume_L_type&,
                                         const TopBreathDeadSpaceVolume_L_type&,
                                         const TopBreathPleuralPressure_cmH2O_type&,
                                         const LastCardiacCycleBloodPH_type&,
                                         const PreviousTotalLungVolume_L_type&,
                                         ::std::unique_ptr< BloodPHRunningAverage_type >,
                                         const BreathingCycle_type&,
                                         const ArterialOxygenPressure_mmHg_type&,
                                         const ArterialCarbonDioxidePressure_mmHg_type&,
                                         ::std::unique_ptr< ArterialOxygenAverage_mmHg_type >,
                                         ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type >,
                                         const BreathingCycleTime_s_type&,
                                         const BreathTimeExhale_min_type&,
                                         const DefaultDrivePressure_cmH2O_type&,
                                         const DriverPressure_cmH2O_type&,
                                         const DriverPressureMin_cmH2O_type&,
                                         const ElapsedBreathingCycleTime_min_type&,
                                         const IEscaleFactor_type&,
                                         const InstantaneousFunctionalResidualCapacity_L_type&,
                                         const MaxDriverPressure_cmH2O_type&,
                                         const PeakRespiratoryDrivePressure_cmH2O_type&,
                                         const VentilationFrequency_Per_min_type&,
                                         const ConsciousBreathing_type&,
                                         const ConsciousRespirationPeriod_s_type&,
                                         const ConsciousRespirationRemainingPeriod_s_type&,
                                         const ExpiratoryReserveVolumeFraction_type&,
                                         const InspiratoryCapacityFraction_type&,
                                         const ConsciousStartPressure_cmH2O_type&,
                                         const ConsciousEndPressure_cmH2O_type&,
                                         const HadAirwayObstruction_type&,
                                         const HadBronchoconstriction_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsRespiratorySystemData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRespiratorySystemData (const BioGearsRespiratorySystemData& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsRespiratorySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRespiratorySystemData&
          operator= (const BioGearsRespiratorySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsRespiratorySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< InitialExpiratoryReserveVolume_L_type > InitialExpiratoryReserveVolume_L_;
          ::xsd::cxx::tree::one< InitialFunctionalResidualCapacity_L_type > InitialFunctionalResidualCapacity_L_;
          ::xsd::cxx::tree::one< InitialInspiratoryCapacity_L_type > InitialInspiratoryCapacity_L_;
          ::xsd::cxx::tree::one< InitialResidualVolume_L_type > InitialResidualVolume_L_;
          ::xsd::cxx::tree::one< NotBreathing_type > NotBreathing_;
          ::xsd::cxx::tree::one< TopBreathTotalVolume_L_type > TopBreathTotalVolume_L_;
          ::xsd::cxx::tree::one< TopBreathAlveoliVolume_L_type > TopBreathAlveoliVolume_L_;
          ::xsd::cxx::tree::one< TopBreathDeadSpaceVolume_L_type > TopBreathDeadSpaceVolume_L_;
          ::xsd::cxx::tree::one< TopBreathPleuralPressure_cmH2O_type > TopBreathPleuralPressure_cmH2O_;
          ::xsd::cxx::tree::one< LastCardiacCycleBloodPH_type > LastCardiacCycleBloodPH_;
          ::xsd::cxx::tree::one< PreviousTotalLungVolume_L_type > PreviousTotalLungVolume_L_;
          ::xsd::cxx::tree::one< BloodPHRunningAverage_type > BloodPHRunningAverage_;
          ::xsd::cxx::tree::one< BreathingCycle_type > BreathingCycle_;
          ::xsd::cxx::tree::one< ArterialOxygenPressure_mmHg_type > ArterialOxygenPressure_mmHg_;
          ::xsd::cxx::tree::one< ArterialCarbonDioxidePressure_mmHg_type > ArterialCarbonDioxidePressure_mmHg_;
          ::xsd::cxx::tree::one< ArterialOxygenAverage_mmHg_type > ArterialOxygenAverage_mmHg_;
          ::xsd::cxx::tree::one< ArterialCarbonDioxideAverage_mmHg_type > ArterialCarbonDioxideAverage_mmHg_;
          ::xsd::cxx::tree::one< BreathingCycleTime_s_type > BreathingCycleTime_s_;
          ::xsd::cxx::tree::one< BreathTimeExhale_min_type > BreathTimeExhale_min_;
          ::xsd::cxx::tree::one< DefaultDrivePressure_cmH2O_type > DefaultDrivePressure_cmH2O_;
          ::xsd::cxx::tree::one< DriverPressure_cmH2O_type > DriverPressure_cmH2O_;
          ::xsd::cxx::tree::one< DriverPressureMin_cmH2O_type > DriverPressureMin_cmH2O_;
          ::xsd::cxx::tree::one< ElapsedBreathingCycleTime_min_type > ElapsedBreathingCycleTime_min_;
          ::xsd::cxx::tree::one< IEscaleFactor_type > IEscaleFactor_;
          ::xsd::cxx::tree::one< InstantaneousFunctionalResidualCapacity_L_type > InstantaneousFunctionalResidualCapacity_L_;
          ::xsd::cxx::tree::one< MaxDriverPressure_cmH2O_type > MaxDriverPressure_cmH2O_;
          ::xsd::cxx::tree::one< PeakRespiratoryDrivePressure_cmH2O_type > PeakRespiratoryDrivePressure_cmH2O_;
          ::xsd::cxx::tree::one< VentilationFrequency_Per_min_type > VentilationFrequency_Per_min_;
          ::xsd::cxx::tree::one< ConsciousBreathing_type > ConsciousBreathing_;
          ::xsd::cxx::tree::one< ConsciousRespirationPeriod_s_type > ConsciousRespirationPeriod_s_;
          ::xsd::cxx::tree::one< ConsciousRespirationRemainingPeriod_s_type > ConsciousRespirationRemainingPeriod_s_;
          ::xsd::cxx::tree::one< ExpiratoryReserveVolumeFraction_type > ExpiratoryReserveVolumeFraction_;
          ::xsd::cxx::tree::one< InspiratoryCapacityFraction_type > InspiratoryCapacityFraction_;
          ::xsd::cxx::tree::one< ConsciousStartPressure_cmH2O_type > ConsciousStartPressure_cmH2O_;
          ::xsd::cxx::tree::one< ConsciousEndPressure_cmH2O_type > ConsciousEndPressure_cmH2O_;
          ::xsd::cxx::tree::one< HadAirwayObstruction_type > HadAirwayObstruction_;
          ::xsd::cxx::tree::one< HadBronchoconstriction_type > HadBronchoconstriction_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsTissueSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsTissueSystemData: public ::mil::tatrc::physiology::datamodel::TissueSystemData
        {
          public:
          /**
           * @name RestingPatientMass_kg
           *
           * @brief Accessor and modifier functions for the %RestingPatientMass_kg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RestingPatientMass_kg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RestingPatientMass_kg_type, char, ::xsd::cxx::tree::schema_type::double_ > RestingPatientMass_kg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RestingPatientMass_kg_type&
          RestingPatientMass_kg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RestingPatientMass_kg_type&
          RestingPatientMass_kg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RestingPatientMass_kg (const RestingPatientMass_kg_type& x);

          //@}

          /**
           * @name RestingFluidMass_kg
           *
           * @brief Accessor and modifier functions for the %RestingFluidMass_kg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RestingFluidMass_kg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RestingFluidMass_kg_type, char, ::xsd::cxx::tree::schema_type::double_ > RestingFluidMass_kg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RestingFluidMass_kg_type&
          RestingFluidMass_kg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RestingFluidMass_kg_type&
          RestingFluidMass_kg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RestingFluidMass_kg (const RestingFluidMass_kg_type& x);

          //@}

          /**
           * @name O2ConsumedRunningAverage_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %O2ConsumedRunningAverage_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData O2ConsumedRunningAverage_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< O2ConsumedRunningAverage_mL_Per_s_type, char > O2ConsumedRunningAverage_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const O2ConsumedRunningAverage_mL_Per_s_type&
          O2ConsumedRunningAverage_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          O2ConsumedRunningAverage_mL_Per_s_type&
          O2ConsumedRunningAverage_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          O2ConsumedRunningAverage_mL_Per_s (const O2ConsumedRunningAverage_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          O2ConsumedRunningAverage_mL_Per_s (::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > p);

          //@}

          /**
           * @name CO2ProducedRunningAverage_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CO2ProducedRunningAverage_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CO2ProducedRunningAverage_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CO2ProducedRunningAverage_mL_Per_s_type, char > CO2ProducedRunningAverage_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CO2ProducedRunningAverage_mL_Per_s_type&
          CO2ProducedRunningAverage_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CO2ProducedRunningAverage_mL_Per_s_type&
          CO2ProducedRunningAverage_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CO2ProducedRunningAverage_mL_Per_s (const CO2ProducedRunningAverage_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CO2ProducedRunningAverage_mL_Per_s (::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > p);

          //@}

          /**
           * @name RespiratoryQuotientRunningAverage
           *
           * @brief Accessor and modifier functions for the %RespiratoryQuotientRunningAverage
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData RespiratoryQuotientRunningAverage_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryQuotientRunningAverage_type, char > RespiratoryQuotientRunningAverage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RespiratoryQuotientRunningAverage_type&
          RespiratoryQuotientRunningAverage () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RespiratoryQuotientRunningAverage_type&
          RespiratoryQuotientRunningAverage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryQuotientRunningAverage (const RespiratoryQuotientRunningAverage_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RespiratoryQuotientRunningAverage (::std::unique_ptr< RespiratoryQuotientRunningAverage_type > p);

          //@}

          /**
           * @name FatigueRunningAverage
           *
           * @brief Accessor and modifier functions for the %FatigueRunningAverage
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData FatigueRunningAverage_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatigueRunningAverage_type, char > FatigueRunningAverage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FatigueRunningAverage_type&
          FatigueRunningAverage () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FatigueRunningAverage_type&
          FatigueRunningAverage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatigueRunningAverage (const FatigueRunningAverage_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          FatigueRunningAverage (::std::unique_ptr< FatigueRunningAverage_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsTissueSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsTissueSystemData (const RestingPatientMass_kg_type&,
                                    const RestingFluidMass_kg_type&,
                                    const O2ConsumedRunningAverage_mL_Per_s_type&,
                                    const CO2ProducedRunningAverage_mL_Per_s_type&,
                                    const RespiratoryQuotientRunningAverage_type&,
                                    const FatigueRunningAverage_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsTissueSystemData (const RestingPatientMass_kg_type&,
                                    const RestingFluidMass_kg_type&,
                                    ::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type >,
                                    ::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type >,
                                    ::std::unique_ptr< RespiratoryQuotientRunningAverage_type >,
                                    ::std::unique_ptr< FatigueRunningAverage_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsTissueSystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsTissueSystemData (const BioGearsTissueSystemData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsTissueSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsTissueSystemData&
          operator= (const BioGearsTissueSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsTissueSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< RestingPatientMass_kg_type > RestingPatientMass_kg_;
          ::xsd::cxx::tree::one< RestingFluidMass_kg_type > RestingFluidMass_kg_;
          ::xsd::cxx::tree::one< O2ConsumedRunningAverage_mL_Per_s_type > O2ConsumedRunningAverage_mL_Per_s_;
          ::xsd::cxx::tree::one< CO2ProducedRunningAverage_mL_Per_s_type > CO2ProducedRunningAverage_mL_Per_s_;
          ::xsd::cxx::tree::one< RespiratoryQuotientRunningAverage_type > RespiratoryQuotientRunningAverage_;
          ::xsd::cxx::tree::one< FatigueRunningAverage_type > FatigueRunningAverage_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsBloodChemistrySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsCardiovascularSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsDrugSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsEndocrineSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsEnergySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsGastrointestinalSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsHepaticSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsNervousSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsRenalSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsRespiratorySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsTissueSystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsBloodChemistrySystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsCardiovascularSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsDrugSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsEndocrineSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsEnergySystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsGastrointestinalSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsHepaticSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsNervousSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsRenalSystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsRespiratorySystemData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsTissueSystemData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_PHYSIOLOGY_HXX
