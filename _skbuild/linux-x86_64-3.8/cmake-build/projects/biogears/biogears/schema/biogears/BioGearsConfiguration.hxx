// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BioGearsConfiguration.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_CONFIGURATION_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_CONFIGURATION_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BloodChemistryConfigurationData;
        class CardiovascularConfigurationData;
        class CircuitConfigurationData;
        class ConstantsConfigurationData;
        class DrugsConfigurationData;
        class EnergyConfigurationData;
        class EnvironmentConfigurationData;
        class GastrointestinalConfigurationData;
        class NervousConfigurationData;
        class RenalConfigurationData;
        class RespiratoryConfigurationData;
        class TissueConfigurationData;
        class BioGearsConfigurationData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../cdm/Environment.hxx"

#include "../cdm/EngineConfiguration.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BloodChemistryConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BloodChemistryConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name MeanCorpuscularHemoglobin
           *
           * @brief Accessor and modifier functions for the %MeanCorpuscularHemoglobin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAmountData MeanCorpuscularHemoglobin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCorpuscularHemoglobin_type > MeanCorpuscularHemoglobin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCorpuscularHemoglobin_type, char > MeanCorpuscularHemoglobin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCorpuscularHemoglobin_optional&
          MeanCorpuscularHemoglobin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCorpuscularHemoglobin_optional&
          MeanCorpuscularHemoglobin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCorpuscularHemoglobin (::std::unique_ptr< MeanCorpuscularHemoglobin_type > p);

          //@}

          /**
           * @name MeanCorpuscularVolume
           *
           * @brief Accessor and modifier functions for the %MeanCorpuscularVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData MeanCorpuscularVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCorpuscularVolume_type > MeanCorpuscularVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCorpuscularVolume_type, char > MeanCorpuscularVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCorpuscularVolume_optional&
          MeanCorpuscularVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCorpuscularVolume_optional&
          MeanCorpuscularVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCorpuscularVolume (const MeanCorpuscularVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCorpuscularVolume (const MeanCorpuscularVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCorpuscularVolume (::std::unique_ptr< MeanCorpuscularVolume_type > p);

          //@}

          /**
           * @name StandardDiffusionDistance
           *
           * @brief Accessor and modifier functions for the %StandardDiffusionDistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarLengthData StandardDiffusionDistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StandardDiffusionDistance_type > StandardDiffusionDistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StandardDiffusionDistance_type, char > StandardDiffusionDistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StandardDiffusionDistance_optional&
          StandardDiffusionDistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StandardDiffusionDistance_optional&
          StandardDiffusionDistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StandardDiffusionDistance (const StandardDiffusionDistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StandardDiffusionDistance (const StandardDiffusionDistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StandardDiffusionDistance (::std::unique_ptr< StandardDiffusionDistance_type > p);

          //@}

          /**
           * @name StandardOxygenDiffusionCoefficient
           *
           * @brief Accessor and modifier functions for the %StandardOxygenDiffusionCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StandardOxygenDiffusionCoefficient_type > StandardOxygenDiffusionCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StandardOxygenDiffusionCoefficient_type, char > StandardOxygenDiffusionCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StandardOxygenDiffusionCoefficient_optional&
          StandardOxygenDiffusionCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StandardOxygenDiffusionCoefficient_optional&
          StandardOxygenDiffusionCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StandardOxygenDiffusionCoefficient (const StandardOxygenDiffusionCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StandardOxygenDiffusionCoefficient (const StandardOxygenDiffusionCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StandardOxygenDiffusionCoefficient (::std::unique_ptr< StandardOxygenDiffusionCoefficient_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BloodChemistryConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BloodChemistryConfigurationData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistryConfigurationData (const BloodChemistryConfigurationData& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BloodChemistryConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistryConfigurationData&
          operator= (const BloodChemistryConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BloodChemistryConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          MeanCorpuscularHemoglobin_optional MeanCorpuscularHemoglobin_;
          MeanCorpuscularVolume_optional MeanCorpuscularVolume_;
          StandardDiffusionDistance_optional StandardDiffusionDistance_;
          StandardOxygenDiffusionCoefficient_optional StandardOxygenDiffusionCoefficient_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CardiovascularConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CardiovascularConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name LeftHeartElastanceMaximum
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMaximum
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowElastanceData LeftHeartElastanceMaximum_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftHeartElastanceMaximum_type > LeftHeartElastanceMaximum_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMaximum_type, char > LeftHeartElastanceMaximum_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftHeartElastanceMaximum_optional&
          LeftHeartElastanceMaximum () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftHeartElastanceMaximum_optional&
          LeftHeartElastanceMaximum ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftHeartElastanceMaximum (::std::unique_ptr< LeftHeartElastanceMaximum_type > p);

          //@}

          /**
           * @name LeftHeartElastanceMinimum
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMinimum
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowElastanceData LeftHeartElastanceMinimum_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftHeartElastanceMinimum_type > LeftHeartElastanceMinimum_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMinimum_type, char > LeftHeartElastanceMinimum_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftHeartElastanceMinimum_optional&
          LeftHeartElastanceMinimum () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftHeartElastanceMinimum_optional&
          LeftHeartElastanceMinimum ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftHeartElastanceMinimum (::std::unique_ptr< LeftHeartElastanceMinimum_type > p);

          //@}

          /**
           * @name MinimumBloodVolumeFraction
           *
           * @brief Accessor and modifier functions for the %MinimumBloodVolumeFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData MinimumBloodVolumeFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MinimumBloodVolumeFraction_type > MinimumBloodVolumeFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumBloodVolumeFraction_type, char > MinimumBloodVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MinimumBloodVolumeFraction_optional&
          MinimumBloodVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MinimumBloodVolumeFraction_optional&
          MinimumBloodVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MinimumBloodVolumeFraction (::std::unique_ptr< MinimumBloodVolumeFraction_type > p);

          //@}

          /**
           * @name RightHeartElastanceMaximum
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMaximum
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowElastanceData RightHeartElastanceMaximum_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightHeartElastanceMaximum_type > RightHeartElastanceMaximum_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMaximum_type, char > RightHeartElastanceMaximum_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightHeartElastanceMaximum_optional&
          RightHeartElastanceMaximum () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightHeartElastanceMaximum_optional&
          RightHeartElastanceMaximum ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMaximum (const RightHeartElastanceMaximum_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightHeartElastanceMaximum (const RightHeartElastanceMaximum_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightHeartElastanceMaximum (::std::unique_ptr< RightHeartElastanceMaximum_type > p);

          //@}

          /**
           * @name RightHeartElastanceMinimum
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMinimum
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowElastanceData RightHeartElastanceMinimum_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightHeartElastanceMinimum_type > RightHeartElastanceMinimum_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMinimum_type, char > RightHeartElastanceMinimum_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightHeartElastanceMinimum_optional&
          RightHeartElastanceMinimum () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightHeartElastanceMinimum_optional&
          RightHeartElastanceMinimum ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMinimum (const RightHeartElastanceMinimum_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightHeartElastanceMinimum (const RightHeartElastanceMinimum_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightHeartElastanceMinimum (::std::unique_ptr< RightHeartElastanceMinimum_type > p);

          //@}

          /**
           * @name StandardPulmonaryCapillaryCoverage
           *
           * @brief Accessor and modifier functions for the %StandardPulmonaryCapillaryCoverage
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData StandardPulmonaryCapillaryCoverage_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StandardPulmonaryCapillaryCoverage_type > StandardPulmonaryCapillaryCoverage_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StandardPulmonaryCapillaryCoverage_type, char > StandardPulmonaryCapillaryCoverage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StandardPulmonaryCapillaryCoverage_optional&
          StandardPulmonaryCapillaryCoverage () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StandardPulmonaryCapillaryCoverage_optional&
          StandardPulmonaryCapillaryCoverage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StandardPulmonaryCapillaryCoverage (::std::unique_ptr< StandardPulmonaryCapillaryCoverage_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CardiovascularConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardiovascularConfigurationData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiovascularConfigurationData (const CardiovascularConfigurationData& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CardiovascularConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiovascularConfigurationData&
          operator= (const CardiovascularConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CardiovascularConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          LeftHeartElastanceMaximum_optional LeftHeartElastanceMaximum_;
          LeftHeartElastanceMinimum_optional LeftHeartElastanceMinimum_;
          MinimumBloodVolumeFraction_optional MinimumBloodVolumeFraction_;
          RightHeartElastanceMaximum_optional RightHeartElastanceMaximum_;
          RightHeartElastanceMinimum_optional RightHeartElastanceMinimum_;
          StandardPulmonaryCapillaryCoverage_optional StandardPulmonaryCapillaryCoverage_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CircuitConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CircuitConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name CardiovascularOpenResistance
           *
           * @brief Accessor and modifier functions for the %CardiovascularOpenResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData CardiovascularOpenResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CardiovascularOpenResistance_type > CardiovascularOpenResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiovascularOpenResistance_type, char > CardiovascularOpenResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CardiovascularOpenResistance_optional&
          CardiovascularOpenResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CardiovascularOpenResistance_optional&
          CardiovascularOpenResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiovascularOpenResistance (const CardiovascularOpenResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CardiovascularOpenResistance (const CardiovascularOpenResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CardiovascularOpenResistance (::std::unique_ptr< CardiovascularOpenResistance_type > p);

          //@}

          /**
           * @name DefaultClosedElectricResistance
           *
           * @brief Accessor and modifier functions for the %DefaultClosedElectricResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData DefaultClosedElectricResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultClosedElectricResistance_type > DefaultClosedElectricResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultClosedElectricResistance_type, char > DefaultClosedElectricResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultClosedElectricResistance_optional&
          DefaultClosedElectricResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultClosedElectricResistance_optional&
          DefaultClosedElectricResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultClosedElectricResistance (const DefaultClosedElectricResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultClosedElectricResistance (const DefaultClosedElectricResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultClosedElectricResistance (::std::unique_ptr< DefaultClosedElectricResistance_type > p);

          //@}

          /**
           * @name DefaultOpenElectricResistance
           *
           * @brief Accessor and modifier functions for the %DefaultOpenElectricResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData DefaultOpenElectricResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultOpenElectricResistance_type > DefaultOpenElectricResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultOpenElectricResistance_type, char > DefaultOpenElectricResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultOpenElectricResistance_optional&
          DefaultOpenElectricResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultOpenElectricResistance_optional&
          DefaultOpenElectricResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultOpenElectricResistance (const DefaultOpenElectricResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultOpenElectricResistance (const DefaultOpenElectricResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultOpenElectricResistance (::std::unique_ptr< DefaultOpenElectricResistance_type > p);

          //@}

          /**
           * @name DefaultClosedFlowResistance
           *
           * @brief Accessor and modifier functions for the %DefaultClosedFlowResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData DefaultClosedFlowResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultClosedFlowResistance_type > DefaultClosedFlowResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultClosedFlowResistance_type, char > DefaultClosedFlowResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultClosedFlowResistance_optional&
          DefaultClosedFlowResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultClosedFlowResistance_optional&
          DefaultClosedFlowResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultClosedFlowResistance (const DefaultClosedFlowResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultClosedFlowResistance (const DefaultClosedFlowResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultClosedFlowResistance (::std::unique_ptr< DefaultClosedFlowResistance_type > p);

          //@}

          /**
           * @name DefaultOpenFlowResistance
           *
           * @brief Accessor and modifier functions for the %DefaultOpenFlowResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData DefaultOpenFlowResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultOpenFlowResistance_type > DefaultOpenFlowResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultOpenFlowResistance_type, char > DefaultOpenFlowResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultOpenFlowResistance_optional&
          DefaultOpenFlowResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultOpenFlowResistance_optional&
          DefaultOpenFlowResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultOpenFlowResistance (const DefaultOpenFlowResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultOpenFlowResistance (const DefaultOpenFlowResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultOpenFlowResistance (::std::unique_ptr< DefaultOpenFlowResistance_type > p);

          //@}

          /**
           * @name DefaultClosedHeatResistance
           *
           * @brief Accessor and modifier functions for the %DefaultClosedHeatResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatResistanceData DefaultClosedHeatResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultClosedHeatResistance_type > DefaultClosedHeatResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultClosedHeatResistance_type, char > DefaultClosedHeatResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultClosedHeatResistance_optional&
          DefaultClosedHeatResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultClosedHeatResistance_optional&
          DefaultClosedHeatResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultClosedHeatResistance (const DefaultClosedHeatResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultClosedHeatResistance (const DefaultClosedHeatResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultClosedHeatResistance (::std::unique_ptr< DefaultClosedHeatResistance_type > p);

          //@}

          /**
           * @name DefaultOpenHeatResistance
           *
           * @brief Accessor and modifier functions for the %DefaultOpenHeatResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatResistanceData DefaultOpenHeatResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultOpenHeatResistance_type > DefaultOpenHeatResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultOpenHeatResistance_type, char > DefaultOpenHeatResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultOpenHeatResistance_optional&
          DefaultOpenHeatResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultOpenHeatResistance_optional&
          DefaultOpenHeatResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultOpenHeatResistance (const DefaultOpenHeatResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultOpenHeatResistance (const DefaultOpenHeatResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultOpenHeatResistance (::std::unique_ptr< DefaultOpenHeatResistance_type > p);

          //@}

          /**
           * @name MachineClosedResistance
           *
           * @brief Accessor and modifier functions for the %MachineClosedResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MachineClosedResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MachineClosedResistance_type > MachineClosedResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MachineClosedResistance_type, char > MachineClosedResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MachineClosedResistance_optional&
          MachineClosedResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MachineClosedResistance_optional&
          MachineClosedResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MachineClosedResistance (const MachineClosedResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MachineClosedResistance (const MachineClosedResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MachineClosedResistance (::std::unique_ptr< MachineClosedResistance_type > p);

          //@}

          /**
           * @name MachineOpenResistance
           *
           * @brief Accessor and modifier functions for the %MachineOpenResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MachineOpenResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MachineOpenResistance_type > MachineOpenResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MachineOpenResistance_type, char > MachineOpenResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MachineOpenResistance_optional&
          MachineOpenResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MachineOpenResistance_optional&
          MachineOpenResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MachineOpenResistance (const MachineOpenResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MachineOpenResistance (const MachineOpenResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MachineOpenResistance (::std::unique_ptr< MachineOpenResistance_type > p);

          //@}

          /**
           * @name RespiratoryClosedResistance
           *
           * @brief Accessor and modifier functions for the %RespiratoryClosedResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RespiratoryClosedResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespiratoryClosedResistance_type > RespiratoryClosedResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryClosedResistance_type, char > RespiratoryClosedResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespiratoryClosedResistance_optional&
          RespiratoryClosedResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespiratoryClosedResistance_optional&
          RespiratoryClosedResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryClosedResistance (const RespiratoryClosedResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespiratoryClosedResistance (const RespiratoryClosedResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespiratoryClosedResistance (::std::unique_ptr< RespiratoryClosedResistance_type > p);

          //@}

          /**
           * @name RespiratoryOpenResistance
           *
           * @brief Accessor and modifier functions for the %RespiratoryOpenResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RespiratoryOpenResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespiratoryOpenResistance_type > RespiratoryOpenResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryOpenResistance_type, char > RespiratoryOpenResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespiratoryOpenResistance_optional&
          RespiratoryOpenResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespiratoryOpenResistance_optional&
          RespiratoryOpenResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryOpenResistance (const RespiratoryOpenResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespiratoryOpenResistance (const RespiratoryOpenResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespiratoryOpenResistance (::std::unique_ptr< RespiratoryOpenResistance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CircuitConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CircuitConfigurationData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitConfigurationData (const CircuitConfigurationData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CircuitConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitConfigurationData&
          operator= (const CircuitConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CircuitConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          CardiovascularOpenResistance_optional CardiovascularOpenResistance_;
          DefaultClosedElectricResistance_optional DefaultClosedElectricResistance_;
          DefaultOpenElectricResistance_optional DefaultOpenElectricResistance_;
          DefaultClosedFlowResistance_optional DefaultClosedFlowResistance_;
          DefaultOpenFlowResistance_optional DefaultOpenFlowResistance_;
          DefaultClosedHeatResistance_optional DefaultClosedHeatResistance_;
          DefaultOpenHeatResistance_optional DefaultOpenHeatResistance_;
          MachineClosedResistance_optional MachineClosedResistance_;
          MachineOpenResistance_optional MachineOpenResistance_;
          RespiratoryClosedResistance_optional RespiratoryClosedResistance_;
          RespiratoryOpenResistance_optional RespiratoryOpenResistance_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConstantsConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ConstantsConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name OxygenMetabolicConstant
           *
           * @brief Accessor and modifier functions for the %OxygenMetabolicConstant
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData OxygenMetabolicConstant_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenMetabolicConstant_type > OxygenMetabolicConstant_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenMetabolicConstant_type, char > OxygenMetabolicConstant_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenMetabolicConstant_optional&
          OxygenMetabolicConstant () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenMetabolicConstant_optional&
          OxygenMetabolicConstant ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenMetabolicConstant (const OxygenMetabolicConstant_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenMetabolicConstant (const OxygenMetabolicConstant_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenMetabolicConstant (::std::unique_ptr< OxygenMetabolicConstant_type > p);

          //@}

          /**
           * @name StefanBoltzmann
           *
           * @brief Accessor and modifier functions for the %StefanBoltzmann
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StefanBoltzmann_type > StefanBoltzmann_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StefanBoltzmann_type, char > StefanBoltzmann_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StefanBoltzmann_optional&
          StefanBoltzmann () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StefanBoltzmann_optional&
          StefanBoltzmann ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StefanBoltzmann (const StefanBoltzmann_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StefanBoltzmann (const StefanBoltzmann_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StefanBoltzmann (::std::unique_ptr< StefanBoltzmann_type > p);

          //@}

          /**
           * @name UniversalGasConstant
           *
           * @brief Accessor and modifier functions for the %UniversalGasConstant
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerAmountData UniversalGasConstant_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UniversalGasConstant_type > UniversalGasConstant_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UniversalGasConstant_type, char > UniversalGasConstant_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UniversalGasConstant_optional&
          UniversalGasConstant () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UniversalGasConstant_optional&
          UniversalGasConstant ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UniversalGasConstant (const UniversalGasConstant_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UniversalGasConstant (const UniversalGasConstant_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UniversalGasConstant (::std::unique_ptr< UniversalGasConstant_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConstantsConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConstantsConfigurationData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConstantsConfigurationData (const ConstantsConfigurationData& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConstantsConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConstantsConfigurationData&
          operator= (const ConstantsConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConstantsConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          OxygenMetabolicConstant_optional OxygenMetabolicConstant_;
          StefanBoltzmann_optional StefanBoltzmann_;
          UniversalGasConstant_optional UniversalGasConstant_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %DrugsConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API DrugsConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name PDModel
           *
           * @brief Accessor and modifier functions for the %PDModel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff PDModel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PDModel_type > PDModel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PDModel_type, char > PDModel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PDModel_optional&
          PDModel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PDModel_optional&
          PDModel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PDModel (const PDModel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PDModel (const PDModel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PDModel (::std::unique_ptr< PDModel_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          DrugsConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DrugsConfigurationData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugsConfigurationData (const DrugsConfigurationData& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual DrugsConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugsConfigurationData&
          operator= (const DrugsConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~DrugsConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          PDModel_optional PDModel_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %EnergyConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API EnergyConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name BodySpecificHeat
           *
           * @brief Accessor and modifier functions for the %BodySpecificHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerMassData BodySpecificHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BodySpecificHeat_type > BodySpecificHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BodySpecificHeat_type, char > BodySpecificHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BodySpecificHeat_optional&
          BodySpecificHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BodySpecificHeat_optional&
          BodySpecificHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BodySpecificHeat (const BodySpecificHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BodySpecificHeat (const BodySpecificHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BodySpecificHeat (::std::unique_ptr< BodySpecificHeat_type > p);

          //@}

          /**
           * @name CoreTemperatureLow
           *
           * @brief Accessor and modifier functions for the %CoreTemperatureLow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData CoreTemperatureLow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CoreTemperatureLow_type > CoreTemperatureLow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CoreTemperatureLow_type, char > CoreTemperatureLow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CoreTemperatureLow_optional&
          CoreTemperatureLow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CoreTemperatureLow_optional&
          CoreTemperatureLow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CoreTemperatureLow (const CoreTemperatureLow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CoreTemperatureLow (const CoreTemperatureLow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CoreTemperatureLow (::std::unique_ptr< CoreTemperatureLow_type > p);

          //@}

          /**
           * @name CoreTemperatureHigh
           *
           * @brief Accessor and modifier functions for the %CoreTemperatureHigh
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData CoreTemperatureHigh_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CoreTemperatureHigh_type > CoreTemperatureHigh_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CoreTemperatureHigh_type, char > CoreTemperatureHigh_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CoreTemperatureHigh_optional&
          CoreTemperatureHigh () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CoreTemperatureHigh_optional&
          CoreTemperatureHigh ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CoreTemperatureHigh (const CoreTemperatureHigh_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CoreTemperatureHigh (const CoreTemperatureHigh_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CoreTemperatureHigh (::std::unique_ptr< CoreTemperatureHigh_type > p);

          //@}

          /**
           * @name DeltaCoreTemperatureLow
           *
           * @brief Accessor and modifier functions for the %DeltaCoreTemperatureLow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData DeltaCoreTemperatureLow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DeltaCoreTemperatureLow_type > DeltaCoreTemperatureLow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DeltaCoreTemperatureLow_type, char > DeltaCoreTemperatureLow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DeltaCoreTemperatureLow_optional&
          DeltaCoreTemperatureLow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DeltaCoreTemperatureLow_optional&
          DeltaCoreTemperatureLow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DeltaCoreTemperatureLow (::std::unique_ptr< DeltaCoreTemperatureLow_type > p);

          //@}

          /**
           * @name EnergyPerATP
           *
           * @brief Accessor and modifier functions for the %EnergyPerATP
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyPerAmountData EnergyPerATP_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnergyPerATP_type > EnergyPerATP_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnergyPerATP_type, char > EnergyPerATP_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnergyPerATP_optional&
          EnergyPerATP () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnergyPerATP_optional&
          EnergyPerATP ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnergyPerATP (const EnergyPerATP_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnergyPerATP (const EnergyPerATP_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnergyPerATP (::std::unique_ptr< EnergyPerATP_type > p);

          //@}

          /**
           * @name SweatHeatTransfer
           *
           * @brief Accessor and modifier functions for the %SweatHeatTransfer
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatConductanceData SweatHeatTransfer_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SweatHeatTransfer_type > SweatHeatTransfer_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SweatHeatTransfer_type, char > SweatHeatTransfer_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SweatHeatTransfer_optional&
          SweatHeatTransfer () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SweatHeatTransfer_optional&
          SweatHeatTransfer ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SweatHeatTransfer (const SweatHeatTransfer_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SweatHeatTransfer (const SweatHeatTransfer_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SweatHeatTransfer (::std::unique_ptr< SweatHeatTransfer_type > p);

          //@}

          /**
           * @name VaporizationEnergy
           *
           * @brief Accessor and modifier functions for the %VaporizationEnergy
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarEnergyPerMassData VaporizationEnergy_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VaporizationEnergy_type > VaporizationEnergy_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VaporizationEnergy_type, char > VaporizationEnergy_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VaporizationEnergy_optional&
          VaporizationEnergy () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VaporizationEnergy_optional&
          VaporizationEnergy ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VaporizationEnergy (const VaporizationEnergy_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VaporizationEnergy (const VaporizationEnergy_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VaporizationEnergy (::std::unique_ptr< VaporizationEnergy_type > p);

          //@}

          /**
           * @name VaporSpecificHeat
           *
           * @brief Accessor and modifier functions for the %VaporSpecificHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerMassData VaporSpecificHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VaporSpecificHeat_type > VaporSpecificHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VaporSpecificHeat_type, char > VaporSpecificHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VaporSpecificHeat_optional&
          VaporSpecificHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VaporSpecificHeat_optional&
          VaporSpecificHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VaporSpecificHeat (const VaporSpecificHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VaporSpecificHeat (const VaporSpecificHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VaporSpecificHeat (::std::unique_ptr< VaporSpecificHeat_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          EnergyConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          EnergyConfigurationData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnergyConfigurationData (const EnergyConfigurationData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual EnergyConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnergyConfigurationData&
          operator= (const EnergyConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~EnergyConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          BodySpecificHeat_optional BodySpecificHeat_;
          CoreTemperatureLow_optional CoreTemperatureLow_;
          CoreTemperatureHigh_optional CoreTemperatureHigh_;
          DeltaCoreTemperatureLow_optional DeltaCoreTemperatureLow_;
          EnergyPerATP_optional EnergyPerATP_;
          SweatHeatTransfer_optional SweatHeatTransfer_;
          VaporizationEnergy_optional VaporizationEnergy_;
          VaporSpecificHeat_optional VaporSpecificHeat_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %EnvironmentConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API EnvironmentConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name AirDensity
           *
           * @brief Accessor and modifier functions for the %AirDensity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData AirDensity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AirDensity_type > AirDensity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AirDensity_type, char > AirDensity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AirDensity_optional&
          AirDensity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AirDensity_optional&
          AirDensity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AirDensity (const AirDensity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AirDensity (const AirDensity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AirDensity (::std::unique_ptr< AirDensity_type > p);

          //@}

          /**
           * @name AirSpecificHeat
           *
           * @brief Accessor and modifier functions for the %AirSpecificHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerMassData AirSpecificHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AirSpecificHeat_type > AirSpecificHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AirSpecificHeat_type, char > AirSpecificHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AirSpecificHeat_optional&
          AirSpecificHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AirSpecificHeat_optional&
          AirSpecificHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AirSpecificHeat (const AirSpecificHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AirSpecificHeat (const AirSpecificHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AirSpecificHeat (::std::unique_ptr< AirSpecificHeat_type > p);

          //@}

          /**
           * @name MolarMassOfDryAir
           *
           * @brief Accessor and modifier functions for the %MolarMassOfDryAir
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAmountData MolarMassOfDryAir_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MolarMassOfDryAir_type > MolarMassOfDryAir_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MolarMassOfDryAir_type, char > MolarMassOfDryAir_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MolarMassOfDryAir_optional&
          MolarMassOfDryAir () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MolarMassOfDryAir_optional&
          MolarMassOfDryAir ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MolarMassOfDryAir (const MolarMassOfDryAir_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MolarMassOfDryAir (const MolarMassOfDryAir_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MolarMassOfDryAir (::std::unique_ptr< MolarMassOfDryAir_type > p);

          //@}

          /**
           * @name MolarMassOfWaterVapor
           *
           * @brief Accessor and modifier functions for the %MolarMassOfWaterVapor
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAmountData MolarMassOfWaterVapor_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MolarMassOfWaterVapor_type > MolarMassOfWaterVapor_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MolarMassOfWaterVapor_type, char > MolarMassOfWaterVapor_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MolarMassOfWaterVapor_optional&
          MolarMassOfWaterVapor () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MolarMassOfWaterVapor_optional&
          MolarMassOfWaterVapor ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MolarMassOfWaterVapor (const MolarMassOfWaterVapor_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MolarMassOfWaterVapor (const MolarMassOfWaterVapor_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MolarMassOfWaterVapor (::std::unique_ptr< MolarMassOfWaterVapor_type > p);

          //@}

          /**
           * @name InitialEnvironmentalConditions
           *
           * @brief Accessor and modifier functions for the %InitialEnvironmentalConditions
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData InitialEnvironmentalConditions_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InitialEnvironmentalConditions_type > InitialEnvironmentalConditions_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialEnvironmentalConditions_type, char > InitialEnvironmentalConditions_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InitialEnvironmentalConditions_optional&
          InitialEnvironmentalConditions () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InitialEnvironmentalConditions_optional&
          InitialEnvironmentalConditions ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialEnvironmentalConditions (const InitialEnvironmentalConditions_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InitialEnvironmentalConditions (const InitialEnvironmentalConditions_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InitialEnvironmentalConditions (::std::unique_ptr< InitialEnvironmentalConditions_type > p);

          //@}

          /**
           * @name InitialEnvironmentalConditionsFile
           *
           * @brief Accessor and modifier functions for the %InitialEnvironmentalConditionsFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string InitialEnvironmentalConditionsFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InitialEnvironmentalConditionsFile_type > InitialEnvironmentalConditionsFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialEnvironmentalConditionsFile_type, char > InitialEnvironmentalConditionsFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InitialEnvironmentalConditionsFile_optional&
          InitialEnvironmentalConditionsFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InitialEnvironmentalConditionsFile_optional&
          InitialEnvironmentalConditionsFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InitialEnvironmentalConditionsFile (::std::unique_ptr< InitialEnvironmentalConditionsFile_type > p);

          //@}

          /**
           * @name WaterDensity
           *
           * @brief Accessor and modifier functions for the %WaterDensity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData WaterDensity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WaterDensity_type > WaterDensity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WaterDensity_type, char > WaterDensity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WaterDensity_optional&
          WaterDensity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WaterDensity_optional&
          WaterDensity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WaterDensity (const WaterDensity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WaterDensity (const WaterDensity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WaterDensity (::std::unique_ptr< WaterDensity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          EnvironmentConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          EnvironmentConfigurationData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnvironmentConfigurationData (const EnvironmentConfigurationData& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual EnvironmentConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnvironmentConfigurationData&
          operator= (const EnvironmentConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~EnvironmentConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          AirDensity_optional AirDensity_;
          AirSpecificHeat_optional AirSpecificHeat_;
          MolarMassOfDryAir_optional MolarMassOfDryAir_;
          MolarMassOfWaterVapor_optional MolarMassOfWaterVapor_;
          InitialEnvironmentalConditions_optional InitialEnvironmentalConditions_;
          InitialEnvironmentalConditionsFile_optional InitialEnvironmentalConditionsFile_;
          WaterDensity_optional WaterDensity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %GastrointestinalConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API GastrointestinalConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name CalciumAbsorptionFraction
           *
           * @brief Accessor and modifier functions for the %CalciumAbsorptionFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CalciumAbsorptionFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CalciumAbsorptionFraction_type > CalciumAbsorptionFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CalciumAbsorptionFraction_type, char > CalciumAbsorptionFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CalciumAbsorptionFraction_optional&
          CalciumAbsorptionFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CalciumAbsorptionFraction_optional&
          CalciumAbsorptionFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CalciumAbsorptionFraction (const CalciumAbsorptionFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CalciumAbsorptionFraction (const CalciumAbsorptionFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CalciumAbsorptionFraction (::std::unique_ptr< CalciumAbsorptionFraction_type > p);

          //@}

          /**
           * @name CalciumDigestionRate
           *
           * @brief Accessor and modifier functions for the %CalciumDigestionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerTimeData CalciumDigestionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CalciumDigestionRate_type > CalciumDigestionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CalciumDigestionRate_type, char > CalciumDigestionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CalciumDigestionRate_optional&
          CalciumDigestionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CalciumDigestionRate_optional&
          CalciumDigestionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CalciumDigestionRate (const CalciumDigestionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CalciumDigestionRate (const CalciumDigestionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CalciumDigestionRate (::std::unique_ptr< CalciumDigestionRate_type > p);

          //@}

          /**
           * @name CarbohydrateAbsorptionFraction
           *
           * @brief Accessor and modifier functions for the %CarbohydrateAbsorptionFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbohydrateAbsorptionFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbohydrateAbsorptionFraction_type > CarbohydrateAbsorptionFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbohydrateAbsorptionFraction_type, char > CarbohydrateAbsorptionFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbohydrateAbsorptionFraction_optional&
          CarbohydrateAbsorptionFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbohydrateAbsorptionFraction_optional&
          CarbohydrateAbsorptionFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbohydrateAbsorptionFraction (const CarbohydrateAbsorptionFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbohydrateAbsorptionFraction (const CarbohydrateAbsorptionFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbohydrateAbsorptionFraction (::std::unique_ptr< CarbohydrateAbsorptionFraction_type > p);

          //@}

          /**
           * @name DefaultStomachContents
           *
           * @brief Accessor and modifier functions for the %DefaultStomachContents
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::NutritionData DefaultStomachContents_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultStomachContents_type > DefaultStomachContents_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultStomachContents_type, char > DefaultStomachContents_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultStomachContents_optional&
          DefaultStomachContents () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultStomachContents_optional&
          DefaultStomachContents ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultStomachContents (const DefaultStomachContents_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultStomachContents (const DefaultStomachContents_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultStomachContents (::std::unique_ptr< DefaultStomachContents_type > p);

          //@}

          /**
           * @name DefaultStomachContentsFile
           *
           * @brief Accessor and modifier functions for the %DefaultStomachContentsFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string DefaultStomachContentsFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DefaultStomachContentsFile_type > DefaultStomachContentsFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultStomachContentsFile_type, char > DefaultStomachContentsFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DefaultStomachContentsFile_optional&
          DefaultStomachContentsFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DefaultStomachContentsFile_optional&
          DefaultStomachContentsFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultStomachContentsFile (const DefaultStomachContentsFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DefaultStomachContentsFile (const DefaultStomachContentsFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DefaultStomachContentsFile (::std::unique_ptr< DefaultStomachContentsFile_type > p);

          //@}

          /**
           * @name FatAbsorptionFraction
           *
           * @brief Accessor and modifier functions for the %FatAbsorptionFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FatAbsorptionFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FatAbsorptionFraction_type > FatAbsorptionFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatAbsorptionFraction_type, char > FatAbsorptionFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FatAbsorptionFraction_optional&
          FatAbsorptionFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FatAbsorptionFraction_optional&
          FatAbsorptionFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatAbsorptionFraction (const FatAbsorptionFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FatAbsorptionFraction (const FatAbsorptionFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FatAbsorptionFraction (::std::unique_ptr< FatAbsorptionFraction_type > p);

          //@}

          /**
           * @name ProteinToUreaFraction
           *
           * @brief Accessor and modifier functions for the %ProteinToUreaFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData ProteinToUreaFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ProteinToUreaFraction_type > ProteinToUreaFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ProteinToUreaFraction_type, char > ProteinToUreaFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ProteinToUreaFraction_optional&
          ProteinToUreaFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ProteinToUreaFraction_optional&
          ProteinToUreaFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ProteinToUreaFraction (const ProteinToUreaFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ProteinToUreaFraction (const ProteinToUreaFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ProteinToUreaFraction (::std::unique_ptr< ProteinToUreaFraction_type > p);

          //@}

          /**
           * @name WaterDigestionRate
           *
           * @brief Accessor and modifier functions for the %WaterDigestionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData WaterDigestionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WaterDigestionRate_type > WaterDigestionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WaterDigestionRate_type, char > WaterDigestionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WaterDigestionRate_optional&
          WaterDigestionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WaterDigestionRate_optional&
          WaterDigestionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WaterDigestionRate (const WaterDigestionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WaterDigestionRate (const WaterDigestionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WaterDigestionRate (::std::unique_ptr< WaterDigestionRate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          GastrointestinalConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GastrointestinalConfigurationData (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GastrointestinalConfigurationData (const GastrointestinalConfigurationData& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual GastrointestinalConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GastrointestinalConfigurationData&
          operator= (const GastrointestinalConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~GastrointestinalConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          CalciumAbsorptionFraction_optional CalciumAbsorptionFraction_;
          CalciumDigestionRate_optional CalciumDigestionRate_;
          CarbohydrateAbsorptionFraction_optional CarbohydrateAbsorptionFraction_;
          DefaultStomachContents_optional DefaultStomachContents_;
          DefaultStomachContentsFile_optional DefaultStomachContentsFile_;
          FatAbsorptionFraction_optional FatAbsorptionFraction_;
          ProteinToUreaFraction_optional ProteinToUreaFraction_;
          WaterDigestionRate_optional WaterDigestionRate_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %NervousConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API NervousConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name EnableCerebral
           *
           * @brief Accessor and modifier functions for the %EnableCerebral
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff EnableCerebral_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnableCerebral_type > EnableCerebral_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnableCerebral_type, char > EnableCerebral_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnableCerebral_optional&
          EnableCerebral () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnableCerebral_optional&
          EnableCerebral ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnableCerebral (const EnableCerebral_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnableCerebral (const EnableCerebral_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnableCerebral (::std::unique_ptr< EnableCerebral_type > p);

          //@}

          /**
           * @name PupilDiameterBaseline
           *
           * @brief Accessor and modifier functions for the %PupilDiameterBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarLengthData PupilDiameterBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PupilDiameterBaseline_type > PupilDiameterBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PupilDiameterBaseline_type, char > PupilDiameterBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PupilDiameterBaseline_optional&
          PupilDiameterBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PupilDiameterBaseline_optional&
          PupilDiameterBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PupilDiameterBaseline (const PupilDiameterBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PupilDiameterBaseline (const PupilDiameterBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PupilDiameterBaseline (::std::unique_ptr< PupilDiameterBaseline_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          NervousConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NervousConfigurationData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NervousConfigurationData (const NervousConfigurationData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual NervousConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NervousConfigurationData&
          operator= (const NervousConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~NervousConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          EnableCerebral_optional EnableCerebral_;
          PupilDiameterBaseline_optional PupilDiameterBaseline_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RenalConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API RenalConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name EnableRenal
           *
           * @brief Accessor and modifier functions for the %EnableRenal
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff EnableRenal_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnableRenal_type > EnableRenal_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnableRenal_type, char > EnableRenal_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnableRenal_optional&
          EnableRenal () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnableRenal_optional&
          EnableRenal ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnableRenal (const EnableRenal_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnableRenal (const EnableRenal_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnableRenal (::std::unique_ptr< EnableRenal_type > p);

          //@}

          /**
           * @name PlasmaSodiumConcentrationSetPoint
           *
           * @brief Accessor and modifier functions for the %PlasmaSodiumConcentrationSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlasmaSodiumConcentrationSetPoint_type > PlasmaSodiumConcentrationSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlasmaSodiumConcentrationSetPoint_type, char > PlasmaSodiumConcentrationSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlasmaSodiumConcentrationSetPoint_optional&
          PlasmaSodiumConcentrationSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlasmaSodiumConcentrationSetPoint_optional&
          PlasmaSodiumConcentrationSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlasmaSodiumConcentrationSetPoint (::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > p);

          //@}

          /**
           * @name LeftGlomerularFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFilteringSurfaceAreaBaseline_type > LeftGlomerularFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFilteringSurfaceAreaBaseline_type, char > LeftGlomerularFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFilteringSurfaceAreaBaseline_optional&
          LeftGlomerularFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFilteringSurfaceAreaBaseline_optional&
          LeftGlomerularFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name LeftGlomerularFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LeftGlomerularFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFluidPermeabilityBaseline_type > LeftGlomerularFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFluidPermeabilityBaseline_type, char > LeftGlomerularFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFluidPermeabilityBaseline_optional&
          LeftGlomerularFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFluidPermeabilityBaseline_optional&
          LeftGlomerularFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFluidPermeabilityBaseline (::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type, char > LeftTubularReabsorptionFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LeftTubularReabsorptionFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFluidPermeabilityBaseline_type > LeftTubularReabsorptionFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFluidPermeabilityBaseline_type, char > LeftTubularReabsorptionFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFluidPermeabilityBaseline_optional&
          LeftTubularReabsorptionFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFluidPermeabilityBaseline_optional&
          LeftTubularReabsorptionFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name MaximumAfferentResistance
           *
           * @brief Accessor and modifier functions for the %MaximumAfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MaximumAfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MaximumAfferentResistance_type > MaximumAfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumAfferentResistance_type, char > MaximumAfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MaximumAfferentResistance_optional&
          MaximumAfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MaximumAfferentResistance_optional&
          MaximumAfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumAfferentResistance (const MaximumAfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MaximumAfferentResistance (const MaximumAfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MaximumAfferentResistance (::std::unique_ptr< MaximumAfferentResistance_type > p);

          //@}

          /**
           * @name MinimumAfferentResistance
           *
           * @brief Accessor and modifier functions for the %MinimumAfferentResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData MinimumAfferentResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MinimumAfferentResistance_type > MinimumAfferentResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumAfferentResistance_type, char > MinimumAfferentResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MinimumAfferentResistance_optional&
          MinimumAfferentResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MinimumAfferentResistance_optional&
          MinimumAfferentResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumAfferentResistance (const MinimumAfferentResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MinimumAfferentResistance (const MinimumAfferentResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MinimumAfferentResistance (::std::unique_ptr< MinimumAfferentResistance_type > p);

          //@}

          /**
           * @name RightGlomerularFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFilteringSurfaceAreaBaseline_type > RightGlomerularFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFilteringSurfaceAreaBaseline_type, char > RightGlomerularFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFilteringSurfaceAreaBaseline_optional&
          RightGlomerularFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFilteringSurfaceAreaBaseline_optional&
          RightGlomerularFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name RightGlomerularFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RightGlomerularFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFluidPermeabilityBaseline_type > RightGlomerularFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFluidPermeabilityBaseline_type, char > RightGlomerularFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFluidPermeabilityBaseline_optional&
          RightGlomerularFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFluidPermeabilityBaseline_optional&
          RightGlomerularFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFluidPermeabilityBaseline (::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFilteringSurfaceAreaBaseline
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFilteringSurfaceAreaBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type, char > RightTubularReabsorptionFilteringSurfaceAreaBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          RightTubularReabsorptionFilteringSurfaceAreaBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional&
          RightTubularReabsorptionFilteringSurfaceAreaBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFluidPermeabilityBaseline
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFluidPermeabilityBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RightTubularReabsorptionFluidPermeabilityBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFluidPermeabilityBaseline_type > RightTubularReabsorptionFluidPermeabilityBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFluidPermeabilityBaseline_type, char > RightTubularReabsorptionFluidPermeabilityBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFluidPermeabilityBaseline_optional&
          RightTubularReabsorptionFluidPermeabilityBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFluidPermeabilityBaseline_optional&
          RightTubularReabsorptionFluidPermeabilityBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > p);

          //@}

          /**
           * @name TargetSodiumDelivery
           *
           * @brief Accessor and modifier functions for the %TargetSodiumDelivery
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerTimeData TargetSodiumDelivery_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TargetSodiumDelivery_type > TargetSodiumDelivery_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TargetSodiumDelivery_type, char > TargetSodiumDelivery_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TargetSodiumDelivery_optional&
          TargetSodiumDelivery () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TargetSodiumDelivery_optional&
          TargetSodiumDelivery ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TargetSodiumDelivery (const TargetSodiumDelivery_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TargetSodiumDelivery (const TargetSodiumDelivery_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TargetSodiumDelivery (::std::unique_ptr< TargetSodiumDelivery_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RenalConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RenalConfigurationData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalConfigurationData (const RenalConfigurationData& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RenalConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalConfigurationData&
          operator= (const RenalConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RenalConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          EnableRenal_optional EnableRenal_;
          PlasmaSodiumConcentrationSetPoint_optional PlasmaSodiumConcentrationSetPoint_;
          LeftGlomerularFilteringSurfaceAreaBaseline_optional LeftGlomerularFilteringSurfaceAreaBaseline_;
          LeftGlomerularFluidPermeabilityBaseline_optional LeftGlomerularFluidPermeabilityBaseline_;
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
          LeftTubularReabsorptionFluidPermeabilityBaseline_optional LeftTubularReabsorptionFluidPermeabilityBaseline_;
          MaximumAfferentResistance_optional MaximumAfferentResistance_;
          MinimumAfferentResistance_optional MinimumAfferentResistance_;
          RightGlomerularFilteringSurfaceAreaBaseline_optional RightGlomerularFilteringSurfaceAreaBaseline_;
          RightGlomerularFluidPermeabilityBaseline_optional RightGlomerularFluidPermeabilityBaseline_;
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
          RightTubularReabsorptionFluidPermeabilityBaseline_optional RightTubularReabsorptionFluidPermeabilityBaseline_;
          TargetSodiumDelivery_optional TargetSodiumDelivery_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RespiratoryConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API RespiratoryConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name PleuralComplianceSensitivity
           *
           * @brief Accessor and modifier functions for the %PleuralComplianceSensitivity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarInverseVolumeData PleuralComplianceSensitivity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PleuralComplianceSensitivity_type > PleuralComplianceSensitivity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PleuralComplianceSensitivity_type, char > PleuralComplianceSensitivity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PleuralComplianceSensitivity_optional&
          PleuralComplianceSensitivity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PleuralComplianceSensitivity_optional&
          PleuralComplianceSensitivity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PleuralComplianceSensitivity (const PleuralComplianceSensitivity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PleuralComplianceSensitivity (const PleuralComplianceSensitivity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PleuralComplianceSensitivity (::std::unique_ptr< PleuralComplianceSensitivity_type > p);

          //@}

          /**
           * @name PulmonaryVentilationRateMaximum
           *
           * @brief Accessor and modifier functions for the %PulmonaryVentilationRateMaximum
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData PulmonaryVentilationRateMaximum_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVentilationRateMaximum_type > PulmonaryVentilationRateMaximum_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVentilationRateMaximum_type, char > PulmonaryVentilationRateMaximum_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVentilationRateMaximum_optional&
          PulmonaryVentilationRateMaximum () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVentilationRateMaximum_optional&
          PulmonaryVentilationRateMaximum ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVentilationRateMaximum (::std::unique_ptr< PulmonaryVentilationRateMaximum_type > p);

          //@}

          /**
           * @name VentilatoryOcclusionPressure
           *
           * @brief Accessor and modifier functions for the %VentilatoryOcclusionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VentilatoryOcclusionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VentilatoryOcclusionPressure_type > VentilatoryOcclusionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilatoryOcclusionPressure_type, char > VentilatoryOcclusionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VentilatoryOcclusionPressure_optional&
          VentilatoryOcclusionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VentilatoryOcclusionPressure_optional&
          VentilatoryOcclusionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VentilatoryOcclusionPressure (::std::unique_ptr< VentilatoryOcclusionPressure_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RespiratoryConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RespiratoryConfigurationData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RespiratoryConfigurationData (const RespiratoryConfigurationData& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RespiratoryConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RespiratoryConfigurationData&
          operator= (const RespiratoryConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RespiratoryConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          PleuralComplianceSensitivity_optional PleuralComplianceSensitivity_;
          PulmonaryVentilationRateMaximum_optional PulmonaryVentilationRateMaximum_;
          VentilatoryOcclusionPressure_optional VentilatoryOcclusionPressure_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TissueConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TissueConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name EnableTissue
           *
           * @brief Accessor and modifier functions for the %EnableTissue
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff EnableTissue_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnableTissue_type > EnableTissue_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnableTissue_type, char > EnableTissue_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnableTissue_optional&
          EnableTissue () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnableTissue_optional&
          EnableTissue ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnableTissue (const EnableTissue_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnableTissue (const EnableTissue_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnableTissue (::std::unique_ptr< EnableTissue_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TissueConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TissueConfigurationData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueConfigurationData (const TissueConfigurationData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TissueConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueConfigurationData&
          operator= (const TissueConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TissueConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          EnableTissue_optional EnableTissue_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BioGearsConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsConfigurationData: public ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData
        {
          public:
          /**
           * @name BloodChemistryConfiguration
           *
           * @brief Accessor and modifier functions for the %BloodChemistryConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::BloodChemistryConfigurationData BloodChemistryConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodChemistryConfiguration_type > BloodChemistryConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodChemistryConfiguration_type, char > BloodChemistryConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodChemistryConfiguration_optional&
          BloodChemistryConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodChemistryConfiguration_optional&
          BloodChemistryConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodChemistryConfiguration (const BloodChemistryConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodChemistryConfiguration (const BloodChemistryConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodChemistryConfiguration (::std::unique_ptr< BloodChemistryConfiguration_type > p);

          //@}

          /**
           * @name CardiovascularConfiguration
           *
           * @brief Accessor and modifier functions for the %CardiovascularConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::CardiovascularConfigurationData CardiovascularConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CardiovascularConfiguration_type > CardiovascularConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiovascularConfiguration_type, char > CardiovascularConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CardiovascularConfiguration_optional&
          CardiovascularConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CardiovascularConfiguration_optional&
          CardiovascularConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiovascularConfiguration (const CardiovascularConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CardiovascularConfiguration (const CardiovascularConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CardiovascularConfiguration (::std::unique_ptr< CardiovascularConfiguration_type > p);

          //@}

          /**
           * @name CircuitConfiguration
           *
           * @brief Accessor and modifier functions for the %CircuitConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::CircuitConfigurationData CircuitConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CircuitConfiguration_type > CircuitConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CircuitConfiguration_type, char > CircuitConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CircuitConfiguration_optional&
          CircuitConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CircuitConfiguration_optional&
          CircuitConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CircuitConfiguration (const CircuitConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CircuitConfiguration (const CircuitConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CircuitConfiguration (::std::unique_ptr< CircuitConfiguration_type > p);

          //@}

          /**
           * @name ConstantsConfiguration
           *
           * @brief Accessor and modifier functions for the %ConstantsConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ConstantsConfigurationData ConstantsConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ConstantsConfiguration_type > ConstantsConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConstantsConfiguration_type, char > ConstantsConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ConstantsConfiguration_optional&
          ConstantsConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ConstantsConfiguration_optional&
          ConstantsConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConstantsConfiguration (const ConstantsConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ConstantsConfiguration (const ConstantsConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ConstantsConfiguration (::std::unique_ptr< ConstantsConfiguration_type > p);

          //@}

          /**
           * @name DrugsConfiguration
           *
           * @brief Accessor and modifier functions for the %DrugsConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::DrugsConfigurationData DrugsConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DrugsConfiguration_type > DrugsConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DrugsConfiguration_type, char > DrugsConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DrugsConfiguration_optional&
          DrugsConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DrugsConfiguration_optional&
          DrugsConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DrugsConfiguration (const DrugsConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DrugsConfiguration (const DrugsConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DrugsConfiguration (::std::unique_ptr< DrugsConfiguration_type > p);

          //@}

          /**
           * @name EnergyConfiguration
           *
           * @brief Accessor and modifier functions for the %EnergyConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::EnergyConfigurationData EnergyConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnergyConfiguration_type > EnergyConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnergyConfiguration_type, char > EnergyConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnergyConfiguration_optional&
          EnergyConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnergyConfiguration_optional&
          EnergyConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnergyConfiguration (const EnergyConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnergyConfiguration (const EnergyConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnergyConfiguration (::std::unique_ptr< EnergyConfiguration_type > p);

          //@}

          /**
           * @name EnvironmentConfiguration
           *
           * @brief Accessor and modifier functions for the %EnvironmentConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::EnvironmentConfigurationData EnvironmentConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnvironmentConfiguration_type > EnvironmentConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnvironmentConfiguration_type, char > EnvironmentConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnvironmentConfiguration_optional&
          EnvironmentConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnvironmentConfiguration_optional&
          EnvironmentConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnvironmentConfiguration (const EnvironmentConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnvironmentConfiguration (const EnvironmentConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnvironmentConfiguration (::std::unique_ptr< EnvironmentConfiguration_type > p);

          //@}

          /**
           * @name GastrointestinalConfiguration
           *
           * @brief Accessor and modifier functions for the %GastrointestinalConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::GastrointestinalConfigurationData GastrointestinalConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GastrointestinalConfiguration_type > GastrointestinalConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GastrointestinalConfiguration_type, char > GastrointestinalConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GastrointestinalConfiguration_optional&
          GastrointestinalConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GastrointestinalConfiguration_optional&
          GastrointestinalConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GastrointestinalConfiguration (const GastrointestinalConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GastrointestinalConfiguration (const GastrointestinalConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GastrointestinalConfiguration (::std::unique_ptr< GastrointestinalConfiguration_type > p);

          //@}

          /**
           * @name NervousConfiguration
           *
           * @brief Accessor and modifier functions for the %NervousConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::NervousConfigurationData NervousConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NervousConfiguration_type > NervousConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NervousConfiguration_type, char > NervousConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NervousConfiguration_optional&
          NervousConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NervousConfiguration_optional&
          NervousConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NervousConfiguration (const NervousConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NervousConfiguration (const NervousConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NervousConfiguration (::std::unique_ptr< NervousConfiguration_type > p);

          //@}

          /**
           * @name RenalConfiguration
           *
           * @brief Accessor and modifier functions for the %RenalConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RenalConfigurationData RenalConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalConfiguration_type > RenalConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalConfiguration_type, char > RenalConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalConfiguration_optional&
          RenalConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalConfiguration_optional&
          RenalConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalConfiguration (const RenalConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalConfiguration (const RenalConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalConfiguration (::std::unique_ptr< RenalConfiguration_type > p);

          //@}

          /**
           * @name RespiratoryConfiguration
           *
           * @brief Accessor and modifier functions for the %RespiratoryConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RespiratoryConfigurationData RespiratoryConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespiratoryConfiguration_type > RespiratoryConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryConfiguration_type, char > RespiratoryConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespiratoryConfiguration_optional&
          RespiratoryConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespiratoryConfiguration_optional&
          RespiratoryConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryConfiguration (const RespiratoryConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespiratoryConfiguration (const RespiratoryConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespiratoryConfiguration (::std::unique_ptr< RespiratoryConfiguration_type > p);

          //@}

          /**
           * @name TissueConfiguration
           *
           * @brief Accessor and modifier functions for the %TissueConfiguration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::TissueConfigurationData TissueConfiguration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueConfiguration_type > TissueConfiguration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueConfiguration_type, char > TissueConfiguration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueConfiguration_optional&
          TissueConfiguration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueConfiguration_optional&
          TissueConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueConfiguration (const TissueConfiguration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueConfiguration (const TissueConfiguration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueConfiguration (::std::unique_ptr< TissueConfiguration_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsConfigurationData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsConfigurationData (const BioGearsConfigurationData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsConfigurationData&
          operator= (const BioGearsConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          BloodChemistryConfiguration_optional BloodChemistryConfiguration_;
          CardiovascularConfiguration_optional CardiovascularConfiguration_;
          CircuitConfiguration_optional CircuitConfiguration_;
          ConstantsConfiguration_optional ConstantsConfiguration_;
          DrugsConfiguration_optional DrugsConfiguration_;
          EnergyConfiguration_optional EnergyConfiguration_;
          EnvironmentConfiguration_optional EnvironmentConfiguration_;
          GastrointestinalConfiguration_optional GastrointestinalConfiguration_;
          NervousConfiguration_optional NervousConfiguration_;
          RenalConfiguration_optional RenalConfiguration_;
          RespiratoryConfiguration_optional RespiratoryConfiguration_;
          TissueConfiguration_optional TissueConfiguration_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BloodChemistryConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CardiovascularConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CircuitConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ConstantsConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const DrugsConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const EnergyConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const EnvironmentConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const GastrointestinalConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const NervousConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const RenalConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const RespiratoryConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TissueConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsConfigurationData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        /**
         * @name Parsing functions for the %BioGearsConfiguration document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BloodChemistryConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CardiovascularConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CircuitConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ConstantsConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const DrugsConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const EnergyConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const EnvironmentConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const GastrointestinalConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const NervousConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const RenalConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const RespiratoryConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TissueConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsConfigurationData&);

        /**
         * @name Serialization functions for the %BioGearsConfiguration document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        BioGearsConfiguration (::xercesc::DOMDocument& d,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x,
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        BioGearsConfiguration (const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

        //@}
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__BIOGEARS_BIO_GEARS_CONFIGURATION_HXX
