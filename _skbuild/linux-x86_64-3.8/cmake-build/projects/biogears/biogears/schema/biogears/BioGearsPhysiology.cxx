// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BioGearsPhysiology.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsBloodChemistrySystemData
        // 

        const BioGearsBloodChemistrySystemData::ArterialOxygenAverage_mmHg_type& BioGearsBloodChemistrySystemData::
        ArterialOxygenAverage_mmHg () const
        {
          return this->ArterialOxygenAverage_mmHg_.get ();
        }

        BioGearsBloodChemistrySystemData::ArterialOxygenAverage_mmHg_type& BioGearsBloodChemistrySystemData::
        ArterialOxygenAverage_mmHg ()
        {
          return this->ArterialOxygenAverage_mmHg_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        ArterialOxygenAverage_mmHg (const ArterialOxygenAverage_mmHg_type& x)
        {
          this->ArterialOxygenAverage_mmHg_.set (x);
        }

        void BioGearsBloodChemistrySystemData::
        ArterialOxygenAverage_mmHg (::std::unique_ptr< ArterialOxygenAverage_mmHg_type > x)
        {
          this->ArterialOxygenAverage_mmHg_.set (std::move (x));
        }

        const BioGearsBloodChemistrySystemData::ArterialCarbonDioxideAverage_mmHg_type& BioGearsBloodChemistrySystemData::
        ArterialCarbonDioxideAverage_mmHg () const
        {
          return this->ArterialCarbonDioxideAverage_mmHg_.get ();
        }

        BioGearsBloodChemistrySystemData::ArterialCarbonDioxideAverage_mmHg_type& BioGearsBloodChemistrySystemData::
        ArterialCarbonDioxideAverage_mmHg ()
        {
          return this->ArterialCarbonDioxideAverage_mmHg_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        ArterialCarbonDioxideAverage_mmHg (const ArterialCarbonDioxideAverage_mmHg_type& x)
        {
          this->ArterialCarbonDioxideAverage_mmHg_.set (x);
        }

        void BioGearsBloodChemistrySystemData::
        ArterialCarbonDioxideAverage_mmHg (::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > x)
        {
          this->ArterialCarbonDioxideAverage_mmHg_.set (std::move (x));
        }

        const BioGearsBloodChemistrySystemData::RhFactorMismatch_ct_type& BioGearsBloodChemistrySystemData::
        RhFactorMismatch_ct () const
        {
          return this->RhFactorMismatch_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::RhFactorMismatch_ct_type& BioGearsBloodChemistrySystemData::
        RhFactorMismatch_ct ()
        {
          return this->RhFactorMismatch_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        RhFactorMismatch_ct (const RhFactorMismatch_ct_type& x)
        {
          this->RhFactorMismatch_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::RhTransfusionReactionVolume_mL_type& BioGearsBloodChemistrySystemData::
        RhTransfusionReactionVolume_mL () const
        {
          return this->RhTransfusionReactionVolume_mL_.get ();
        }

        BioGearsBloodChemistrySystemData::RhTransfusionReactionVolume_mL_type& BioGearsBloodChemistrySystemData::
        RhTransfusionReactionVolume_mL ()
        {
          return this->RhTransfusionReactionVolume_mL_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        RhTransfusionReactionVolume_mL (const RhTransfusionReactionVolume_mL_type& x)
        {
          this->RhTransfusionReactionVolume_mL_.set (x);
        }

        const BioGearsBloodChemistrySystemData::DonorRBC_ct_type& BioGearsBloodChemistrySystemData::
        DonorRBC_ct () const
        {
          return this->DonorRBC_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::DonorRBC_ct_type& BioGearsBloodChemistrySystemData::
        DonorRBC_ct ()
        {
          return this->DonorRBC_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        DonorRBC_ct (const DonorRBC_ct_type& x)
        {
          this->DonorRBC_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::PatientRBC_ct_type& BioGearsBloodChemistrySystemData::
        PatientRBC_ct () const
        {
          return this->PatientRBC_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::PatientRBC_ct_type& BioGearsBloodChemistrySystemData::
        PatientRBC_ct ()
        {
          return this->PatientRBC_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        PatientRBC_ct (const PatientRBC_ct_type& x)
        {
          this->PatientRBC_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::TwoCellAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        TwoCellAgglutinates_ct () const
        {
          return this->TwoCellAgglutinates_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::TwoCellAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        TwoCellAgglutinates_ct ()
        {
          return this->TwoCellAgglutinates_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        TwoCellAgglutinates_ct (const TwoCellAgglutinates_ct_type& x)
        {
          this->TwoCellAgglutinates_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::ThreeCellPatAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        ThreeCellPatAgglutinates_ct () const
        {
          return this->ThreeCellPatAgglutinates_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::ThreeCellPatAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        ThreeCellPatAgglutinates_ct ()
        {
          return this->ThreeCellPatAgglutinates_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        ThreeCellPatAgglutinates_ct (const ThreeCellPatAgglutinates_ct_type& x)
        {
          this->ThreeCellPatAgglutinates_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::ThreeCellDonAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        ThreeCellDonAgglutinates_ct () const
        {
          return this->ThreeCellDonAgglutinates_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::ThreeCellDonAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        ThreeCellDonAgglutinates_ct ()
        {
          return this->ThreeCellDonAgglutinates_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        ThreeCellDonAgglutinates_ct (const ThreeCellDonAgglutinates_ct_type& x)
        {
          this->ThreeCellDonAgglutinates_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::FourCellAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        FourCellAgglutinates_ct () const
        {
          return this->FourCellAgglutinates_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::FourCellAgglutinates_ct_type& BioGearsBloodChemistrySystemData::
        FourCellAgglutinates_ct ()
        {
          return this->FourCellAgglutinates_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        FourCellAgglutinates_ct (const FourCellAgglutinates_ct_type& x)
        {
          this->FourCellAgglutinates_ct_.set (x);
        }

        const BioGearsBloodChemistrySystemData::RemovedRBC_ct_type& BioGearsBloodChemistrySystemData::
        RemovedRBC_ct () const
        {
          return this->RemovedRBC_ct_.get ();
        }

        BioGearsBloodChemistrySystemData::RemovedRBC_ct_type& BioGearsBloodChemistrySystemData::
        RemovedRBC_ct ()
        {
          return this->RemovedRBC_ct_.get ();
        }

        void BioGearsBloodChemistrySystemData::
        RemovedRBC_ct (const RemovedRBC_ct_type& x)
        {
          this->RemovedRBC_ct_.set (x);
        }


        // BioGearsCardiovascularSystemData
        // 

        const BioGearsCardiovascularSystemData::StartSystole_type& BioGearsCardiovascularSystemData::
        StartSystole () const
        {
          return this->StartSystole_.get ();
        }

        BioGearsCardiovascularSystemData::StartSystole_type& BioGearsCardiovascularSystemData::
        StartSystole ()
        {
          return this->StartSystole_.get ();
        }

        void BioGearsCardiovascularSystemData::
        StartSystole (const StartSystole_type& x)
        {
          this->StartSystole_.set (x);
        }

        const BioGearsCardiovascularSystemData::HeartFlowDetected_type& BioGearsCardiovascularSystemData::
        HeartFlowDetected () const
        {
          return this->HeartFlowDetected_.get ();
        }

        BioGearsCardiovascularSystemData::HeartFlowDetected_type& BioGearsCardiovascularSystemData::
        HeartFlowDetected ()
        {
          return this->HeartFlowDetected_.get ();
        }

        void BioGearsCardiovascularSystemData::
        HeartFlowDetected (const HeartFlowDetected_type& x)
        {
          this->HeartFlowDetected_.set (x);
        }

        const BioGearsCardiovascularSystemData::EnterCardiacArrest_type& BioGearsCardiovascularSystemData::
        EnterCardiacArrest () const
        {
          return this->EnterCardiacArrest_.get ();
        }

        BioGearsCardiovascularSystemData::EnterCardiacArrest_type& BioGearsCardiovascularSystemData::
        EnterCardiacArrest ()
        {
          return this->EnterCardiacArrest_.get ();
        }

        void BioGearsCardiovascularSystemData::
        EnterCardiacArrest (const EnterCardiacArrest_type& x)
        {
          this->EnterCardiacArrest_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePeriod_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePeriod_s () const
        {
          return this->CardiacCyclePeriod_s_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePeriod_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePeriod_s ()
        {
          return this->CardiacCyclePeriod_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePeriod_s (const CardiacCyclePeriod_s_type& x)
        {
          this->CardiacCyclePeriod_s_.set (x);
        }

        const BioGearsCardiovascularSystemData::CurrentCardiacCycleDuration_s_type& BioGearsCardiovascularSystemData::
        CurrentCardiacCycleDuration_s () const
        {
          return this->CurrentCardiacCycleDuration_s_.get ();
        }

        BioGearsCardiovascularSystemData::CurrentCardiacCycleDuration_s_type& BioGearsCardiovascularSystemData::
        CurrentCardiacCycleDuration_s ()
        {
          return this->CurrentCardiacCycleDuration_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CurrentCardiacCycleDuration_s (const CurrentCardiacCycleDuration_s_type& x)
        {
          this->CurrentCardiacCycleDuration_s_.set (x);
        }

        const BioGearsCardiovascularSystemData::LeftHeartElastanceModifier_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceModifier () const
        {
          return this->LeftHeartElastanceModifier_.get ();
        }

        BioGearsCardiovascularSystemData::LeftHeartElastanceModifier_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceModifier ()
        {
          return this->LeftHeartElastanceModifier_.get ();
        }

        void BioGearsCardiovascularSystemData::
        LeftHeartElastanceModifier (const LeftHeartElastanceModifier_type& x)
        {
          this->LeftHeartElastanceModifier_.set (x);
        }

        const BioGearsCardiovascularSystemData::LeftHeartElastance_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastance_mmHg_Per_mL () const
        {
          return this->LeftHeartElastance_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::LeftHeartElastance_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastance_mmHg_Per_mL ()
        {
          return this->LeftHeartElastance_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        LeftHeartElastance_mmHg_Per_mL (const LeftHeartElastance_mmHg_Per_mL_type& x)
        {
          this->LeftHeartElastance_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::LeftHeartElastanceMax_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceMax_mmHg_Per_mL () const
        {
          return this->LeftHeartElastanceMax_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::LeftHeartElastanceMax_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceMax_mmHg_Per_mL ()
        {
          return this->LeftHeartElastanceMax_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        LeftHeartElastanceMax_mmHg_Per_mL (const LeftHeartElastanceMax_mmHg_Per_mL_type& x)
        {
          this->LeftHeartElastanceMax_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::LeftHeartElastanceMin_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceMin_mmHg_Per_mL () const
        {
          return this->LeftHeartElastanceMin_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::LeftHeartElastanceMin_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        LeftHeartElastanceMin_mmHg_Per_mL ()
        {
          return this->LeftHeartElastanceMin_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        LeftHeartElastanceMin_mmHg_Per_mL (const LeftHeartElastanceMin_mmHg_Per_mL_type& x)
        {
          this->LeftHeartElastanceMin_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::RightHeartElastance_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastance_mmHg_Per_mL () const
        {
          return this->RightHeartElastance_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::RightHeartElastance_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastance_mmHg_Per_mL ()
        {
          return this->RightHeartElastance_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        RightHeartElastance_mmHg_Per_mL (const RightHeartElastance_mmHg_Per_mL_type& x)
        {
          this->RightHeartElastance_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::RightHeartElastanceMax_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastanceMax_mmHg_Per_mL () const
        {
          return this->RightHeartElastanceMax_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::RightHeartElastanceMax_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastanceMax_mmHg_Per_mL ()
        {
          return this->RightHeartElastanceMax_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        RightHeartElastanceMax_mmHg_Per_mL (const RightHeartElastanceMax_mmHg_Per_mL_type& x)
        {
          this->RightHeartElastanceMax_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::RightHeartElastanceMin_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastanceMin_mmHg_Per_mL () const
        {
          return this->RightHeartElastanceMin_mmHg_Per_mL_.get ();
        }

        BioGearsCardiovascularSystemData::RightHeartElastanceMin_mmHg_Per_mL_type& BioGearsCardiovascularSystemData::
        RightHeartElastanceMin_mmHg_Per_mL ()
        {
          return this->RightHeartElastanceMin_mmHg_Per_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        RightHeartElastanceMin_mmHg_Per_mL (const RightHeartElastanceMin_mmHg_Per_mL_type& x)
        {
          this->RightHeartElastanceMin_mmHg_Per_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::CompressionTime_s_type& BioGearsCardiovascularSystemData::
        CompressionTime_s () const
        {
          return this->CompressionTime_s_.get ();
        }

        BioGearsCardiovascularSystemData::CompressionTime_s_type& BioGearsCardiovascularSystemData::
        CompressionTime_s ()
        {
          return this->CompressionTime_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CompressionTime_s (const CompressionTime_s_type& x)
        {
          this->CompressionTime_s_.set (x);
        }

        const BioGearsCardiovascularSystemData::CompressionRatio_type& BioGearsCardiovascularSystemData::
        CompressionRatio () const
        {
          return this->CompressionRatio_.get ();
        }

        BioGearsCardiovascularSystemData::CompressionRatio_type& BioGearsCardiovascularSystemData::
        CompressionRatio ()
        {
          return this->CompressionRatio_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CompressionRatio (const CompressionRatio_type& x)
        {
          this->CompressionRatio_.set (x);
        }

        const BioGearsCardiovascularSystemData::CompressionPeriod_s_type& BioGearsCardiovascularSystemData::
        CompressionPeriod_s () const
        {
          return this->CompressionPeriod_s_.get ();
        }

        BioGearsCardiovascularSystemData::CompressionPeriod_s_type& BioGearsCardiovascularSystemData::
        CompressionPeriod_s ()
        {
          return this->CompressionPeriod_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CompressionPeriod_s (const CompressionPeriod_s_type& x)
        {
          this->CompressionPeriod_s_.set (x);
        }

        const BioGearsCardiovascularSystemData::CurrentCardiacCycleTime_s_type& BioGearsCardiovascularSystemData::
        CurrentCardiacCycleTime_s () const
        {
          return this->CurrentCardiacCycleTime_s_.get ();
        }

        BioGearsCardiovascularSystemData::CurrentCardiacCycleTime_s_type& BioGearsCardiovascularSystemData::
        CurrentCardiacCycleTime_s ()
        {
          return this->CurrentCardiacCycleTime_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CurrentCardiacCycleTime_s (const CurrentCardiacCycleTime_s_type& x)
        {
          this->CurrentCardiacCycleTime_s_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCycleDiastolicVolume_mL_type& BioGearsCardiovascularSystemData::
        CardiacCycleDiastolicVolume_mL () const
        {
          return this->CardiacCycleDiastolicVolume_mL_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleDiastolicVolume_mL_type& BioGearsCardiovascularSystemData::
        CardiacCycleDiastolicVolume_mL ()
        {
          return this->CardiacCycleDiastolicVolume_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleDiastolicVolume_mL (const CardiacCycleDiastolicVolume_mL_type& x)
        {
          this->CardiacCycleDiastolicVolume_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCycleAortaPressureLow_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureLow_mmHg () const
        {
          return this->CardiacCycleAortaPressureLow_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleAortaPressureLow_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureLow_mmHg ()
        {
          return this->CardiacCycleAortaPressureLow_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureLow_mmHg (const CardiacCycleAortaPressureLow_mmHg_type& x)
        {
          this->CardiacCycleAortaPressureLow_mmHg_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCycleAortaPressureHigh_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureHigh_mmHg () const
        {
          return this->CardiacCycleAortaPressureHigh_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleAortaPressureHigh_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureHigh_mmHg ()
        {
          return this->CardiacCycleAortaPressureHigh_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleAortaPressureHigh_mmHg (const CardiacCycleAortaPressureHigh_mmHg_type& x)
        {
          this->CardiacCycleAortaPressureHigh_mmHg_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressureLow_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureLow_mmHg () const
        {
          return this->CardiacCyclePulmonaryArteryPressureLow_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressureLow_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureLow_mmHg ()
        {
          return this->CardiacCyclePulmonaryArteryPressureLow_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureLow_mmHg (const CardiacCyclePulmonaryArteryPressureLow_mmHg_type& x)
        {
          this->CardiacCyclePulmonaryArteryPressureLow_mmHg_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureHigh_mmHg () const
        {
          return this->CardiacCyclePulmonaryArteryPressureHigh_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureHigh_mmHg ()
        {
          return this->CardiacCyclePulmonaryArteryPressureHigh_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressureHigh_mmHg (const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& x)
        {
          this->CardiacCyclePulmonaryArteryPressureHigh_mmHg_.set (x);
        }

        const BioGearsCardiovascularSystemData::LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        LastCardiacCycleMeanArterialCO2PartialPressure_mmHg () const
        {
          return this->LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        LastCardiacCycleMeanArterialCO2PartialPressure_mmHg ()
        {
          return this->LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        LastCardiacCycleMeanArterialCO2PartialPressure_mmHg (const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& x)
        {
          this->LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCycleStrokeVolume_mL_type& BioGearsCardiovascularSystemData::
        CardiacCycleStrokeVolume_mL () const
        {
          return this->CardiacCycleStrokeVolume_mL_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleStrokeVolume_mL_type& BioGearsCardiovascularSystemData::
        CardiacCycleStrokeVolume_mL ()
        {
          return this->CardiacCycleStrokeVolume_mL_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleStrokeVolume_mL (const CardiacCycleStrokeVolume_mL_type& x)
        {
          this->CardiacCycleStrokeVolume_mL_.set (x);
        }

        const BioGearsCardiovascularSystemData::CardiacCycleArterialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleArterialPressure_mmHg () const
        {
          return this->CardiacCycleArterialPressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleArterialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleArterialPressure_mmHg ()
        {
          return this->CardiacCycleArterialPressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleArterialPressure_mmHg (const CardiacCycleArterialPressure_mmHg_type& x)
        {
          this->CardiacCycleArterialPressure_mmHg_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleArterialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type > x)
        {
          this->CardiacCycleArterialPressure_mmHg_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCycleArterialCO2PartialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleArterialCO2PartialPressure_mmHg () const
        {
          return this->CardiacCycleArterialCO2PartialPressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleArterialCO2PartialPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleArterialCO2PartialPressure_mmHg ()
        {
          return this->CardiacCycleArterialCO2PartialPressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleArterialCO2PartialPressure_mmHg (const CardiacCycleArterialCO2PartialPressure_mmHg_type& x)
        {
          this->CardiacCycleArterialCO2PartialPressure_mmHg_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleArterialCO2PartialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type > x)
        {
          this->CardiacCycleArterialCO2PartialPressure_mmHg_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesWedgePressure_mmHg () const
        {
          return this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesWedgePressure_mmHg ()
        {
          return this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& x)
        {
          this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > x)
        {
          this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesFlow_mL_Per_s () const
        {
          return this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesFlow_mL_Per_s ()
        {
          return this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& x)
        {
          this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > x)
        {
          this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryShuntFlow_mL_Per_s () const
        {
          return this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryShuntFlow_mL_Per_s ()
        {
          return this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryShuntFlow_mL_Per_s (const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& x)
        {
          this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryShuntFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > x)
        {
          this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressure_mmHg () const
        {
          return this->CardiacCyclePulmonaryArteryPressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressure_mmHg ()
        {
          return this->CardiacCyclePulmonaryArteryPressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressure_mmHg (const CardiacCyclePulmonaryArteryPressure_mmHg_type& x)
        {
          this->CardiacCyclePulmonaryArteryPressure_mmHg_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCyclePulmonaryArteryPressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type > x)
        {
          this->CardiacCyclePulmonaryArteryPressure_mmHg_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCycleCentralVenousPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleCentralVenousPressure_mmHg () const
        {
          return this->CardiacCycleCentralVenousPressure_mmHg_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleCentralVenousPressure_mmHg_type& BioGearsCardiovascularSystemData::
        CardiacCycleCentralVenousPressure_mmHg ()
        {
          return this->CardiacCycleCentralVenousPressure_mmHg_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleCentralVenousPressure_mmHg (const CardiacCycleCentralVenousPressure_mmHg_type& x)
        {
          this->CardiacCycleCentralVenousPressure_mmHg_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleCentralVenousPressure_mmHg (::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type > x)
        {
          this->CardiacCycleCentralVenousPressure_mmHg_.set (std::move (x));
        }

        const BioGearsCardiovascularSystemData::CardiacCycleSkinFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCycleSkinFlow_mL_Per_s () const
        {
          return this->CardiacCycleSkinFlow_mL_Per_s_.get ();
        }

        BioGearsCardiovascularSystemData::CardiacCycleSkinFlow_mL_Per_s_type& BioGearsCardiovascularSystemData::
        CardiacCycleSkinFlow_mL_Per_s ()
        {
          return this->CardiacCycleSkinFlow_mL_Per_s_.get ();
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleSkinFlow_mL_Per_s (const CardiacCycleSkinFlow_mL_Per_s_type& x)
        {
          this->CardiacCycleSkinFlow_mL_Per_s_.set (x);
        }

        void BioGearsCardiovascularSystemData::
        CardiacCycleSkinFlow_mL_Per_s (::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type > x)
        {
          this->CardiacCycleSkinFlow_mL_Per_s_.set (std::move (x));
        }


        // BioGearsDrugSystemData
        // 

        const BioGearsDrugSystemData::BolusAdministration_sequence& BioGearsDrugSystemData::
        BolusAdministration () const
        {
          return this->BolusAdministration_;
        }

        BioGearsDrugSystemData::BolusAdministration_sequence& BioGearsDrugSystemData::
        BolusAdministration ()
        {
          return this->BolusAdministration_;
        }

        void BioGearsDrugSystemData::
        BolusAdministration (const BolusAdministration_sequence& s)
        {
          this->BolusAdministration_ = s;
        }

        const BioGearsDrugSystemData::NasalStates_sequence& BioGearsDrugSystemData::
        NasalStates () const
        {
          return this->NasalStates_;
        }

        BioGearsDrugSystemData::NasalStates_sequence& BioGearsDrugSystemData::
        NasalStates ()
        {
          return this->NasalStates_;
        }

        void BioGearsDrugSystemData::
        NasalStates (const NasalStates_sequence& s)
        {
          this->NasalStates_ = s;
        }

        const BioGearsDrugSystemData::TransmucosalStates_sequence& BioGearsDrugSystemData::
        TransmucosalStates () const
        {
          return this->TransmucosalStates_;
        }

        BioGearsDrugSystemData::TransmucosalStates_sequence& BioGearsDrugSystemData::
        TransmucosalStates ()
        {
          return this->TransmucosalStates_;
        }

        void BioGearsDrugSystemData::
        TransmucosalStates (const TransmucosalStates_sequence& s)
        {
          this->TransmucosalStates_ = s;
        }

        const BioGearsDrugSystemData::SarinRbcAcetylcholinesteraseComplex_nM_type& BioGearsDrugSystemData::
        SarinRbcAcetylcholinesteraseComplex_nM () const
        {
          return this->SarinRbcAcetylcholinesteraseComplex_nM_.get ();
        }

        BioGearsDrugSystemData::SarinRbcAcetylcholinesteraseComplex_nM_type& BioGearsDrugSystemData::
        SarinRbcAcetylcholinesteraseComplex_nM ()
        {
          return this->SarinRbcAcetylcholinesteraseComplex_nM_.get ();
        }

        void BioGearsDrugSystemData::
        SarinRbcAcetylcholinesteraseComplex_nM (const SarinRbcAcetylcholinesteraseComplex_nM_type& x)
        {
          this->SarinRbcAcetylcholinesteraseComplex_nM_.set (x);
        }

        const BioGearsDrugSystemData::AgedRbcAcetylcholinesterase_nM_type& BioGearsDrugSystemData::
        AgedRbcAcetylcholinesterase_nM () const
        {
          return this->AgedRbcAcetylcholinesterase_nM_.get ();
        }

        BioGearsDrugSystemData::AgedRbcAcetylcholinesterase_nM_type& BioGearsDrugSystemData::
        AgedRbcAcetylcholinesterase_nM ()
        {
          return this->AgedRbcAcetylcholinesterase_nM_.get ();
        }

        void BioGearsDrugSystemData::
        AgedRbcAcetylcholinesterase_nM (const AgedRbcAcetylcholinesterase_nM_type& x)
        {
          this->AgedRbcAcetylcholinesterase_nM_.set (x);
        }


        // BioGearsEndocrineSystemData
        // 


        // BioGearsEnergySystemData
        // 

        const BioGearsEnergySystemData::BloodpH_type& BioGearsEnergySystemData::
        BloodpH () const
        {
          return this->BloodpH_.get ();
        }

        BioGearsEnergySystemData::BloodpH_type& BioGearsEnergySystemData::
        BloodpH ()
        {
          return this->BloodpH_.get ();
        }

        void BioGearsEnergySystemData::
        BloodpH (const BloodpH_type& x)
        {
          this->BloodpH_.set (x);
        }

        void BioGearsEnergySystemData::
        BloodpH (::std::unique_ptr< BloodpH_type > x)
        {
          this->BloodpH_.set (std::move (x));
        }

        const BioGearsEnergySystemData::BicarbonateMolarity_mmol_Per_L_type& BioGearsEnergySystemData::
        BicarbonateMolarity_mmol_Per_L () const
        {
          return this->BicarbonateMolarity_mmol_Per_L_.get ();
        }

        BioGearsEnergySystemData::BicarbonateMolarity_mmol_Per_L_type& BioGearsEnergySystemData::
        BicarbonateMolarity_mmol_Per_L ()
        {
          return this->BicarbonateMolarity_mmol_Per_L_.get ();
        }

        void BioGearsEnergySystemData::
        BicarbonateMolarity_mmol_Per_L (const BicarbonateMolarity_mmol_Per_L_type& x)
        {
          this->BicarbonateMolarity_mmol_Per_L_.set (x);
        }

        void BioGearsEnergySystemData::
        BicarbonateMolarity_mmol_Per_L (::std::unique_ptr< BicarbonateMolarity_mmol_Per_L_type > x)
        {
          this->BicarbonateMolarity_mmol_Per_L_.set (std::move (x));
        }

        const BioGearsEnergySystemData::PackOn_type& BioGearsEnergySystemData::
        PackOn () const
        {
          return this->PackOn_.get ();
        }

        BioGearsEnergySystemData::PackOn_type& BioGearsEnergySystemData::
        PackOn ()
        {
          return this->PackOn_.get ();
        }

        void BioGearsEnergySystemData::
        PackOn (const PackOn_type& x)
        {
          this->PackOn_.set (x);
        }

        const BioGearsEnergySystemData::PreviousWeightPack_kg_type& BioGearsEnergySystemData::
        PreviousWeightPack_kg () const
        {
          return this->PreviousWeightPack_kg_.get ();
        }

        BioGearsEnergySystemData::PreviousWeightPack_kg_type& BioGearsEnergySystemData::
        PreviousWeightPack_kg ()
        {
          return this->PreviousWeightPack_kg_.get ();
        }

        void BioGearsEnergySystemData::
        PreviousWeightPack_kg (const PreviousWeightPack_kg_type& x)
        {
          this->PreviousWeightPack_kg_.set (x);
        }


        // BioGearsGastrointestinalSystemData
        // 


        // BioGearsHepaticSystemData
        // 


        // BioGearsNervousSystemData
        // 

        const BioGearsNervousSystemData::AfferentChemoreceptor_Hz_type& BioGearsNervousSystemData::
        AfferentChemoreceptor_Hz () const
        {
          return this->AfferentChemoreceptor_Hz_.get ();
        }

        BioGearsNervousSystemData::AfferentChemoreceptor_Hz_type& BioGearsNervousSystemData::
        AfferentChemoreceptor_Hz ()
        {
          return this->AfferentChemoreceptor_Hz_.get ();
        }

        void BioGearsNervousSystemData::
        AfferentChemoreceptor_Hz (const AfferentChemoreceptor_Hz_type& x)
        {
          this->AfferentChemoreceptor_Hz_.set (x);
        }

        const BioGearsNervousSystemData::AfferentPulmonaryStrechReceptor_Hz_type& BioGearsNervousSystemData::
        AfferentPulmonaryStrechReceptor_Hz () const
        {
          return this->AfferentPulmonaryStrechReceptor_Hz_.get ();
        }

        BioGearsNervousSystemData::AfferentPulmonaryStrechReceptor_Hz_type& BioGearsNervousSystemData::
        AfferentPulmonaryStrechReceptor_Hz ()
        {
          return this->AfferentPulmonaryStrechReceptor_Hz_.get ();
        }

        void BioGearsNervousSystemData::
        AfferentPulmonaryStrechReceptor_Hz (const AfferentPulmonaryStrechReceptor_Hz_type& x)
        {
          this->AfferentPulmonaryStrechReceptor_Hz_.set (x);
        }

        const BioGearsNervousSystemData::AorticBaroreceptorStrain_type& BioGearsNervousSystemData::
        AorticBaroreceptorStrain () const
        {
          return this->AorticBaroreceptorStrain_.get ();
        }

        BioGearsNervousSystemData::AorticBaroreceptorStrain_type& BioGearsNervousSystemData::
        AorticBaroreceptorStrain ()
        {
          return this->AorticBaroreceptorStrain_.get ();
        }

        void BioGearsNervousSystemData::
        AorticBaroreceptorStrain (const AorticBaroreceptorStrain_type& x)
        {
          this->AorticBaroreceptorStrain_.set (x);
        }

        const BioGearsNervousSystemData::ArterialOxygenBaseline_mmHg_type& BioGearsNervousSystemData::
        ArterialOxygenBaseline_mmHg () const
        {
          return this->ArterialOxygenBaseline_mmHg_.get ();
        }

        BioGearsNervousSystemData::ArterialOxygenBaseline_mmHg_type& BioGearsNervousSystemData::
        ArterialOxygenBaseline_mmHg ()
        {
          return this->ArterialOxygenBaseline_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        ArterialOxygenBaseline_mmHg (const ArterialOxygenBaseline_mmHg_type& x)
        {
          this->ArterialOxygenBaseline_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::ArterialCarbonDioxideBaseline_mmHg_type& BioGearsNervousSystemData::
        ArterialCarbonDioxideBaseline_mmHg () const
        {
          return this->ArterialCarbonDioxideBaseline_mmHg_.get ();
        }

        BioGearsNervousSystemData::ArterialCarbonDioxideBaseline_mmHg_type& BioGearsNervousSystemData::
        ArterialCarbonDioxideBaseline_mmHg ()
        {
          return this->ArterialCarbonDioxideBaseline_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        ArterialCarbonDioxideBaseline_mmHg (const ArterialCarbonDioxideBaseline_mmHg_type& x)
        {
          this->ArterialCarbonDioxideBaseline_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::BaroreceptorOperatingPoint_mmHg_type& BioGearsNervousSystemData::
        BaroreceptorOperatingPoint_mmHg () const
        {
          return this->BaroreceptorOperatingPoint_mmHg_.get ();
        }

        BioGearsNervousSystemData::BaroreceptorOperatingPoint_mmHg_type& BioGearsNervousSystemData::
        BaroreceptorOperatingPoint_mmHg ()
        {
          return this->BaroreceptorOperatingPoint_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        BaroreceptorOperatingPoint_mmHg (const BaroreceptorOperatingPoint_mmHg_type& x)
        {
          this->BaroreceptorOperatingPoint_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::CardiopulmonaryInputBaseline_mmHg_type& BioGearsNervousSystemData::
        CardiopulmonaryInputBaseline_mmHg () const
        {
          return this->CardiopulmonaryInputBaseline_mmHg_.get ();
        }

        BioGearsNervousSystemData::CardiopulmonaryInputBaseline_mmHg_type& BioGearsNervousSystemData::
        CardiopulmonaryInputBaseline_mmHg ()
        {
          return this->CardiopulmonaryInputBaseline_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        CardiopulmonaryInputBaseline_mmHg (const CardiopulmonaryInputBaseline_mmHg_type& x)
        {
          this->CardiopulmonaryInputBaseline_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::CardiopulmonaryInput_mmHg_type& BioGearsNervousSystemData::
        CardiopulmonaryInput_mmHg () const
        {
          return this->CardiopulmonaryInput_mmHg_.get ();
        }

        BioGearsNervousSystemData::CardiopulmonaryInput_mmHg_type& BioGearsNervousSystemData::
        CardiopulmonaryInput_mmHg ()
        {
          return this->CardiopulmonaryInput_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        CardiopulmonaryInput_mmHg (const CardiopulmonaryInput_mmHg_type& x)
        {
          this->CardiopulmonaryInput_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::CarotidBaroreceptorStrain_type& BioGearsNervousSystemData::
        CarotidBaroreceptorStrain () const
        {
          return this->CarotidBaroreceptorStrain_.get ();
        }

        BioGearsNervousSystemData::CarotidBaroreceptorStrain_type& BioGearsNervousSystemData::
        CarotidBaroreceptorStrain ()
        {
          return this->CarotidBaroreceptorStrain_.get ();
        }

        void BioGearsNervousSystemData::
        CarotidBaroreceptorStrain (const CarotidBaroreceptorStrain_type& x)
        {
          this->CarotidBaroreceptorStrain_.set (x);
        }

        const BioGearsNervousSystemData::CerebralArteriesEffectors_Large_sequence& BioGearsNervousSystemData::
        CerebralArteriesEffectors_Large () const
        {
          return this->CerebralArteriesEffectors_Large_;
        }

        BioGearsNervousSystemData::CerebralArteriesEffectors_Large_sequence& BioGearsNervousSystemData::
        CerebralArteriesEffectors_Large ()
        {
          return this->CerebralArteriesEffectors_Large_;
        }

        void BioGearsNervousSystemData::
        CerebralArteriesEffectors_Large (const CerebralArteriesEffectors_Large_sequence& s)
        {
          this->CerebralArteriesEffectors_Large_ = s;
        }

        const BioGearsNervousSystemData::CerebralArteriesEffectors_Small_sequence& BioGearsNervousSystemData::
        CerebralArteriesEffectors_Small () const
        {
          return this->CerebralArteriesEffectors_Small_;
        }

        BioGearsNervousSystemData::CerebralArteriesEffectors_Small_sequence& BioGearsNervousSystemData::
        CerebralArteriesEffectors_Small ()
        {
          return this->CerebralArteriesEffectors_Small_;
        }

        void BioGearsNervousSystemData::
        CerebralArteriesEffectors_Small (const CerebralArteriesEffectors_Small_sequence& s)
        {
          this->CerebralArteriesEffectors_Small_ = s;
        }

        const BioGearsNervousSystemData::CerebralBloodFlowBaseline_mL_Per_s_type& BioGearsNervousSystemData::
        CerebralBloodFlowBaseline_mL_Per_s () const
        {
          return this->CerebralBloodFlowBaseline_mL_Per_s_.get ();
        }

        BioGearsNervousSystemData::CerebralBloodFlowBaseline_mL_Per_s_type& BioGearsNervousSystemData::
        CerebralBloodFlowBaseline_mL_Per_s ()
        {
          return this->CerebralBloodFlowBaseline_mL_Per_s_.get ();
        }

        void BioGearsNervousSystemData::
        CerebralBloodFlowBaseline_mL_Per_s (const CerebralBloodFlowBaseline_mL_Per_s_type& x)
        {
          this->CerebralBloodFlowBaseline_mL_Per_s_.set (x);
        }

        const BioGearsNervousSystemData::CerebralBloodFlowInput_mL_Per_s_type& BioGearsNervousSystemData::
        CerebralBloodFlowInput_mL_Per_s () const
        {
          return this->CerebralBloodFlowInput_mL_Per_s_.get ();
        }

        BioGearsNervousSystemData::CerebralBloodFlowInput_mL_Per_s_type& BioGearsNervousSystemData::
        CerebralBloodFlowInput_mL_Per_s ()
        {
          return this->CerebralBloodFlowInput_mL_Per_s_.get ();
        }

        void BioGearsNervousSystemData::
        CerebralBloodFlowInput_mL_Per_s (const CerebralBloodFlowInput_mL_Per_s_type& x)
        {
          this->CerebralBloodFlowInput_mL_Per_s_.set (x);
        }

        const BioGearsNervousSystemData::CentralFrequencyDelta_Per_min_type& BioGearsNervousSystemData::
        CentralFrequencyDelta_Per_min () const
        {
          return this->CentralFrequencyDelta_Per_min_.get ();
        }

        BioGearsNervousSystemData::CentralFrequencyDelta_Per_min_type& BioGearsNervousSystemData::
        CentralFrequencyDelta_Per_min ()
        {
          return this->CentralFrequencyDelta_Per_min_.get ();
        }

        void BioGearsNervousSystemData::
        CentralFrequencyDelta_Per_min (const CentralFrequencyDelta_Per_min_type& x)
        {
          this->CentralFrequencyDelta_Per_min_.set (x);
        }

        const BioGearsNervousSystemData::CentralPressureDelta_cmH2O_type& BioGearsNervousSystemData::
        CentralPressureDelta_cmH2O () const
        {
          return this->CentralPressureDelta_cmH2O_.get ();
        }

        BioGearsNervousSystemData::CentralPressureDelta_cmH2O_type& BioGearsNervousSystemData::
        CentralPressureDelta_cmH2O ()
        {
          return this->CentralPressureDelta_cmH2O_.get ();
        }

        void BioGearsNervousSystemData::
        CentralPressureDelta_cmH2O (const CentralPressureDelta_cmH2O_type& x)
        {
          this->CentralPressureDelta_cmH2O_.set (x);
        }

        const BioGearsNervousSystemData::CerebralOxygenSaturationBaseline_type& BioGearsNervousSystemData::
        CerebralOxygenSaturationBaseline () const
        {
          return this->CerebralOxygenSaturationBaseline_.get ();
        }

        BioGearsNervousSystemData::CerebralOxygenSaturationBaseline_type& BioGearsNervousSystemData::
        CerebralOxygenSaturationBaseline ()
        {
          return this->CerebralOxygenSaturationBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        CerebralOxygenSaturationBaseline (const CerebralOxygenSaturationBaseline_type& x)
        {
          this->CerebralOxygenSaturationBaseline_.set (x);
        }

        const BioGearsNervousSystemData::CerebralPerfusionPressureBaseline_mmHg_type& BioGearsNervousSystemData::
        CerebralPerfusionPressureBaseline_mmHg () const
        {
          return this->CerebralPerfusionPressureBaseline_mmHg_.get ();
        }

        BioGearsNervousSystemData::CerebralPerfusionPressureBaseline_mmHg_type& BioGearsNervousSystemData::
        CerebralPerfusionPressureBaseline_mmHg ()
        {
          return this->CerebralPerfusionPressureBaseline_mmHg_.get ();
        }

        void BioGearsNervousSystemData::
        CerebralPerfusionPressureBaseline_mmHg (const CerebralPerfusionPressureBaseline_mmHg_type& x)
        {
          this->CerebralPerfusionPressureBaseline_mmHg_.set (x);
        }

        const BioGearsNervousSystemData::ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type& BioGearsNervousSystemData::
        ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz () const
        {
          return this->ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.get ();
        }

        BioGearsNervousSystemData::ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type& BioGearsNervousSystemData::
        ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz ()
        {
          return this->ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.get ();
        }

        void BioGearsNervousSystemData::
        ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz (const ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type& x)
        {
          this->ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.set (x);
        }

        const BioGearsNervousSystemData::ChemoreceptorFiringRateSetPoint_Hz_type& BioGearsNervousSystemData::
        ChemoreceptorFiringRateSetPoint_Hz () const
        {
          return this->ChemoreceptorFiringRateSetPoint_Hz_.get ();
        }

        BioGearsNervousSystemData::ChemoreceptorFiringRateSetPoint_Hz_type& BioGearsNervousSystemData::
        ChemoreceptorFiringRateSetPoint_Hz ()
        {
          return this->ChemoreceptorFiringRateSetPoint_Hz_.get ();
        }

        void BioGearsNervousSystemData::
        ChemoreceptorFiringRateSetPoint_Hz (const ChemoreceptorFiringRateSetPoint_Hz_type& x)
        {
          this->ChemoreceptorFiringRateSetPoint_Hz_.set (x);
        }

        const BioGearsNervousSystemData::ComplianceModifier_type& BioGearsNervousSystemData::
        ComplianceModifier () const
        {
          return this->ComplianceModifier_.get ();
        }

        BioGearsNervousSystemData::ComplianceModifier_type& BioGearsNervousSystemData::
        ComplianceModifier ()
        {
          return this->ComplianceModifier_.get ();
        }

        void BioGearsNervousSystemData::
        ComplianceModifier (const ComplianceModifier_type& x)
        {
          this->ComplianceModifier_.set (x);
        }

        const BioGearsNervousSystemData::HeartElastanceModifier_type& BioGearsNervousSystemData::
        HeartElastanceModifier () const
        {
          return this->HeartElastanceModifier_.get ();
        }

        BioGearsNervousSystemData::HeartElastanceModifier_type& BioGearsNervousSystemData::
        HeartElastanceModifier ()
        {
          return this->HeartElastanceModifier_.get ();
        }

        void BioGearsNervousSystemData::
        HeartElastanceModifier (const HeartElastanceModifier_type& x)
        {
          this->HeartElastanceModifier_.set (x);
        }

        const BioGearsNervousSystemData::HeartOxygenBaseline_type& BioGearsNervousSystemData::
        HeartOxygenBaseline () const
        {
          return this->HeartOxygenBaseline_.get ();
        }

        BioGearsNervousSystemData::HeartOxygenBaseline_type& BioGearsNervousSystemData::
        HeartOxygenBaseline ()
        {
          return this->HeartOxygenBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        HeartOxygenBaseline (const HeartOxygenBaseline_type& x)
        {
          this->HeartOxygenBaseline_.set (x);
        }

        const BioGearsNervousSystemData::HeartRateModifierSympathetic_type& BioGearsNervousSystemData::
        HeartRateModifierSympathetic () const
        {
          return this->HeartRateModifierSympathetic_.get ();
        }

        BioGearsNervousSystemData::HeartRateModifierSympathetic_type& BioGearsNervousSystemData::
        HeartRateModifierSympathetic ()
        {
          return this->HeartRateModifierSympathetic_.get ();
        }

        void BioGearsNervousSystemData::
        HeartRateModifierSympathetic (const HeartRateModifierSympathetic_type& x)
        {
          this->HeartRateModifierSympathetic_.set (x);
        }

        const BioGearsNervousSystemData::HeartRateModifierVagal_type& BioGearsNervousSystemData::
        HeartRateModifierVagal () const
        {
          return this->HeartRateModifierVagal_.get ();
        }

        BioGearsNervousSystemData::HeartRateModifierVagal_type& BioGearsNervousSystemData::
        HeartRateModifierVagal ()
        {
          return this->HeartRateModifierVagal_.get ();
        }

        void BioGearsNervousSystemData::
        HeartRateModifierVagal (const HeartRateModifierVagal_type& x)
        {
          this->HeartRateModifierVagal_.set (x);
        }

        const BioGearsNervousSystemData::HypercapniaThresholdHeart_type& BioGearsNervousSystemData::
        HypercapniaThresholdHeart () const
        {
          return this->HypercapniaThresholdHeart_.get ();
        }

        BioGearsNervousSystemData::HypercapniaThresholdHeart_type& BioGearsNervousSystemData::
        HypercapniaThresholdHeart ()
        {
          return this->HypercapniaThresholdHeart_.get ();
        }

        void BioGearsNervousSystemData::
        HypercapniaThresholdHeart (const HypercapniaThresholdHeart_type& x)
        {
          this->HypercapniaThresholdHeart_.set (x);
        }

        const BioGearsNervousSystemData::HypercapniaThresholdPeripheral_type& BioGearsNervousSystemData::
        HypercapniaThresholdPeripheral () const
        {
          return this->HypercapniaThresholdPeripheral_.get ();
        }

        BioGearsNervousSystemData::HypercapniaThresholdPeripheral_type& BioGearsNervousSystemData::
        HypercapniaThresholdPeripheral ()
        {
          return this->HypercapniaThresholdPeripheral_.get ();
        }

        void BioGearsNervousSystemData::
        HypercapniaThresholdPeripheral (const HypercapniaThresholdPeripheral_type& x)
        {
          this->HypercapniaThresholdPeripheral_.set (x);
        }

        const BioGearsNervousSystemData::HypoxiaThresholdHeart_type& BioGearsNervousSystemData::
        HypoxiaThresholdHeart () const
        {
          return this->HypoxiaThresholdHeart_.get ();
        }

        BioGearsNervousSystemData::HypoxiaThresholdHeart_type& BioGearsNervousSystemData::
        HypoxiaThresholdHeart ()
        {
          return this->HypoxiaThresholdHeart_.get ();
        }

        void BioGearsNervousSystemData::
        HypoxiaThresholdHeart (const HypoxiaThresholdHeart_type& x)
        {
          this->HypoxiaThresholdHeart_.set (x);
        }

        const BioGearsNervousSystemData::HypoxiaThresholdPeripheral_type& BioGearsNervousSystemData::
        HypoxiaThresholdPeripheral () const
        {
          return this->HypoxiaThresholdPeripheral_.get ();
        }

        BioGearsNervousSystemData::HypoxiaThresholdPeripheral_type& BioGearsNervousSystemData::
        HypoxiaThresholdPeripheral ()
        {
          return this->HypoxiaThresholdPeripheral_.get ();
        }

        void BioGearsNervousSystemData::
        HypoxiaThresholdPeripheral (const HypoxiaThresholdPeripheral_type& x)
        {
          this->HypoxiaThresholdPeripheral_.set (x);
        }

        const BioGearsNervousSystemData::MeanLungVolume_L_type& BioGearsNervousSystemData::
        MeanLungVolume_L () const
        {
          return this->MeanLungVolume_L_.get ();
        }

        BioGearsNervousSystemData::MeanLungVolume_L_type& BioGearsNervousSystemData::
        MeanLungVolume_L ()
        {
          return this->MeanLungVolume_L_.get ();
        }

        void BioGearsNervousSystemData::
        MeanLungVolume_L (const MeanLungVolume_L_type& x)
        {
          this->MeanLungVolume_L_.set (x);
        }

        const BioGearsNervousSystemData::MuscleOxygenBaseline_type& BioGearsNervousSystemData::
        MuscleOxygenBaseline () const
        {
          return this->MuscleOxygenBaseline_.get ();
        }

        BioGearsNervousSystemData::MuscleOxygenBaseline_type& BioGearsNervousSystemData::
        MuscleOxygenBaseline ()
        {
          return this->MuscleOxygenBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        MuscleOxygenBaseline (const MuscleOxygenBaseline_type& x)
        {
          this->MuscleOxygenBaseline_.set (x);
        }

        const BioGearsNervousSystemData::OxygenAutoregulatorHeart_type& BioGearsNervousSystemData::
        OxygenAutoregulatorHeart () const
        {
          return this->OxygenAutoregulatorHeart_.get ();
        }

        BioGearsNervousSystemData::OxygenAutoregulatorHeart_type& BioGearsNervousSystemData::
        OxygenAutoregulatorHeart ()
        {
          return this->OxygenAutoregulatorHeart_.get ();
        }

        void BioGearsNervousSystemData::
        OxygenAutoregulatorHeart (const OxygenAutoregulatorHeart_type& x)
        {
          this->OxygenAutoregulatorHeart_.set (x);
        }

        const BioGearsNervousSystemData::OxygenAutoregulatorMuscle_type& BioGearsNervousSystemData::
        OxygenAutoregulatorMuscle () const
        {
          return this->OxygenAutoregulatorMuscle_.get ();
        }

        BioGearsNervousSystemData::OxygenAutoregulatorMuscle_type& BioGearsNervousSystemData::
        OxygenAutoregulatorMuscle ()
        {
          return this->OxygenAutoregulatorMuscle_.get ();
        }

        void BioGearsNervousSystemData::
        OxygenAutoregulatorMuscle (const OxygenAutoregulatorMuscle_type& x)
        {
          this->OxygenAutoregulatorMuscle_.set (x);
        }

        const BioGearsNervousSystemData::PeripheralFrequencyDelta_Per_min_type& BioGearsNervousSystemData::
        PeripheralFrequencyDelta_Per_min () const
        {
          return this->PeripheralFrequencyDelta_Per_min_.get ();
        }

        BioGearsNervousSystemData::PeripheralFrequencyDelta_Per_min_type& BioGearsNervousSystemData::
        PeripheralFrequencyDelta_Per_min ()
        {
          return this->PeripheralFrequencyDelta_Per_min_.get ();
        }

        void BioGearsNervousSystemData::
        PeripheralFrequencyDelta_Per_min (const PeripheralFrequencyDelta_Per_min_type& x)
        {
          this->PeripheralFrequencyDelta_Per_min_.set (x);
        }

        const BioGearsNervousSystemData::PeripheralPressureDelta_cmH2O_type& BioGearsNervousSystemData::
        PeripheralPressureDelta_cmH2O () const
        {
          return this->PeripheralPressureDelta_cmH2O_.get ();
        }

        BioGearsNervousSystemData::PeripheralPressureDelta_cmH2O_type& BioGearsNervousSystemData::
        PeripheralPressureDelta_cmH2O ()
        {
          return this->PeripheralPressureDelta_cmH2O_.get ();
        }

        void BioGearsNervousSystemData::
        PeripheralPressureDelta_cmH2O (const PeripheralPressureDelta_cmH2O_type& x)
        {
          this->PeripheralPressureDelta_cmH2O_.set (x);
        }

        const BioGearsNervousSystemData::ResistanceModifierExtrasplanchnic_type& BioGearsNervousSystemData::
        ResistanceModifierExtrasplanchnic () const
        {
          return this->ResistanceModifierExtrasplanchnic_.get ();
        }

        BioGearsNervousSystemData::ResistanceModifierExtrasplanchnic_type& BioGearsNervousSystemData::
        ResistanceModifierExtrasplanchnic ()
        {
          return this->ResistanceModifierExtrasplanchnic_.get ();
        }

        void BioGearsNervousSystemData::
        ResistanceModifierExtrasplanchnic (const ResistanceModifierExtrasplanchnic_type& x)
        {
          this->ResistanceModifierExtrasplanchnic_.set (x);
        }

        const BioGearsNervousSystemData::ResistanceModifierMuscle_type& BioGearsNervousSystemData::
        ResistanceModifierMuscle () const
        {
          return this->ResistanceModifierMuscle_.get ();
        }

        BioGearsNervousSystemData::ResistanceModifierMuscle_type& BioGearsNervousSystemData::
        ResistanceModifierMuscle ()
        {
          return this->ResistanceModifierMuscle_.get ();
        }

        void BioGearsNervousSystemData::
        ResistanceModifierMuscle (const ResistanceModifierMuscle_type& x)
        {
          this->ResistanceModifierMuscle_.set (x);
        }

        const BioGearsNervousSystemData::ResistanceModifierSplanchnic_type& BioGearsNervousSystemData::
        ResistanceModifierSplanchnic () const
        {
          return this->ResistanceModifierSplanchnic_.get ();
        }

        BioGearsNervousSystemData::ResistanceModifierSplanchnic_type& BioGearsNervousSystemData::
        ResistanceModifierSplanchnic ()
        {
          return this->ResistanceModifierSplanchnic_.get ();
        }

        void BioGearsNervousSystemData::
        ResistanceModifierSplanchnic (const ResistanceModifierSplanchnic_type& x)
        {
          this->ResistanceModifierSplanchnic_.set (x);
        }

        const BioGearsNervousSystemData::SympatheticPeripheralSignalBaseline_type& BioGearsNervousSystemData::
        SympatheticPeripheralSignalBaseline () const
        {
          return this->SympatheticPeripheralSignalBaseline_.get ();
        }

        BioGearsNervousSystemData::SympatheticPeripheralSignalBaseline_type& BioGearsNervousSystemData::
        SympatheticPeripheralSignalBaseline ()
        {
          return this->SympatheticPeripheralSignalBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        SympatheticPeripheralSignalBaseline (const SympatheticPeripheralSignalBaseline_type& x)
        {
          this->SympatheticPeripheralSignalBaseline_.set (x);
        }

        const BioGearsNervousSystemData::SympatheticSinoatrialSignalBaseline_type& BioGearsNervousSystemData::
        SympatheticSinoatrialSignalBaseline () const
        {
          return this->SympatheticSinoatrialSignalBaseline_.get ();
        }

        BioGearsNervousSystemData::SympatheticSinoatrialSignalBaseline_type& BioGearsNervousSystemData::
        SympatheticSinoatrialSignalBaseline ()
        {
          return this->SympatheticSinoatrialSignalBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        SympatheticSinoatrialSignalBaseline (const SympatheticSinoatrialSignalBaseline_type& x)
        {
          this->SympatheticSinoatrialSignalBaseline_.set (x);
        }

        const BioGearsNervousSystemData::SympatheticPeripheralSignalFatigue_type& BioGearsNervousSystemData::
        SympatheticPeripheralSignalFatigue () const
        {
          return this->SympatheticPeripheralSignalFatigue_.get ();
        }

        BioGearsNervousSystemData::SympatheticPeripheralSignalFatigue_type& BioGearsNervousSystemData::
        SympatheticPeripheralSignalFatigue ()
        {
          return this->SympatheticPeripheralSignalFatigue_.get ();
        }

        void BioGearsNervousSystemData::
        SympatheticPeripheralSignalFatigue (const SympatheticPeripheralSignalFatigue_type& x)
        {
          this->SympatheticPeripheralSignalFatigue_.set (x);
        }

        const BioGearsNervousSystemData::VagalSignalBaseline_type& BioGearsNervousSystemData::
        VagalSignalBaseline () const
        {
          return this->VagalSignalBaseline_.get ();
        }

        BioGearsNervousSystemData::VagalSignalBaseline_type& BioGearsNervousSystemData::
        VagalSignalBaseline ()
        {
          return this->VagalSignalBaseline_.get ();
        }

        void BioGearsNervousSystemData::
        VagalSignalBaseline (const VagalSignalBaseline_type& x)
        {
          this->VagalSignalBaseline_.set (x);
        }


        // BioGearsRenalSystemData
        // 

        const BioGearsRenalSystemData::Urinating_type& BioGearsRenalSystemData::
        Urinating () const
        {
          return this->Urinating_.get ();
        }

        BioGearsRenalSystemData::Urinating_type& BioGearsRenalSystemData::
        Urinating ()
        {
          return this->Urinating_.get ();
        }

        void BioGearsRenalSystemData::
        Urinating (const Urinating_type& x)
        {
          this->Urinating_.set (x);
        }

        const BioGearsRenalSystemData::LeftAfferentResistance_mmHg_s_Per_mL_type& BioGearsRenalSystemData::
        LeftAfferentResistance_mmHg_s_Per_mL () const
        {
          return this->LeftAfferentResistance_mmHg_s_Per_mL_.get ();
        }

        BioGearsRenalSystemData::LeftAfferentResistance_mmHg_s_Per_mL_type& BioGearsRenalSystemData::
        LeftAfferentResistance_mmHg_s_Per_mL ()
        {
          return this->LeftAfferentResistance_mmHg_s_Per_mL_.get ();
        }

        void BioGearsRenalSystemData::
        LeftAfferentResistance_mmHg_s_Per_mL (const LeftAfferentResistance_mmHg_s_Per_mL_type& x)
        {
          this->LeftAfferentResistance_mmHg_s_Per_mL_.set (x);
        }

        const BioGearsRenalSystemData::RightAfferentResistance_mmHg_s_Per_mL_type& BioGearsRenalSystemData::
        RightAfferentResistance_mmHg_s_Per_mL () const
        {
          return this->RightAfferentResistance_mmHg_s_Per_mL_.get ();
        }

        BioGearsRenalSystemData::RightAfferentResistance_mmHg_s_Per_mL_type& BioGearsRenalSystemData::
        RightAfferentResistance_mmHg_s_Per_mL ()
        {
          return this->RightAfferentResistance_mmHg_s_Per_mL_.get ();
        }

        void BioGearsRenalSystemData::
        RightAfferentResistance_mmHg_s_Per_mL (const RightAfferentResistance_mmHg_s_Per_mL_type& x)
        {
          this->RightAfferentResistance_mmHg_s_Per_mL_.set (x);
        }

        const BioGearsRenalSystemData::LeftSodiumFlowSetPoint_mg_Per_s_type& BioGearsRenalSystemData::
        LeftSodiumFlowSetPoint_mg_Per_s () const
        {
          return this->LeftSodiumFlowSetPoint_mg_Per_s_.get ();
        }

        BioGearsRenalSystemData::LeftSodiumFlowSetPoint_mg_Per_s_type& BioGearsRenalSystemData::
        LeftSodiumFlowSetPoint_mg_Per_s ()
        {
          return this->LeftSodiumFlowSetPoint_mg_Per_s_.get ();
        }

        void BioGearsRenalSystemData::
        LeftSodiumFlowSetPoint_mg_Per_s (const LeftSodiumFlowSetPoint_mg_Per_s_type& x)
        {
          this->LeftSodiumFlowSetPoint_mg_Per_s_.set (x);
        }

        const BioGearsRenalSystemData::RightSodiumFlowSetPoint_mg_Per_s_type& BioGearsRenalSystemData::
        RightSodiumFlowSetPoint_mg_Per_s () const
        {
          return this->RightSodiumFlowSetPoint_mg_Per_s_.get ();
        }

        BioGearsRenalSystemData::RightSodiumFlowSetPoint_mg_Per_s_type& BioGearsRenalSystemData::
        RightSodiumFlowSetPoint_mg_Per_s ()
        {
          return this->RightSodiumFlowSetPoint_mg_Per_s_.get ();
        }

        void BioGearsRenalSystemData::
        RightSodiumFlowSetPoint_mg_Per_s (const RightSodiumFlowSetPoint_mg_Per_s_type& x)
        {
          this->RightSodiumFlowSetPoint_mg_Per_s_.set (x);
        }

        const BioGearsRenalSystemData::UrineProductionRate_mL_Per_min_type& BioGearsRenalSystemData::
        UrineProductionRate_mL_Per_min () const
        {
          return this->UrineProductionRate_mL_Per_min_.get ();
        }

        BioGearsRenalSystemData::UrineProductionRate_mL_Per_min_type& BioGearsRenalSystemData::
        UrineProductionRate_mL_Per_min ()
        {
          return this->UrineProductionRate_mL_Per_min_.get ();
        }

        void BioGearsRenalSystemData::
        UrineProductionRate_mL_Per_min (const UrineProductionRate_mL_Per_min_type& x)
        {
          this->UrineProductionRate_mL_Per_min_.set (x);
        }

        void BioGearsRenalSystemData::
        UrineProductionRate_mL_Per_min (::std::unique_ptr< UrineProductionRate_mL_Per_min_type > x)
        {
          this->UrineProductionRate_mL_Per_min_.set (std::move (x));
        }

        const BioGearsRenalSystemData::UrineOsmolarity_mOsm_Per_L_type& BioGearsRenalSystemData::
        UrineOsmolarity_mOsm_Per_L () const
        {
          return this->UrineOsmolarity_mOsm_Per_L_.get ();
        }

        BioGearsRenalSystemData::UrineOsmolarity_mOsm_Per_L_type& BioGearsRenalSystemData::
        UrineOsmolarity_mOsm_Per_L ()
        {
          return this->UrineOsmolarity_mOsm_Per_L_.get ();
        }

        void BioGearsRenalSystemData::
        UrineOsmolarity_mOsm_Per_L (const UrineOsmolarity_mOsm_Per_L_type& x)
        {
          this->UrineOsmolarity_mOsm_Per_L_.set (x);
        }

        void BioGearsRenalSystemData::
        UrineOsmolarity_mOsm_Per_L (::std::unique_ptr< UrineOsmolarity_mOsm_Per_L_type > x)
        {
          this->UrineOsmolarity_mOsm_Per_L_.set (std::move (x));
        }

        const BioGearsRenalSystemData::SodiumConcentration_mg_Per_mL_type& BioGearsRenalSystemData::
        SodiumConcentration_mg_Per_mL () const
        {
          return this->SodiumConcentration_mg_Per_mL_.get ();
        }

        BioGearsRenalSystemData::SodiumConcentration_mg_Per_mL_type& BioGearsRenalSystemData::
        SodiumConcentration_mg_Per_mL ()
        {
          return this->SodiumConcentration_mg_Per_mL_.get ();
        }

        void BioGearsRenalSystemData::
        SodiumConcentration_mg_Per_mL (const SodiumConcentration_mg_Per_mL_type& x)
        {
          this->SodiumConcentration_mg_Per_mL_.set (x);
        }

        void BioGearsRenalSystemData::
        SodiumConcentration_mg_Per_mL (::std::unique_ptr< SodiumConcentration_mg_Per_mL_type > x)
        {
          this->SodiumConcentration_mg_Per_mL_.set (std::move (x));
        }

        const BioGearsRenalSystemData::SodiumExcretionRate_mg_Per_min_type& BioGearsRenalSystemData::
        SodiumExcretionRate_mg_Per_min () const
        {
          return this->SodiumExcretionRate_mg_Per_min_.get ();
        }

        BioGearsRenalSystemData::SodiumExcretionRate_mg_Per_min_type& BioGearsRenalSystemData::
        SodiumExcretionRate_mg_Per_min ()
        {
          return this->SodiumExcretionRate_mg_Per_min_.get ();
        }

        void BioGearsRenalSystemData::
        SodiumExcretionRate_mg_Per_min (const SodiumExcretionRate_mg_Per_min_type& x)
        {
          this->SodiumExcretionRate_mg_Per_min_.set (x);
        }

        void BioGearsRenalSystemData::
        SodiumExcretionRate_mg_Per_min (::std::unique_ptr< SodiumExcretionRate_mg_Per_min_type > x)
        {
          this->SodiumExcretionRate_mg_Per_min_.set (std::move (x));
        }

        const BioGearsRenalSystemData::LeftSodiumFlow_mg_Per_s_type& BioGearsRenalSystemData::
        LeftSodiumFlow_mg_Per_s () const
        {
          return this->LeftSodiumFlow_mg_Per_s_.get ();
        }

        BioGearsRenalSystemData::LeftSodiumFlow_mg_Per_s_type& BioGearsRenalSystemData::
        LeftSodiumFlow_mg_Per_s ()
        {
          return this->LeftSodiumFlow_mg_Per_s_.get ();
        }

        void BioGearsRenalSystemData::
        LeftSodiumFlow_mg_Per_s (const LeftSodiumFlow_mg_Per_s_type& x)
        {
          this->LeftSodiumFlow_mg_Per_s_.set (x);
        }

        void BioGearsRenalSystemData::
        LeftSodiumFlow_mg_Per_s (::std::unique_ptr< LeftSodiumFlow_mg_Per_s_type > x)
        {
          this->LeftSodiumFlow_mg_Per_s_.set (std::move (x));
        }

        const BioGearsRenalSystemData::RightSodiumFlow_mg_Per_s_type& BioGearsRenalSystemData::
        RightSodiumFlow_mg_Per_s () const
        {
          return this->RightSodiumFlow_mg_Per_s_.get ();
        }

        BioGearsRenalSystemData::RightSodiumFlow_mg_Per_s_type& BioGearsRenalSystemData::
        RightSodiumFlow_mg_Per_s ()
        {
          return this->RightSodiumFlow_mg_Per_s_.get ();
        }

        void BioGearsRenalSystemData::
        RightSodiumFlow_mg_Per_s (const RightSodiumFlow_mg_Per_s_type& x)
        {
          this->RightSodiumFlow_mg_Per_s_.set (x);
        }

        void BioGearsRenalSystemData::
        RightSodiumFlow_mg_Per_s (::std::unique_ptr< RightSodiumFlow_mg_Per_s_type > x)
        {
          this->RightSodiumFlow_mg_Per_s_.set (std::move (x));
        }

        const BioGearsRenalSystemData::LeftRenalArterialPressure_mmHg_type& BioGearsRenalSystemData::
        LeftRenalArterialPressure_mmHg () const
        {
          return this->LeftRenalArterialPressure_mmHg_.get ();
        }

        BioGearsRenalSystemData::LeftRenalArterialPressure_mmHg_type& BioGearsRenalSystemData::
        LeftRenalArterialPressure_mmHg ()
        {
          return this->LeftRenalArterialPressure_mmHg_.get ();
        }

        void BioGearsRenalSystemData::
        LeftRenalArterialPressure_mmHg (const LeftRenalArterialPressure_mmHg_type& x)
        {
          this->LeftRenalArterialPressure_mmHg_.set (x);
        }

        void BioGearsRenalSystemData::
        LeftRenalArterialPressure_mmHg (::std::unique_ptr< LeftRenalArterialPressure_mmHg_type > x)
        {
          this->LeftRenalArterialPressure_mmHg_.set (std::move (x));
        }

        const BioGearsRenalSystemData::RightRenalArterialPressure_mmHg_type& BioGearsRenalSystemData::
        RightRenalArterialPressure_mmHg () const
        {
          return this->RightRenalArterialPressure_mmHg_.get ();
        }

        BioGearsRenalSystemData::RightRenalArterialPressure_mmHg_type& BioGearsRenalSystemData::
        RightRenalArterialPressure_mmHg ()
        {
          return this->RightRenalArterialPressure_mmHg_.get ();
        }

        void BioGearsRenalSystemData::
        RightRenalArterialPressure_mmHg (const RightRenalArterialPressure_mmHg_type& x)
        {
          this->RightRenalArterialPressure_mmHg_.set (x);
        }

        void BioGearsRenalSystemData::
        RightRenalArterialPressure_mmHg (::std::unique_ptr< RightRenalArterialPressure_mmHg_type > x)
        {
          this->RightRenalArterialPressure_mmHg_.set (std::move (x));
        }


        // BioGearsRespiratorySystemData
        // 

        const BioGearsRespiratorySystemData::InitialExpiratoryReserveVolume_L_type& BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L () const
        {
          return this->InitialExpiratoryReserveVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialExpiratoryReserveVolume_L_type& BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L ()
        {
          return this->InitialExpiratoryReserveVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L (const InitialExpiratoryReserveVolume_L_type& x)
        {
          this->InitialExpiratoryReserveVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L () const
        {
          return this->InitialFunctionalResidualCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L ()
        {
          return this->InitialFunctionalResidualCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L (const InitialFunctionalResidualCapacity_L_type& x)
        {
          this->InitialFunctionalResidualCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialInspiratoryCapacity_L_type& BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L () const
        {
          return this->InitialInspiratoryCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialInspiratoryCapacity_L_type& BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L ()
        {
          return this->InitialInspiratoryCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L (const InitialInspiratoryCapacity_L_type& x)
        {
          this->InitialInspiratoryCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialResidualVolume_L_type& BioGearsRespiratorySystemData::
        InitialResidualVolume_L () const
        {
          return this->InitialResidualVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialResidualVolume_L_type& BioGearsRespiratorySystemData::
        InitialResidualVolume_L ()
        {
          return this->InitialResidualVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialResidualVolume_L (const InitialResidualVolume_L_type& x)
        {
          this->InitialResidualVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::NotBreathing_type& BioGearsRespiratorySystemData::
        NotBreathing () const
        {
          return this->NotBreathing_.get ();
        }

        BioGearsRespiratorySystemData::NotBreathing_type& BioGearsRespiratorySystemData::
        NotBreathing ()
        {
          return this->NotBreathing_.get ();
        }

        void BioGearsRespiratorySystemData::
        NotBreathing (const NotBreathing_type& x)
        {
          this->NotBreathing_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathTotalVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L () const
        {
          return this->TopBreathTotalVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathTotalVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L ()
        {
          return this->TopBreathTotalVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L (const TopBreathTotalVolume_L_type& x)
        {
          this->TopBreathTotalVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathAlveoliVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L () const
        {
          return this->TopBreathAlveoliVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathAlveoliVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L ()
        {
          return this->TopBreathAlveoliVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L (const TopBreathAlveoliVolume_L_type& x)
        {
          this->TopBreathAlveoliVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathDeadSpaceVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L () const
        {
          return this->TopBreathDeadSpaceVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathDeadSpaceVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L ()
        {
          return this->TopBreathDeadSpaceVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L (const TopBreathDeadSpaceVolume_L_type& x)
        {
          this->TopBreathDeadSpaceVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathPleuralPressure_cmH2O_type& BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O () const
        {
          return this->TopBreathPleuralPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathPleuralPressure_cmH2O_type& BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O ()
        {
          return this->TopBreathPleuralPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O (const TopBreathPleuralPressure_cmH2O_type& x)
        {
          this->TopBreathPleuralPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::LastCardiacCycleBloodPH_type& BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH () const
        {
          return this->LastCardiacCycleBloodPH_.get ();
        }

        BioGearsRespiratorySystemData::LastCardiacCycleBloodPH_type& BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH ()
        {
          return this->LastCardiacCycleBloodPH_.get ();
        }

        void BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH (const LastCardiacCycleBloodPH_type& x)
        {
          this->LastCardiacCycleBloodPH_.set (x);
        }

        const BioGearsRespiratorySystemData::PreviousTotalLungVolume_L_type& BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L () const
        {
          return this->PreviousTotalLungVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::PreviousTotalLungVolume_L_type& BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L ()
        {
          return this->PreviousTotalLungVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L (const PreviousTotalLungVolume_L_type& x)
        {
          this->PreviousTotalLungVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::BloodPHRunningAverage_type& BioGearsRespiratorySystemData::
        BloodPHRunningAverage () const
        {
          return this->BloodPHRunningAverage_.get ();
        }

        BioGearsRespiratorySystemData::BloodPHRunningAverage_type& BioGearsRespiratorySystemData::
        BloodPHRunningAverage ()
        {
          return this->BloodPHRunningAverage_.get ();
        }

        void BioGearsRespiratorySystemData::
        BloodPHRunningAverage (const BloodPHRunningAverage_type& x)
        {
          this->BloodPHRunningAverage_.set (x);
        }

        void BioGearsRespiratorySystemData::
        BloodPHRunningAverage (::std::unique_ptr< BloodPHRunningAverage_type > x)
        {
          this->BloodPHRunningAverage_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::BreathingCycle_type& BioGearsRespiratorySystemData::
        BreathingCycle () const
        {
          return this->BreathingCycle_.get ();
        }

        BioGearsRespiratorySystemData::BreathingCycle_type& BioGearsRespiratorySystemData::
        BreathingCycle ()
        {
          return this->BreathingCycle_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathingCycle (const BreathingCycle_type& x)
        {
          this->BreathingCycle_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialOxygenPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialOxygenPressure_mmHg () const
        {
          return this->ArterialOxygenPressure_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialOxygenPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialOxygenPressure_mmHg ()
        {
          return this->ArterialOxygenPressure_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialOxygenPressure_mmHg (const ArterialOxygenPressure_mmHg_type& x)
        {
          this->ArterialOxygenPressure_mmHg_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialCarbonDioxidePressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCarbonDioxidePressure_mmHg () const
        {
          return this->ArterialCarbonDioxidePressure_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialCarbonDioxidePressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCarbonDioxidePressure_mmHg ()
        {
          return this->ArterialCarbonDioxidePressure_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialCarbonDioxidePressure_mmHg (const ArterialCarbonDioxidePressure_mmHg_type& x)
        {
          this->ArterialCarbonDioxidePressure_mmHg_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialOxygenAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialOxygenAverage_mmHg () const
        {
          return this->ArterialOxygenAverage_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialOxygenAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialOxygenAverage_mmHg ()
        {
          return this->ArterialOxygenAverage_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialOxygenAverage_mmHg (const ArterialOxygenAverage_mmHg_type& x)
        {
          this->ArterialOxygenAverage_mmHg_.set (x);
        }

        void BioGearsRespiratorySystemData::
        ArterialOxygenAverage_mmHg (::std::unique_ptr< ArterialOxygenAverage_mmHg_type > x)
        {
          this->ArterialOxygenAverage_mmHg_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::ArterialCarbonDioxideAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCarbonDioxideAverage_mmHg () const
        {
          return this->ArterialCarbonDioxideAverage_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialCarbonDioxideAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCarbonDioxideAverage_mmHg ()
        {
          return this->ArterialCarbonDioxideAverage_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialCarbonDioxideAverage_mmHg (const ArterialCarbonDioxideAverage_mmHg_type& x)
        {
          this->ArterialCarbonDioxideAverage_mmHg_.set (x);
        }

        void BioGearsRespiratorySystemData::
        ArterialCarbonDioxideAverage_mmHg (::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > x)
        {
          this->ArterialCarbonDioxideAverage_mmHg_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::BreathingCycleTime_s_type& BioGearsRespiratorySystemData::
        BreathingCycleTime_s () const
        {
          return this->BreathingCycleTime_s_.get ();
        }

        BioGearsRespiratorySystemData::BreathingCycleTime_s_type& BioGearsRespiratorySystemData::
        BreathingCycleTime_s ()
        {
          return this->BreathingCycleTime_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathingCycleTime_s (const BreathingCycleTime_s_type& x)
        {
          this->BreathingCycleTime_s_.set (x);
        }

        const BioGearsRespiratorySystemData::BreathTimeExhale_min_type& BioGearsRespiratorySystemData::
        BreathTimeExhale_min () const
        {
          return this->BreathTimeExhale_min_.get ();
        }

        BioGearsRespiratorySystemData::BreathTimeExhale_min_type& BioGearsRespiratorySystemData::
        BreathTimeExhale_min ()
        {
          return this->BreathTimeExhale_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathTimeExhale_min (const BreathTimeExhale_min_type& x)
        {
          this->BreathTimeExhale_min_.set (x);
        }

        const BioGearsRespiratorySystemData::DefaultDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O () const
        {
          return this->DefaultDrivePressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DefaultDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O ()
        {
          return this->DefaultDrivePressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O (const DefaultDrivePressure_cmH2O_type& x)
        {
          this->DefaultDrivePressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::DriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressure_cmH2O () const
        {
          return this->DriverPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressure_cmH2O ()
        {
          return this->DriverPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DriverPressure_cmH2O (const DriverPressure_cmH2O_type& x)
        {
          this->DriverPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::DriverPressureMin_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O () const
        {
          return this->DriverPressureMin_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DriverPressureMin_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O ()
        {
          return this->DriverPressureMin_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O (const DriverPressureMin_cmH2O_type& x)
        {
          this->DriverPressureMin_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::ElapsedBreathingCycleTime_min_type& BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min () const
        {
          return this->ElapsedBreathingCycleTime_min_.get ();
        }

        BioGearsRespiratorySystemData::ElapsedBreathingCycleTime_min_type& BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min ()
        {
          return this->ElapsedBreathingCycleTime_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min (const ElapsedBreathingCycleTime_min_type& x)
        {
          this->ElapsedBreathingCycleTime_min_.set (x);
        }

        const BioGearsRespiratorySystemData::IEscaleFactor_type& BioGearsRespiratorySystemData::
        IEscaleFactor () const
        {
          return this->IEscaleFactor_.get ();
        }

        BioGearsRespiratorySystemData::IEscaleFactor_type& BioGearsRespiratorySystemData::
        IEscaleFactor ()
        {
          return this->IEscaleFactor_.get ();
        }

        void BioGearsRespiratorySystemData::
        IEscaleFactor (const IEscaleFactor_type& x)
        {
          this->IEscaleFactor_.set (x);
        }

        const BioGearsRespiratorySystemData::InstantaneousFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L () const
        {
          return this->InstantaneousFunctionalResidualCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InstantaneousFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L ()
        {
          return this->InstantaneousFunctionalResidualCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L (const InstantaneousFunctionalResidualCapacity_L_type& x)
        {
          this->InstantaneousFunctionalResidualCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::MaxDriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O () const
        {
          return this->MaxDriverPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::MaxDriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O ()
        {
          return this->MaxDriverPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O (const MaxDriverPressure_cmH2O_type& x)
        {
          this->MaxDriverPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::PeakRespiratoryDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O () const
        {
          return this->PeakRespiratoryDrivePressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::PeakRespiratoryDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O ()
        {
          return this->PeakRespiratoryDrivePressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O (const PeakRespiratoryDrivePressure_cmH2O_type& x)
        {
          this->PeakRespiratoryDrivePressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::VentilationFrequency_Per_min_type& BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min () const
        {
          return this->VentilationFrequency_Per_min_.get ();
        }

        BioGearsRespiratorySystemData::VentilationFrequency_Per_min_type& BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min ()
        {
          return this->VentilationFrequency_Per_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min (const VentilationFrequency_Per_min_type& x)
        {
          this->VentilationFrequency_Per_min_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousBreathing_type& BioGearsRespiratorySystemData::
        ConsciousBreathing () const
        {
          return this->ConsciousBreathing_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousBreathing_type& BioGearsRespiratorySystemData::
        ConsciousBreathing ()
        {
          return this->ConsciousBreathing_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousBreathing (const ConsciousBreathing_type& x)
        {
          this->ConsciousBreathing_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousRespirationPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s () const
        {
          return this->ConsciousRespirationPeriod_s_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousRespirationPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s ()
        {
          return this->ConsciousRespirationPeriod_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s (const ConsciousRespirationPeriod_s_type& x)
        {
          this->ConsciousRespirationPeriod_s_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousRespirationRemainingPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s () const
        {
          return this->ConsciousRespirationRemainingPeriod_s_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousRespirationRemainingPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s ()
        {
          return this->ConsciousRespirationRemainingPeriod_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s (const ConsciousRespirationRemainingPeriod_s_type& x)
        {
          this->ConsciousRespirationRemainingPeriod_s_.set (x);
        }

        const BioGearsRespiratorySystemData::ExpiratoryReserveVolumeFraction_type& BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction () const
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        BioGearsRespiratorySystemData::ExpiratoryReserveVolumeFraction_type& BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction ()
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        void BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x)
        {
          this->ExpiratoryReserveVolumeFraction_.set (x);
        }

        const BioGearsRespiratorySystemData::InspiratoryCapacityFraction_type& BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction () const
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        BioGearsRespiratorySystemData::InspiratoryCapacityFraction_type& BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction ()
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        void BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x)
        {
          this->InspiratoryCapacityFraction_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousStartPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O () const
        {
          return this->ConsciousStartPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousStartPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O ()
        {
          return this->ConsciousStartPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O (const ConsciousStartPressure_cmH2O_type& x)
        {
          this->ConsciousStartPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousEndPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O () const
        {
          return this->ConsciousEndPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousEndPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O ()
        {
          return this->ConsciousEndPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O (const ConsciousEndPressure_cmH2O_type& x)
        {
          this->ConsciousEndPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::HadAirwayObstruction_type& BioGearsRespiratorySystemData::
        HadAirwayObstruction () const
        {
          return this->HadAirwayObstruction_.get ();
        }

        BioGearsRespiratorySystemData::HadAirwayObstruction_type& BioGearsRespiratorySystemData::
        HadAirwayObstruction ()
        {
          return this->HadAirwayObstruction_.get ();
        }

        void BioGearsRespiratorySystemData::
        HadAirwayObstruction (const HadAirwayObstruction_type& x)
        {
          this->HadAirwayObstruction_.set (x);
        }

        const BioGearsRespiratorySystemData::HadBronchoconstriction_type& BioGearsRespiratorySystemData::
        HadBronchoconstriction () const
        {
          return this->HadBronchoconstriction_.get ();
        }

        BioGearsRespiratorySystemData::HadBronchoconstriction_type& BioGearsRespiratorySystemData::
        HadBronchoconstriction ()
        {
          return this->HadBronchoconstriction_.get ();
        }

        void BioGearsRespiratorySystemData::
        HadBronchoconstriction (const HadBronchoconstriction_type& x)
        {
          this->HadBronchoconstriction_.set (x);
        }


        // BioGearsTissueSystemData
        // 

        const BioGearsTissueSystemData::RestingPatientMass_kg_type& BioGearsTissueSystemData::
        RestingPatientMass_kg () const
        {
          return this->RestingPatientMass_kg_.get ();
        }

        BioGearsTissueSystemData::RestingPatientMass_kg_type& BioGearsTissueSystemData::
        RestingPatientMass_kg ()
        {
          return this->RestingPatientMass_kg_.get ();
        }

        void BioGearsTissueSystemData::
        RestingPatientMass_kg (const RestingPatientMass_kg_type& x)
        {
          this->RestingPatientMass_kg_.set (x);
        }

        const BioGearsTissueSystemData::RestingFluidMass_kg_type& BioGearsTissueSystemData::
        RestingFluidMass_kg () const
        {
          return this->RestingFluidMass_kg_.get ();
        }

        BioGearsTissueSystemData::RestingFluidMass_kg_type& BioGearsTissueSystemData::
        RestingFluidMass_kg ()
        {
          return this->RestingFluidMass_kg_.get ();
        }

        void BioGearsTissueSystemData::
        RestingFluidMass_kg (const RestingFluidMass_kg_type& x)
        {
          this->RestingFluidMass_kg_.set (x);
        }

        const BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s () const
        {
          return this->O2ConsumedRunningAverage_mL_Per_s_.get ();
        }

        BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s ()
        {
          return this->O2ConsumedRunningAverage_mL_Per_s_.get ();
        }

        void BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s (const O2ConsumedRunningAverage_mL_Per_s_type& x)
        {
          this->O2ConsumedRunningAverage_mL_Per_s_.set (x);
        }

        void BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s (::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > x)
        {
          this->O2ConsumedRunningAverage_mL_Per_s_.set (std::move (x));
        }

        const BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s () const
        {
          return this->CO2ProducedRunningAverage_mL_Per_s_.get ();
        }

        BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s ()
        {
          return this->CO2ProducedRunningAverage_mL_Per_s_.get ();
        }

        void BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s (const CO2ProducedRunningAverage_mL_Per_s_type& x)
        {
          this->CO2ProducedRunningAverage_mL_Per_s_.set (x);
        }

        void BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s (::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > x)
        {
          this->CO2ProducedRunningAverage_mL_Per_s_.set (std::move (x));
        }

        const BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage () const
        {
          return this->RespiratoryQuotientRunningAverage_.get ();
        }

        BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage ()
        {
          return this->RespiratoryQuotientRunningAverage_.get ();
        }

        void BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage (const RespiratoryQuotientRunningAverage_type& x)
        {
          this->RespiratoryQuotientRunningAverage_.set (x);
        }

        void BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage (::std::unique_ptr< RespiratoryQuotientRunningAverage_type > x)
        {
          this->RespiratoryQuotientRunningAverage_.set (std::move (x));
        }

        const BioGearsTissueSystemData::FatigueRunningAverage_type& BioGearsTissueSystemData::
        FatigueRunningAverage () const
        {
          return this->FatigueRunningAverage_.get ();
        }

        BioGearsTissueSystemData::FatigueRunningAverage_type& BioGearsTissueSystemData::
        FatigueRunningAverage ()
        {
          return this->FatigueRunningAverage_.get ();
        }

        void BioGearsTissueSystemData::
        FatigueRunningAverage (const FatigueRunningAverage_type& x)
        {
          this->FatigueRunningAverage_.set (x);
        }

        void BioGearsTissueSystemData::
        FatigueRunningAverage (::std::unique_ptr< FatigueRunningAverage_type > x)
        {
          this->FatigueRunningAverage_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsBloodChemistrySystemData
        //

        BioGearsBloodChemistrySystemData::
        BioGearsBloodChemistrySystemData ()
        : ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData (),
          ArterialOxygenAverage_mmHg_ (this),
          ArterialCarbonDioxideAverage_mmHg_ (this),
          RhFactorMismatch_ct_ (this),
          RhTransfusionReactionVolume_mL_ (this),
          DonorRBC_ct_ (this),
          PatientRBC_ct_ (this),
          TwoCellAgglutinates_ct_ (this),
          ThreeCellPatAgglutinates_ct_ (this),
          ThreeCellDonAgglutinates_ct_ (this),
          FourCellAgglutinates_ct_ (this),
          RemovedRBC_ct_ (this)
        {
        }

        BioGearsBloodChemistrySystemData::
        BioGearsBloodChemistrySystemData (const ArterialOxygenAverage_mmHg_type& ArterialOxygenAverage_mmHg,
                                          const ArterialCarbonDioxideAverage_mmHg_type& ArterialCarbonDioxideAverage_mmHg,
                                          const RhFactorMismatch_ct_type& RhFactorMismatch_ct,
                                          const RhTransfusionReactionVolume_mL_type& RhTransfusionReactionVolume_mL,
                                          const DonorRBC_ct_type& DonorRBC_ct,
                                          const PatientRBC_ct_type& PatientRBC_ct,
                                          const TwoCellAgglutinates_ct_type& TwoCellAgglutinates_ct,
                                          const ThreeCellPatAgglutinates_ct_type& ThreeCellPatAgglutinates_ct,
                                          const ThreeCellDonAgglutinates_ct_type& ThreeCellDonAgglutinates_ct,
                                          const FourCellAgglutinates_ct_type& FourCellAgglutinates_ct,
                                          const RemovedRBC_ct_type& RemovedRBC_ct)
        : ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData (),
          ArterialOxygenAverage_mmHg_ (ArterialOxygenAverage_mmHg, this),
          ArterialCarbonDioxideAverage_mmHg_ (ArterialCarbonDioxideAverage_mmHg, this),
          RhFactorMismatch_ct_ (RhFactorMismatch_ct, this),
          RhTransfusionReactionVolume_mL_ (RhTransfusionReactionVolume_mL, this),
          DonorRBC_ct_ (DonorRBC_ct, this),
          PatientRBC_ct_ (PatientRBC_ct, this),
          TwoCellAgglutinates_ct_ (TwoCellAgglutinates_ct, this),
          ThreeCellPatAgglutinates_ct_ (ThreeCellPatAgglutinates_ct, this),
          ThreeCellDonAgglutinates_ct_ (ThreeCellDonAgglutinates_ct, this),
          FourCellAgglutinates_ct_ (FourCellAgglutinates_ct, this),
          RemovedRBC_ct_ (RemovedRBC_ct, this)
        {
        }

        BioGearsBloodChemistrySystemData::
        BioGearsBloodChemistrySystemData (::std::unique_ptr< ArterialOxygenAverage_mmHg_type > ArterialOxygenAverage_mmHg,
                                          ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > ArterialCarbonDioxideAverage_mmHg,
                                          const RhFactorMismatch_ct_type& RhFactorMismatch_ct,
                                          const RhTransfusionReactionVolume_mL_type& RhTransfusionReactionVolume_mL,
                                          const DonorRBC_ct_type& DonorRBC_ct,
                                          const PatientRBC_ct_type& PatientRBC_ct,
                                          const TwoCellAgglutinates_ct_type& TwoCellAgglutinates_ct,
                                          const ThreeCellPatAgglutinates_ct_type& ThreeCellPatAgglutinates_ct,
                                          const ThreeCellDonAgglutinates_ct_type& ThreeCellDonAgglutinates_ct,
                                          const FourCellAgglutinates_ct_type& FourCellAgglutinates_ct,
                                          const RemovedRBC_ct_type& RemovedRBC_ct)
        : ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData (),
          ArterialOxygenAverage_mmHg_ (std::move (ArterialOxygenAverage_mmHg), this),
          ArterialCarbonDioxideAverage_mmHg_ (std::move (ArterialCarbonDioxideAverage_mmHg), this),
          RhFactorMismatch_ct_ (RhFactorMismatch_ct, this),
          RhTransfusionReactionVolume_mL_ (RhTransfusionReactionVolume_mL, this),
          DonorRBC_ct_ (DonorRBC_ct, this),
          PatientRBC_ct_ (PatientRBC_ct, this),
          TwoCellAgglutinates_ct_ (TwoCellAgglutinates_ct, this),
          ThreeCellPatAgglutinates_ct_ (ThreeCellPatAgglutinates_ct, this),
          ThreeCellDonAgglutinates_ct_ (ThreeCellDonAgglutinates_ct, this),
          FourCellAgglutinates_ct_ (FourCellAgglutinates_ct, this),
          RemovedRBC_ct_ (RemovedRBC_ct, this)
        {
        }

        BioGearsBloodChemistrySystemData::
        BioGearsBloodChemistrySystemData (const BioGearsBloodChemistrySystemData& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData (x, f, c),
          ArterialOxygenAverage_mmHg_ (x.ArterialOxygenAverage_mmHg_, f, this),
          ArterialCarbonDioxideAverage_mmHg_ (x.ArterialCarbonDioxideAverage_mmHg_, f, this),
          RhFactorMismatch_ct_ (x.RhFactorMismatch_ct_, f, this),
          RhTransfusionReactionVolume_mL_ (x.RhTransfusionReactionVolume_mL_, f, this),
          DonorRBC_ct_ (x.DonorRBC_ct_, f, this),
          PatientRBC_ct_ (x.PatientRBC_ct_, f, this),
          TwoCellAgglutinates_ct_ (x.TwoCellAgglutinates_ct_, f, this),
          ThreeCellPatAgglutinates_ct_ (x.ThreeCellPatAgglutinates_ct_, f, this),
          ThreeCellDonAgglutinates_ct_ (x.ThreeCellDonAgglutinates_ct_, f, this),
          FourCellAgglutinates_ct_ (x.FourCellAgglutinates_ct_, f, this),
          RemovedRBC_ct_ (x.RemovedRBC_ct_, f, this)
        {
        }

        BioGearsBloodChemistrySystemData::
        BioGearsBloodChemistrySystemData (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData (e, f | ::xml_schema::flags::base, c),
          ArterialOxygenAverage_mmHg_ (this),
          ArterialCarbonDioxideAverage_mmHg_ (this),
          RhFactorMismatch_ct_ (this),
          RhTransfusionReactionVolume_mL_ (this),
          DonorRBC_ct_ (this),
          PatientRBC_ct_ (this),
          TwoCellAgglutinates_ct_ (this),
          ThreeCellPatAgglutinates_ct_ (this),
          ThreeCellDonAgglutinates_ct_ (this),
          FourCellAgglutinates_ct_ (this),
          RemovedRBC_ct_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsBloodChemistrySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::BloodChemistrySystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ArterialOxygenAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialOxygenAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialOxygenAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialOxygenAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialOxygenAverage_mmHg_type > r (
                    dynamic_cast< ArterialOxygenAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialOxygenAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialCarbonDioxideAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialCarbonDioxideAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialCarbonDioxideAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialCarbonDioxideAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > r (
                    dynamic_cast< ArterialCarbonDioxideAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialCarbonDioxideAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RhFactorMismatch_ct
            //
            if (n.name () == "RhFactorMismatch_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RhFactorMismatch_ct_.present ())
              {
                this->RhFactorMismatch_ct_.set (RhFactorMismatch_ct_traits::create (i, f, this));
                continue;
              }
            }

            // RhTransfusionReactionVolume_mL
            //
            if (n.name () == "RhTransfusionReactionVolume_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RhTransfusionReactionVolume_mL_.present ())
              {
                this->RhTransfusionReactionVolume_mL_.set (RhTransfusionReactionVolume_mL_traits::create (i, f, this));
                continue;
              }
            }

            // DonorRBC_ct
            //
            if (n.name () == "DonorRBC_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DonorRBC_ct_.present ())
              {
                this->DonorRBC_ct_.set (DonorRBC_ct_traits::create (i, f, this));
                continue;
              }
            }

            // PatientRBC_ct
            //
            if (n.name () == "PatientRBC_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PatientRBC_ct_.present ())
              {
                this->PatientRBC_ct_.set (PatientRBC_ct_traits::create (i, f, this));
                continue;
              }
            }

            // TwoCellAgglutinates_ct
            //
            if (n.name () == "TwoCellAgglutinates_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TwoCellAgglutinates_ct_.present ())
              {
                this->TwoCellAgglutinates_ct_.set (TwoCellAgglutinates_ct_traits::create (i, f, this));
                continue;
              }
            }

            // ThreeCellPatAgglutinates_ct
            //
            if (n.name () == "ThreeCellPatAgglutinates_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ThreeCellPatAgglutinates_ct_.present ())
              {
                this->ThreeCellPatAgglutinates_ct_.set (ThreeCellPatAgglutinates_ct_traits::create (i, f, this));
                continue;
              }
            }

            // ThreeCellDonAgglutinates_ct
            //
            if (n.name () == "ThreeCellDonAgglutinates_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ThreeCellDonAgglutinates_ct_.present ())
              {
                this->ThreeCellDonAgglutinates_ct_.set (ThreeCellDonAgglutinates_ct_traits::create (i, f, this));
                continue;
              }
            }

            // FourCellAgglutinates_ct
            //
            if (n.name () == "FourCellAgglutinates_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!FourCellAgglutinates_ct_.present ())
              {
                this->FourCellAgglutinates_ct_.set (FourCellAgglutinates_ct_traits::create (i, f, this));
                continue;
              }
            }

            // RemovedRBC_ct
            //
            if (n.name () == "RemovedRBC_ct" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RemovedRBC_ct_.present ())
              {
                this->RemovedRBC_ct_.set (RemovedRBC_ct_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!ArterialOxygenAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialOxygenAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCarbonDioxideAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCarbonDioxideAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RhFactorMismatch_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RhFactorMismatch_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RhTransfusionReactionVolume_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RhTransfusionReactionVolume_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DonorRBC_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DonorRBC_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PatientRBC_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PatientRBC_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TwoCellAgglutinates_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TwoCellAgglutinates_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ThreeCellPatAgglutinates_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ThreeCellPatAgglutinates_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ThreeCellDonAgglutinates_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ThreeCellDonAgglutinates_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FourCellAgglutinates_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FourCellAgglutinates_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RemovedRBC_ct_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RemovedRBC_ct",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsBloodChemistrySystemData* BioGearsBloodChemistrySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsBloodChemistrySystemData (*this, f, c);
        }

        BioGearsBloodChemistrySystemData& BioGearsBloodChemistrySystemData::
        operator= (const BioGearsBloodChemistrySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& > (*this) = x;
            this->ArterialOxygenAverage_mmHg_ = x.ArterialOxygenAverage_mmHg_;
            this->ArterialCarbonDioxideAverage_mmHg_ = x.ArterialCarbonDioxideAverage_mmHg_;
            this->RhFactorMismatch_ct_ = x.RhFactorMismatch_ct_;
            this->RhTransfusionReactionVolume_mL_ = x.RhTransfusionReactionVolume_mL_;
            this->DonorRBC_ct_ = x.DonorRBC_ct_;
            this->PatientRBC_ct_ = x.PatientRBC_ct_;
            this->TwoCellAgglutinates_ct_ = x.TwoCellAgglutinates_ct_;
            this->ThreeCellPatAgglutinates_ct_ = x.ThreeCellPatAgglutinates_ct_;
            this->ThreeCellDonAgglutinates_ct_ = x.ThreeCellDonAgglutinates_ct_;
            this->FourCellAgglutinates_ct_ = x.FourCellAgglutinates_ct_;
            this->RemovedRBC_ct_ = x.RemovedRBC_ct_;
          }

          return *this;
        }

        BioGearsBloodChemistrySystemData::
        ~BioGearsBloodChemistrySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsBloodChemistrySystemData >
        _xsd_BioGearsBloodChemistrySystemData_type_factory_init (
          "BioGearsBloodChemistrySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsCardiovascularSystemData
        //

        BioGearsCardiovascularSystemData::
        BioGearsCardiovascularSystemData ()
        : ::mil::tatrc::physiology::datamodel::CardiovascularSystemData (),
          StartSystole_ (this),
          HeartFlowDetected_ (this),
          EnterCardiacArrest_ (this),
          CardiacCyclePeriod_s_ (this),
          CurrentCardiacCycleDuration_s_ (this),
          LeftHeartElastanceModifier_ (this),
          LeftHeartElastance_mmHg_Per_mL_ (this),
          LeftHeartElastanceMax_mmHg_Per_mL_ (this),
          LeftHeartElastanceMin_mmHg_Per_mL_ (this),
          RightHeartElastance_mmHg_Per_mL_ (this),
          RightHeartElastanceMax_mmHg_Per_mL_ (this),
          RightHeartElastanceMin_mmHg_Per_mL_ (this),
          CompressionTime_s_ (this),
          CompressionRatio_ (this),
          CompressionPeriod_s_ (this),
          CurrentCardiacCycleTime_s_ (this),
          CardiacCycleDiastolicVolume_mL_ (this),
          CardiacCycleAortaPressureLow_mmHg_ (this),
          CardiacCycleAortaPressureHigh_mmHg_ (this),
          CardiacCyclePulmonaryArteryPressureLow_mmHg_ (this),
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_ (this),
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ (this),
          CardiacCycleStrokeVolume_mL_ (this),
          CardiacCycleArterialPressure_mmHg_ (this),
          CardiacCycleArterialCO2PartialPressure_mmHg_ (this),
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ (this),
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ (this),
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_ (this),
          CardiacCyclePulmonaryArteryPressure_mmHg_ (this),
          CardiacCycleCentralVenousPressure_mmHg_ (this),
          CardiacCycleSkinFlow_mL_Per_s_ (this)
        {
        }

        BioGearsCardiovascularSystemData::
        BioGearsCardiovascularSystemData (const StartSystole_type& StartSystole,
                                          const HeartFlowDetected_type& HeartFlowDetected,
                                          const EnterCardiacArrest_type& EnterCardiacArrest,
                                          const CardiacCyclePeriod_s_type& CardiacCyclePeriod_s,
                                          const CurrentCardiacCycleDuration_s_type& CurrentCardiacCycleDuration_s,
                                          const LeftHeartElastanceModifier_type& LeftHeartElastanceModifier,
                                          const LeftHeartElastance_mmHg_Per_mL_type& LeftHeartElastance_mmHg_Per_mL,
                                          const LeftHeartElastanceMax_mmHg_Per_mL_type& LeftHeartElastanceMax_mmHg_Per_mL,
                                          const LeftHeartElastanceMin_mmHg_Per_mL_type& LeftHeartElastanceMin_mmHg_Per_mL,
                                          const RightHeartElastance_mmHg_Per_mL_type& RightHeartElastance_mmHg_Per_mL,
                                          const RightHeartElastanceMax_mmHg_Per_mL_type& RightHeartElastanceMax_mmHg_Per_mL,
                                          const RightHeartElastanceMin_mmHg_Per_mL_type& RightHeartElastanceMin_mmHg_Per_mL,
                                          const CompressionTime_s_type& CompressionTime_s,
                                          const CompressionRatio_type& CompressionRatio,
                                          const CompressionPeriod_s_type& CompressionPeriod_s,
                                          const CurrentCardiacCycleTime_s_type& CurrentCardiacCycleTime_s,
                                          const CardiacCycleDiastolicVolume_mL_type& CardiacCycleDiastolicVolume_mL,
                                          const CardiacCycleAortaPressureLow_mmHg_type& CardiacCycleAortaPressureLow_mmHg,
                                          const CardiacCycleAortaPressureHigh_mmHg_type& CardiacCycleAortaPressureHigh_mmHg,
                                          const CardiacCyclePulmonaryArteryPressureLow_mmHg_type& CardiacCyclePulmonaryArteryPressureLow_mmHg,
                                          const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& CardiacCyclePulmonaryArteryPressureHigh_mmHg,
                                          const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& LastCardiacCycleMeanArterialCO2PartialPressure_mmHg,
                                          const CardiacCycleStrokeVolume_mL_type& CardiacCycleStrokeVolume_mL,
                                          const CardiacCycleArterialPressure_mmHg_type& CardiacCycleArterialPressure_mmHg,
                                          const CardiacCycleArterialCO2PartialPressure_mmHg_type& CardiacCycleArterialCO2PartialPressure_mmHg,
                                          const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& CardiacCyclePulmonaryCapillariesWedgePressure_mmHg,
                                          const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& CardiacCyclePulmonaryCapillariesFlow_mL_Per_s,
                                          const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& CardiacCyclePulmonaryShuntFlow_mL_Per_s,
                                          const CardiacCyclePulmonaryArteryPressure_mmHg_type& CardiacCyclePulmonaryArteryPressure_mmHg,
                                          const CardiacCycleCentralVenousPressure_mmHg_type& CardiacCycleCentralVenousPressure_mmHg,
                                          const CardiacCycleSkinFlow_mL_Per_s_type& CardiacCycleSkinFlow_mL_Per_s)
        : ::mil::tatrc::physiology::datamodel::CardiovascularSystemData (),
          StartSystole_ (StartSystole, this),
          HeartFlowDetected_ (HeartFlowDetected, this),
          EnterCardiacArrest_ (EnterCardiacArrest, this),
          CardiacCyclePeriod_s_ (CardiacCyclePeriod_s, this),
          CurrentCardiacCycleDuration_s_ (CurrentCardiacCycleDuration_s, this),
          LeftHeartElastanceModifier_ (LeftHeartElastanceModifier, this),
          LeftHeartElastance_mmHg_Per_mL_ (LeftHeartElastance_mmHg_Per_mL, this),
          LeftHeartElastanceMax_mmHg_Per_mL_ (LeftHeartElastanceMax_mmHg_Per_mL, this),
          LeftHeartElastanceMin_mmHg_Per_mL_ (LeftHeartElastanceMin_mmHg_Per_mL, this),
          RightHeartElastance_mmHg_Per_mL_ (RightHeartElastance_mmHg_Per_mL, this),
          RightHeartElastanceMax_mmHg_Per_mL_ (RightHeartElastanceMax_mmHg_Per_mL, this),
          RightHeartElastanceMin_mmHg_Per_mL_ (RightHeartElastanceMin_mmHg_Per_mL, this),
          CompressionTime_s_ (CompressionTime_s, this),
          CompressionRatio_ (CompressionRatio, this),
          CompressionPeriod_s_ (CompressionPeriod_s, this),
          CurrentCardiacCycleTime_s_ (CurrentCardiacCycleTime_s, this),
          CardiacCycleDiastolicVolume_mL_ (CardiacCycleDiastolicVolume_mL, this),
          CardiacCycleAortaPressureLow_mmHg_ (CardiacCycleAortaPressureLow_mmHg, this),
          CardiacCycleAortaPressureHigh_mmHg_ (CardiacCycleAortaPressureHigh_mmHg, this),
          CardiacCyclePulmonaryArteryPressureLow_mmHg_ (CardiacCyclePulmonaryArteryPressureLow_mmHg, this),
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_ (CardiacCyclePulmonaryArteryPressureHigh_mmHg, this),
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ (LastCardiacCycleMeanArterialCO2PartialPressure_mmHg, this),
          CardiacCycleStrokeVolume_mL_ (CardiacCycleStrokeVolume_mL, this),
          CardiacCycleArterialPressure_mmHg_ (CardiacCycleArterialPressure_mmHg, this),
          CardiacCycleArterialCO2PartialPressure_mmHg_ (CardiacCycleArterialCO2PartialPressure_mmHg, this),
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ (CardiacCyclePulmonaryCapillariesWedgePressure_mmHg, this),
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ (CardiacCyclePulmonaryCapillariesFlow_mL_Per_s, this),
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_ (CardiacCyclePulmonaryShuntFlow_mL_Per_s, this),
          CardiacCyclePulmonaryArteryPressure_mmHg_ (CardiacCyclePulmonaryArteryPressure_mmHg, this),
          CardiacCycleCentralVenousPressure_mmHg_ (CardiacCycleCentralVenousPressure_mmHg, this),
          CardiacCycleSkinFlow_mL_Per_s_ (CardiacCycleSkinFlow_mL_Per_s, this)
        {
        }

        BioGearsCardiovascularSystemData::
        BioGearsCardiovascularSystemData (const StartSystole_type& StartSystole,
                                          const HeartFlowDetected_type& HeartFlowDetected,
                                          const EnterCardiacArrest_type& EnterCardiacArrest,
                                          const CardiacCyclePeriod_s_type& CardiacCyclePeriod_s,
                                          const CurrentCardiacCycleDuration_s_type& CurrentCardiacCycleDuration_s,
                                          const LeftHeartElastanceModifier_type& LeftHeartElastanceModifier,
                                          const LeftHeartElastance_mmHg_Per_mL_type& LeftHeartElastance_mmHg_Per_mL,
                                          const LeftHeartElastanceMax_mmHg_Per_mL_type& LeftHeartElastanceMax_mmHg_Per_mL,
                                          const LeftHeartElastanceMin_mmHg_Per_mL_type& LeftHeartElastanceMin_mmHg_Per_mL,
                                          const RightHeartElastance_mmHg_Per_mL_type& RightHeartElastance_mmHg_Per_mL,
                                          const RightHeartElastanceMax_mmHg_Per_mL_type& RightHeartElastanceMax_mmHg_Per_mL,
                                          const RightHeartElastanceMin_mmHg_Per_mL_type& RightHeartElastanceMin_mmHg_Per_mL,
                                          const CompressionTime_s_type& CompressionTime_s,
                                          const CompressionRatio_type& CompressionRatio,
                                          const CompressionPeriod_s_type& CompressionPeriod_s,
                                          const CurrentCardiacCycleTime_s_type& CurrentCardiacCycleTime_s,
                                          const CardiacCycleDiastolicVolume_mL_type& CardiacCycleDiastolicVolume_mL,
                                          const CardiacCycleAortaPressureLow_mmHg_type& CardiacCycleAortaPressureLow_mmHg,
                                          const CardiacCycleAortaPressureHigh_mmHg_type& CardiacCycleAortaPressureHigh_mmHg,
                                          const CardiacCyclePulmonaryArteryPressureLow_mmHg_type& CardiacCyclePulmonaryArteryPressureLow_mmHg,
                                          const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& CardiacCyclePulmonaryArteryPressureHigh_mmHg,
                                          const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& LastCardiacCycleMeanArterialCO2PartialPressure_mmHg,
                                          const CardiacCycleStrokeVolume_mL_type& CardiacCycleStrokeVolume_mL,
                                          ::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type > CardiacCycleArterialPressure_mmHg,
                                          ::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type > CardiacCycleArterialCO2PartialPressure_mmHg,
                                          ::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > CardiacCyclePulmonaryCapillariesWedgePressure_mmHg,
                                          ::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > CardiacCyclePulmonaryCapillariesFlow_mL_Per_s,
                                          ::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > CardiacCyclePulmonaryShuntFlow_mL_Per_s,
                                          ::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type > CardiacCyclePulmonaryArteryPressure_mmHg,
                                          ::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type > CardiacCycleCentralVenousPressure_mmHg,
                                          ::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type > CardiacCycleSkinFlow_mL_Per_s)
        : ::mil::tatrc::physiology::datamodel::CardiovascularSystemData (),
          StartSystole_ (StartSystole, this),
          HeartFlowDetected_ (HeartFlowDetected, this),
          EnterCardiacArrest_ (EnterCardiacArrest, this),
          CardiacCyclePeriod_s_ (CardiacCyclePeriod_s, this),
          CurrentCardiacCycleDuration_s_ (CurrentCardiacCycleDuration_s, this),
          LeftHeartElastanceModifier_ (LeftHeartElastanceModifier, this),
          LeftHeartElastance_mmHg_Per_mL_ (LeftHeartElastance_mmHg_Per_mL, this),
          LeftHeartElastanceMax_mmHg_Per_mL_ (LeftHeartElastanceMax_mmHg_Per_mL, this),
          LeftHeartElastanceMin_mmHg_Per_mL_ (LeftHeartElastanceMin_mmHg_Per_mL, this),
          RightHeartElastance_mmHg_Per_mL_ (RightHeartElastance_mmHg_Per_mL, this),
          RightHeartElastanceMax_mmHg_Per_mL_ (RightHeartElastanceMax_mmHg_Per_mL, this),
          RightHeartElastanceMin_mmHg_Per_mL_ (RightHeartElastanceMin_mmHg_Per_mL, this),
          CompressionTime_s_ (CompressionTime_s, this),
          CompressionRatio_ (CompressionRatio, this),
          CompressionPeriod_s_ (CompressionPeriod_s, this),
          CurrentCardiacCycleTime_s_ (CurrentCardiacCycleTime_s, this),
          CardiacCycleDiastolicVolume_mL_ (CardiacCycleDiastolicVolume_mL, this),
          CardiacCycleAortaPressureLow_mmHg_ (CardiacCycleAortaPressureLow_mmHg, this),
          CardiacCycleAortaPressureHigh_mmHg_ (CardiacCycleAortaPressureHigh_mmHg, this),
          CardiacCyclePulmonaryArteryPressureLow_mmHg_ (CardiacCyclePulmonaryArteryPressureLow_mmHg, this),
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_ (CardiacCyclePulmonaryArteryPressureHigh_mmHg, this),
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ (LastCardiacCycleMeanArterialCO2PartialPressure_mmHg, this),
          CardiacCycleStrokeVolume_mL_ (CardiacCycleStrokeVolume_mL, this),
          CardiacCycleArterialPressure_mmHg_ (std::move (CardiacCycleArterialPressure_mmHg), this),
          CardiacCycleArterialCO2PartialPressure_mmHg_ (std::move (CardiacCycleArterialCO2PartialPressure_mmHg), this),
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ (std::move (CardiacCyclePulmonaryCapillariesWedgePressure_mmHg), this),
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ (std::move (CardiacCyclePulmonaryCapillariesFlow_mL_Per_s), this),
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_ (std::move (CardiacCyclePulmonaryShuntFlow_mL_Per_s), this),
          CardiacCyclePulmonaryArteryPressure_mmHg_ (std::move (CardiacCyclePulmonaryArteryPressure_mmHg), this),
          CardiacCycleCentralVenousPressure_mmHg_ (std::move (CardiacCycleCentralVenousPressure_mmHg), this),
          CardiacCycleSkinFlow_mL_Per_s_ (std::move (CardiacCycleSkinFlow_mL_Per_s), this)
        {
        }

        BioGearsCardiovascularSystemData::
        BioGearsCardiovascularSystemData (const BioGearsCardiovascularSystemData& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CardiovascularSystemData (x, f, c),
          StartSystole_ (x.StartSystole_, f, this),
          HeartFlowDetected_ (x.HeartFlowDetected_, f, this),
          EnterCardiacArrest_ (x.EnterCardiacArrest_, f, this),
          CardiacCyclePeriod_s_ (x.CardiacCyclePeriod_s_, f, this),
          CurrentCardiacCycleDuration_s_ (x.CurrentCardiacCycleDuration_s_, f, this),
          LeftHeartElastanceModifier_ (x.LeftHeartElastanceModifier_, f, this),
          LeftHeartElastance_mmHg_Per_mL_ (x.LeftHeartElastance_mmHg_Per_mL_, f, this),
          LeftHeartElastanceMax_mmHg_Per_mL_ (x.LeftHeartElastanceMax_mmHg_Per_mL_, f, this),
          LeftHeartElastanceMin_mmHg_Per_mL_ (x.LeftHeartElastanceMin_mmHg_Per_mL_, f, this),
          RightHeartElastance_mmHg_Per_mL_ (x.RightHeartElastance_mmHg_Per_mL_, f, this),
          RightHeartElastanceMax_mmHg_Per_mL_ (x.RightHeartElastanceMax_mmHg_Per_mL_, f, this),
          RightHeartElastanceMin_mmHg_Per_mL_ (x.RightHeartElastanceMin_mmHg_Per_mL_, f, this),
          CompressionTime_s_ (x.CompressionTime_s_, f, this),
          CompressionRatio_ (x.CompressionRatio_, f, this),
          CompressionPeriod_s_ (x.CompressionPeriod_s_, f, this),
          CurrentCardiacCycleTime_s_ (x.CurrentCardiacCycleTime_s_, f, this),
          CardiacCycleDiastolicVolume_mL_ (x.CardiacCycleDiastolicVolume_mL_, f, this),
          CardiacCycleAortaPressureLow_mmHg_ (x.CardiacCycleAortaPressureLow_mmHg_, f, this),
          CardiacCycleAortaPressureHigh_mmHg_ (x.CardiacCycleAortaPressureHigh_mmHg_, f, this),
          CardiacCyclePulmonaryArteryPressureLow_mmHg_ (x.CardiacCyclePulmonaryArteryPressureLow_mmHg_, f, this),
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_ (x.CardiacCyclePulmonaryArteryPressureHigh_mmHg_, f, this),
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ (x.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_, f, this),
          CardiacCycleStrokeVolume_mL_ (x.CardiacCycleStrokeVolume_mL_, f, this),
          CardiacCycleArterialPressure_mmHg_ (x.CardiacCycleArterialPressure_mmHg_, f, this),
          CardiacCycleArterialCO2PartialPressure_mmHg_ (x.CardiacCycleArterialCO2PartialPressure_mmHg_, f, this),
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ (x.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_, f, this),
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ (x.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_, f, this),
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_ (x.CardiacCyclePulmonaryShuntFlow_mL_Per_s_, f, this),
          CardiacCyclePulmonaryArteryPressure_mmHg_ (x.CardiacCyclePulmonaryArteryPressure_mmHg_, f, this),
          CardiacCycleCentralVenousPressure_mmHg_ (x.CardiacCycleCentralVenousPressure_mmHg_, f, this),
          CardiacCycleSkinFlow_mL_Per_s_ (x.CardiacCycleSkinFlow_mL_Per_s_, f, this)
        {
        }

        BioGearsCardiovascularSystemData::
        BioGearsCardiovascularSystemData (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CardiovascularSystemData (e, f | ::xml_schema::flags::base, c),
          StartSystole_ (this),
          HeartFlowDetected_ (this),
          EnterCardiacArrest_ (this),
          CardiacCyclePeriod_s_ (this),
          CurrentCardiacCycleDuration_s_ (this),
          LeftHeartElastanceModifier_ (this),
          LeftHeartElastance_mmHg_Per_mL_ (this),
          LeftHeartElastanceMax_mmHg_Per_mL_ (this),
          LeftHeartElastanceMin_mmHg_Per_mL_ (this),
          RightHeartElastance_mmHg_Per_mL_ (this),
          RightHeartElastanceMax_mmHg_Per_mL_ (this),
          RightHeartElastanceMin_mmHg_Per_mL_ (this),
          CompressionTime_s_ (this),
          CompressionRatio_ (this),
          CompressionPeriod_s_ (this),
          CurrentCardiacCycleTime_s_ (this),
          CardiacCycleDiastolicVolume_mL_ (this),
          CardiacCycleAortaPressureLow_mmHg_ (this),
          CardiacCycleAortaPressureHigh_mmHg_ (this),
          CardiacCyclePulmonaryArteryPressureLow_mmHg_ (this),
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_ (this),
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ (this),
          CardiacCycleStrokeVolume_mL_ (this),
          CardiacCycleArterialPressure_mmHg_ (this),
          CardiacCycleArterialCO2PartialPressure_mmHg_ (this),
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ (this),
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ (this),
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_ (this),
          CardiacCyclePulmonaryArteryPressure_mmHg_ (this),
          CardiacCycleCentralVenousPressure_mmHg_ (this),
          CardiacCycleSkinFlow_mL_Per_s_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsCardiovascularSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CardiovascularSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // StartSystole
            //
            if (n.name () == "StartSystole" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!StartSystole_.present ())
              {
                this->StartSystole_.set (StartSystole_traits::create (i, f, this));
                continue;
              }
            }

            // HeartFlowDetected
            //
            if (n.name () == "HeartFlowDetected" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HeartFlowDetected_.present ())
              {
                this->HeartFlowDetected_.set (HeartFlowDetected_traits::create (i, f, this));
                continue;
              }
            }

            // EnterCardiacArrest
            //
            if (n.name () == "EnterCardiacArrest" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!EnterCardiacArrest_.present ())
              {
                this->EnterCardiacArrest_.set (EnterCardiacArrest_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCyclePeriod_s
            //
            if (n.name () == "CardiacCyclePeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCyclePeriod_s_.present ())
              {
                this->CardiacCyclePeriod_s_.set (CardiacCyclePeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // CurrentCardiacCycleDuration_s
            //
            if (n.name () == "CurrentCardiacCycleDuration_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CurrentCardiacCycleDuration_s_.present ())
              {
                this->CurrentCardiacCycleDuration_s_.set (CurrentCardiacCycleDuration_s_traits::create (i, f, this));
                continue;
              }
            }

            // LeftHeartElastanceModifier
            //
            if (n.name () == "LeftHeartElastanceModifier" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftHeartElastanceModifier_.present ())
              {
                this->LeftHeartElastanceModifier_.set (LeftHeartElastanceModifier_traits::create (i, f, this));
                continue;
              }
            }

            // LeftHeartElastance_mmHg_Per_mL
            //
            if (n.name () == "LeftHeartElastance_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftHeartElastance_mmHg_Per_mL_.present ())
              {
                this->LeftHeartElastance_mmHg_Per_mL_.set (LeftHeartElastance_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // LeftHeartElastanceMax_mmHg_Per_mL
            //
            if (n.name () == "LeftHeartElastanceMax_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftHeartElastanceMax_mmHg_Per_mL_.present ())
              {
                this->LeftHeartElastanceMax_mmHg_Per_mL_.set (LeftHeartElastanceMax_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // LeftHeartElastanceMin_mmHg_Per_mL
            //
            if (n.name () == "LeftHeartElastanceMin_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftHeartElastanceMin_mmHg_Per_mL_.present ())
              {
                this->LeftHeartElastanceMin_mmHg_Per_mL_.set (LeftHeartElastanceMin_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // RightHeartElastance_mmHg_Per_mL
            //
            if (n.name () == "RightHeartElastance_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RightHeartElastance_mmHg_Per_mL_.present ())
              {
                this->RightHeartElastance_mmHg_Per_mL_.set (RightHeartElastance_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // RightHeartElastanceMax_mmHg_Per_mL
            //
            if (n.name () == "RightHeartElastanceMax_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RightHeartElastanceMax_mmHg_Per_mL_.present ())
              {
                this->RightHeartElastanceMax_mmHg_Per_mL_.set (RightHeartElastanceMax_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // RightHeartElastanceMin_mmHg_Per_mL
            //
            if (n.name () == "RightHeartElastanceMin_mmHg_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RightHeartElastanceMin_mmHg_Per_mL_.present ())
              {
                this->RightHeartElastanceMin_mmHg_Per_mL_.set (RightHeartElastanceMin_mmHg_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // CompressionTime_s
            //
            if (n.name () == "CompressionTime_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CompressionTime_s_.present ())
              {
                this->CompressionTime_s_.set (CompressionTime_s_traits::create (i, f, this));
                continue;
              }
            }

            // CompressionRatio
            //
            if (n.name () == "CompressionRatio" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CompressionRatio_.present ())
              {
                this->CompressionRatio_.set (CompressionRatio_traits::create (i, f, this));
                continue;
              }
            }

            // CompressionPeriod_s
            //
            if (n.name () == "CompressionPeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CompressionPeriod_s_.present ())
              {
                this->CompressionPeriod_s_.set (CompressionPeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // CurrentCardiacCycleTime_s
            //
            if (n.name () == "CurrentCardiacCycleTime_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CurrentCardiacCycleTime_s_.present ())
              {
                this->CurrentCardiacCycleTime_s_.set (CurrentCardiacCycleTime_s_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCycleDiastolicVolume_mL
            //
            if (n.name () == "CardiacCycleDiastolicVolume_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCycleDiastolicVolume_mL_.present ())
              {
                this->CardiacCycleDiastolicVolume_mL_.set (CardiacCycleDiastolicVolume_mL_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCycleAortaPressureLow_mmHg
            //
            if (n.name () == "CardiacCycleAortaPressureLow_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCycleAortaPressureLow_mmHg_.present ())
              {
                this->CardiacCycleAortaPressureLow_mmHg_.set (CardiacCycleAortaPressureLow_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCycleAortaPressureHigh_mmHg
            //
            if (n.name () == "CardiacCycleAortaPressureHigh_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCycleAortaPressureHigh_mmHg_.present ())
              {
                this->CardiacCycleAortaPressureHigh_mmHg_.set (CardiacCycleAortaPressureHigh_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCyclePulmonaryArteryPressureLow_mmHg
            //
            if (n.name () == "CardiacCyclePulmonaryArteryPressureLow_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCyclePulmonaryArteryPressureLow_mmHg_.present ())
              {
                this->CardiacCyclePulmonaryArteryPressureLow_mmHg_.set (CardiacCyclePulmonaryArteryPressureLow_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCyclePulmonaryArteryPressureHigh_mmHg
            //
            if (n.name () == "CardiacCyclePulmonaryArteryPressureHigh_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCyclePulmonaryArteryPressureHigh_mmHg_.present ())
              {
                this->CardiacCyclePulmonaryArteryPressureHigh_mmHg_.set (CardiacCyclePulmonaryArteryPressureHigh_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
            //
            if (n.name () == "LastCardiacCycleMeanArterialCO2PartialPressure_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.present ())
              {
                this->LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.set (LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCycleStrokeVolume_mL
            //
            if (n.name () == "CardiacCycleStrokeVolume_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiacCycleStrokeVolume_mL_.present ())
              {
                this->CardiacCycleStrokeVolume_mL_.set (CardiacCycleStrokeVolume_mL_traits::create (i, f, this));
                continue;
              }
            }

            // CardiacCycleArterialPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCycleArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCycleArterialPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCycleArterialPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type > r (
                    dynamic_cast< CardiacCycleArterialPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCycleArterialPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCycleArterialCO2PartialPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCycleArterialCO2PartialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCycleArterialCO2PartialPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCycleArterialCO2PartialPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type > r (
                    dynamic_cast< CardiacCycleArterialCO2PartialPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCycleArterialCO2PartialPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCyclePulmonaryCapillariesWedgePressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.present ())
                {
                  ::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > r (
                    dynamic_cast< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCyclePulmonaryCapillariesFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > r (
                    dynamic_cast< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCyclePulmonaryShuntFlow_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCyclePulmonaryShuntFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCyclePulmonaryShuntFlow_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > r (
                    dynamic_cast< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCyclePulmonaryArteryPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCyclePulmonaryArteryPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCyclePulmonaryArteryPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCyclePulmonaryArteryPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type > r (
                    dynamic_cast< CardiacCyclePulmonaryArteryPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCyclePulmonaryArteryPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCycleCentralVenousPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCycleCentralVenousPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCycleCentralVenousPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCycleCentralVenousPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type > r (
                    dynamic_cast< CardiacCycleCentralVenousPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCycleCentralVenousPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacCycleSkinFlow_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacCycleSkinFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacCycleSkinFlow_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiacCycleSkinFlow_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type > r (
                    dynamic_cast< CardiacCycleSkinFlow_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacCycleSkinFlow_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!StartSystole_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StartSystole",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartFlowDetected_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartFlowDetected",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!EnterCardiacArrest_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EnterCardiacArrest",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CurrentCardiacCycleDuration_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CurrentCardiacCycleDuration_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftHeartElastanceModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftHeartElastanceModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftHeartElastance_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftHeartElastance_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftHeartElastanceMax_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftHeartElastanceMax_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftHeartElastanceMin_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftHeartElastanceMin_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightHeartElastance_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightHeartElastance_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightHeartElastanceMax_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightHeartElastanceMax_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightHeartElastanceMin_mmHg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightHeartElastanceMin_mmHg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CompressionTime_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CompressionTime_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CompressionRatio_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CompressionRatio",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CompressionPeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CompressionPeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CurrentCardiacCycleTime_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CurrentCardiacCycleTime_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleDiastolicVolume_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleDiastolicVolume_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleAortaPressureLow_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleAortaPressureLow_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleAortaPressureHigh_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleAortaPressureHigh_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryArteryPressureLow_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryArteryPressureLow_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryArteryPressureHigh_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryArteryPressureHigh_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LastCardiacCycleMeanArterialCO2PartialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleStrokeVolume_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleStrokeVolume_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleArterialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleArterialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleArterialCO2PartialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleArterialCO2PartialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryCapillariesWedgePressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryCapillariesFlow_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryShuntFlow_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryShuntFlow_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCyclePulmonaryArteryPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCyclePulmonaryArteryPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleCentralVenousPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleCentralVenousPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiacCycleSkinFlow_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiacCycleSkinFlow_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsCardiovascularSystemData* BioGearsCardiovascularSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsCardiovascularSystemData (*this, f, c);
        }

        BioGearsCardiovascularSystemData& BioGearsCardiovascularSystemData::
        operator= (const BioGearsCardiovascularSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& > (*this) = x;
            this->StartSystole_ = x.StartSystole_;
            this->HeartFlowDetected_ = x.HeartFlowDetected_;
            this->EnterCardiacArrest_ = x.EnterCardiacArrest_;
            this->CardiacCyclePeriod_s_ = x.CardiacCyclePeriod_s_;
            this->CurrentCardiacCycleDuration_s_ = x.CurrentCardiacCycleDuration_s_;
            this->LeftHeartElastanceModifier_ = x.LeftHeartElastanceModifier_;
            this->LeftHeartElastance_mmHg_Per_mL_ = x.LeftHeartElastance_mmHg_Per_mL_;
            this->LeftHeartElastanceMax_mmHg_Per_mL_ = x.LeftHeartElastanceMax_mmHg_Per_mL_;
            this->LeftHeartElastanceMin_mmHg_Per_mL_ = x.LeftHeartElastanceMin_mmHg_Per_mL_;
            this->RightHeartElastance_mmHg_Per_mL_ = x.RightHeartElastance_mmHg_Per_mL_;
            this->RightHeartElastanceMax_mmHg_Per_mL_ = x.RightHeartElastanceMax_mmHg_Per_mL_;
            this->RightHeartElastanceMin_mmHg_Per_mL_ = x.RightHeartElastanceMin_mmHg_Per_mL_;
            this->CompressionTime_s_ = x.CompressionTime_s_;
            this->CompressionRatio_ = x.CompressionRatio_;
            this->CompressionPeriod_s_ = x.CompressionPeriod_s_;
            this->CurrentCardiacCycleTime_s_ = x.CurrentCardiacCycleTime_s_;
            this->CardiacCycleDiastolicVolume_mL_ = x.CardiacCycleDiastolicVolume_mL_;
            this->CardiacCycleAortaPressureLow_mmHg_ = x.CardiacCycleAortaPressureLow_mmHg_;
            this->CardiacCycleAortaPressureHigh_mmHg_ = x.CardiacCycleAortaPressureHigh_mmHg_;
            this->CardiacCyclePulmonaryArteryPressureLow_mmHg_ = x.CardiacCyclePulmonaryArteryPressureLow_mmHg_;
            this->CardiacCyclePulmonaryArteryPressureHigh_mmHg_ = x.CardiacCyclePulmonaryArteryPressureHigh_mmHg_;
            this->LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_ = x.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_;
            this->CardiacCycleStrokeVolume_mL_ = x.CardiacCycleStrokeVolume_mL_;
            this->CardiacCycleArterialPressure_mmHg_ = x.CardiacCycleArterialPressure_mmHg_;
            this->CardiacCycleArterialCO2PartialPressure_mmHg_ = x.CardiacCycleArterialCO2PartialPressure_mmHg_;
            this->CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_ = x.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_;
            this->CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_ = x.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_;
            this->CardiacCyclePulmonaryShuntFlow_mL_Per_s_ = x.CardiacCyclePulmonaryShuntFlow_mL_Per_s_;
            this->CardiacCyclePulmonaryArteryPressure_mmHg_ = x.CardiacCyclePulmonaryArteryPressure_mmHg_;
            this->CardiacCycleCentralVenousPressure_mmHg_ = x.CardiacCycleCentralVenousPressure_mmHg_;
            this->CardiacCycleSkinFlow_mL_Per_s_ = x.CardiacCycleSkinFlow_mL_Per_s_;
          }

          return *this;
        }

        BioGearsCardiovascularSystemData::
        ~BioGearsCardiovascularSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsCardiovascularSystemData >
        _xsd_BioGearsCardiovascularSystemData_type_factory_init (
          "BioGearsCardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsDrugSystemData
        //

        BioGearsDrugSystemData::
        BioGearsDrugSystemData ()
        : ::mil::tatrc::physiology::datamodel::DrugSystemData (),
          BolusAdministration_ (this),
          NasalStates_ (this),
          TransmucosalStates_ (this),
          SarinRbcAcetylcholinesteraseComplex_nM_ (this),
          AgedRbcAcetylcholinesterase_nM_ (this)
        {
        }

        BioGearsDrugSystemData::
        BioGearsDrugSystemData (const SarinRbcAcetylcholinesteraseComplex_nM_type& SarinRbcAcetylcholinesteraseComplex_nM,
                                const AgedRbcAcetylcholinesterase_nM_type& AgedRbcAcetylcholinesterase_nM)
        : ::mil::tatrc::physiology::datamodel::DrugSystemData (),
          BolusAdministration_ (this),
          NasalStates_ (this),
          TransmucosalStates_ (this),
          SarinRbcAcetylcholinesteraseComplex_nM_ (SarinRbcAcetylcholinesteraseComplex_nM, this),
          AgedRbcAcetylcholinesterase_nM_ (AgedRbcAcetylcholinesterase_nM, this)
        {
        }

        BioGearsDrugSystemData::
        BioGearsDrugSystemData (const BioGearsDrugSystemData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DrugSystemData (x, f, c),
          BolusAdministration_ (x.BolusAdministration_, f, this),
          NasalStates_ (x.NasalStates_, f, this),
          TransmucosalStates_ (x.TransmucosalStates_, f, this),
          SarinRbcAcetylcholinesteraseComplex_nM_ (x.SarinRbcAcetylcholinesteraseComplex_nM_, f, this),
          AgedRbcAcetylcholinesterase_nM_ (x.AgedRbcAcetylcholinesterase_nM_, f, this)
        {
        }

        BioGearsDrugSystemData::
        BioGearsDrugSystemData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DrugSystemData (e, f | ::xml_schema::flags::base, c),
          BolusAdministration_ (this),
          NasalStates_ (this),
          TransmucosalStates_ (this),
          SarinRbcAcetylcholinesteraseComplex_nM_ (this),
          AgedRbcAcetylcholinesterase_nM_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsDrugSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::DrugSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BolusAdministration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BolusAdministration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BolusAdministration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< BolusAdministration_type > r (
                  dynamic_cast< BolusAdministration_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->BolusAdministration_.push_back (::std::move (r));
                continue;
              }
            }

            // NasalStates
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NasalStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NasalStates_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< NasalStates_type > r (
                  dynamic_cast< NasalStates_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->NasalStates_.push_back (::std::move (r));
                continue;
              }
            }

            // TransmucosalStates
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TransmucosalStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TransmucosalStates_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< TransmucosalStates_type > r (
                  dynamic_cast< TransmucosalStates_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->TransmucosalStates_.push_back (::std::move (r));
                continue;
              }
            }

            // SarinRbcAcetylcholinesteraseComplex_nM
            //
            if (n.name () == "SarinRbcAcetylcholinesteraseComplex_nM" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!SarinRbcAcetylcholinesteraseComplex_nM_.present ())
              {
                this->SarinRbcAcetylcholinesteraseComplex_nM_.set (SarinRbcAcetylcholinesteraseComplex_nM_traits::create (i, f, this));
                continue;
              }
            }

            // AgedRbcAcetylcholinesterase_nM
            //
            if (n.name () == "AgedRbcAcetylcholinesterase_nM" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!AgedRbcAcetylcholinesterase_nM_.present ())
              {
                this->AgedRbcAcetylcholinesterase_nM_.set (AgedRbcAcetylcholinesterase_nM_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SarinRbcAcetylcholinesteraseComplex_nM_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SarinRbcAcetylcholinesteraseComplex_nM",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AgedRbcAcetylcholinesterase_nM_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AgedRbcAcetylcholinesterase_nM",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsDrugSystemData* BioGearsDrugSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsDrugSystemData (*this, f, c);
        }

        BioGearsDrugSystemData& BioGearsDrugSystemData::
        operator= (const BioGearsDrugSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::DrugSystemData& > (*this) = x;
            this->BolusAdministration_ = x.BolusAdministration_;
            this->NasalStates_ = x.NasalStates_;
            this->TransmucosalStates_ = x.TransmucosalStates_;
            this->SarinRbcAcetylcholinesteraseComplex_nM_ = x.SarinRbcAcetylcholinesteraseComplex_nM_;
            this->AgedRbcAcetylcholinesterase_nM_ = x.AgedRbcAcetylcholinesterase_nM_;
          }

          return *this;
        }

        BioGearsDrugSystemData::
        ~BioGearsDrugSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsDrugSystemData >
        _xsd_BioGearsDrugSystemData_type_factory_init (
          "BioGearsDrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsEndocrineSystemData
        //

        BioGearsEndocrineSystemData::
        BioGearsEndocrineSystemData ()
        : ::mil::tatrc::physiology::datamodel::EndocrineSystemData ()
        {
        }

        BioGearsEndocrineSystemData::
        BioGearsEndocrineSystemData (const BioGearsEndocrineSystemData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::EndocrineSystemData (x, f, c)
        {
        }

        BioGearsEndocrineSystemData::
        BioGearsEndocrineSystemData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::EndocrineSystemData (e, f, c)
        {
        }

        BioGearsEndocrineSystemData* BioGearsEndocrineSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsEndocrineSystemData (*this, f, c);
        }

        BioGearsEndocrineSystemData::
        ~BioGearsEndocrineSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsEndocrineSystemData >
        _xsd_BioGearsEndocrineSystemData_type_factory_init (
          "BioGearsEndocrineSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsEnergySystemData
        //

        BioGearsEnergySystemData::
        BioGearsEnergySystemData ()
        : ::mil::tatrc::physiology::datamodel::EnergySystemData (),
          BloodpH_ (this),
          BicarbonateMolarity_mmol_Per_L_ (this),
          PackOn_ (this),
          PreviousWeightPack_kg_ (this)
        {
        }

        BioGearsEnergySystemData::
        BioGearsEnergySystemData (const BloodpH_type& BloodpH,
                                  const BicarbonateMolarity_mmol_Per_L_type& BicarbonateMolarity_mmol_Per_L,
                                  const PackOn_type& PackOn,
                                  const PreviousWeightPack_kg_type& PreviousWeightPack_kg)
        : ::mil::tatrc::physiology::datamodel::EnergySystemData (),
          BloodpH_ (BloodpH, this),
          BicarbonateMolarity_mmol_Per_L_ (BicarbonateMolarity_mmol_Per_L, this),
          PackOn_ (PackOn, this),
          PreviousWeightPack_kg_ (PreviousWeightPack_kg, this)
        {
        }

        BioGearsEnergySystemData::
        BioGearsEnergySystemData (::std::unique_ptr< BloodpH_type > BloodpH,
                                  ::std::unique_ptr< BicarbonateMolarity_mmol_Per_L_type > BicarbonateMolarity_mmol_Per_L,
                                  const PackOn_type& PackOn,
                                  const PreviousWeightPack_kg_type& PreviousWeightPack_kg)
        : ::mil::tatrc::physiology::datamodel::EnergySystemData (),
          BloodpH_ (std::move (BloodpH), this),
          BicarbonateMolarity_mmol_Per_L_ (std::move (BicarbonateMolarity_mmol_Per_L), this),
          PackOn_ (PackOn, this),
          PreviousWeightPack_kg_ (PreviousWeightPack_kg, this)
        {
        }

        BioGearsEnergySystemData::
        BioGearsEnergySystemData (const BioGearsEnergySystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::EnergySystemData (x, f, c),
          BloodpH_ (x.BloodpH_, f, this),
          BicarbonateMolarity_mmol_Per_L_ (x.BicarbonateMolarity_mmol_Per_L_, f, this),
          PackOn_ (x.PackOn_, f, this),
          PreviousWeightPack_kg_ (x.PreviousWeightPack_kg_, f, this)
        {
        }

        BioGearsEnergySystemData::
        BioGearsEnergySystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::EnergySystemData (e, f | ::xml_schema::flags::base, c),
          BloodpH_ (this),
          BicarbonateMolarity_mmol_Per_L_ (this),
          PackOn_ (this),
          PreviousWeightPack_kg_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsEnergySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::EnergySystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BloodpH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodpH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodpH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BloodpH_.present ())
                {
                  ::std::unique_ptr< BloodpH_type > r (
                    dynamic_cast< BloodpH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodpH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BicarbonateMolarity_mmol_Per_L
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BicarbonateMolarity_mmol_Per_L",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BicarbonateMolarity_mmol_Per_L_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BicarbonateMolarity_mmol_Per_L_.present ())
                {
                  ::std::unique_ptr< BicarbonateMolarity_mmol_Per_L_type > r (
                    dynamic_cast< BicarbonateMolarity_mmol_Per_L_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BicarbonateMolarity_mmol_Per_L_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PackOn
            //
            if (n.name () == "PackOn" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PackOn_.present ())
              {
                this->PackOn_.set (PackOn_traits::create (i, f, this));
                continue;
              }
            }

            // PreviousWeightPack_kg
            //
            if (n.name () == "PreviousWeightPack_kg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PreviousWeightPack_kg_.present ())
              {
                this->PreviousWeightPack_kg_.set (PreviousWeightPack_kg_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!BloodpH_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BloodpH",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BicarbonateMolarity_mmol_Per_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BicarbonateMolarity_mmol_Per_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PackOn_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PackOn",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PreviousWeightPack_kg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PreviousWeightPack_kg",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsEnergySystemData* BioGearsEnergySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsEnergySystemData (*this, f, c);
        }

        BioGearsEnergySystemData& BioGearsEnergySystemData::
        operator= (const BioGearsEnergySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::EnergySystemData& > (*this) = x;
            this->BloodpH_ = x.BloodpH_;
            this->BicarbonateMolarity_mmol_Per_L_ = x.BicarbonateMolarity_mmol_Per_L_;
            this->PackOn_ = x.PackOn_;
            this->PreviousWeightPack_kg_ = x.PreviousWeightPack_kg_;
          }

          return *this;
        }

        BioGearsEnergySystemData::
        ~BioGearsEnergySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsEnergySystemData >
        _xsd_BioGearsEnergySystemData_type_factory_init (
          "BioGearsEnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsGastrointestinalSystemData
        //

        BioGearsGastrointestinalSystemData::
        BioGearsGastrointestinalSystemData ()
        : ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData ()
        {
        }

        BioGearsGastrointestinalSystemData::
        BioGearsGastrointestinalSystemData (const BioGearsGastrointestinalSystemData& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData (x, f, c)
        {
        }

        BioGearsGastrointestinalSystemData::
        BioGearsGastrointestinalSystemData (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData (e, f, c)
        {
        }

        BioGearsGastrointestinalSystemData* BioGearsGastrointestinalSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsGastrointestinalSystemData (*this, f, c);
        }

        BioGearsGastrointestinalSystemData::
        ~BioGearsGastrointestinalSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsGastrointestinalSystemData >
        _xsd_BioGearsGastrointestinalSystemData_type_factory_init (
          "BioGearsGastrointestinalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsHepaticSystemData
        //

        BioGearsHepaticSystemData::
        BioGearsHepaticSystemData ()
        : ::mil::tatrc::physiology::datamodel::HepaticSystemData ()
        {
        }

        BioGearsHepaticSystemData::
        BioGearsHepaticSystemData (const BioGearsHepaticSystemData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::HepaticSystemData (x, f, c)
        {
        }

        BioGearsHepaticSystemData::
        BioGearsHepaticSystemData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::HepaticSystemData (e, f, c)
        {
        }

        BioGearsHepaticSystemData* BioGearsHepaticSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsHepaticSystemData (*this, f, c);
        }

        BioGearsHepaticSystemData::
        ~BioGearsHepaticSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsHepaticSystemData >
        _xsd_BioGearsHepaticSystemData_type_factory_init (
          "BioGearsHepaticSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsNervousSystemData
        //

        BioGearsNervousSystemData::
        BioGearsNervousSystemData ()
        : ::mil::tatrc::physiology::datamodel::NervousSystemData (),
          AfferentChemoreceptor_Hz_ (this),
          AfferentPulmonaryStrechReceptor_Hz_ (this),
          AorticBaroreceptorStrain_ (this),
          ArterialOxygenBaseline_mmHg_ (this),
          ArterialCarbonDioxideBaseline_mmHg_ (this),
          BaroreceptorOperatingPoint_mmHg_ (this),
          CardiopulmonaryInputBaseline_mmHg_ (this),
          CardiopulmonaryInput_mmHg_ (this),
          CarotidBaroreceptorStrain_ (this),
          CerebralArteriesEffectors_Large_ (this),
          CerebralArteriesEffectors_Small_ (this),
          CerebralBloodFlowBaseline_mL_Per_s_ (this),
          CerebralBloodFlowInput_mL_Per_s_ (this),
          CentralFrequencyDelta_Per_min_ (this),
          CentralPressureDelta_cmH2O_ (this),
          CerebralOxygenSaturationBaseline_ (this),
          CerebralPerfusionPressureBaseline_mmHg_ (this),
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_ (this),
          ChemoreceptorFiringRateSetPoint_Hz_ (this),
          ComplianceModifier_ (this),
          HeartElastanceModifier_ (this),
          HeartOxygenBaseline_ (this),
          HeartRateModifierSympathetic_ (this),
          HeartRateModifierVagal_ (this),
          HypercapniaThresholdHeart_ (this),
          HypercapniaThresholdPeripheral_ (this),
          HypoxiaThresholdHeart_ (this),
          HypoxiaThresholdPeripheral_ (this),
          MeanLungVolume_L_ (this),
          MuscleOxygenBaseline_ (this),
          OxygenAutoregulatorHeart_ (this),
          OxygenAutoregulatorMuscle_ (this),
          PeripheralFrequencyDelta_Per_min_ (this),
          PeripheralPressureDelta_cmH2O_ (this),
          ResistanceModifierExtrasplanchnic_ (this),
          ResistanceModifierMuscle_ (this),
          ResistanceModifierSplanchnic_ (this),
          SympatheticPeripheralSignalBaseline_ (this),
          SympatheticSinoatrialSignalBaseline_ (this),
          SympatheticPeripheralSignalFatigue_ (this),
          VagalSignalBaseline_ (this)
        {
        }

        BioGearsNervousSystemData::
        BioGearsNervousSystemData (const AfferentChemoreceptor_Hz_type& AfferentChemoreceptor_Hz,
                                   const AfferentPulmonaryStrechReceptor_Hz_type& AfferentPulmonaryStrechReceptor_Hz,
                                   const AorticBaroreceptorStrain_type& AorticBaroreceptorStrain,
                                   const ArterialOxygenBaseline_mmHg_type& ArterialOxygenBaseline_mmHg,
                                   const ArterialCarbonDioxideBaseline_mmHg_type& ArterialCarbonDioxideBaseline_mmHg,
                                   const BaroreceptorOperatingPoint_mmHg_type& BaroreceptorOperatingPoint_mmHg,
                                   const CardiopulmonaryInputBaseline_mmHg_type& CardiopulmonaryInputBaseline_mmHg,
                                   const CardiopulmonaryInput_mmHg_type& CardiopulmonaryInput_mmHg,
                                   const CarotidBaroreceptorStrain_type& CarotidBaroreceptorStrain,
                                   const CerebralBloodFlowBaseline_mL_Per_s_type& CerebralBloodFlowBaseline_mL_Per_s,
                                   const CerebralBloodFlowInput_mL_Per_s_type& CerebralBloodFlowInput_mL_Per_s,
                                   const CentralFrequencyDelta_Per_min_type& CentralFrequencyDelta_Per_min,
                                   const CentralPressureDelta_cmH2O_type& CentralPressureDelta_cmH2O,
                                   const CerebralOxygenSaturationBaseline_type& CerebralOxygenSaturationBaseline,
                                   const CerebralPerfusionPressureBaseline_mmHg_type& CerebralPerfusionPressureBaseline_mmHg,
                                   const ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_type& ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz,
                                   const ChemoreceptorFiringRateSetPoint_Hz_type& ChemoreceptorFiringRateSetPoint_Hz,
                                   const ComplianceModifier_type& ComplianceModifier,
                                   const HeartElastanceModifier_type& HeartElastanceModifier,
                                   const HeartOxygenBaseline_type& HeartOxygenBaseline,
                                   const HeartRateModifierSympathetic_type& HeartRateModifierSympathetic,
                                   const HeartRateModifierVagal_type& HeartRateModifierVagal,
                                   const HypercapniaThresholdHeart_type& HypercapniaThresholdHeart,
                                   const HypercapniaThresholdPeripheral_type& HypercapniaThresholdPeripheral,
                                   const HypoxiaThresholdHeart_type& HypoxiaThresholdHeart,
                                   const HypoxiaThresholdPeripheral_type& HypoxiaThresholdPeripheral,
                                   const MeanLungVolume_L_type& MeanLungVolume_L,
                                   const MuscleOxygenBaseline_type& MuscleOxygenBaseline,
                                   const OxygenAutoregulatorHeart_type& OxygenAutoregulatorHeart,
                                   const OxygenAutoregulatorMuscle_type& OxygenAutoregulatorMuscle,
                                   const PeripheralFrequencyDelta_Per_min_type& PeripheralFrequencyDelta_Per_min,
                                   const PeripheralPressureDelta_cmH2O_type& PeripheralPressureDelta_cmH2O,
                                   const ResistanceModifierExtrasplanchnic_type& ResistanceModifierExtrasplanchnic,
                                   const ResistanceModifierMuscle_type& ResistanceModifierMuscle,
                                   const ResistanceModifierSplanchnic_type& ResistanceModifierSplanchnic,
                                   const SympatheticPeripheralSignalBaseline_type& SympatheticPeripheralSignalBaseline,
                                   const SympatheticSinoatrialSignalBaseline_type& SympatheticSinoatrialSignalBaseline,
                                   const SympatheticPeripheralSignalFatigue_type& SympatheticPeripheralSignalFatigue,
                                   const VagalSignalBaseline_type& VagalSignalBaseline)
        : ::mil::tatrc::physiology::datamodel::NervousSystemData (),
          AfferentChemoreceptor_Hz_ (AfferentChemoreceptor_Hz, this),
          AfferentPulmonaryStrechReceptor_Hz_ (AfferentPulmonaryStrechReceptor_Hz, this),
          AorticBaroreceptorStrain_ (AorticBaroreceptorStrain, this),
          ArterialOxygenBaseline_mmHg_ (ArterialOxygenBaseline_mmHg, this),
          ArterialCarbonDioxideBaseline_mmHg_ (ArterialCarbonDioxideBaseline_mmHg, this),
          BaroreceptorOperatingPoint_mmHg_ (BaroreceptorOperatingPoint_mmHg, this),
          CardiopulmonaryInputBaseline_mmHg_ (CardiopulmonaryInputBaseline_mmHg, this),
          CardiopulmonaryInput_mmHg_ (CardiopulmonaryInput_mmHg, this),
          CarotidBaroreceptorStrain_ (CarotidBaroreceptorStrain, this),
          CerebralArteriesEffectors_Large_ (this),
          CerebralArteriesEffectors_Small_ (this),
          CerebralBloodFlowBaseline_mL_Per_s_ (CerebralBloodFlowBaseline_mL_Per_s, this),
          CerebralBloodFlowInput_mL_Per_s_ (CerebralBloodFlowInput_mL_Per_s, this),
          CentralFrequencyDelta_Per_min_ (CentralFrequencyDelta_Per_min, this),
          CentralPressureDelta_cmH2O_ (CentralPressureDelta_cmH2O, this),
          CerebralOxygenSaturationBaseline_ (CerebralOxygenSaturationBaseline, this),
          CerebralPerfusionPressureBaseline_mmHg_ (CerebralPerfusionPressureBaseline_mmHg, this),
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_ (ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz, this),
          ChemoreceptorFiringRateSetPoint_Hz_ (ChemoreceptorFiringRateSetPoint_Hz, this),
          ComplianceModifier_ (ComplianceModifier, this),
          HeartElastanceModifier_ (HeartElastanceModifier, this),
          HeartOxygenBaseline_ (HeartOxygenBaseline, this),
          HeartRateModifierSympathetic_ (HeartRateModifierSympathetic, this),
          HeartRateModifierVagal_ (HeartRateModifierVagal, this),
          HypercapniaThresholdHeart_ (HypercapniaThresholdHeart, this),
          HypercapniaThresholdPeripheral_ (HypercapniaThresholdPeripheral, this),
          HypoxiaThresholdHeart_ (HypoxiaThresholdHeart, this),
          HypoxiaThresholdPeripheral_ (HypoxiaThresholdPeripheral, this),
          MeanLungVolume_L_ (MeanLungVolume_L, this),
          MuscleOxygenBaseline_ (MuscleOxygenBaseline, this),
          OxygenAutoregulatorHeart_ (OxygenAutoregulatorHeart, this),
          OxygenAutoregulatorMuscle_ (OxygenAutoregulatorMuscle, this),
          PeripheralFrequencyDelta_Per_min_ (PeripheralFrequencyDelta_Per_min, this),
          PeripheralPressureDelta_cmH2O_ (PeripheralPressureDelta_cmH2O, this),
          ResistanceModifierExtrasplanchnic_ (ResistanceModifierExtrasplanchnic, this),
          ResistanceModifierMuscle_ (ResistanceModifierMuscle, this),
          ResistanceModifierSplanchnic_ (ResistanceModifierSplanchnic, this),
          SympatheticPeripheralSignalBaseline_ (SympatheticPeripheralSignalBaseline, this),
          SympatheticSinoatrialSignalBaseline_ (SympatheticSinoatrialSignalBaseline, this),
          SympatheticPeripheralSignalFatigue_ (SympatheticPeripheralSignalFatigue, this),
          VagalSignalBaseline_ (VagalSignalBaseline, this)
        {
        }

        BioGearsNervousSystemData::
        BioGearsNervousSystemData (const BioGearsNervousSystemData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::NervousSystemData (x, f, c),
          AfferentChemoreceptor_Hz_ (x.AfferentChemoreceptor_Hz_, f, this),
          AfferentPulmonaryStrechReceptor_Hz_ (x.AfferentPulmonaryStrechReceptor_Hz_, f, this),
          AorticBaroreceptorStrain_ (x.AorticBaroreceptorStrain_, f, this),
          ArterialOxygenBaseline_mmHg_ (x.ArterialOxygenBaseline_mmHg_, f, this),
          ArterialCarbonDioxideBaseline_mmHg_ (x.ArterialCarbonDioxideBaseline_mmHg_, f, this),
          BaroreceptorOperatingPoint_mmHg_ (x.BaroreceptorOperatingPoint_mmHg_, f, this),
          CardiopulmonaryInputBaseline_mmHg_ (x.CardiopulmonaryInputBaseline_mmHg_, f, this),
          CardiopulmonaryInput_mmHg_ (x.CardiopulmonaryInput_mmHg_, f, this),
          CarotidBaroreceptorStrain_ (x.CarotidBaroreceptorStrain_, f, this),
          CerebralArteriesEffectors_Large_ (x.CerebralArteriesEffectors_Large_, f, this),
          CerebralArteriesEffectors_Small_ (x.CerebralArteriesEffectors_Small_, f, this),
          CerebralBloodFlowBaseline_mL_Per_s_ (x.CerebralBloodFlowBaseline_mL_Per_s_, f, this),
          CerebralBloodFlowInput_mL_Per_s_ (x.CerebralBloodFlowInput_mL_Per_s_, f, this),
          CentralFrequencyDelta_Per_min_ (x.CentralFrequencyDelta_Per_min_, f, this),
          CentralPressureDelta_cmH2O_ (x.CentralPressureDelta_cmH2O_, f, this),
          CerebralOxygenSaturationBaseline_ (x.CerebralOxygenSaturationBaseline_, f, this),
          CerebralPerfusionPressureBaseline_mmHg_ (x.CerebralPerfusionPressureBaseline_mmHg_, f, this),
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_ (x.ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_, f, this),
          ChemoreceptorFiringRateSetPoint_Hz_ (x.ChemoreceptorFiringRateSetPoint_Hz_, f, this),
          ComplianceModifier_ (x.ComplianceModifier_, f, this),
          HeartElastanceModifier_ (x.HeartElastanceModifier_, f, this),
          HeartOxygenBaseline_ (x.HeartOxygenBaseline_, f, this),
          HeartRateModifierSympathetic_ (x.HeartRateModifierSympathetic_, f, this),
          HeartRateModifierVagal_ (x.HeartRateModifierVagal_, f, this),
          HypercapniaThresholdHeart_ (x.HypercapniaThresholdHeart_, f, this),
          HypercapniaThresholdPeripheral_ (x.HypercapniaThresholdPeripheral_, f, this),
          HypoxiaThresholdHeart_ (x.HypoxiaThresholdHeart_, f, this),
          HypoxiaThresholdPeripheral_ (x.HypoxiaThresholdPeripheral_, f, this),
          MeanLungVolume_L_ (x.MeanLungVolume_L_, f, this),
          MuscleOxygenBaseline_ (x.MuscleOxygenBaseline_, f, this),
          OxygenAutoregulatorHeart_ (x.OxygenAutoregulatorHeart_, f, this),
          OxygenAutoregulatorMuscle_ (x.OxygenAutoregulatorMuscle_, f, this),
          PeripheralFrequencyDelta_Per_min_ (x.PeripheralFrequencyDelta_Per_min_, f, this),
          PeripheralPressureDelta_cmH2O_ (x.PeripheralPressureDelta_cmH2O_, f, this),
          ResistanceModifierExtrasplanchnic_ (x.ResistanceModifierExtrasplanchnic_, f, this),
          ResistanceModifierMuscle_ (x.ResistanceModifierMuscle_, f, this),
          ResistanceModifierSplanchnic_ (x.ResistanceModifierSplanchnic_, f, this),
          SympatheticPeripheralSignalBaseline_ (x.SympatheticPeripheralSignalBaseline_, f, this),
          SympatheticSinoatrialSignalBaseline_ (x.SympatheticSinoatrialSignalBaseline_, f, this),
          SympatheticPeripheralSignalFatigue_ (x.SympatheticPeripheralSignalFatigue_, f, this),
          VagalSignalBaseline_ (x.VagalSignalBaseline_, f, this)
        {
        }

        BioGearsNervousSystemData::
        BioGearsNervousSystemData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::NervousSystemData (e, f | ::xml_schema::flags::base, c),
          AfferentChemoreceptor_Hz_ (this),
          AfferentPulmonaryStrechReceptor_Hz_ (this),
          AorticBaroreceptorStrain_ (this),
          ArterialOxygenBaseline_mmHg_ (this),
          ArterialCarbonDioxideBaseline_mmHg_ (this),
          BaroreceptorOperatingPoint_mmHg_ (this),
          CardiopulmonaryInputBaseline_mmHg_ (this),
          CardiopulmonaryInput_mmHg_ (this),
          CarotidBaroreceptorStrain_ (this),
          CerebralArteriesEffectors_Large_ (this),
          CerebralArteriesEffectors_Small_ (this),
          CerebralBloodFlowBaseline_mL_Per_s_ (this),
          CerebralBloodFlowInput_mL_Per_s_ (this),
          CentralFrequencyDelta_Per_min_ (this),
          CentralPressureDelta_cmH2O_ (this),
          CerebralOxygenSaturationBaseline_ (this),
          CerebralPerfusionPressureBaseline_mmHg_ (this),
          ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_ (this),
          ChemoreceptorFiringRateSetPoint_Hz_ (this),
          ComplianceModifier_ (this),
          HeartElastanceModifier_ (this),
          HeartOxygenBaseline_ (this),
          HeartRateModifierSympathetic_ (this),
          HeartRateModifierVagal_ (this),
          HypercapniaThresholdHeart_ (this),
          HypercapniaThresholdPeripheral_ (this),
          HypoxiaThresholdHeart_ (this),
          HypoxiaThresholdPeripheral_ (this),
          MeanLungVolume_L_ (this),
          MuscleOxygenBaseline_ (this),
          OxygenAutoregulatorHeart_ (this),
          OxygenAutoregulatorMuscle_ (this),
          PeripheralFrequencyDelta_Per_min_ (this),
          PeripheralPressureDelta_cmH2O_ (this),
          ResistanceModifierExtrasplanchnic_ (this),
          ResistanceModifierMuscle_ (this),
          ResistanceModifierSplanchnic_ (this),
          SympatheticPeripheralSignalBaseline_ (this),
          SympatheticSinoatrialSignalBaseline_ (this),
          SympatheticPeripheralSignalFatigue_ (this),
          VagalSignalBaseline_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsNervousSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::NervousSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AfferentChemoreceptor_Hz
            //
            if (n.name () == "AfferentChemoreceptor_Hz" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!AfferentChemoreceptor_Hz_.present ())
              {
                this->AfferentChemoreceptor_Hz_.set (AfferentChemoreceptor_Hz_traits::create (i, f, this));
                continue;
              }
            }

            // AfferentPulmonaryStrechReceptor_Hz
            //
            if (n.name () == "AfferentPulmonaryStrechReceptor_Hz" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!AfferentPulmonaryStrechReceptor_Hz_.present ())
              {
                this->AfferentPulmonaryStrechReceptor_Hz_.set (AfferentPulmonaryStrechReceptor_Hz_traits::create (i, f, this));
                continue;
              }
            }

            // AorticBaroreceptorStrain
            //
            if (n.name () == "AorticBaroreceptorStrain" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!AorticBaroreceptorStrain_.present ())
              {
                this->AorticBaroreceptorStrain_.set (AorticBaroreceptorStrain_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialOxygenBaseline_mmHg
            //
            if (n.name () == "ArterialOxygenBaseline_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialOxygenBaseline_mmHg_.present ())
              {
                this->ArterialOxygenBaseline_mmHg_.set (ArterialOxygenBaseline_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialCarbonDioxideBaseline_mmHg
            //
            if (n.name () == "ArterialCarbonDioxideBaseline_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialCarbonDioxideBaseline_mmHg_.present ())
              {
                this->ArterialCarbonDioxideBaseline_mmHg_.set (ArterialCarbonDioxideBaseline_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // BaroreceptorOperatingPoint_mmHg
            //
            if (n.name () == "BaroreceptorOperatingPoint_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BaroreceptorOperatingPoint_mmHg_.present ())
              {
                this->BaroreceptorOperatingPoint_mmHg_.set (BaroreceptorOperatingPoint_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiopulmonaryInputBaseline_mmHg
            //
            if (n.name () == "CardiopulmonaryInputBaseline_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiopulmonaryInputBaseline_mmHg_.present ())
              {
                this->CardiopulmonaryInputBaseline_mmHg_.set (CardiopulmonaryInputBaseline_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CardiopulmonaryInput_mmHg
            //
            if (n.name () == "CardiopulmonaryInput_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CardiopulmonaryInput_mmHg_.present ())
              {
                this->CardiopulmonaryInput_mmHg_.set (CardiopulmonaryInput_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // CarotidBaroreceptorStrain
            //
            if (n.name () == "CarotidBaroreceptorStrain" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CarotidBaroreceptorStrain_.present ())
              {
                this->CarotidBaroreceptorStrain_.set (CarotidBaroreceptorStrain_traits::create (i, f, this));
                continue;
              }
            }

            // CerebralArteriesEffectors_Large
            //
            if (n.name () == "CerebralArteriesEffectors_Large" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              this->CerebralArteriesEffectors_Large_.push_back (CerebralArteriesEffectors_Large_traits::create (i, f, this));
              continue;
            }

            // CerebralArteriesEffectors_Small
            //
            if (n.name () == "CerebralArteriesEffectors_Small" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              this->CerebralArteriesEffectors_Small_.push_back (CerebralArteriesEffectors_Small_traits::create (i, f, this));
              continue;
            }

            // CerebralBloodFlowBaseline_mL_Per_s
            //
            if (n.name () == "CerebralBloodFlowBaseline_mL_Per_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CerebralBloodFlowBaseline_mL_Per_s_.present ())
              {
                this->CerebralBloodFlowBaseline_mL_Per_s_.set (CerebralBloodFlowBaseline_mL_Per_s_traits::create (i, f, this));
                continue;
              }
            }

            // CerebralBloodFlowInput_mL_Per_s
            //
            if (n.name () == "CerebralBloodFlowInput_mL_Per_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CerebralBloodFlowInput_mL_Per_s_.present ())
              {
                this->CerebralBloodFlowInput_mL_Per_s_.set (CerebralBloodFlowInput_mL_Per_s_traits::create (i, f, this));
                continue;
              }
            }

            // CentralFrequencyDelta_Per_min
            //
            if (n.name () == "CentralFrequencyDelta_Per_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CentralFrequencyDelta_Per_min_.present ())
              {
                this->CentralFrequencyDelta_Per_min_.set (CentralFrequencyDelta_Per_min_traits::create (i, f, this));
                continue;
              }
            }

            // CentralPressureDelta_cmH2O
            //
            if (n.name () == "CentralPressureDelta_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CentralPressureDelta_cmH2O_.present ())
              {
                this->CentralPressureDelta_cmH2O_.set (CentralPressureDelta_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // CerebralOxygenSaturationBaseline
            //
            if (n.name () == "CerebralOxygenSaturationBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CerebralOxygenSaturationBaseline_.present ())
              {
                this->CerebralOxygenSaturationBaseline_.set (CerebralOxygenSaturationBaseline_traits::create (i, f, this));
                continue;
              }
            }

            // CerebralPerfusionPressureBaseline_mmHg
            //
            if (n.name () == "CerebralPerfusionPressureBaseline_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!CerebralPerfusionPressureBaseline_mmHg_.present ())
              {
                this->CerebralPerfusionPressureBaseline_mmHg_.set (CerebralPerfusionPressureBaseline_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz
            //
            if (n.name () == "ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.present ())
              {
                this->ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.set (ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_traits::create (i, f, this));
                continue;
              }
            }

            // ChemoreceptorFiringRateSetPoint_Hz
            //
            if (n.name () == "ChemoreceptorFiringRateSetPoint_Hz" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ChemoreceptorFiringRateSetPoint_Hz_.present ())
              {
                this->ChemoreceptorFiringRateSetPoint_Hz_.set (ChemoreceptorFiringRateSetPoint_Hz_traits::create (i, f, this));
                continue;
              }
            }

            // ComplianceModifier
            //
            if (n.name () == "ComplianceModifier" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ComplianceModifier_.present ())
              {
                this->ComplianceModifier_.set (ComplianceModifier_traits::create (i, f, this));
                continue;
              }
            }

            // HeartElastanceModifier
            //
            if (n.name () == "HeartElastanceModifier" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HeartElastanceModifier_.present ())
              {
                this->HeartElastanceModifier_.set (HeartElastanceModifier_traits::create (i, f, this));
                continue;
              }
            }

            // HeartOxygenBaseline
            //
            if (n.name () == "HeartOxygenBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HeartOxygenBaseline_.present ())
              {
                this->HeartOxygenBaseline_.set (HeartOxygenBaseline_traits::create (i, f, this));
                continue;
              }
            }

            // HeartRateModifierSympathetic
            //
            if (n.name () == "HeartRateModifierSympathetic" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HeartRateModifierSympathetic_.present ())
              {
                this->HeartRateModifierSympathetic_.set (HeartRateModifierSympathetic_traits::create (i, f, this));
                continue;
              }
            }

            // HeartRateModifierVagal
            //
            if (n.name () == "HeartRateModifierVagal" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HeartRateModifierVagal_.present ())
              {
                this->HeartRateModifierVagal_.set (HeartRateModifierVagal_traits::create (i, f, this));
                continue;
              }
            }

            // HypercapniaThresholdHeart
            //
            if (n.name () == "HypercapniaThresholdHeart" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HypercapniaThresholdHeart_.present ())
              {
                this->HypercapniaThresholdHeart_.set (HypercapniaThresholdHeart_traits::create (i, f, this));
                continue;
              }
            }

            // HypercapniaThresholdPeripheral
            //
            if (n.name () == "HypercapniaThresholdPeripheral" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HypercapniaThresholdPeripheral_.present ())
              {
                this->HypercapniaThresholdPeripheral_.set (HypercapniaThresholdPeripheral_traits::create (i, f, this));
                continue;
              }
            }

            // HypoxiaThresholdHeart
            //
            if (n.name () == "HypoxiaThresholdHeart" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HypoxiaThresholdHeart_.present ())
              {
                this->HypoxiaThresholdHeart_.set (HypoxiaThresholdHeart_traits::create (i, f, this));
                continue;
              }
            }

            // HypoxiaThresholdPeripheral
            //
            if (n.name () == "HypoxiaThresholdPeripheral" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HypoxiaThresholdPeripheral_.present ())
              {
                this->HypoxiaThresholdPeripheral_.set (HypoxiaThresholdPeripheral_traits::create (i, f, this));
                continue;
              }
            }

            // MeanLungVolume_L
            //
            if (n.name () == "MeanLungVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!MeanLungVolume_L_.present ())
              {
                this->MeanLungVolume_L_.set (MeanLungVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // MuscleOxygenBaseline
            //
            if (n.name () == "MuscleOxygenBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!MuscleOxygenBaseline_.present ())
              {
                this->MuscleOxygenBaseline_.set (MuscleOxygenBaseline_traits::create (i, f, this));
                continue;
              }
            }

            // OxygenAutoregulatorHeart
            //
            if (n.name () == "OxygenAutoregulatorHeart" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!OxygenAutoregulatorHeart_.present ())
              {
                this->OxygenAutoregulatorHeart_.set (OxygenAutoregulatorHeart_traits::create (i, f, this));
                continue;
              }
            }

            // OxygenAutoregulatorMuscle
            //
            if (n.name () == "OxygenAutoregulatorMuscle" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!OxygenAutoregulatorMuscle_.present ())
              {
                this->OxygenAutoregulatorMuscle_.set (OxygenAutoregulatorMuscle_traits::create (i, f, this));
                continue;
              }
            }

            // PeripheralFrequencyDelta_Per_min
            //
            if (n.name () == "PeripheralFrequencyDelta_Per_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PeripheralFrequencyDelta_Per_min_.present ())
              {
                this->PeripheralFrequencyDelta_Per_min_.set (PeripheralFrequencyDelta_Per_min_traits::create (i, f, this));
                continue;
              }
            }

            // PeripheralPressureDelta_cmH2O
            //
            if (n.name () == "PeripheralPressureDelta_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PeripheralPressureDelta_cmH2O_.present ())
              {
                this->PeripheralPressureDelta_cmH2O_.set (PeripheralPressureDelta_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // ResistanceModifierExtrasplanchnic
            //
            if (n.name () == "ResistanceModifierExtrasplanchnic" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ResistanceModifierExtrasplanchnic_.present ())
              {
                this->ResistanceModifierExtrasplanchnic_.set (ResistanceModifierExtrasplanchnic_traits::create (i, f, this));
                continue;
              }
            }

            // ResistanceModifierMuscle
            //
            if (n.name () == "ResistanceModifierMuscle" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ResistanceModifierMuscle_.present ())
              {
                this->ResistanceModifierMuscle_.set (ResistanceModifierMuscle_traits::create (i, f, this));
                continue;
              }
            }

            // ResistanceModifierSplanchnic
            //
            if (n.name () == "ResistanceModifierSplanchnic" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ResistanceModifierSplanchnic_.present ())
              {
                this->ResistanceModifierSplanchnic_.set (ResistanceModifierSplanchnic_traits::create (i, f, this));
                continue;
              }
            }

            // SympatheticPeripheralSignalBaseline
            //
            if (n.name () == "SympatheticPeripheralSignalBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!SympatheticPeripheralSignalBaseline_.present ())
              {
                this->SympatheticPeripheralSignalBaseline_.set (SympatheticPeripheralSignalBaseline_traits::create (i, f, this));
                continue;
              }
            }

            // SympatheticSinoatrialSignalBaseline
            //
            if (n.name () == "SympatheticSinoatrialSignalBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!SympatheticSinoatrialSignalBaseline_.present ())
              {
                this->SympatheticSinoatrialSignalBaseline_.set (SympatheticSinoatrialSignalBaseline_traits::create (i, f, this));
                continue;
              }
            }

            // SympatheticPeripheralSignalFatigue
            //
            if (n.name () == "SympatheticPeripheralSignalFatigue" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!SympatheticPeripheralSignalFatigue_.present ())
              {
                this->SympatheticPeripheralSignalFatigue_.set (SympatheticPeripheralSignalFatigue_traits::create (i, f, this));
                continue;
              }
            }

            // VagalSignalBaseline
            //
            if (n.name () == "VagalSignalBaseline" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!VagalSignalBaseline_.present ())
              {
                this->VagalSignalBaseline_.set (VagalSignalBaseline_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!AfferentChemoreceptor_Hz_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AfferentChemoreceptor_Hz",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AfferentPulmonaryStrechReceptor_Hz_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AfferentPulmonaryStrechReceptor_Hz",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AorticBaroreceptorStrain_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AorticBaroreceptorStrain",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialOxygenBaseline_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialOxygenBaseline_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCarbonDioxideBaseline_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCarbonDioxideBaseline_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BaroreceptorOperatingPoint_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BaroreceptorOperatingPoint_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiopulmonaryInputBaseline_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiopulmonaryInputBaseline_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiopulmonaryInput_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiopulmonaryInput_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CarotidBaroreceptorStrain_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CarotidBaroreceptorStrain",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CerebralBloodFlowBaseline_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CerebralBloodFlowBaseline_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CerebralBloodFlowInput_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CerebralBloodFlowInput_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CentralFrequencyDelta_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CentralFrequencyDelta_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CentralPressureDelta_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CentralPressureDelta_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CerebralOxygenSaturationBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CerebralOxygenSaturationBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CerebralPerfusionPressureBaseline_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CerebralPerfusionPressureBaseline_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ChemoreceptorFiringRateSetPoint_Hz_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ChemoreceptorFiringRateSetPoint_Hz",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ComplianceModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ComplianceModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartElastanceModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartElastanceModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartOxygenBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartOxygenBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartRateModifierSympathetic_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartRateModifierSympathetic",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartRateModifierVagal_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartRateModifierVagal",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HypercapniaThresholdHeart_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HypercapniaThresholdHeart",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HypercapniaThresholdPeripheral_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HypercapniaThresholdPeripheral",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HypoxiaThresholdHeart_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HypoxiaThresholdHeart",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HypoxiaThresholdPeripheral_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HypoxiaThresholdPeripheral",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MeanLungVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MeanLungVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MuscleOxygenBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MuscleOxygenBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!OxygenAutoregulatorHeart_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OxygenAutoregulatorHeart",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!OxygenAutoregulatorMuscle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OxygenAutoregulatorMuscle",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeripheralFrequencyDelta_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeripheralFrequencyDelta_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeripheralPressureDelta_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeripheralPressureDelta_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ResistanceModifierExtrasplanchnic_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ResistanceModifierExtrasplanchnic",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ResistanceModifierMuscle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ResistanceModifierMuscle",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ResistanceModifierSplanchnic_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ResistanceModifierSplanchnic",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SympatheticPeripheralSignalBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SympatheticPeripheralSignalBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SympatheticSinoatrialSignalBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SympatheticSinoatrialSignalBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SympatheticPeripheralSignalFatigue_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SympatheticPeripheralSignalFatigue",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!VagalSignalBaseline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VagalSignalBaseline",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsNervousSystemData* BioGearsNervousSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsNervousSystemData (*this, f, c);
        }

        BioGearsNervousSystemData& BioGearsNervousSystemData::
        operator= (const BioGearsNervousSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::NervousSystemData& > (*this) = x;
            this->AfferentChemoreceptor_Hz_ = x.AfferentChemoreceptor_Hz_;
            this->AfferentPulmonaryStrechReceptor_Hz_ = x.AfferentPulmonaryStrechReceptor_Hz_;
            this->AorticBaroreceptorStrain_ = x.AorticBaroreceptorStrain_;
            this->ArterialOxygenBaseline_mmHg_ = x.ArterialOxygenBaseline_mmHg_;
            this->ArterialCarbonDioxideBaseline_mmHg_ = x.ArterialCarbonDioxideBaseline_mmHg_;
            this->BaroreceptorOperatingPoint_mmHg_ = x.BaroreceptorOperatingPoint_mmHg_;
            this->CardiopulmonaryInputBaseline_mmHg_ = x.CardiopulmonaryInputBaseline_mmHg_;
            this->CardiopulmonaryInput_mmHg_ = x.CardiopulmonaryInput_mmHg_;
            this->CarotidBaroreceptorStrain_ = x.CarotidBaroreceptorStrain_;
            this->CerebralArteriesEffectors_Large_ = x.CerebralArteriesEffectors_Large_;
            this->CerebralArteriesEffectors_Small_ = x.CerebralArteriesEffectors_Small_;
            this->CerebralBloodFlowBaseline_mL_Per_s_ = x.CerebralBloodFlowBaseline_mL_Per_s_;
            this->CerebralBloodFlowInput_mL_Per_s_ = x.CerebralBloodFlowInput_mL_Per_s_;
            this->CentralFrequencyDelta_Per_min_ = x.CentralFrequencyDelta_Per_min_;
            this->CentralPressureDelta_cmH2O_ = x.CentralPressureDelta_cmH2O_;
            this->CerebralOxygenSaturationBaseline_ = x.CerebralOxygenSaturationBaseline_;
            this->CerebralPerfusionPressureBaseline_mmHg_ = x.CerebralPerfusionPressureBaseline_mmHg_;
            this->ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_ = x.ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz_;
            this->ChemoreceptorFiringRateSetPoint_Hz_ = x.ChemoreceptorFiringRateSetPoint_Hz_;
            this->ComplianceModifier_ = x.ComplianceModifier_;
            this->HeartElastanceModifier_ = x.HeartElastanceModifier_;
            this->HeartOxygenBaseline_ = x.HeartOxygenBaseline_;
            this->HeartRateModifierSympathetic_ = x.HeartRateModifierSympathetic_;
            this->HeartRateModifierVagal_ = x.HeartRateModifierVagal_;
            this->HypercapniaThresholdHeart_ = x.HypercapniaThresholdHeart_;
            this->HypercapniaThresholdPeripheral_ = x.HypercapniaThresholdPeripheral_;
            this->HypoxiaThresholdHeart_ = x.HypoxiaThresholdHeart_;
            this->HypoxiaThresholdPeripheral_ = x.HypoxiaThresholdPeripheral_;
            this->MeanLungVolume_L_ = x.MeanLungVolume_L_;
            this->MuscleOxygenBaseline_ = x.MuscleOxygenBaseline_;
            this->OxygenAutoregulatorHeart_ = x.OxygenAutoregulatorHeart_;
            this->OxygenAutoregulatorMuscle_ = x.OxygenAutoregulatorMuscle_;
            this->PeripheralFrequencyDelta_Per_min_ = x.PeripheralFrequencyDelta_Per_min_;
            this->PeripheralPressureDelta_cmH2O_ = x.PeripheralPressureDelta_cmH2O_;
            this->ResistanceModifierExtrasplanchnic_ = x.ResistanceModifierExtrasplanchnic_;
            this->ResistanceModifierMuscle_ = x.ResistanceModifierMuscle_;
            this->ResistanceModifierSplanchnic_ = x.ResistanceModifierSplanchnic_;
            this->SympatheticPeripheralSignalBaseline_ = x.SympatheticPeripheralSignalBaseline_;
            this->SympatheticSinoatrialSignalBaseline_ = x.SympatheticSinoatrialSignalBaseline_;
            this->SympatheticPeripheralSignalFatigue_ = x.SympatheticPeripheralSignalFatigue_;
            this->VagalSignalBaseline_ = x.VagalSignalBaseline_;
          }

          return *this;
        }

        BioGearsNervousSystemData::
        ~BioGearsNervousSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsNervousSystemData >
        _xsd_BioGearsNervousSystemData_type_factory_init (
          "BioGearsNervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsRenalSystemData
        //

        BioGearsRenalSystemData::
        BioGearsRenalSystemData ()
        : ::mil::tatrc::physiology::datamodel::RenalSystemData (),
          Urinating_ (this),
          LeftAfferentResistance_mmHg_s_Per_mL_ (this),
          RightAfferentResistance_mmHg_s_Per_mL_ (this),
          LeftSodiumFlowSetPoint_mg_Per_s_ (this),
          RightSodiumFlowSetPoint_mg_Per_s_ (this),
          UrineProductionRate_mL_Per_min_ (this),
          UrineOsmolarity_mOsm_Per_L_ (this),
          SodiumConcentration_mg_Per_mL_ (this),
          SodiumExcretionRate_mg_Per_min_ (this),
          LeftSodiumFlow_mg_Per_s_ (this),
          RightSodiumFlow_mg_Per_s_ (this),
          LeftRenalArterialPressure_mmHg_ (this),
          RightRenalArterialPressure_mmHg_ (this)
        {
        }

        BioGearsRenalSystemData::
        BioGearsRenalSystemData (const Urinating_type& Urinating,
                                 const LeftAfferentResistance_mmHg_s_Per_mL_type& LeftAfferentResistance_mmHg_s_Per_mL,
                                 const RightAfferentResistance_mmHg_s_Per_mL_type& RightAfferentResistance_mmHg_s_Per_mL,
                                 const LeftSodiumFlowSetPoint_mg_Per_s_type& LeftSodiumFlowSetPoint_mg_Per_s,
                                 const RightSodiumFlowSetPoint_mg_Per_s_type& RightSodiumFlowSetPoint_mg_Per_s,
                                 const UrineProductionRate_mL_Per_min_type& UrineProductionRate_mL_Per_min,
                                 const UrineOsmolarity_mOsm_Per_L_type& UrineOsmolarity_mOsm_Per_L,
                                 const SodiumConcentration_mg_Per_mL_type& SodiumConcentration_mg_Per_mL,
                                 const SodiumExcretionRate_mg_Per_min_type& SodiumExcretionRate_mg_Per_min,
                                 const LeftSodiumFlow_mg_Per_s_type& LeftSodiumFlow_mg_Per_s,
                                 const RightSodiumFlow_mg_Per_s_type& RightSodiumFlow_mg_Per_s,
                                 const LeftRenalArterialPressure_mmHg_type& LeftRenalArterialPressure_mmHg,
                                 const RightRenalArterialPressure_mmHg_type& RightRenalArterialPressure_mmHg)
        : ::mil::tatrc::physiology::datamodel::RenalSystemData (),
          Urinating_ (Urinating, this),
          LeftAfferentResistance_mmHg_s_Per_mL_ (LeftAfferentResistance_mmHg_s_Per_mL, this),
          RightAfferentResistance_mmHg_s_Per_mL_ (RightAfferentResistance_mmHg_s_Per_mL, this),
          LeftSodiumFlowSetPoint_mg_Per_s_ (LeftSodiumFlowSetPoint_mg_Per_s, this),
          RightSodiumFlowSetPoint_mg_Per_s_ (RightSodiumFlowSetPoint_mg_Per_s, this),
          UrineProductionRate_mL_Per_min_ (UrineProductionRate_mL_Per_min, this),
          UrineOsmolarity_mOsm_Per_L_ (UrineOsmolarity_mOsm_Per_L, this),
          SodiumConcentration_mg_Per_mL_ (SodiumConcentration_mg_Per_mL, this),
          SodiumExcretionRate_mg_Per_min_ (SodiumExcretionRate_mg_Per_min, this),
          LeftSodiumFlow_mg_Per_s_ (LeftSodiumFlow_mg_Per_s, this),
          RightSodiumFlow_mg_Per_s_ (RightSodiumFlow_mg_Per_s, this),
          LeftRenalArterialPressure_mmHg_ (LeftRenalArterialPressure_mmHg, this),
          RightRenalArterialPressure_mmHg_ (RightRenalArterialPressure_mmHg, this)
        {
        }

        BioGearsRenalSystemData::
        BioGearsRenalSystemData (const Urinating_type& Urinating,
                                 const LeftAfferentResistance_mmHg_s_Per_mL_type& LeftAfferentResistance_mmHg_s_Per_mL,
                                 const RightAfferentResistance_mmHg_s_Per_mL_type& RightAfferentResistance_mmHg_s_Per_mL,
                                 const LeftSodiumFlowSetPoint_mg_Per_s_type& LeftSodiumFlowSetPoint_mg_Per_s,
                                 const RightSodiumFlowSetPoint_mg_Per_s_type& RightSodiumFlowSetPoint_mg_Per_s,
                                 ::std::unique_ptr< UrineProductionRate_mL_Per_min_type > UrineProductionRate_mL_Per_min,
                                 ::std::unique_ptr< UrineOsmolarity_mOsm_Per_L_type > UrineOsmolarity_mOsm_Per_L,
                                 ::std::unique_ptr< SodiumConcentration_mg_Per_mL_type > SodiumConcentration_mg_Per_mL,
                                 ::std::unique_ptr< SodiumExcretionRate_mg_Per_min_type > SodiumExcretionRate_mg_Per_min,
                                 ::std::unique_ptr< LeftSodiumFlow_mg_Per_s_type > LeftSodiumFlow_mg_Per_s,
                                 ::std::unique_ptr< RightSodiumFlow_mg_Per_s_type > RightSodiumFlow_mg_Per_s,
                                 ::std::unique_ptr< LeftRenalArterialPressure_mmHg_type > LeftRenalArterialPressure_mmHg,
                                 ::std::unique_ptr< RightRenalArterialPressure_mmHg_type > RightRenalArterialPressure_mmHg)
        : ::mil::tatrc::physiology::datamodel::RenalSystemData (),
          Urinating_ (Urinating, this),
          LeftAfferentResistance_mmHg_s_Per_mL_ (LeftAfferentResistance_mmHg_s_Per_mL, this),
          RightAfferentResistance_mmHg_s_Per_mL_ (RightAfferentResistance_mmHg_s_Per_mL, this),
          LeftSodiumFlowSetPoint_mg_Per_s_ (LeftSodiumFlowSetPoint_mg_Per_s, this),
          RightSodiumFlowSetPoint_mg_Per_s_ (RightSodiumFlowSetPoint_mg_Per_s, this),
          UrineProductionRate_mL_Per_min_ (std::move (UrineProductionRate_mL_Per_min), this),
          UrineOsmolarity_mOsm_Per_L_ (std::move (UrineOsmolarity_mOsm_Per_L), this),
          SodiumConcentration_mg_Per_mL_ (std::move (SodiumConcentration_mg_Per_mL), this),
          SodiumExcretionRate_mg_Per_min_ (std::move (SodiumExcretionRate_mg_Per_min), this),
          LeftSodiumFlow_mg_Per_s_ (std::move (LeftSodiumFlow_mg_Per_s), this),
          RightSodiumFlow_mg_Per_s_ (std::move (RightSodiumFlow_mg_Per_s), this),
          LeftRenalArterialPressure_mmHg_ (std::move (LeftRenalArterialPressure_mmHg), this),
          RightRenalArterialPressure_mmHg_ (std::move (RightRenalArterialPressure_mmHg), this)
        {
        }

        BioGearsRenalSystemData::
        BioGearsRenalSystemData (const BioGearsRenalSystemData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RenalSystemData (x, f, c),
          Urinating_ (x.Urinating_, f, this),
          LeftAfferentResistance_mmHg_s_Per_mL_ (x.LeftAfferentResistance_mmHg_s_Per_mL_, f, this),
          RightAfferentResistance_mmHg_s_Per_mL_ (x.RightAfferentResistance_mmHg_s_Per_mL_, f, this),
          LeftSodiumFlowSetPoint_mg_Per_s_ (x.LeftSodiumFlowSetPoint_mg_Per_s_, f, this),
          RightSodiumFlowSetPoint_mg_Per_s_ (x.RightSodiumFlowSetPoint_mg_Per_s_, f, this),
          UrineProductionRate_mL_Per_min_ (x.UrineProductionRate_mL_Per_min_, f, this),
          UrineOsmolarity_mOsm_Per_L_ (x.UrineOsmolarity_mOsm_Per_L_, f, this),
          SodiumConcentration_mg_Per_mL_ (x.SodiumConcentration_mg_Per_mL_, f, this),
          SodiumExcretionRate_mg_Per_min_ (x.SodiumExcretionRate_mg_Per_min_, f, this),
          LeftSodiumFlow_mg_Per_s_ (x.LeftSodiumFlow_mg_Per_s_, f, this),
          RightSodiumFlow_mg_Per_s_ (x.RightSodiumFlow_mg_Per_s_, f, this),
          LeftRenalArterialPressure_mmHg_ (x.LeftRenalArterialPressure_mmHg_, f, this),
          RightRenalArterialPressure_mmHg_ (x.RightRenalArterialPressure_mmHg_, f, this)
        {
        }

        BioGearsRenalSystemData::
        BioGearsRenalSystemData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RenalSystemData (e, f | ::xml_schema::flags::base, c),
          Urinating_ (this),
          LeftAfferentResistance_mmHg_s_Per_mL_ (this),
          RightAfferentResistance_mmHg_s_Per_mL_ (this),
          LeftSodiumFlowSetPoint_mg_Per_s_ (this),
          RightSodiumFlowSetPoint_mg_Per_s_ (this),
          UrineProductionRate_mL_Per_min_ (this),
          UrineOsmolarity_mOsm_Per_L_ (this),
          SodiumConcentration_mg_Per_mL_ (this),
          SodiumExcretionRate_mg_Per_min_ (this),
          LeftSodiumFlow_mg_Per_s_ (this),
          RightSodiumFlow_mg_Per_s_ (this),
          LeftRenalArterialPressure_mmHg_ (this),
          RightRenalArterialPressure_mmHg_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsRenalSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::RenalSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Urinating
            //
            if (n.name () == "Urinating" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!Urinating_.present ())
              {
                this->Urinating_.set (Urinating_traits::create (i, f, this));
                continue;
              }
            }

            // LeftAfferentResistance_mmHg_s_Per_mL
            //
            if (n.name () == "LeftAfferentResistance_mmHg_s_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftAfferentResistance_mmHg_s_Per_mL_.present ())
              {
                this->LeftAfferentResistance_mmHg_s_Per_mL_.set (LeftAfferentResistance_mmHg_s_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // RightAfferentResistance_mmHg_s_Per_mL
            //
            if (n.name () == "RightAfferentResistance_mmHg_s_Per_mL" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RightAfferentResistance_mmHg_s_Per_mL_.present ())
              {
                this->RightAfferentResistance_mmHg_s_Per_mL_.set (RightAfferentResistance_mmHg_s_Per_mL_traits::create (i, f, this));
                continue;
              }
            }

            // LeftSodiumFlowSetPoint_mg_Per_s
            //
            if (n.name () == "LeftSodiumFlowSetPoint_mg_Per_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LeftSodiumFlowSetPoint_mg_Per_s_.present ())
              {
                this->LeftSodiumFlowSetPoint_mg_Per_s_.set (LeftSodiumFlowSetPoint_mg_Per_s_traits::create (i, f, this));
                continue;
              }
            }

            // RightSodiumFlowSetPoint_mg_Per_s
            //
            if (n.name () == "RightSodiumFlowSetPoint_mg_Per_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RightSodiumFlowSetPoint_mg_Per_s_.present ())
              {
                this->RightSodiumFlowSetPoint_mg_Per_s_.set (RightSodiumFlowSetPoint_mg_Per_s_traits::create (i, f, this));
                continue;
              }
            }

            // UrineProductionRate_mL_Per_min
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineProductionRate_mL_Per_min",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineProductionRate_mL_Per_min_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!UrineProductionRate_mL_Per_min_.present ())
                {
                  ::std::unique_ptr< UrineProductionRate_mL_Per_min_type > r (
                    dynamic_cast< UrineProductionRate_mL_Per_min_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineProductionRate_mL_Per_min_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineOsmolarity_mOsm_Per_L
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineOsmolarity_mOsm_Per_L",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineOsmolarity_mOsm_Per_L_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!UrineOsmolarity_mOsm_Per_L_.present ())
                {
                  ::std::unique_ptr< UrineOsmolarity_mOsm_Per_L_type > r (
                    dynamic_cast< UrineOsmolarity_mOsm_Per_L_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineOsmolarity_mOsm_Per_L_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumConcentration_mg_Per_mL
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumConcentration_mg_Per_mL",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumConcentration_mg_Per_mL_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SodiumConcentration_mg_Per_mL_.present ())
                {
                  ::std::unique_ptr< SodiumConcentration_mg_Per_mL_type > r (
                    dynamic_cast< SodiumConcentration_mg_Per_mL_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumConcentration_mg_Per_mL_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumExcretionRate_mg_Per_min
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumExcretionRate_mg_Per_min",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumExcretionRate_mg_Per_min_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SodiumExcretionRate_mg_Per_min_.present ())
                {
                  ::std::unique_ptr< SodiumExcretionRate_mg_Per_min_type > r (
                    dynamic_cast< SodiumExcretionRate_mg_Per_min_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumExcretionRate_mg_Per_min_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftSodiumFlow_mg_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftSodiumFlow_mg_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftSodiumFlow_mg_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LeftSodiumFlow_mg_Per_s_.present ())
                {
                  ::std::unique_ptr< LeftSodiumFlow_mg_Per_s_type > r (
                    dynamic_cast< LeftSodiumFlow_mg_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftSodiumFlow_mg_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightSodiumFlow_mg_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightSodiumFlow_mg_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightSodiumFlow_mg_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RightSodiumFlow_mg_Per_s_.present ())
                {
                  ::std::unique_ptr< RightSodiumFlow_mg_Per_s_type > r (
                    dynamic_cast< RightSodiumFlow_mg_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightSodiumFlow_mg_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftRenalArterialPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftRenalArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftRenalArterialPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LeftRenalArterialPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< LeftRenalArterialPressure_mmHg_type > r (
                    dynamic_cast< LeftRenalArterialPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftRenalArterialPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightRenalArterialPressure_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightRenalArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightRenalArterialPressure_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RightRenalArterialPressure_mmHg_.present ())
                {
                  ::std::unique_ptr< RightRenalArterialPressure_mmHg_type > r (
                    dynamic_cast< RightRenalArterialPressure_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightRenalArterialPressure_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Urinating_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Urinating",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftAfferentResistance_mmHg_s_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftAfferentResistance_mmHg_s_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightAfferentResistance_mmHg_s_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightAfferentResistance_mmHg_s_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftSodiumFlowSetPoint_mg_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftSodiumFlowSetPoint_mg_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightSodiumFlowSetPoint_mg_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightSodiumFlowSetPoint_mg_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!UrineProductionRate_mL_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UrineProductionRate_mL_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!UrineOsmolarity_mOsm_Per_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UrineOsmolarity_mOsm_Per_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SodiumConcentration_mg_Per_mL_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SodiumConcentration_mg_Per_mL",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SodiumExcretionRate_mg_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SodiumExcretionRate_mg_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftSodiumFlow_mg_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftSodiumFlow_mg_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightSodiumFlow_mg_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightSodiumFlow_mg_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftRenalArterialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftRenalArterialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightRenalArterialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightRenalArterialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsRenalSystemData* BioGearsRenalSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsRenalSystemData (*this, f, c);
        }

        BioGearsRenalSystemData& BioGearsRenalSystemData::
        operator= (const BioGearsRenalSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::RenalSystemData& > (*this) = x;
            this->Urinating_ = x.Urinating_;
            this->LeftAfferentResistance_mmHg_s_Per_mL_ = x.LeftAfferentResistance_mmHg_s_Per_mL_;
            this->RightAfferentResistance_mmHg_s_Per_mL_ = x.RightAfferentResistance_mmHg_s_Per_mL_;
            this->LeftSodiumFlowSetPoint_mg_Per_s_ = x.LeftSodiumFlowSetPoint_mg_Per_s_;
            this->RightSodiumFlowSetPoint_mg_Per_s_ = x.RightSodiumFlowSetPoint_mg_Per_s_;
            this->UrineProductionRate_mL_Per_min_ = x.UrineProductionRate_mL_Per_min_;
            this->UrineOsmolarity_mOsm_Per_L_ = x.UrineOsmolarity_mOsm_Per_L_;
            this->SodiumConcentration_mg_Per_mL_ = x.SodiumConcentration_mg_Per_mL_;
            this->SodiumExcretionRate_mg_Per_min_ = x.SodiumExcretionRate_mg_Per_min_;
            this->LeftSodiumFlow_mg_Per_s_ = x.LeftSodiumFlow_mg_Per_s_;
            this->RightSodiumFlow_mg_Per_s_ = x.RightSodiumFlow_mg_Per_s_;
            this->LeftRenalArterialPressure_mmHg_ = x.LeftRenalArterialPressure_mmHg_;
            this->RightRenalArterialPressure_mmHg_ = x.RightRenalArterialPressure_mmHg_;
          }

          return *this;
        }

        BioGearsRenalSystemData::
        ~BioGearsRenalSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsRenalSystemData >
        _xsd_BioGearsRenalSystemData_type_factory_init (
          "BioGearsRenalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsRespiratorySystemData
        //

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData ()
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (this),
          InitialFunctionalResidualCapacity_L_ (this),
          InitialInspiratoryCapacity_L_ (this),
          InitialResidualVolume_L_ (this),
          NotBreathing_ (this),
          TopBreathTotalVolume_L_ (this),
          TopBreathAlveoliVolume_L_ (this),
          TopBreathDeadSpaceVolume_L_ (this),
          TopBreathPleuralPressure_cmH2O_ (this),
          LastCardiacCycleBloodPH_ (this),
          PreviousTotalLungVolume_L_ (this),
          BloodPHRunningAverage_ (this),
          BreathingCycle_ (this),
          ArterialOxygenPressure_mmHg_ (this),
          ArterialCarbonDioxidePressure_mmHg_ (this),
          ArterialOxygenAverage_mmHg_ (this),
          ArterialCarbonDioxideAverage_mmHg_ (this),
          BreathingCycleTime_s_ (this),
          BreathTimeExhale_min_ (this),
          DefaultDrivePressure_cmH2O_ (this),
          DriverPressure_cmH2O_ (this),
          DriverPressureMin_cmH2O_ (this),
          ElapsedBreathingCycleTime_min_ (this),
          IEscaleFactor_ (this),
          InstantaneousFunctionalResidualCapacity_L_ (this),
          MaxDriverPressure_cmH2O_ (this),
          PeakRespiratoryDrivePressure_cmH2O_ (this),
          VentilationFrequency_Per_min_ (this),
          ConsciousBreathing_ (this),
          ConsciousRespirationPeriod_s_ (this),
          ConsciousRespirationRemainingPeriod_s_ (this),
          ExpiratoryReserveVolumeFraction_ (this),
          InspiratoryCapacityFraction_ (this),
          ConsciousStartPressure_cmH2O_ (this),
          ConsciousEndPressure_cmH2O_ (this),
          HadAirwayObstruction_ (this),
          HadBronchoconstriction_ (this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type& InitialExpiratoryReserveVolume_L,
                                       const InitialFunctionalResidualCapacity_L_type& InitialFunctionalResidualCapacity_L,
                                       const InitialInspiratoryCapacity_L_type& InitialInspiratoryCapacity_L,
                                       const InitialResidualVolume_L_type& InitialResidualVolume_L,
                                       const NotBreathing_type& NotBreathing,
                                       const TopBreathTotalVolume_L_type& TopBreathTotalVolume_L,
                                       const TopBreathAlveoliVolume_L_type& TopBreathAlveoliVolume_L,
                                       const TopBreathDeadSpaceVolume_L_type& TopBreathDeadSpaceVolume_L,
                                       const TopBreathPleuralPressure_cmH2O_type& TopBreathPleuralPressure_cmH2O,
                                       const LastCardiacCycleBloodPH_type& LastCardiacCycleBloodPH,
                                       const PreviousTotalLungVolume_L_type& PreviousTotalLungVolume_L,
                                       const BloodPHRunningAverage_type& BloodPHRunningAverage,
                                       const BreathingCycle_type& BreathingCycle,
                                       const ArterialOxygenPressure_mmHg_type& ArterialOxygenPressure_mmHg,
                                       const ArterialCarbonDioxidePressure_mmHg_type& ArterialCarbonDioxidePressure_mmHg,
                                       const ArterialOxygenAverage_mmHg_type& ArterialOxygenAverage_mmHg,
                                       const ArterialCarbonDioxideAverage_mmHg_type& ArterialCarbonDioxideAverage_mmHg,
                                       const BreathingCycleTime_s_type& BreathingCycleTime_s,
                                       const BreathTimeExhale_min_type& BreathTimeExhale_min,
                                       const DefaultDrivePressure_cmH2O_type& DefaultDrivePressure_cmH2O,
                                       const DriverPressure_cmH2O_type& DriverPressure_cmH2O,
                                       const DriverPressureMin_cmH2O_type& DriverPressureMin_cmH2O,
                                       const ElapsedBreathingCycleTime_min_type& ElapsedBreathingCycleTime_min,
                                       const IEscaleFactor_type& IEscaleFactor,
                                       const InstantaneousFunctionalResidualCapacity_L_type& InstantaneousFunctionalResidualCapacity_L,
                                       const MaxDriverPressure_cmH2O_type& MaxDriverPressure_cmH2O,
                                       const PeakRespiratoryDrivePressure_cmH2O_type& PeakRespiratoryDrivePressure_cmH2O,
                                       const VentilationFrequency_Per_min_type& VentilationFrequency_Per_min,
                                       const ConsciousBreathing_type& ConsciousBreathing,
                                       const ConsciousRespirationPeriod_s_type& ConsciousRespirationPeriod_s,
                                       const ConsciousRespirationRemainingPeriod_s_type& ConsciousRespirationRemainingPeriod_s,
                                       const ExpiratoryReserveVolumeFraction_type& ExpiratoryReserveVolumeFraction,
                                       const InspiratoryCapacityFraction_type& InspiratoryCapacityFraction,
                                       const ConsciousStartPressure_cmH2O_type& ConsciousStartPressure_cmH2O,
                                       const ConsciousEndPressure_cmH2O_type& ConsciousEndPressure_cmH2O,
                                       const HadAirwayObstruction_type& HadAirwayObstruction,
                                       const HadBronchoconstriction_type& HadBronchoconstriction)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (InitialExpiratoryReserveVolume_L, this),
          InitialFunctionalResidualCapacity_L_ (InitialFunctionalResidualCapacity_L, this),
          InitialInspiratoryCapacity_L_ (InitialInspiratoryCapacity_L, this),
          InitialResidualVolume_L_ (InitialResidualVolume_L, this),
          NotBreathing_ (NotBreathing, this),
          TopBreathTotalVolume_L_ (TopBreathTotalVolume_L, this),
          TopBreathAlveoliVolume_L_ (TopBreathAlveoliVolume_L, this),
          TopBreathDeadSpaceVolume_L_ (TopBreathDeadSpaceVolume_L, this),
          TopBreathPleuralPressure_cmH2O_ (TopBreathPleuralPressure_cmH2O, this),
          LastCardiacCycleBloodPH_ (LastCardiacCycleBloodPH, this),
          PreviousTotalLungVolume_L_ (PreviousTotalLungVolume_L, this),
          BloodPHRunningAverage_ (BloodPHRunningAverage, this),
          BreathingCycle_ (BreathingCycle, this),
          ArterialOxygenPressure_mmHg_ (ArterialOxygenPressure_mmHg, this),
          ArterialCarbonDioxidePressure_mmHg_ (ArterialCarbonDioxidePressure_mmHg, this),
          ArterialOxygenAverage_mmHg_ (ArterialOxygenAverage_mmHg, this),
          ArterialCarbonDioxideAverage_mmHg_ (ArterialCarbonDioxideAverage_mmHg, this),
          BreathingCycleTime_s_ (BreathingCycleTime_s, this),
          BreathTimeExhale_min_ (BreathTimeExhale_min, this),
          DefaultDrivePressure_cmH2O_ (DefaultDrivePressure_cmH2O, this),
          DriverPressure_cmH2O_ (DriverPressure_cmH2O, this),
          DriverPressureMin_cmH2O_ (DriverPressureMin_cmH2O, this),
          ElapsedBreathingCycleTime_min_ (ElapsedBreathingCycleTime_min, this),
          IEscaleFactor_ (IEscaleFactor, this),
          InstantaneousFunctionalResidualCapacity_L_ (InstantaneousFunctionalResidualCapacity_L, this),
          MaxDriverPressure_cmH2O_ (MaxDriverPressure_cmH2O, this),
          PeakRespiratoryDrivePressure_cmH2O_ (PeakRespiratoryDrivePressure_cmH2O, this),
          VentilationFrequency_Per_min_ (VentilationFrequency_Per_min, this),
          ConsciousBreathing_ (ConsciousBreathing, this),
          ConsciousRespirationPeriod_s_ (ConsciousRespirationPeriod_s, this),
          ConsciousRespirationRemainingPeriod_s_ (ConsciousRespirationRemainingPeriod_s, this),
          ExpiratoryReserveVolumeFraction_ (ExpiratoryReserveVolumeFraction, this),
          InspiratoryCapacityFraction_ (InspiratoryCapacityFraction, this),
          ConsciousStartPressure_cmH2O_ (ConsciousStartPressure_cmH2O, this),
          ConsciousEndPressure_cmH2O_ (ConsciousEndPressure_cmH2O, this),
          HadAirwayObstruction_ (HadAirwayObstruction, this),
          HadBronchoconstriction_ (HadBronchoconstriction, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type& InitialExpiratoryReserveVolume_L,
                                       const InitialFunctionalResidualCapacity_L_type& InitialFunctionalResidualCapacity_L,
                                       const InitialInspiratoryCapacity_L_type& InitialInspiratoryCapacity_L,
                                       const InitialResidualVolume_L_type& InitialResidualVolume_L,
                                       const NotBreathing_type& NotBreathing,
                                       const TopBreathTotalVolume_L_type& TopBreathTotalVolume_L,
                                       const TopBreathAlveoliVolume_L_type& TopBreathAlveoliVolume_L,
                                       const TopBreathDeadSpaceVolume_L_type& TopBreathDeadSpaceVolume_L,
                                       const TopBreathPleuralPressure_cmH2O_type& TopBreathPleuralPressure_cmH2O,
                                       const LastCardiacCycleBloodPH_type& LastCardiacCycleBloodPH,
                                       const PreviousTotalLungVolume_L_type& PreviousTotalLungVolume_L,
                                       ::std::unique_ptr< BloodPHRunningAverage_type > BloodPHRunningAverage,
                                       const BreathingCycle_type& BreathingCycle,
                                       const ArterialOxygenPressure_mmHg_type& ArterialOxygenPressure_mmHg,
                                       const ArterialCarbonDioxidePressure_mmHg_type& ArterialCarbonDioxidePressure_mmHg,
                                       ::std::unique_ptr< ArterialOxygenAverage_mmHg_type > ArterialOxygenAverage_mmHg,
                                       ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > ArterialCarbonDioxideAverage_mmHg,
                                       const BreathingCycleTime_s_type& BreathingCycleTime_s,
                                       const BreathTimeExhale_min_type& BreathTimeExhale_min,
                                       const DefaultDrivePressure_cmH2O_type& DefaultDrivePressure_cmH2O,
                                       const DriverPressure_cmH2O_type& DriverPressure_cmH2O,
                                       const DriverPressureMin_cmH2O_type& DriverPressureMin_cmH2O,
                                       const ElapsedBreathingCycleTime_min_type& ElapsedBreathingCycleTime_min,
                                       const IEscaleFactor_type& IEscaleFactor,
                                       const InstantaneousFunctionalResidualCapacity_L_type& InstantaneousFunctionalResidualCapacity_L,
                                       const MaxDriverPressure_cmH2O_type& MaxDriverPressure_cmH2O,
                                       const PeakRespiratoryDrivePressure_cmH2O_type& PeakRespiratoryDrivePressure_cmH2O,
                                       const VentilationFrequency_Per_min_type& VentilationFrequency_Per_min,
                                       const ConsciousBreathing_type& ConsciousBreathing,
                                       const ConsciousRespirationPeriod_s_type& ConsciousRespirationPeriod_s,
                                       const ConsciousRespirationRemainingPeriod_s_type& ConsciousRespirationRemainingPeriod_s,
                                       const ExpiratoryReserveVolumeFraction_type& ExpiratoryReserveVolumeFraction,
                                       const InspiratoryCapacityFraction_type& InspiratoryCapacityFraction,
                                       const ConsciousStartPressure_cmH2O_type& ConsciousStartPressure_cmH2O,
                                       const ConsciousEndPressure_cmH2O_type& ConsciousEndPressure_cmH2O,
                                       const HadAirwayObstruction_type& HadAirwayObstruction,
                                       const HadBronchoconstriction_type& HadBronchoconstriction)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (InitialExpiratoryReserveVolume_L, this),
          InitialFunctionalResidualCapacity_L_ (InitialFunctionalResidualCapacity_L, this),
          InitialInspiratoryCapacity_L_ (InitialInspiratoryCapacity_L, this),
          InitialResidualVolume_L_ (InitialResidualVolume_L, this),
          NotBreathing_ (NotBreathing, this),
          TopBreathTotalVolume_L_ (TopBreathTotalVolume_L, this),
          TopBreathAlveoliVolume_L_ (TopBreathAlveoliVolume_L, this),
          TopBreathDeadSpaceVolume_L_ (TopBreathDeadSpaceVolume_L, this),
          TopBreathPleuralPressure_cmH2O_ (TopBreathPleuralPressure_cmH2O, this),
          LastCardiacCycleBloodPH_ (LastCardiacCycleBloodPH, this),
          PreviousTotalLungVolume_L_ (PreviousTotalLungVolume_L, this),
          BloodPHRunningAverage_ (std::move (BloodPHRunningAverage), this),
          BreathingCycle_ (BreathingCycle, this),
          ArterialOxygenPressure_mmHg_ (ArterialOxygenPressure_mmHg, this),
          ArterialCarbonDioxidePressure_mmHg_ (ArterialCarbonDioxidePressure_mmHg, this),
          ArterialOxygenAverage_mmHg_ (std::move (ArterialOxygenAverage_mmHg), this),
          ArterialCarbonDioxideAverage_mmHg_ (std::move (ArterialCarbonDioxideAverage_mmHg), this),
          BreathingCycleTime_s_ (BreathingCycleTime_s, this),
          BreathTimeExhale_min_ (BreathTimeExhale_min, this),
          DefaultDrivePressure_cmH2O_ (DefaultDrivePressure_cmH2O, this),
          DriverPressure_cmH2O_ (DriverPressure_cmH2O, this),
          DriverPressureMin_cmH2O_ (DriverPressureMin_cmH2O, this),
          ElapsedBreathingCycleTime_min_ (ElapsedBreathingCycleTime_min, this),
          IEscaleFactor_ (IEscaleFactor, this),
          InstantaneousFunctionalResidualCapacity_L_ (InstantaneousFunctionalResidualCapacity_L, this),
          MaxDriverPressure_cmH2O_ (MaxDriverPressure_cmH2O, this),
          PeakRespiratoryDrivePressure_cmH2O_ (PeakRespiratoryDrivePressure_cmH2O, this),
          VentilationFrequency_Per_min_ (VentilationFrequency_Per_min, this),
          ConsciousBreathing_ (ConsciousBreathing, this),
          ConsciousRespirationPeriod_s_ (ConsciousRespirationPeriod_s, this),
          ConsciousRespirationRemainingPeriod_s_ (ConsciousRespirationRemainingPeriod_s, this),
          ExpiratoryReserveVolumeFraction_ (ExpiratoryReserveVolumeFraction, this),
          InspiratoryCapacityFraction_ (InspiratoryCapacityFraction, this),
          ConsciousStartPressure_cmH2O_ (ConsciousStartPressure_cmH2O, this),
          ConsciousEndPressure_cmH2O_ (ConsciousEndPressure_cmH2O, this),
          HadAirwayObstruction_ (HadAirwayObstruction, this),
          HadBronchoconstriction_ (HadBronchoconstriction, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const BioGearsRespiratorySystemData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (x, f, c),
          InitialExpiratoryReserveVolume_L_ (x.InitialExpiratoryReserveVolume_L_, f, this),
          InitialFunctionalResidualCapacity_L_ (x.InitialFunctionalResidualCapacity_L_, f, this),
          InitialInspiratoryCapacity_L_ (x.InitialInspiratoryCapacity_L_, f, this),
          InitialResidualVolume_L_ (x.InitialResidualVolume_L_, f, this),
          NotBreathing_ (x.NotBreathing_, f, this),
          TopBreathTotalVolume_L_ (x.TopBreathTotalVolume_L_, f, this),
          TopBreathAlveoliVolume_L_ (x.TopBreathAlveoliVolume_L_, f, this),
          TopBreathDeadSpaceVolume_L_ (x.TopBreathDeadSpaceVolume_L_, f, this),
          TopBreathPleuralPressure_cmH2O_ (x.TopBreathPleuralPressure_cmH2O_, f, this),
          LastCardiacCycleBloodPH_ (x.LastCardiacCycleBloodPH_, f, this),
          PreviousTotalLungVolume_L_ (x.PreviousTotalLungVolume_L_, f, this),
          BloodPHRunningAverage_ (x.BloodPHRunningAverage_, f, this),
          BreathingCycle_ (x.BreathingCycle_, f, this),
          ArterialOxygenPressure_mmHg_ (x.ArterialOxygenPressure_mmHg_, f, this),
          ArterialCarbonDioxidePressure_mmHg_ (x.ArterialCarbonDioxidePressure_mmHg_, f, this),
          ArterialOxygenAverage_mmHg_ (x.ArterialOxygenAverage_mmHg_, f, this),
          ArterialCarbonDioxideAverage_mmHg_ (x.ArterialCarbonDioxideAverage_mmHg_, f, this),
          BreathingCycleTime_s_ (x.BreathingCycleTime_s_, f, this),
          BreathTimeExhale_min_ (x.BreathTimeExhale_min_, f, this),
          DefaultDrivePressure_cmH2O_ (x.DefaultDrivePressure_cmH2O_, f, this),
          DriverPressure_cmH2O_ (x.DriverPressure_cmH2O_, f, this),
          DriverPressureMin_cmH2O_ (x.DriverPressureMin_cmH2O_, f, this),
          ElapsedBreathingCycleTime_min_ (x.ElapsedBreathingCycleTime_min_, f, this),
          IEscaleFactor_ (x.IEscaleFactor_, f, this),
          InstantaneousFunctionalResidualCapacity_L_ (x.InstantaneousFunctionalResidualCapacity_L_, f, this),
          MaxDriverPressure_cmH2O_ (x.MaxDriverPressure_cmH2O_, f, this),
          PeakRespiratoryDrivePressure_cmH2O_ (x.PeakRespiratoryDrivePressure_cmH2O_, f, this),
          VentilationFrequency_Per_min_ (x.VentilationFrequency_Per_min_, f, this),
          ConsciousBreathing_ (x.ConsciousBreathing_, f, this),
          ConsciousRespirationPeriod_s_ (x.ConsciousRespirationPeriod_s_, f, this),
          ConsciousRespirationRemainingPeriod_s_ (x.ConsciousRespirationRemainingPeriod_s_, f, this),
          ExpiratoryReserveVolumeFraction_ (x.ExpiratoryReserveVolumeFraction_, f, this),
          InspiratoryCapacityFraction_ (x.InspiratoryCapacityFraction_, f, this),
          ConsciousStartPressure_cmH2O_ (x.ConsciousStartPressure_cmH2O_, f, this),
          ConsciousEndPressure_cmH2O_ (x.ConsciousEndPressure_cmH2O_, f, this),
          HadAirwayObstruction_ (x.HadAirwayObstruction_, f, this),
          HadBronchoconstriction_ (x.HadBronchoconstriction_, f, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (e, f | ::xml_schema::flags::base, c),
          InitialExpiratoryReserveVolume_L_ (this),
          InitialFunctionalResidualCapacity_L_ (this),
          InitialInspiratoryCapacity_L_ (this),
          InitialResidualVolume_L_ (this),
          NotBreathing_ (this),
          TopBreathTotalVolume_L_ (this),
          TopBreathAlveoliVolume_L_ (this),
          TopBreathDeadSpaceVolume_L_ (this),
          TopBreathPleuralPressure_cmH2O_ (this),
          LastCardiacCycleBloodPH_ (this),
          PreviousTotalLungVolume_L_ (this),
          BloodPHRunningAverage_ (this),
          BreathingCycle_ (this),
          ArterialOxygenPressure_mmHg_ (this),
          ArterialCarbonDioxidePressure_mmHg_ (this),
          ArterialOxygenAverage_mmHg_ (this),
          ArterialCarbonDioxideAverage_mmHg_ (this),
          BreathingCycleTime_s_ (this),
          BreathTimeExhale_min_ (this),
          DefaultDrivePressure_cmH2O_ (this),
          DriverPressure_cmH2O_ (this),
          DriverPressureMin_cmH2O_ (this),
          ElapsedBreathingCycleTime_min_ (this),
          IEscaleFactor_ (this),
          InstantaneousFunctionalResidualCapacity_L_ (this),
          MaxDriverPressure_cmH2O_ (this),
          PeakRespiratoryDrivePressure_cmH2O_ (this),
          VentilationFrequency_Per_min_ (this),
          ConsciousBreathing_ (this),
          ConsciousRespirationPeriod_s_ (this),
          ConsciousRespirationRemainingPeriod_s_ (this),
          ExpiratoryReserveVolumeFraction_ (this),
          InspiratoryCapacityFraction_ (this),
          ConsciousStartPressure_cmH2O_ (this),
          ConsciousEndPressure_cmH2O_ (this),
          HadAirwayObstruction_ (this),
          HadBronchoconstriction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsRespiratorySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::RespiratorySystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InitialExpiratoryReserveVolume_L
            //
            if (n.name () == "InitialExpiratoryReserveVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialExpiratoryReserveVolume_L_.present ())
              {
                this->InitialExpiratoryReserveVolume_L_.set (InitialExpiratoryReserveVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialFunctionalResidualCapacity_L
            //
            if (n.name () == "InitialFunctionalResidualCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialFunctionalResidualCapacity_L_.present ())
              {
                this->InitialFunctionalResidualCapacity_L_.set (InitialFunctionalResidualCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialInspiratoryCapacity_L
            //
            if (n.name () == "InitialInspiratoryCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialInspiratoryCapacity_L_.present ())
              {
                this->InitialInspiratoryCapacity_L_.set (InitialInspiratoryCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialResidualVolume_L
            //
            if (n.name () == "InitialResidualVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialResidualVolume_L_.present ())
              {
                this->InitialResidualVolume_L_.set (InitialResidualVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // NotBreathing
            //
            if (n.name () == "NotBreathing" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!NotBreathing_.present ())
              {
                this->NotBreathing_.set (NotBreathing_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathTotalVolume_L
            //
            if (n.name () == "TopBreathTotalVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathTotalVolume_L_.present ())
              {
                this->TopBreathTotalVolume_L_.set (TopBreathTotalVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathAlveoliVolume_L
            //
            if (n.name () == "TopBreathAlveoliVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathAlveoliVolume_L_.present ())
              {
                this->TopBreathAlveoliVolume_L_.set (TopBreathAlveoliVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathDeadSpaceVolume_L
            //
            if (n.name () == "TopBreathDeadSpaceVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathDeadSpaceVolume_L_.present ())
              {
                this->TopBreathDeadSpaceVolume_L_.set (TopBreathDeadSpaceVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathPleuralPressure_cmH2O
            //
            if (n.name () == "TopBreathPleuralPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathPleuralPressure_cmH2O_.present ())
              {
                this->TopBreathPleuralPressure_cmH2O_.set (TopBreathPleuralPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // LastCardiacCycleBloodPH
            //
            if (n.name () == "LastCardiacCycleBloodPH" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LastCardiacCycleBloodPH_.present ())
              {
                this->LastCardiacCycleBloodPH_.set (LastCardiacCycleBloodPH_traits::create (i, f, this));
                continue;
              }
            }

            // PreviousTotalLungVolume_L
            //
            if (n.name () == "PreviousTotalLungVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PreviousTotalLungVolume_L_.present ())
              {
                this->PreviousTotalLungVolume_L_.set (PreviousTotalLungVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // BloodPHRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodPHRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodPHRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BloodPHRunningAverage_.present ())
                {
                  ::std::unique_ptr< BloodPHRunningAverage_type > r (
                    dynamic_cast< BloodPHRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodPHRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BreathingCycle
            //
            if (n.name () == "BreathingCycle" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathingCycle_.present ())
              {
                this->BreathingCycle_.set (BreathingCycle_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialOxygenPressure_mmHg
            //
            if (n.name () == "ArterialOxygenPressure_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialOxygenPressure_mmHg_.present ())
              {
                this->ArterialOxygenPressure_mmHg_.set (ArterialOxygenPressure_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialCarbonDioxidePressure_mmHg
            //
            if (n.name () == "ArterialCarbonDioxidePressure_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialCarbonDioxidePressure_mmHg_.present ())
              {
                this->ArterialCarbonDioxidePressure_mmHg_.set (ArterialCarbonDioxidePressure_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialOxygenAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialOxygenAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialOxygenAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialOxygenAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialOxygenAverage_mmHg_type > r (
                    dynamic_cast< ArterialOxygenAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialOxygenAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialCarbonDioxideAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialCarbonDioxideAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialCarbonDioxideAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialCarbonDioxideAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialCarbonDioxideAverage_mmHg_type > r (
                    dynamic_cast< ArterialCarbonDioxideAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialCarbonDioxideAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BreathingCycleTime_s
            //
            if (n.name () == "BreathingCycleTime_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathingCycleTime_s_.present ())
              {
                this->BreathingCycleTime_s_.set (BreathingCycleTime_s_traits::create (i, f, this));
                continue;
              }
            }

            // BreathTimeExhale_min
            //
            if (n.name () == "BreathTimeExhale_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathTimeExhale_min_.present ())
              {
                this->BreathTimeExhale_min_.set (BreathTimeExhale_min_traits::create (i, f, this));
                continue;
              }
            }

            // DefaultDrivePressure_cmH2O
            //
            if (n.name () == "DefaultDrivePressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DefaultDrivePressure_cmH2O_.present ())
              {
                this->DefaultDrivePressure_cmH2O_.set (DefaultDrivePressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // DriverPressure_cmH2O
            //
            if (n.name () == "DriverPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DriverPressure_cmH2O_.present ())
              {
                this->DriverPressure_cmH2O_.set (DriverPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // DriverPressureMin_cmH2O
            //
            if (n.name () == "DriverPressureMin_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DriverPressureMin_cmH2O_.present ())
              {
                this->DriverPressureMin_cmH2O_.set (DriverPressureMin_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // ElapsedBreathingCycleTime_min
            //
            if (n.name () == "ElapsedBreathingCycleTime_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ElapsedBreathingCycleTime_min_.present ())
              {
                this->ElapsedBreathingCycleTime_min_.set (ElapsedBreathingCycleTime_min_traits::create (i, f, this));
                continue;
              }
            }

            // IEscaleFactor
            //
            if (n.name () == "IEscaleFactor" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!IEscaleFactor_.present ())
              {
                this->IEscaleFactor_.set (IEscaleFactor_traits::create (i, f, this));
                continue;
              }
            }

            // InstantaneousFunctionalResidualCapacity_L
            //
            if (n.name () == "InstantaneousFunctionalResidualCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InstantaneousFunctionalResidualCapacity_L_.present ())
              {
                this->InstantaneousFunctionalResidualCapacity_L_.set (InstantaneousFunctionalResidualCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // MaxDriverPressure_cmH2O
            //
            if (n.name () == "MaxDriverPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!MaxDriverPressure_cmH2O_.present ())
              {
                this->MaxDriverPressure_cmH2O_.set (MaxDriverPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // PeakRespiratoryDrivePressure_cmH2O
            //
            if (n.name () == "PeakRespiratoryDrivePressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PeakRespiratoryDrivePressure_cmH2O_.present ())
              {
                this->PeakRespiratoryDrivePressure_cmH2O_.set (PeakRespiratoryDrivePressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // VentilationFrequency_Per_min
            //
            if (n.name () == "VentilationFrequency_Per_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!VentilationFrequency_Per_min_.present ())
              {
                this->VentilationFrequency_Per_min_.set (VentilationFrequency_Per_min_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousBreathing
            //
            if (n.name () == "ConsciousBreathing" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousBreathing_.present ())
              {
                this->ConsciousBreathing_.set (ConsciousBreathing_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousRespirationPeriod_s
            //
            if (n.name () == "ConsciousRespirationPeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousRespirationPeriod_s_.present ())
              {
                this->ConsciousRespirationPeriod_s_.set (ConsciousRespirationPeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousRespirationRemainingPeriod_s
            //
            if (n.name () == "ConsciousRespirationRemainingPeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousRespirationRemainingPeriod_s_.present ())
              {
                this->ConsciousRespirationRemainingPeriod_s_.set (ConsciousRespirationRemainingPeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // ExpiratoryReserveVolumeFraction
            //
            if (n.name () == "ExpiratoryReserveVolumeFraction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ExpiratoryReserveVolumeFraction_.present ())
              {
                this->ExpiratoryReserveVolumeFraction_.set (ExpiratoryReserveVolumeFraction_traits::create (i, f, this));
                continue;
              }
            }

            // InspiratoryCapacityFraction
            //
            if (n.name () == "InspiratoryCapacityFraction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InspiratoryCapacityFraction_.present ())
              {
                this->InspiratoryCapacityFraction_.set (InspiratoryCapacityFraction_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousStartPressure_cmH2O
            //
            if (n.name () == "ConsciousStartPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousStartPressure_cmH2O_.present ())
              {
                this->ConsciousStartPressure_cmH2O_.set (ConsciousStartPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousEndPressure_cmH2O
            //
            if (n.name () == "ConsciousEndPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousEndPressure_cmH2O_.present ())
              {
                this->ConsciousEndPressure_cmH2O_.set (ConsciousEndPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // HadAirwayObstruction
            //
            if (n.name () == "HadAirwayObstruction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HadAirwayObstruction_.present ())
              {
                this->HadAirwayObstruction_.set (HadAirwayObstruction_traits::create (i, f, this));
                continue;
              }
            }

            // HadBronchoconstriction
            //
            if (n.name () == "HadBronchoconstriction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!HadBronchoconstriction_.present ())
              {
                this->HadBronchoconstriction_.set (HadBronchoconstriction_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!InitialExpiratoryReserveVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialExpiratoryReserveVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialFunctionalResidualCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialFunctionalResidualCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialInspiratoryCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialInspiratoryCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialResidualVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialResidualVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NotBreathing_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NotBreathing",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathTotalVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathTotalVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathAlveoliVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathAlveoliVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathDeadSpaceVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathDeadSpaceVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathPleuralPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathPleuralPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LastCardiacCycleBloodPH_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LastCardiacCycleBloodPH",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PreviousTotalLungVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PreviousTotalLungVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BloodPHRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BloodPHRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathingCycle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathingCycle",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialOxygenPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialOxygenPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCarbonDioxidePressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCarbonDioxidePressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialOxygenAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialOxygenAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCarbonDioxideAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCarbonDioxideAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathingCycleTime_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathingCycleTime_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathTimeExhale_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathTimeExhale_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DefaultDrivePressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DefaultDrivePressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DriverPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DriverPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DriverPressureMin_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DriverPressureMin_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ElapsedBreathingCycleTime_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElapsedBreathingCycleTime_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!IEscaleFactor_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IEscaleFactor",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InstantaneousFunctionalResidualCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InstantaneousFunctionalResidualCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MaxDriverPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MaxDriverPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeakRespiratoryDrivePressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeakRespiratoryDrivePressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!VentilationFrequency_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VentilationFrequency_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousBreathing_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousBreathing",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousRespirationPeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousRespirationPeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousRespirationRemainingPeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousRespirationRemainingPeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ExpiratoryReserveVolumeFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExpiratoryReserveVolumeFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InspiratoryCapacityFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InspiratoryCapacityFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousStartPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousStartPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousEndPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousEndPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HadAirwayObstruction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HadAirwayObstruction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HadBronchoconstriction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HadBronchoconstriction",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsRespiratorySystemData* BioGearsRespiratorySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsRespiratorySystemData (*this, f, c);
        }

        BioGearsRespiratorySystemData& BioGearsRespiratorySystemData::
        operator= (const BioGearsRespiratorySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (*this) = x;
            this->InitialExpiratoryReserveVolume_L_ = x.InitialExpiratoryReserveVolume_L_;
            this->InitialFunctionalResidualCapacity_L_ = x.InitialFunctionalResidualCapacity_L_;
            this->InitialInspiratoryCapacity_L_ = x.InitialInspiratoryCapacity_L_;
            this->InitialResidualVolume_L_ = x.InitialResidualVolume_L_;
            this->NotBreathing_ = x.NotBreathing_;
            this->TopBreathTotalVolume_L_ = x.TopBreathTotalVolume_L_;
            this->TopBreathAlveoliVolume_L_ = x.TopBreathAlveoliVolume_L_;
            this->TopBreathDeadSpaceVolume_L_ = x.TopBreathDeadSpaceVolume_L_;
            this->TopBreathPleuralPressure_cmH2O_ = x.TopBreathPleuralPressure_cmH2O_;
            this->LastCardiacCycleBloodPH_ = x.LastCardiacCycleBloodPH_;
            this->PreviousTotalLungVolume_L_ = x.PreviousTotalLungVolume_L_;
            this->BloodPHRunningAverage_ = x.BloodPHRunningAverage_;
            this->BreathingCycle_ = x.BreathingCycle_;
            this->ArterialOxygenPressure_mmHg_ = x.ArterialOxygenPressure_mmHg_;
            this->ArterialCarbonDioxidePressure_mmHg_ = x.ArterialCarbonDioxidePressure_mmHg_;
            this->ArterialOxygenAverage_mmHg_ = x.ArterialOxygenAverage_mmHg_;
            this->ArterialCarbonDioxideAverage_mmHg_ = x.ArterialCarbonDioxideAverage_mmHg_;
            this->BreathingCycleTime_s_ = x.BreathingCycleTime_s_;
            this->BreathTimeExhale_min_ = x.BreathTimeExhale_min_;
            this->DefaultDrivePressure_cmH2O_ = x.DefaultDrivePressure_cmH2O_;
            this->DriverPressure_cmH2O_ = x.DriverPressure_cmH2O_;
            this->DriverPressureMin_cmH2O_ = x.DriverPressureMin_cmH2O_;
            this->ElapsedBreathingCycleTime_min_ = x.ElapsedBreathingCycleTime_min_;
            this->IEscaleFactor_ = x.IEscaleFactor_;
            this->InstantaneousFunctionalResidualCapacity_L_ = x.InstantaneousFunctionalResidualCapacity_L_;
            this->MaxDriverPressure_cmH2O_ = x.MaxDriverPressure_cmH2O_;
            this->PeakRespiratoryDrivePressure_cmH2O_ = x.PeakRespiratoryDrivePressure_cmH2O_;
            this->VentilationFrequency_Per_min_ = x.VentilationFrequency_Per_min_;
            this->ConsciousBreathing_ = x.ConsciousBreathing_;
            this->ConsciousRespirationPeriod_s_ = x.ConsciousRespirationPeriod_s_;
            this->ConsciousRespirationRemainingPeriod_s_ = x.ConsciousRespirationRemainingPeriod_s_;
            this->ExpiratoryReserveVolumeFraction_ = x.ExpiratoryReserveVolumeFraction_;
            this->InspiratoryCapacityFraction_ = x.InspiratoryCapacityFraction_;
            this->ConsciousStartPressure_cmH2O_ = x.ConsciousStartPressure_cmH2O_;
            this->ConsciousEndPressure_cmH2O_ = x.ConsciousEndPressure_cmH2O_;
            this->HadAirwayObstruction_ = x.HadAirwayObstruction_;
            this->HadBronchoconstriction_ = x.HadBronchoconstriction_;
          }

          return *this;
        }

        BioGearsRespiratorySystemData::
        ~BioGearsRespiratorySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_type_factory_init (
          "BioGearsRespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsTissueSystemData
        //

        BioGearsTissueSystemData::
        BioGearsTissueSystemData ()
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (this),
          RestingFluidMass_kg_ (this),
          O2ConsumedRunningAverage_mL_Per_s_ (this),
          CO2ProducedRunningAverage_mL_Per_s_ (this),
          RespiratoryQuotientRunningAverage_ (this),
          FatigueRunningAverage_ (this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const RestingPatientMass_kg_type& RestingPatientMass_kg,
                                  const RestingFluidMass_kg_type& RestingFluidMass_kg,
                                  const O2ConsumedRunningAverage_mL_Per_s_type& O2ConsumedRunningAverage_mL_Per_s,
                                  const CO2ProducedRunningAverage_mL_Per_s_type& CO2ProducedRunningAverage_mL_Per_s,
                                  const RespiratoryQuotientRunningAverage_type& RespiratoryQuotientRunningAverage,
                                  const FatigueRunningAverage_type& FatigueRunningAverage)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (RestingPatientMass_kg, this),
          RestingFluidMass_kg_ (RestingFluidMass_kg, this),
          O2ConsumedRunningAverage_mL_Per_s_ (O2ConsumedRunningAverage_mL_Per_s, this),
          CO2ProducedRunningAverage_mL_Per_s_ (CO2ProducedRunningAverage_mL_Per_s, this),
          RespiratoryQuotientRunningAverage_ (RespiratoryQuotientRunningAverage, this),
          FatigueRunningAverage_ (FatigueRunningAverage, this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const RestingPatientMass_kg_type& RestingPatientMass_kg,
                                  const RestingFluidMass_kg_type& RestingFluidMass_kg,
                                  ::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > O2ConsumedRunningAverage_mL_Per_s,
                                  ::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > CO2ProducedRunningAverage_mL_Per_s,
                                  ::std::unique_ptr< RespiratoryQuotientRunningAverage_type > RespiratoryQuotientRunningAverage,
                                  ::std::unique_ptr< FatigueRunningAverage_type > FatigueRunningAverage)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (RestingPatientMass_kg, this),
          RestingFluidMass_kg_ (RestingFluidMass_kg, this),
          O2ConsumedRunningAverage_mL_Per_s_ (std::move (O2ConsumedRunningAverage_mL_Per_s), this),
          CO2ProducedRunningAverage_mL_Per_s_ (std::move (CO2ProducedRunningAverage_mL_Per_s), this),
          RespiratoryQuotientRunningAverage_ (std::move (RespiratoryQuotientRunningAverage), this),
          FatigueRunningAverage_ (std::move (FatigueRunningAverage), this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const BioGearsTissueSystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (x, f, c),
          RestingPatientMass_kg_ (x.RestingPatientMass_kg_, f, this),
          RestingFluidMass_kg_ (x.RestingFluidMass_kg_, f, this),
          O2ConsumedRunningAverage_mL_Per_s_ (x.O2ConsumedRunningAverage_mL_Per_s_, f, this),
          CO2ProducedRunningAverage_mL_Per_s_ (x.CO2ProducedRunningAverage_mL_Per_s_, f, this),
          RespiratoryQuotientRunningAverage_ (x.RespiratoryQuotientRunningAverage_, f, this),
          FatigueRunningAverage_ (x.FatigueRunningAverage_, f, this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (e, f | ::xml_schema::flags::base, c),
          RestingPatientMass_kg_ (this),
          RestingFluidMass_kg_ (this),
          O2ConsumedRunningAverage_mL_Per_s_ (this),
          CO2ProducedRunningAverage_mL_Per_s_ (this),
          RespiratoryQuotientRunningAverage_ (this),
          FatigueRunningAverage_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsTissueSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::TissueSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RestingPatientMass_kg
            //
            if (n.name () == "RestingPatientMass_kg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RestingPatientMass_kg_.present ())
              {
                this->RestingPatientMass_kg_.set (RestingPatientMass_kg_traits::create (i, f, this));
                continue;
              }
            }

            // RestingFluidMass_kg
            //
            if (n.name () == "RestingFluidMass_kg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RestingFluidMass_kg_.present ())
              {
                this->RestingFluidMass_kg_.set (RestingFluidMass_kg_traits::create (i, f, this));
                continue;
              }
            }

            // O2ConsumedRunningAverage_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "O2ConsumedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< O2ConsumedRunningAverage_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!O2ConsumedRunningAverage_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > r (
                    dynamic_cast< O2ConsumedRunningAverage_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->O2ConsumedRunningAverage_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CO2ProducedRunningAverage_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CO2ProducedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CO2ProducedRunningAverage_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CO2ProducedRunningAverage_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > r (
                    dynamic_cast< CO2ProducedRunningAverage_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CO2ProducedRunningAverage_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryQuotientRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryQuotientRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryQuotientRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RespiratoryQuotientRunningAverage_.present ())
                {
                  ::std::unique_ptr< RespiratoryQuotientRunningAverage_type > r (
                    dynamic_cast< RespiratoryQuotientRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryQuotientRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatigueRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatigueRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatigueRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FatigueRunningAverage_.present ())
                {
                  ::std::unique_ptr< FatigueRunningAverage_type > r (
                    dynamic_cast< FatigueRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatigueRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!RestingPatientMass_kg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RestingPatientMass_kg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RestingFluidMass_kg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RestingFluidMass_kg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!O2ConsumedRunningAverage_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "O2ConsumedRunningAverage_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CO2ProducedRunningAverage_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CO2ProducedRunningAverage_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RespiratoryQuotientRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RespiratoryQuotientRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FatigueRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FatigueRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsTissueSystemData* BioGearsTissueSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsTissueSystemData (*this, f, c);
        }

        BioGearsTissueSystemData& BioGearsTissueSystemData::
        operator= (const BioGearsTissueSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::TissueSystemData& > (*this) = x;
            this->RestingPatientMass_kg_ = x.RestingPatientMass_kg_;
            this->RestingFluidMass_kg_ = x.RestingFluidMass_kg_;
            this->O2ConsumedRunningAverage_mL_Per_s_ = x.O2ConsumedRunningAverage_mL_Per_s_;
            this->CO2ProducedRunningAverage_mL_Per_s_ = x.CO2ProducedRunningAverage_mL_Per_s_;
            this->RespiratoryQuotientRunningAverage_ = x.RespiratoryQuotientRunningAverage_;
            this->FatigueRunningAverage_ = x.FatigueRunningAverage_;
          }

          return *this;
        }

        BioGearsTissueSystemData::
        ~BioGearsTissueSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_type_factory_init (
          "BioGearsTissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsBloodChemistrySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialOxygenAverage_mmHg: ";
            om.insert (o, i.ArterialOxygenAverage_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialCarbonDioxideAverage_mmHg: ";
            om.insert (o, i.ArterialCarbonDioxideAverage_mmHg ());
          }

          o << ::std::endl << "RhFactorMismatch_ct: " << i.RhFactorMismatch_ct ();
          o << ::std::endl << "RhTransfusionReactionVolume_mL: " << i.RhTransfusionReactionVolume_mL ();
          o << ::std::endl << "DonorRBC_ct: " << i.DonorRBC_ct ();
          o << ::std::endl << "PatientRBC_ct: " << i.PatientRBC_ct ();
          o << ::std::endl << "TwoCellAgglutinates_ct: " << i.TwoCellAgglutinates_ct ();
          o << ::std::endl << "ThreeCellPatAgglutinates_ct: " << i.ThreeCellPatAgglutinates_ct ();
          o << ::std::endl << "ThreeCellDonAgglutinates_ct: " << i.ThreeCellDonAgglutinates_ct ();
          o << ::std::endl << "FourCellAgglutinates_ct: " << i.FourCellAgglutinates_ct ();
          o << ::std::endl << "RemovedRBC_ct: " << i.RemovedRBC_ct ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsBloodChemistrySystemData >
        _xsd_BioGearsBloodChemistrySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsCardiovascularSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& > (i);

          o << ::std::endl << "StartSystole: " << i.StartSystole ();
          o << ::std::endl << "HeartFlowDetected: " << i.HeartFlowDetected ();
          o << ::std::endl << "EnterCardiacArrest: " << i.EnterCardiacArrest ();
          o << ::std::endl << "CardiacCyclePeriod_s: " << i.CardiacCyclePeriod_s ();
          o << ::std::endl << "CurrentCardiacCycleDuration_s: " << i.CurrentCardiacCycleDuration_s ();
          o << ::std::endl << "LeftHeartElastanceModifier: " << i.LeftHeartElastanceModifier ();
          o << ::std::endl << "LeftHeartElastance_mmHg_Per_mL: " << i.LeftHeartElastance_mmHg_Per_mL ();
          o << ::std::endl << "LeftHeartElastanceMax_mmHg_Per_mL: " << i.LeftHeartElastanceMax_mmHg_Per_mL ();
          o << ::std::endl << "LeftHeartElastanceMin_mmHg_Per_mL: " << i.LeftHeartElastanceMin_mmHg_Per_mL ();
          o << ::std::endl << "RightHeartElastance_mmHg_Per_mL: " << i.RightHeartElastance_mmHg_Per_mL ();
          o << ::std::endl << "RightHeartElastanceMax_mmHg_Per_mL: " << i.RightHeartElastanceMax_mmHg_Per_mL ();
          o << ::std::endl << "RightHeartElastanceMin_mmHg_Per_mL: " << i.RightHeartElastanceMin_mmHg_Per_mL ();
          o << ::std::endl << "CompressionTime_s: " << i.CompressionTime_s ();
          o << ::std::endl << "CompressionRatio: " << i.CompressionRatio ();
          o << ::std::endl << "CompressionPeriod_s: " << i.CompressionPeriod_s ();
          o << ::std::endl << "CurrentCardiacCycleTime_s: " << i.CurrentCardiacCycleTime_s ();
          o << ::std::endl << "CardiacCycleDiastolicVolume_mL: " << i.CardiacCycleDiastolicVolume_mL ();
          o << ::std::endl << "CardiacCycleAortaPressureLow_mmHg: " << i.CardiacCycleAortaPressureLow_mmHg ();
          o << ::std::endl << "CardiacCycleAortaPressureHigh_mmHg: " << i.CardiacCycleAortaPressureHigh_mmHg ();
          o << ::std::endl << "CardiacCyclePulmonaryArteryPressureLow_mmHg: " << i.CardiacCyclePulmonaryArteryPressureLow_mmHg ();
          o << ::std::endl << "CardiacCyclePulmonaryArteryPressureHigh_mmHg: " << i.CardiacCyclePulmonaryArteryPressureHigh_mmHg ();
          o << ::std::endl << "LastCardiacCycleMeanArterialCO2PartialPressure_mmHg: " << i.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg ();
          o << ::std::endl << "CardiacCycleStrokeVolume_mL: " << i.CardiacCycleStrokeVolume_mL ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCycleArterialPressure_mmHg: ";
            om.insert (o, i.CardiacCycleArterialPressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCycleArterialCO2PartialPressure_mmHg: ";
            om.insert (o, i.CardiacCycleArterialCO2PartialPressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCyclePulmonaryCapillariesWedgePressure_mmHg: ";
            om.insert (o, i.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCyclePulmonaryCapillariesFlow_mL_Per_s: ";
            om.insert (o, i.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCyclePulmonaryShuntFlow_mL_Per_s: ";
            om.insert (o, i.CardiacCyclePulmonaryShuntFlow_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCyclePulmonaryArteryPressure_mmHg: ";
            om.insert (o, i.CardiacCyclePulmonaryArteryPressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCycleCentralVenousPressure_mmHg: ";
            om.insert (o, i.CardiacCycleCentralVenousPressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiacCycleSkinFlow_mL_Per_s: ";
            om.insert (o, i.CardiacCycleSkinFlow_mL_Per_s ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsCardiovascularSystemData >
        _xsd_BioGearsCardiovascularSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsDrugSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DrugSystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::BolusAdministration_const_iterator
                 b (i.BolusAdministration ().begin ()), e (i.BolusAdministration ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "BolusAdministration: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::NasalStates_const_iterator
                 b (i.NasalStates ().begin ()), e (i.NasalStates ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "NasalStates: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::TransmucosalStates_const_iterator
                 b (i.TransmucosalStates ().begin ()), e (i.TransmucosalStates ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "TransmucosalStates: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "SarinRbcAcetylcholinesteraseComplex_nM: " << i.SarinRbcAcetylcholinesteraseComplex_nM ();
          o << ::std::endl << "AgedRbcAcetylcholinesterase_nM: " << i.AgedRbcAcetylcholinesterase_nM ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsDrugSystemData >
        _xsd_BioGearsDrugSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsEndocrineSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsEndocrineSystemData >
        _xsd_BioGearsEndocrineSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsEnergySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::EnergySystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BloodpH: ";
            om.insert (o, i.BloodpH ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BicarbonateMolarity_mmol_Per_L: ";
            om.insert (o, i.BicarbonateMolarity_mmol_Per_L ());
          }

          o << ::std::endl << "PackOn: " << i.PackOn ();
          o << ::std::endl << "PreviousWeightPack_kg: " << i.PreviousWeightPack_kg ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsEnergySystemData >
        _xsd_BioGearsEnergySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsGastrointestinalSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsGastrointestinalSystemData >
        _xsd_BioGearsGastrointestinalSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsHepaticSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::HepaticSystemData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsHepaticSystemData >
        _xsd_BioGearsHepaticSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsNervousSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::NervousSystemData& > (i);

          o << ::std::endl << "AfferentChemoreceptor_Hz: " << i.AfferentChemoreceptor_Hz ();
          o << ::std::endl << "AfferentPulmonaryStrechReceptor_Hz: " << i.AfferentPulmonaryStrechReceptor_Hz ();
          o << ::std::endl << "AorticBaroreceptorStrain: " << i.AorticBaroreceptorStrain ();
          o << ::std::endl << "ArterialOxygenBaseline_mmHg: " << i.ArterialOxygenBaseline_mmHg ();
          o << ::std::endl << "ArterialCarbonDioxideBaseline_mmHg: " << i.ArterialCarbonDioxideBaseline_mmHg ();
          o << ::std::endl << "BaroreceptorOperatingPoint_mmHg: " << i.BaroreceptorOperatingPoint_mmHg ();
          o << ::std::endl << "CardiopulmonaryInputBaseline_mmHg: " << i.CardiopulmonaryInputBaseline_mmHg ();
          o << ::std::endl << "CardiopulmonaryInput_mmHg: " << i.CardiopulmonaryInput_mmHg ();
          o << ::std::endl << "CarotidBaroreceptorStrain: " << i.CarotidBaroreceptorStrain ();
          for (BioGearsNervousSystemData::CerebralArteriesEffectors_Large_const_iterator
               b (i.CerebralArteriesEffectors_Large ().begin ()), e (i.CerebralArteriesEffectors_Large ().end ());
               b != e; ++b)
          {
            o << ::std::endl << "CerebralArteriesEffectors_Large: " << *b;
          }

          for (BioGearsNervousSystemData::CerebralArteriesEffectors_Small_const_iterator
               b (i.CerebralArteriesEffectors_Small ().begin ()), e (i.CerebralArteriesEffectors_Small ().end ());
               b != e; ++b)
          {
            o << ::std::endl << "CerebralArteriesEffectors_Small: " << *b;
          }

          o << ::std::endl << "CerebralBloodFlowBaseline_mL_Per_s: " << i.CerebralBloodFlowBaseline_mL_Per_s ();
          o << ::std::endl << "CerebralBloodFlowInput_mL_Per_s: " << i.CerebralBloodFlowInput_mL_Per_s ();
          o << ::std::endl << "CentralFrequencyDelta_Per_min: " << i.CentralFrequencyDelta_Per_min ();
          o << ::std::endl << "CentralPressureDelta_cmH2O: " << i.CentralPressureDelta_cmH2O ();
          o << ::std::endl << "CerebralOxygenSaturationBaseline: " << i.CerebralOxygenSaturationBaseline ();
          o << ::std::endl << "CerebralPerfusionPressureBaseline_mmHg: " << i.CerebralPerfusionPressureBaseline_mmHg ();
          o << ::std::endl << "ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz: " << i.ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz ();
          o << ::std::endl << "ChemoreceptorFiringRateSetPoint_Hz: " << i.ChemoreceptorFiringRateSetPoint_Hz ();
          o << ::std::endl << "ComplianceModifier: " << i.ComplianceModifier ();
          o << ::std::endl << "HeartElastanceModifier: " << i.HeartElastanceModifier ();
          o << ::std::endl << "HeartOxygenBaseline: " << i.HeartOxygenBaseline ();
          o << ::std::endl << "HeartRateModifierSympathetic: " << i.HeartRateModifierSympathetic ();
          o << ::std::endl << "HeartRateModifierVagal: " << i.HeartRateModifierVagal ();
          o << ::std::endl << "HypercapniaThresholdHeart: " << i.HypercapniaThresholdHeart ();
          o << ::std::endl << "HypercapniaThresholdPeripheral: " << i.HypercapniaThresholdPeripheral ();
          o << ::std::endl << "HypoxiaThresholdHeart: " << i.HypoxiaThresholdHeart ();
          o << ::std::endl << "HypoxiaThresholdPeripheral: " << i.HypoxiaThresholdPeripheral ();
          o << ::std::endl << "MeanLungVolume_L: " << i.MeanLungVolume_L ();
          o << ::std::endl << "MuscleOxygenBaseline: " << i.MuscleOxygenBaseline ();
          o << ::std::endl << "OxygenAutoregulatorHeart: " << i.OxygenAutoregulatorHeart ();
          o << ::std::endl << "OxygenAutoregulatorMuscle: " << i.OxygenAutoregulatorMuscle ();
          o << ::std::endl << "PeripheralFrequencyDelta_Per_min: " << i.PeripheralFrequencyDelta_Per_min ();
          o << ::std::endl << "PeripheralPressureDelta_cmH2O: " << i.PeripheralPressureDelta_cmH2O ();
          o << ::std::endl << "ResistanceModifierExtrasplanchnic: " << i.ResistanceModifierExtrasplanchnic ();
          o << ::std::endl << "ResistanceModifierMuscle: " << i.ResistanceModifierMuscle ();
          o << ::std::endl << "ResistanceModifierSplanchnic: " << i.ResistanceModifierSplanchnic ();
          o << ::std::endl << "SympatheticPeripheralSignalBaseline: " << i.SympatheticPeripheralSignalBaseline ();
          o << ::std::endl << "SympatheticSinoatrialSignalBaseline: " << i.SympatheticSinoatrialSignalBaseline ();
          o << ::std::endl << "SympatheticPeripheralSignalFatigue: " << i.SympatheticPeripheralSignalFatigue ();
          o << ::std::endl << "VagalSignalBaseline: " << i.VagalSignalBaseline ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsNervousSystemData >
        _xsd_BioGearsNervousSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsRenalSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::RenalSystemData& > (i);

          o << ::std::endl << "Urinating: " << i.Urinating ();
          o << ::std::endl << "LeftAfferentResistance_mmHg_s_Per_mL: " << i.LeftAfferentResistance_mmHg_s_Per_mL ();
          o << ::std::endl << "RightAfferentResistance_mmHg_s_Per_mL: " << i.RightAfferentResistance_mmHg_s_Per_mL ();
          o << ::std::endl << "LeftSodiumFlowSetPoint_mg_Per_s: " << i.LeftSodiumFlowSetPoint_mg_Per_s ();
          o << ::std::endl << "RightSodiumFlowSetPoint_mg_Per_s: " << i.RightSodiumFlowSetPoint_mg_Per_s ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "UrineProductionRate_mL_Per_min: ";
            om.insert (o, i.UrineProductionRate_mL_Per_min ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "UrineOsmolarity_mOsm_Per_L: ";
            om.insert (o, i.UrineOsmolarity_mOsm_Per_L ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SodiumConcentration_mg_Per_mL: ";
            om.insert (o, i.SodiumConcentration_mg_Per_mL ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SodiumExcretionRate_mg_Per_min: ";
            om.insert (o, i.SodiumExcretionRate_mg_Per_min ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LeftSodiumFlow_mg_Per_s: ";
            om.insert (o, i.LeftSodiumFlow_mg_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RightSodiumFlow_mg_Per_s: ";
            om.insert (o, i.RightSodiumFlow_mg_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LeftRenalArterialPressure_mmHg: ";
            om.insert (o, i.LeftRenalArterialPressure_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RightRenalArterialPressure_mmHg: ";
            om.insert (o, i.RightRenalArterialPressure_mmHg ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsRenalSystemData >
        _xsd_BioGearsRenalSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsRespiratorySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (i);

          o << ::std::endl << "InitialExpiratoryReserveVolume_L: " << i.InitialExpiratoryReserveVolume_L ();
          o << ::std::endl << "InitialFunctionalResidualCapacity_L: " << i.InitialFunctionalResidualCapacity_L ();
          o << ::std::endl << "InitialInspiratoryCapacity_L: " << i.InitialInspiratoryCapacity_L ();
          o << ::std::endl << "InitialResidualVolume_L: " << i.InitialResidualVolume_L ();
          o << ::std::endl << "NotBreathing: " << i.NotBreathing ();
          o << ::std::endl << "TopBreathTotalVolume_L: " << i.TopBreathTotalVolume_L ();
          o << ::std::endl << "TopBreathAlveoliVolume_L: " << i.TopBreathAlveoliVolume_L ();
          o << ::std::endl << "TopBreathDeadSpaceVolume_L: " << i.TopBreathDeadSpaceVolume_L ();
          o << ::std::endl << "TopBreathPleuralPressure_cmH2O: " << i.TopBreathPleuralPressure_cmH2O ();
          o << ::std::endl << "LastCardiacCycleBloodPH: " << i.LastCardiacCycleBloodPH ();
          o << ::std::endl << "PreviousTotalLungVolume_L: " << i.PreviousTotalLungVolume_L ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BloodPHRunningAverage: ";
            om.insert (o, i.BloodPHRunningAverage ());
          }

          o << ::std::endl << "BreathingCycle: " << i.BreathingCycle ();
          o << ::std::endl << "ArterialOxygenPressure_mmHg: " << i.ArterialOxygenPressure_mmHg ();
          o << ::std::endl << "ArterialCarbonDioxidePressure_mmHg: " << i.ArterialCarbonDioxidePressure_mmHg ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialOxygenAverage_mmHg: ";
            om.insert (o, i.ArterialOxygenAverage_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialCarbonDioxideAverage_mmHg: ";
            om.insert (o, i.ArterialCarbonDioxideAverage_mmHg ());
          }

          o << ::std::endl << "BreathingCycleTime_s: " << i.BreathingCycleTime_s ();
          o << ::std::endl << "BreathTimeExhale_min: " << i.BreathTimeExhale_min ();
          o << ::std::endl << "DefaultDrivePressure_cmH2O: " << i.DefaultDrivePressure_cmH2O ();
          o << ::std::endl << "DriverPressure_cmH2O: " << i.DriverPressure_cmH2O ();
          o << ::std::endl << "DriverPressureMin_cmH2O: " << i.DriverPressureMin_cmH2O ();
          o << ::std::endl << "ElapsedBreathingCycleTime_min: " << i.ElapsedBreathingCycleTime_min ();
          o << ::std::endl << "IEscaleFactor: " << i.IEscaleFactor ();
          o << ::std::endl << "InstantaneousFunctionalResidualCapacity_L: " << i.InstantaneousFunctionalResidualCapacity_L ();
          o << ::std::endl << "MaxDriverPressure_cmH2O: " << i.MaxDriverPressure_cmH2O ();
          o << ::std::endl << "PeakRespiratoryDrivePressure_cmH2O: " << i.PeakRespiratoryDrivePressure_cmH2O ();
          o << ::std::endl << "VentilationFrequency_Per_min: " << i.VentilationFrequency_Per_min ();
          o << ::std::endl << "ConsciousBreathing: " << i.ConsciousBreathing ();
          o << ::std::endl << "ConsciousRespirationPeriod_s: " << i.ConsciousRespirationPeriod_s ();
          o << ::std::endl << "ConsciousRespirationRemainingPeriod_s: " << i.ConsciousRespirationRemainingPeriod_s ();
          o << ::std::endl << "ExpiratoryReserveVolumeFraction: " << i.ExpiratoryReserveVolumeFraction ();
          o << ::std::endl << "InspiratoryCapacityFraction: " << i.InspiratoryCapacityFraction ();
          o << ::std::endl << "ConsciousStartPressure_cmH2O: " << i.ConsciousStartPressure_cmH2O ();
          o << ::std::endl << "ConsciousEndPressure_cmH2O: " << i.ConsciousEndPressure_cmH2O ();
          o << ::std::endl << "HadAirwayObstruction: " << i.HadAirwayObstruction ();
          o << ::std::endl << "HadBronchoconstriction: " << i.HadBronchoconstriction ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsTissueSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::TissueSystemData& > (i);

          o << ::std::endl << "RestingPatientMass_kg: " << i.RestingPatientMass_kg ();
          o << ::std::endl << "RestingFluidMass_kg: " << i.RestingFluidMass_kg ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "O2ConsumedRunningAverage_mL_Per_s: ";
            om.insert (o, i.O2ConsumedRunningAverage_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CO2ProducedRunningAverage_mL_Per_s: ";
            om.insert (o, i.CO2ProducedRunningAverage_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RespiratoryQuotientRunningAverage: ";
            om.insert (o, i.RespiratoryQuotientRunningAverage ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FatigueRunningAverage: ";
            om.insert (o, i.FatigueRunningAverage ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const BioGearsBloodChemistrySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& > (i);

          // ArterialOxygenAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsBloodChemistrySystemData::ArterialOxygenAverage_mmHg_type& x (i.ArterialOxygenAverage_mmHg ());
            if (typeid (BioGearsBloodChemistrySystemData::ArterialOxygenAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialOxygenAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialOxygenAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ArterialCarbonDioxideAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsBloodChemistrySystemData::ArterialCarbonDioxideAverage_mmHg_type& x (i.ArterialCarbonDioxideAverage_mmHg ());
            if (typeid (BioGearsBloodChemistrySystemData::ArterialCarbonDioxideAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialCarbonDioxideAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialCarbonDioxideAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RhFactorMismatch_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RhFactorMismatch_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RhFactorMismatch_ct ());
          }

          // RhTransfusionReactionVolume_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RhTransfusionReactionVolume_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RhTransfusionReactionVolume_mL ());
          }

          // DonorRBC_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DonorRBC_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DonorRBC_ct ());
          }

          // PatientRBC_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PatientRBC_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PatientRBC_ct ());
          }

          // TwoCellAgglutinates_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TwoCellAgglutinates_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TwoCellAgglutinates_ct ());
          }

          // ThreeCellPatAgglutinates_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ThreeCellPatAgglutinates_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ThreeCellPatAgglutinates_ct ());
          }

          // ThreeCellDonAgglutinates_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ThreeCellDonAgglutinates_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ThreeCellDonAgglutinates_ct ());
          }

          // FourCellAgglutinates_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FourCellAgglutinates_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.FourCellAgglutinates_ct ());
          }

          // RemovedRBC_ct
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RemovedRBC_ct",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RemovedRBC_ct ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsBloodChemistrySystemData >
        _xsd_BioGearsBloodChemistrySystemData_type_serializer_init (
          "BioGearsBloodChemistrySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsCardiovascularSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& > (i);

          // StartSystole
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StartSystole",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.StartSystole ();
          }

          // HeartFlowDetected
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HeartFlowDetected",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.HeartFlowDetected ();
          }

          // EnterCardiacArrest
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EnterCardiacArrest",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.EnterCardiacArrest ();
          }

          // CardiacCyclePeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCyclePeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCyclePeriod_s ());
          }

          // CurrentCardiacCycleDuration_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CurrentCardiacCycleDuration_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CurrentCardiacCycleDuration_s ());
          }

          // LeftHeartElastanceModifier
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftHeartElastanceModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftHeartElastanceModifier ());
          }

          // LeftHeartElastance_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftHeartElastance_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftHeartElastance_mmHg_Per_mL ());
          }

          // LeftHeartElastanceMax_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftHeartElastanceMax_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftHeartElastanceMax_mmHg_Per_mL ());
          }

          // LeftHeartElastanceMin_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftHeartElastanceMin_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftHeartElastanceMin_mmHg_Per_mL ());
          }

          // RightHeartElastance_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RightHeartElastance_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RightHeartElastance_mmHg_Per_mL ());
          }

          // RightHeartElastanceMax_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RightHeartElastanceMax_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RightHeartElastanceMax_mmHg_Per_mL ());
          }

          // RightHeartElastanceMin_mmHg_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RightHeartElastanceMin_mmHg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RightHeartElastanceMin_mmHg_Per_mL ());
          }

          // CompressionTime_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CompressionTime_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CompressionTime_s ());
          }

          // CompressionRatio
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CompressionRatio",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CompressionRatio ());
          }

          // CompressionPeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CompressionPeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CompressionPeriod_s ());
          }

          // CurrentCardiacCycleTime_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CurrentCardiacCycleTime_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CurrentCardiacCycleTime_s ());
          }

          // CardiacCycleDiastolicVolume_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCycleDiastolicVolume_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCycleDiastolicVolume_mL ());
          }

          // CardiacCycleAortaPressureLow_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCycleAortaPressureLow_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCycleAortaPressureLow_mmHg ());
          }

          // CardiacCycleAortaPressureHigh_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCycleAortaPressureHigh_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCycleAortaPressureHigh_mmHg ());
          }

          // CardiacCyclePulmonaryArteryPressureLow_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCyclePulmonaryArteryPressureLow_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCyclePulmonaryArteryPressureLow_mmHg ());
          }

          // CardiacCyclePulmonaryArteryPressureHigh_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCyclePulmonaryArteryPressureHigh_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCyclePulmonaryArteryPressureHigh_mmHg ());
          }

          // LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LastCardiacCycleMeanArterialCO2PartialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg ());
          }

          // CardiacCycleStrokeVolume_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiacCycleStrokeVolume_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiacCycleStrokeVolume_mL ());
          }

          // CardiacCycleArterialPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCycleArterialPressure_mmHg_type& x (i.CardiacCycleArterialPressure_mmHg ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCycleArterialPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCycleArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCycleArterialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCycleArterialCO2PartialPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCycleArterialCO2PartialPressure_mmHg_type& x (i.CardiacCycleArterialCO2PartialPressure_mmHg ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCycleArterialCO2PartialPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCycleArterialCO2PartialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCycleArterialCO2PartialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& x (i.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCyclePulmonaryCapillariesWedgePressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCyclePulmonaryCapillariesWedgePressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& x (i.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCyclePulmonaryCapillariesFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCyclePulmonaryCapillariesFlow_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCyclePulmonaryShuntFlow_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& x (i.CardiacCyclePulmonaryShuntFlow_mL_Per_s ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCyclePulmonaryShuntFlow_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCyclePulmonaryShuntFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCyclePulmonaryShuntFlow_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCyclePulmonaryArteryPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressure_mmHg_type& x (i.CardiacCyclePulmonaryArteryPressure_mmHg ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCyclePulmonaryArteryPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCyclePulmonaryArteryPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCyclePulmonaryArteryPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCycleCentralVenousPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCycleCentralVenousPressure_mmHg_type& x (i.CardiacCycleCentralVenousPressure_mmHg ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCycleCentralVenousPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCycleCentralVenousPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCycleCentralVenousPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiacCycleSkinFlow_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsCardiovascularSystemData::CardiacCycleSkinFlow_mL_Per_s_type& x (i.CardiacCycleSkinFlow_mL_Per_s ());
            if (typeid (BioGearsCardiovascularSystemData::CardiacCycleSkinFlow_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiacCycleSkinFlow_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiacCycleSkinFlow_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsCardiovascularSystemData >
        _xsd_BioGearsCardiovascularSystemData_type_serializer_init (
          "BioGearsCardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsDrugSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DrugSystemData& > (i);

          // BolusAdministration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::BolusAdministration_const_iterator
                 b (i.BolusAdministration ().begin ()), n (i.BolusAdministration ().end ());
                 b != n; ++b)
            {
              if (typeid (BioGearsDrugSystemData::BolusAdministration_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BolusAdministration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "BolusAdministration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // NasalStates
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::NasalStates_const_iterator
                 b (i.NasalStates ().begin ()), n (i.NasalStates ().end ());
                 b != n; ++b)
            {
              if (typeid (BioGearsDrugSystemData::NasalStates_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NasalStates",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "NasalStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // TransmucosalStates
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (BioGearsDrugSystemData::TransmucosalStates_const_iterator
                 b (i.TransmucosalStates ().begin ()), n (i.TransmucosalStates ().end ());
                 b != n; ++b)
            {
              if (typeid (BioGearsDrugSystemData::TransmucosalStates_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TransmucosalStates",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "TransmucosalStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // SarinRbcAcetylcholinesteraseComplex_nM
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SarinRbcAcetylcholinesteraseComplex_nM",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.SarinRbcAcetylcholinesteraseComplex_nM ());
          }

          // AgedRbcAcetylcholinesterase_nM
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AgedRbcAcetylcholinesterase_nM",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.AgedRbcAcetylcholinesterase_nM ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsDrugSystemData >
        _xsd_BioGearsDrugSystemData_type_serializer_init (
          "BioGearsDrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsEndocrineSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsEndocrineSystemData >
        _xsd_BioGearsEndocrineSystemData_type_serializer_init (
          "BioGearsEndocrineSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsEnergySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::EnergySystemData& > (i);

          // BloodpH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsEnergySystemData::BloodpH_type& x (i.BloodpH ());
            if (typeid (BioGearsEnergySystemData::BloodpH_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BloodpH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BloodpH",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BicarbonateMolarity_mmol_Per_L
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsEnergySystemData::BicarbonateMolarity_mmol_Per_L_type& x (i.BicarbonateMolarity_mmol_Per_L ());
            if (typeid (BioGearsEnergySystemData::BicarbonateMolarity_mmol_Per_L_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BicarbonateMolarity_mmol_Per_L",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BicarbonateMolarity_mmol_Per_L",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // PackOn
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PackOn",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.PackOn ();
          }

          // PreviousWeightPack_kg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PreviousWeightPack_kg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PreviousWeightPack_kg ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsEnergySystemData >
        _xsd_BioGearsEnergySystemData_type_serializer_init (
          "BioGearsEnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsGastrointestinalSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsGastrointestinalSystemData >
        _xsd_BioGearsGastrointestinalSystemData_type_serializer_init (
          "BioGearsGastrointestinalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsHepaticSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::HepaticSystemData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsHepaticSystemData >
        _xsd_BioGearsHepaticSystemData_type_serializer_init (
          "BioGearsHepaticSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsNervousSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::NervousSystemData& > (i);

          // AfferentChemoreceptor_Hz
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AfferentChemoreceptor_Hz",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.AfferentChemoreceptor_Hz ());
          }

          // AfferentPulmonaryStrechReceptor_Hz
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AfferentPulmonaryStrechReceptor_Hz",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.AfferentPulmonaryStrechReceptor_Hz ());
          }

          // AorticBaroreceptorStrain
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AorticBaroreceptorStrain",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.AorticBaroreceptorStrain ());
          }

          // ArterialOxygenBaseline_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialOxygenBaseline_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialOxygenBaseline_mmHg ());
          }

          // ArterialCarbonDioxideBaseline_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialCarbonDioxideBaseline_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialCarbonDioxideBaseline_mmHg ());
          }

          // BaroreceptorOperatingPoint_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BaroreceptorOperatingPoint_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.BaroreceptorOperatingPoint_mmHg ());
          }

          // CardiopulmonaryInputBaseline_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiopulmonaryInputBaseline_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiopulmonaryInputBaseline_mmHg ());
          }

          // CardiopulmonaryInput_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardiopulmonaryInput_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CardiopulmonaryInput_mmHg ());
          }

          // CarotidBaroreceptorStrain
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CarotidBaroreceptorStrain",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CarotidBaroreceptorStrain ());
          }

          // CerebralArteriesEffectors_Large
          //
          for (BioGearsNervousSystemData::CerebralArteriesEffectors_Large_const_iterator
               b (i.CerebralArteriesEffectors_Large ().begin ()), n (i.CerebralArteriesEffectors_Large ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralArteriesEffectors_Large",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double (*b);
          }

          // CerebralArteriesEffectors_Small
          //
          for (BioGearsNervousSystemData::CerebralArteriesEffectors_Small_const_iterator
               b (i.CerebralArteriesEffectors_Small ().begin ()), n (i.CerebralArteriesEffectors_Small ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralArteriesEffectors_Small",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double (*b);
          }

          // CerebralBloodFlowBaseline_mL_Per_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralBloodFlowBaseline_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CerebralBloodFlowBaseline_mL_Per_s ());
          }

          // CerebralBloodFlowInput_mL_Per_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralBloodFlowInput_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CerebralBloodFlowInput_mL_Per_s ());
          }

          // CentralFrequencyDelta_Per_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CentralFrequencyDelta_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CentralFrequencyDelta_Per_min ());
          }

          // CentralPressureDelta_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CentralPressureDelta_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CentralPressureDelta_cmH2O ());
          }

          // CerebralOxygenSaturationBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralOxygenSaturationBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CerebralOxygenSaturationBaseline ());
          }

          // CerebralPerfusionPressureBaseline_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CerebralPerfusionPressureBaseline_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.CerebralPerfusionPressureBaseline_mmHg ());
          }

          // ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ChemoreceptorPeripheralBloodGasInteractionBaseline_Hz ());
          }

          // ChemoreceptorFiringRateSetPoint_Hz
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ChemoreceptorFiringRateSetPoint_Hz",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ChemoreceptorFiringRateSetPoint_Hz ());
          }

          // ComplianceModifier
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ComplianceModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ComplianceModifier ());
          }

          // HeartElastanceModifier
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HeartElastanceModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HeartElastanceModifier ());
          }

          // HeartOxygenBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HeartOxygenBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HeartOxygenBaseline ());
          }

          // HeartRateModifierSympathetic
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HeartRateModifierSympathetic",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HeartRateModifierSympathetic ());
          }

          // HeartRateModifierVagal
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HeartRateModifierVagal",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HeartRateModifierVagal ());
          }

          // HypercapniaThresholdHeart
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HypercapniaThresholdHeart",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HypercapniaThresholdHeart ());
          }

          // HypercapniaThresholdPeripheral
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HypercapniaThresholdPeripheral",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HypercapniaThresholdPeripheral ());
          }

          // HypoxiaThresholdHeart
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HypoxiaThresholdHeart",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HypoxiaThresholdHeart ());
          }

          // HypoxiaThresholdPeripheral
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HypoxiaThresholdPeripheral",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.HypoxiaThresholdPeripheral ());
          }

          // MeanLungVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MeanLungVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.MeanLungVolume_L ());
          }

          // MuscleOxygenBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MuscleOxygenBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.MuscleOxygenBaseline ());
          }

          // OxygenAutoregulatorHeart
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OxygenAutoregulatorHeart",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.OxygenAutoregulatorHeart ());
          }

          // OxygenAutoregulatorMuscle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OxygenAutoregulatorMuscle",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.OxygenAutoregulatorMuscle ());
          }

          // PeripheralFrequencyDelta_Per_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PeripheralFrequencyDelta_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PeripheralFrequencyDelta_Per_min ());
          }

          // PeripheralPressureDelta_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PeripheralPressureDelta_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PeripheralPressureDelta_cmH2O ());
          }

          // ResistanceModifierExtrasplanchnic
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ResistanceModifierExtrasplanchnic",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ResistanceModifierExtrasplanchnic ());
          }

          // ResistanceModifierMuscle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ResistanceModifierMuscle",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ResistanceModifierMuscle ());
          }

          // ResistanceModifierSplanchnic
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ResistanceModifierSplanchnic",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ResistanceModifierSplanchnic ());
          }

          // SympatheticPeripheralSignalBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SympatheticPeripheralSignalBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.SympatheticPeripheralSignalBaseline ());
          }

          // SympatheticSinoatrialSignalBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SympatheticSinoatrialSignalBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.SympatheticSinoatrialSignalBaseline ());
          }

          // SympatheticPeripheralSignalFatigue
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SympatheticPeripheralSignalFatigue",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.SympatheticPeripheralSignalFatigue ());
          }

          // VagalSignalBaseline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VagalSignalBaseline",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.VagalSignalBaseline ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsNervousSystemData >
        _xsd_BioGearsNervousSystemData_type_serializer_init (
          "BioGearsNervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsRenalSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::RenalSystemData& > (i);

          // Urinating
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Urinating",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.Urinating ();
          }

          // LeftAfferentResistance_mmHg_s_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftAfferentResistance_mmHg_s_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftAfferentResistance_mmHg_s_Per_mL ());
          }

          // RightAfferentResistance_mmHg_s_Per_mL
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RightAfferentResistance_mmHg_s_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RightAfferentResistance_mmHg_s_Per_mL ());
          }

          // LeftSodiumFlowSetPoint_mg_Per_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LeftSodiumFlowSetPoint_mg_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LeftSodiumFlowSetPoint_mg_Per_s ());
          }

          // RightSodiumFlowSetPoint_mg_Per_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RightSodiumFlowSetPoint_mg_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RightSodiumFlowSetPoint_mg_Per_s ());
          }

          // UrineProductionRate_mL_Per_min
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::UrineProductionRate_mL_Per_min_type& x (i.UrineProductionRate_mL_Per_min ());
            if (typeid (BioGearsRenalSystemData::UrineProductionRate_mL_Per_min_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "UrineProductionRate_mL_Per_min",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "UrineProductionRate_mL_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // UrineOsmolarity_mOsm_Per_L
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::UrineOsmolarity_mOsm_Per_L_type& x (i.UrineOsmolarity_mOsm_Per_L ());
            if (typeid (BioGearsRenalSystemData::UrineOsmolarity_mOsm_Per_L_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "UrineOsmolarity_mOsm_Per_L",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "UrineOsmolarity_mOsm_Per_L",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SodiumConcentration_mg_Per_mL
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::SodiumConcentration_mg_Per_mL_type& x (i.SodiumConcentration_mg_Per_mL ());
            if (typeid (BioGearsRenalSystemData::SodiumConcentration_mg_Per_mL_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SodiumConcentration_mg_Per_mL",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SodiumConcentration_mg_Per_mL",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SodiumExcretionRate_mg_Per_min
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::SodiumExcretionRate_mg_Per_min_type& x (i.SodiumExcretionRate_mg_Per_min ());
            if (typeid (BioGearsRenalSystemData::SodiumExcretionRate_mg_Per_min_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SodiumExcretionRate_mg_Per_min",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SodiumExcretionRate_mg_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LeftSodiumFlow_mg_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::LeftSodiumFlow_mg_Per_s_type& x (i.LeftSodiumFlow_mg_Per_s ());
            if (typeid (BioGearsRenalSystemData::LeftSodiumFlow_mg_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LeftSodiumFlow_mg_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LeftSodiumFlow_mg_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RightSodiumFlow_mg_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::RightSodiumFlow_mg_Per_s_type& x (i.RightSodiumFlow_mg_Per_s ());
            if (typeid (BioGearsRenalSystemData::RightSodiumFlow_mg_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RightSodiumFlow_mg_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RightSodiumFlow_mg_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LeftRenalArterialPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::LeftRenalArterialPressure_mmHg_type& x (i.LeftRenalArterialPressure_mmHg ());
            if (typeid (BioGearsRenalSystemData::LeftRenalArterialPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LeftRenalArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LeftRenalArterialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RightRenalArterialPressure_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRenalSystemData::RightRenalArterialPressure_mmHg_type& x (i.RightRenalArterialPressure_mmHg ());
            if (typeid (BioGearsRenalSystemData::RightRenalArterialPressure_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RightRenalArterialPressure_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RightRenalArterialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsRenalSystemData >
        _xsd_BioGearsRenalSystemData_type_serializer_init (
          "BioGearsRenalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsRespiratorySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (i);

          // InitialExpiratoryReserveVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialExpiratoryReserveVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialExpiratoryReserveVolume_L ());
          }

          // InitialFunctionalResidualCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialFunctionalResidualCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialFunctionalResidualCapacity_L ());
          }

          // InitialInspiratoryCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialInspiratoryCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialInspiratoryCapacity_L ());
          }

          // InitialResidualVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialResidualVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialResidualVolume_L ());
          }

          // NotBreathing
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NotBreathing",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.NotBreathing ();
          }

          // TopBreathTotalVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathTotalVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathTotalVolume_L ());
          }

          // TopBreathAlveoliVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathAlveoliVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathAlveoliVolume_L ());
          }

          // TopBreathDeadSpaceVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathDeadSpaceVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathDeadSpaceVolume_L ());
          }

          // TopBreathPleuralPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathPleuralPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathPleuralPressure_cmH2O ());
          }

          // LastCardiacCycleBloodPH
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LastCardiacCycleBloodPH",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LastCardiacCycleBloodPH ());
          }

          // PreviousTotalLungVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PreviousTotalLungVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PreviousTotalLungVolume_L ());
          }

          // BloodPHRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::BloodPHRunningAverage_type& x (i.BloodPHRunningAverage ());
            if (typeid (BioGearsRespiratorySystemData::BloodPHRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BloodPHRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BloodPHRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BreathingCycle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathingCycle",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.BreathingCycle ();
          }

          // ArterialOxygenPressure_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialOxygenPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialOxygenPressure_mmHg ());
          }

          // ArterialCarbonDioxidePressure_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialCarbonDioxidePressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialCarbonDioxidePressure_mmHg ());
          }

          // ArterialOxygenAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::ArterialOxygenAverage_mmHg_type& x (i.ArterialOxygenAverage_mmHg ());
            if (typeid (BioGearsRespiratorySystemData::ArterialOxygenAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialOxygenAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialOxygenAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ArterialCarbonDioxideAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::ArterialCarbonDioxideAverage_mmHg_type& x (i.ArterialCarbonDioxideAverage_mmHg ());
            if (typeid (BioGearsRespiratorySystemData::ArterialCarbonDioxideAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialCarbonDioxideAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialCarbonDioxideAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BreathingCycleTime_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathingCycleTime_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.BreathingCycleTime_s ());
          }

          // BreathTimeExhale_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathTimeExhale_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.BreathTimeExhale_min ());
          }

          // DefaultDrivePressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DefaultDrivePressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DefaultDrivePressure_cmH2O ());
          }

          // DriverPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DriverPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DriverPressure_cmH2O ());
          }

          // DriverPressureMin_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DriverPressureMin_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DriverPressureMin_cmH2O ());
          }

          // ElapsedBreathingCycleTime_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElapsedBreathingCycleTime_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ElapsedBreathingCycleTime_min ());
          }

          // IEscaleFactor
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IEscaleFactor",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.IEscaleFactor ());
          }

          // InstantaneousFunctionalResidualCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InstantaneousFunctionalResidualCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InstantaneousFunctionalResidualCapacity_L ());
          }

          // MaxDriverPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MaxDriverPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.MaxDriverPressure_cmH2O ());
          }

          // PeakRespiratoryDrivePressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PeakRespiratoryDrivePressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PeakRespiratoryDrivePressure_cmH2O ());
          }

          // VentilationFrequency_Per_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VentilationFrequency_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.VentilationFrequency_Per_min ());
          }

          // ConsciousBreathing
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousBreathing",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.ConsciousBreathing ();
          }

          // ConsciousRespirationPeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousRespirationPeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousRespirationPeriod_s ());
          }

          // ConsciousRespirationRemainingPeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousRespirationRemainingPeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousRespirationRemainingPeriod_s ());
          }

          // ExpiratoryReserveVolumeFraction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExpiratoryReserveVolumeFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ExpiratoryReserveVolumeFraction ());
          }

          // InspiratoryCapacityFraction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InspiratoryCapacityFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InspiratoryCapacityFraction ());
          }

          // ConsciousStartPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousStartPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousStartPressure_cmH2O ());
          }

          // ConsciousEndPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousEndPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousEndPressure_cmH2O ());
          }

          // HadAirwayObstruction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HadAirwayObstruction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.HadAirwayObstruction ();
          }

          // HadBronchoconstriction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HadBronchoconstriction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.HadBronchoconstriction ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_type_serializer_init (
          "BioGearsRespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsTissueSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::TissueSystemData& > (i);

          // RestingPatientMass_kg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RestingPatientMass_kg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RestingPatientMass_kg ());
          }

          // RestingFluidMass_kg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RestingFluidMass_kg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RestingFluidMass_kg ());
          }

          // O2ConsumedRunningAverage_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& x (i.O2ConsumedRunningAverage_mL_Per_s ());
            if (typeid (BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "O2ConsumedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "O2ConsumedRunningAverage_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CO2ProducedRunningAverage_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& x (i.CO2ProducedRunningAverage_mL_Per_s ());
            if (typeid (BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CO2ProducedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CO2ProducedRunningAverage_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RespiratoryQuotientRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& x (i.RespiratoryQuotientRunningAverage ());
            if (typeid (BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RespiratoryQuotientRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RespiratoryQuotientRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FatigueRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::FatigueRunningAverage_type& x (i.FatigueRunningAverage ());
            if (typeid (BioGearsTissueSystemData::FatigueRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FatigueRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FatigueRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_type_serializer_init (
          "BioGearsTissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

