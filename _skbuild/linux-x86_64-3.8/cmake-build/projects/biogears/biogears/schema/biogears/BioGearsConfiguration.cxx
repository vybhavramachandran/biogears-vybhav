// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BioGearsConfiguration.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BloodChemistryConfigurationData
        // 

        const BloodChemistryConfigurationData::MeanCorpuscularHemoglobin_optional& BloodChemistryConfigurationData::
        MeanCorpuscularHemoglobin () const
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        BloodChemistryConfigurationData::MeanCorpuscularHemoglobin_optional& BloodChemistryConfigurationData::
        MeanCorpuscularHemoglobin ()
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_type& x)
        {
          this->MeanCorpuscularHemoglobin_.set (x);
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_optional& x)
        {
          this->MeanCorpuscularHemoglobin_ = x;
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularHemoglobin (::std::unique_ptr< MeanCorpuscularHemoglobin_type > x)
        {
          this->MeanCorpuscularHemoglobin_.set (std::move (x));
        }

        const BloodChemistryConfigurationData::MeanCorpuscularVolume_optional& BloodChemistryConfigurationData::
        MeanCorpuscularVolume () const
        {
          return this->MeanCorpuscularVolume_;
        }

        BloodChemistryConfigurationData::MeanCorpuscularVolume_optional& BloodChemistryConfigurationData::
        MeanCorpuscularVolume ()
        {
          return this->MeanCorpuscularVolume_;
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_type& x)
        {
          this->MeanCorpuscularVolume_.set (x);
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_optional& x)
        {
          this->MeanCorpuscularVolume_ = x;
        }

        void BloodChemistryConfigurationData::
        MeanCorpuscularVolume (::std::unique_ptr< MeanCorpuscularVolume_type > x)
        {
          this->MeanCorpuscularVolume_.set (std::move (x));
        }

        const BloodChemistryConfigurationData::StandardDiffusionDistance_optional& BloodChemistryConfigurationData::
        StandardDiffusionDistance () const
        {
          return this->StandardDiffusionDistance_;
        }

        BloodChemistryConfigurationData::StandardDiffusionDistance_optional& BloodChemistryConfigurationData::
        StandardDiffusionDistance ()
        {
          return this->StandardDiffusionDistance_;
        }

        void BloodChemistryConfigurationData::
        StandardDiffusionDistance (const StandardDiffusionDistance_type& x)
        {
          this->StandardDiffusionDistance_.set (x);
        }

        void BloodChemistryConfigurationData::
        StandardDiffusionDistance (const StandardDiffusionDistance_optional& x)
        {
          this->StandardDiffusionDistance_ = x;
        }

        void BloodChemistryConfigurationData::
        StandardDiffusionDistance (::std::unique_ptr< StandardDiffusionDistance_type > x)
        {
          this->StandardDiffusionDistance_.set (std::move (x));
        }

        const BloodChemistryConfigurationData::StandardOxygenDiffusionCoefficient_optional& BloodChemistryConfigurationData::
        StandardOxygenDiffusionCoefficient () const
        {
          return this->StandardOxygenDiffusionCoefficient_;
        }

        BloodChemistryConfigurationData::StandardOxygenDiffusionCoefficient_optional& BloodChemistryConfigurationData::
        StandardOxygenDiffusionCoefficient ()
        {
          return this->StandardOxygenDiffusionCoefficient_;
        }

        void BloodChemistryConfigurationData::
        StandardOxygenDiffusionCoefficient (const StandardOxygenDiffusionCoefficient_type& x)
        {
          this->StandardOxygenDiffusionCoefficient_.set (x);
        }

        void BloodChemistryConfigurationData::
        StandardOxygenDiffusionCoefficient (const StandardOxygenDiffusionCoefficient_optional& x)
        {
          this->StandardOxygenDiffusionCoefficient_ = x;
        }

        void BloodChemistryConfigurationData::
        StandardOxygenDiffusionCoefficient (::std::unique_ptr< StandardOxygenDiffusionCoefficient_type > x)
        {
          this->StandardOxygenDiffusionCoefficient_.set (std::move (x));
        }


        // CardiovascularConfigurationData
        // 

        const CardiovascularConfigurationData::LeftHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMaximum () const
        {
          return this->LeftHeartElastanceMaximum_;
        }

        CardiovascularConfigurationData::LeftHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMaximum ()
        {
          return this->LeftHeartElastanceMaximum_;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_type& x)
        {
          this->LeftHeartElastanceMaximum_.set (x);
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_optional& x)
        {
          this->LeftHeartElastanceMaximum_ = x;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (::std::unique_ptr< LeftHeartElastanceMaximum_type > x)
        {
          this->LeftHeartElastanceMaximum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::LeftHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMinimum () const
        {
          return this->LeftHeartElastanceMinimum_;
        }

        CardiovascularConfigurationData::LeftHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMinimum ()
        {
          return this->LeftHeartElastanceMinimum_;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_type& x)
        {
          this->LeftHeartElastanceMinimum_.set (x);
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_optional& x)
        {
          this->LeftHeartElastanceMinimum_ = x;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (::std::unique_ptr< LeftHeartElastanceMinimum_type > x)
        {
          this->LeftHeartElastanceMinimum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::MinimumBloodVolumeFraction_optional& CardiovascularConfigurationData::
        MinimumBloodVolumeFraction () const
        {
          return this->MinimumBloodVolumeFraction_;
        }

        CardiovascularConfigurationData::MinimumBloodVolumeFraction_optional& CardiovascularConfigurationData::
        MinimumBloodVolumeFraction ()
        {
          return this->MinimumBloodVolumeFraction_;
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_type& x)
        {
          this->MinimumBloodVolumeFraction_.set (x);
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_optional& x)
        {
          this->MinimumBloodVolumeFraction_ = x;
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (::std::unique_ptr< MinimumBloodVolumeFraction_type > x)
        {
          this->MinimumBloodVolumeFraction_.set (std::move (x));
        }

        const CardiovascularConfigurationData::RightHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMaximum () const
        {
          return this->RightHeartElastanceMaximum_;
        }

        CardiovascularConfigurationData::RightHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMaximum ()
        {
          return this->RightHeartElastanceMaximum_;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (const RightHeartElastanceMaximum_type& x)
        {
          this->RightHeartElastanceMaximum_.set (x);
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (const RightHeartElastanceMaximum_optional& x)
        {
          this->RightHeartElastanceMaximum_ = x;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (::std::unique_ptr< RightHeartElastanceMaximum_type > x)
        {
          this->RightHeartElastanceMaximum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::RightHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMinimum () const
        {
          return this->RightHeartElastanceMinimum_;
        }

        CardiovascularConfigurationData::RightHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMinimum ()
        {
          return this->RightHeartElastanceMinimum_;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (const RightHeartElastanceMinimum_type& x)
        {
          this->RightHeartElastanceMinimum_.set (x);
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (const RightHeartElastanceMinimum_optional& x)
        {
          this->RightHeartElastanceMinimum_ = x;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (::std::unique_ptr< RightHeartElastanceMinimum_type > x)
        {
          this->RightHeartElastanceMinimum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_optional& CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage () const
        {
          return this->StandardPulmonaryCapillaryCoverage_;
        }

        CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_optional& CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage ()
        {
          return this->StandardPulmonaryCapillaryCoverage_;
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_type& x)
        {
          this->StandardPulmonaryCapillaryCoverage_.set (x);
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_optional& x)
        {
          this->StandardPulmonaryCapillaryCoverage_ = x;
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (::std::unique_ptr< StandardPulmonaryCapillaryCoverage_type > x)
        {
          this->StandardPulmonaryCapillaryCoverage_.set (std::move (x));
        }


        // CircuitConfigurationData
        // 

        const CircuitConfigurationData::CardiovascularOpenResistance_optional& CircuitConfigurationData::
        CardiovascularOpenResistance () const
        {
          return this->CardiovascularOpenResistance_;
        }

        CircuitConfigurationData::CardiovascularOpenResistance_optional& CircuitConfigurationData::
        CardiovascularOpenResistance ()
        {
          return this->CardiovascularOpenResistance_;
        }

        void CircuitConfigurationData::
        CardiovascularOpenResistance (const CardiovascularOpenResistance_type& x)
        {
          this->CardiovascularOpenResistance_.set (x);
        }

        void CircuitConfigurationData::
        CardiovascularOpenResistance (const CardiovascularOpenResistance_optional& x)
        {
          this->CardiovascularOpenResistance_ = x;
        }

        void CircuitConfigurationData::
        CardiovascularOpenResistance (::std::unique_ptr< CardiovascularOpenResistance_type > x)
        {
          this->CardiovascularOpenResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultClosedElectricResistance_optional& CircuitConfigurationData::
        DefaultClosedElectricResistance () const
        {
          return this->DefaultClosedElectricResistance_;
        }

        CircuitConfigurationData::DefaultClosedElectricResistance_optional& CircuitConfigurationData::
        DefaultClosedElectricResistance ()
        {
          return this->DefaultClosedElectricResistance_;
        }

        void CircuitConfigurationData::
        DefaultClosedElectricResistance (const DefaultClosedElectricResistance_type& x)
        {
          this->DefaultClosedElectricResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultClosedElectricResistance (const DefaultClosedElectricResistance_optional& x)
        {
          this->DefaultClosedElectricResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultClosedElectricResistance (::std::unique_ptr< DefaultClosedElectricResistance_type > x)
        {
          this->DefaultClosedElectricResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultOpenElectricResistance_optional& CircuitConfigurationData::
        DefaultOpenElectricResistance () const
        {
          return this->DefaultOpenElectricResistance_;
        }

        CircuitConfigurationData::DefaultOpenElectricResistance_optional& CircuitConfigurationData::
        DefaultOpenElectricResistance ()
        {
          return this->DefaultOpenElectricResistance_;
        }

        void CircuitConfigurationData::
        DefaultOpenElectricResistance (const DefaultOpenElectricResistance_type& x)
        {
          this->DefaultOpenElectricResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultOpenElectricResistance (const DefaultOpenElectricResistance_optional& x)
        {
          this->DefaultOpenElectricResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultOpenElectricResistance (::std::unique_ptr< DefaultOpenElectricResistance_type > x)
        {
          this->DefaultOpenElectricResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultClosedFlowResistance_optional& CircuitConfigurationData::
        DefaultClosedFlowResistance () const
        {
          return this->DefaultClosedFlowResistance_;
        }

        CircuitConfigurationData::DefaultClosedFlowResistance_optional& CircuitConfigurationData::
        DefaultClosedFlowResistance ()
        {
          return this->DefaultClosedFlowResistance_;
        }

        void CircuitConfigurationData::
        DefaultClosedFlowResistance (const DefaultClosedFlowResistance_type& x)
        {
          this->DefaultClosedFlowResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultClosedFlowResistance (const DefaultClosedFlowResistance_optional& x)
        {
          this->DefaultClosedFlowResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultClosedFlowResistance (::std::unique_ptr< DefaultClosedFlowResistance_type > x)
        {
          this->DefaultClosedFlowResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultOpenFlowResistance_optional& CircuitConfigurationData::
        DefaultOpenFlowResistance () const
        {
          return this->DefaultOpenFlowResistance_;
        }

        CircuitConfigurationData::DefaultOpenFlowResistance_optional& CircuitConfigurationData::
        DefaultOpenFlowResistance ()
        {
          return this->DefaultOpenFlowResistance_;
        }

        void CircuitConfigurationData::
        DefaultOpenFlowResistance (const DefaultOpenFlowResistance_type& x)
        {
          this->DefaultOpenFlowResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultOpenFlowResistance (const DefaultOpenFlowResistance_optional& x)
        {
          this->DefaultOpenFlowResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultOpenFlowResistance (::std::unique_ptr< DefaultOpenFlowResistance_type > x)
        {
          this->DefaultOpenFlowResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultClosedHeatResistance_optional& CircuitConfigurationData::
        DefaultClosedHeatResistance () const
        {
          return this->DefaultClosedHeatResistance_;
        }

        CircuitConfigurationData::DefaultClosedHeatResistance_optional& CircuitConfigurationData::
        DefaultClosedHeatResistance ()
        {
          return this->DefaultClosedHeatResistance_;
        }

        void CircuitConfigurationData::
        DefaultClosedHeatResistance (const DefaultClosedHeatResistance_type& x)
        {
          this->DefaultClosedHeatResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultClosedHeatResistance (const DefaultClosedHeatResistance_optional& x)
        {
          this->DefaultClosedHeatResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultClosedHeatResistance (::std::unique_ptr< DefaultClosedHeatResistance_type > x)
        {
          this->DefaultClosedHeatResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::DefaultOpenHeatResistance_optional& CircuitConfigurationData::
        DefaultOpenHeatResistance () const
        {
          return this->DefaultOpenHeatResistance_;
        }

        CircuitConfigurationData::DefaultOpenHeatResistance_optional& CircuitConfigurationData::
        DefaultOpenHeatResistance ()
        {
          return this->DefaultOpenHeatResistance_;
        }

        void CircuitConfigurationData::
        DefaultOpenHeatResistance (const DefaultOpenHeatResistance_type& x)
        {
          this->DefaultOpenHeatResistance_.set (x);
        }

        void CircuitConfigurationData::
        DefaultOpenHeatResistance (const DefaultOpenHeatResistance_optional& x)
        {
          this->DefaultOpenHeatResistance_ = x;
        }

        void CircuitConfigurationData::
        DefaultOpenHeatResistance (::std::unique_ptr< DefaultOpenHeatResistance_type > x)
        {
          this->DefaultOpenHeatResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::MachineClosedResistance_optional& CircuitConfigurationData::
        MachineClosedResistance () const
        {
          return this->MachineClosedResistance_;
        }

        CircuitConfigurationData::MachineClosedResistance_optional& CircuitConfigurationData::
        MachineClosedResistance ()
        {
          return this->MachineClosedResistance_;
        }

        void CircuitConfigurationData::
        MachineClosedResistance (const MachineClosedResistance_type& x)
        {
          this->MachineClosedResistance_.set (x);
        }

        void CircuitConfigurationData::
        MachineClosedResistance (const MachineClosedResistance_optional& x)
        {
          this->MachineClosedResistance_ = x;
        }

        void CircuitConfigurationData::
        MachineClosedResistance (::std::unique_ptr< MachineClosedResistance_type > x)
        {
          this->MachineClosedResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::MachineOpenResistance_optional& CircuitConfigurationData::
        MachineOpenResistance () const
        {
          return this->MachineOpenResistance_;
        }

        CircuitConfigurationData::MachineOpenResistance_optional& CircuitConfigurationData::
        MachineOpenResistance ()
        {
          return this->MachineOpenResistance_;
        }

        void CircuitConfigurationData::
        MachineOpenResistance (const MachineOpenResistance_type& x)
        {
          this->MachineOpenResistance_.set (x);
        }

        void CircuitConfigurationData::
        MachineOpenResistance (const MachineOpenResistance_optional& x)
        {
          this->MachineOpenResistance_ = x;
        }

        void CircuitConfigurationData::
        MachineOpenResistance (::std::unique_ptr< MachineOpenResistance_type > x)
        {
          this->MachineOpenResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::RespiratoryClosedResistance_optional& CircuitConfigurationData::
        RespiratoryClosedResistance () const
        {
          return this->RespiratoryClosedResistance_;
        }

        CircuitConfigurationData::RespiratoryClosedResistance_optional& CircuitConfigurationData::
        RespiratoryClosedResistance ()
        {
          return this->RespiratoryClosedResistance_;
        }

        void CircuitConfigurationData::
        RespiratoryClosedResistance (const RespiratoryClosedResistance_type& x)
        {
          this->RespiratoryClosedResistance_.set (x);
        }

        void CircuitConfigurationData::
        RespiratoryClosedResistance (const RespiratoryClosedResistance_optional& x)
        {
          this->RespiratoryClosedResistance_ = x;
        }

        void CircuitConfigurationData::
        RespiratoryClosedResistance (::std::unique_ptr< RespiratoryClosedResistance_type > x)
        {
          this->RespiratoryClosedResistance_.set (std::move (x));
        }

        const CircuitConfigurationData::RespiratoryOpenResistance_optional& CircuitConfigurationData::
        RespiratoryOpenResistance () const
        {
          return this->RespiratoryOpenResistance_;
        }

        CircuitConfigurationData::RespiratoryOpenResistance_optional& CircuitConfigurationData::
        RespiratoryOpenResistance ()
        {
          return this->RespiratoryOpenResistance_;
        }

        void CircuitConfigurationData::
        RespiratoryOpenResistance (const RespiratoryOpenResistance_type& x)
        {
          this->RespiratoryOpenResistance_.set (x);
        }

        void CircuitConfigurationData::
        RespiratoryOpenResistance (const RespiratoryOpenResistance_optional& x)
        {
          this->RespiratoryOpenResistance_ = x;
        }

        void CircuitConfigurationData::
        RespiratoryOpenResistance (::std::unique_ptr< RespiratoryOpenResistance_type > x)
        {
          this->RespiratoryOpenResistance_.set (std::move (x));
        }


        // ConstantsConfigurationData
        // 

        const ConstantsConfigurationData::OxygenMetabolicConstant_optional& ConstantsConfigurationData::
        OxygenMetabolicConstant () const
        {
          return this->OxygenMetabolicConstant_;
        }

        ConstantsConfigurationData::OxygenMetabolicConstant_optional& ConstantsConfigurationData::
        OxygenMetabolicConstant ()
        {
          return this->OxygenMetabolicConstant_;
        }

        void ConstantsConfigurationData::
        OxygenMetabolicConstant (const OxygenMetabolicConstant_type& x)
        {
          this->OxygenMetabolicConstant_.set (x);
        }

        void ConstantsConfigurationData::
        OxygenMetabolicConstant (const OxygenMetabolicConstant_optional& x)
        {
          this->OxygenMetabolicConstant_ = x;
        }

        void ConstantsConfigurationData::
        OxygenMetabolicConstant (::std::unique_ptr< OxygenMetabolicConstant_type > x)
        {
          this->OxygenMetabolicConstant_.set (std::move (x));
        }

        const ConstantsConfigurationData::StefanBoltzmann_optional& ConstantsConfigurationData::
        StefanBoltzmann () const
        {
          return this->StefanBoltzmann_;
        }

        ConstantsConfigurationData::StefanBoltzmann_optional& ConstantsConfigurationData::
        StefanBoltzmann ()
        {
          return this->StefanBoltzmann_;
        }

        void ConstantsConfigurationData::
        StefanBoltzmann (const StefanBoltzmann_type& x)
        {
          this->StefanBoltzmann_.set (x);
        }

        void ConstantsConfigurationData::
        StefanBoltzmann (const StefanBoltzmann_optional& x)
        {
          this->StefanBoltzmann_ = x;
        }

        void ConstantsConfigurationData::
        StefanBoltzmann (::std::unique_ptr< StefanBoltzmann_type > x)
        {
          this->StefanBoltzmann_.set (std::move (x));
        }

        const ConstantsConfigurationData::UniversalGasConstant_optional& ConstantsConfigurationData::
        UniversalGasConstant () const
        {
          return this->UniversalGasConstant_;
        }

        ConstantsConfigurationData::UniversalGasConstant_optional& ConstantsConfigurationData::
        UniversalGasConstant ()
        {
          return this->UniversalGasConstant_;
        }

        void ConstantsConfigurationData::
        UniversalGasConstant (const UniversalGasConstant_type& x)
        {
          this->UniversalGasConstant_.set (x);
        }

        void ConstantsConfigurationData::
        UniversalGasConstant (const UniversalGasConstant_optional& x)
        {
          this->UniversalGasConstant_ = x;
        }

        void ConstantsConfigurationData::
        UniversalGasConstant (::std::unique_ptr< UniversalGasConstant_type > x)
        {
          this->UniversalGasConstant_.set (std::move (x));
        }


        // DrugsConfigurationData
        // 

        const DrugsConfigurationData::PDModel_optional& DrugsConfigurationData::
        PDModel () const
        {
          return this->PDModel_;
        }

        DrugsConfigurationData::PDModel_optional& DrugsConfigurationData::
        PDModel ()
        {
          return this->PDModel_;
        }

        void DrugsConfigurationData::
        PDModel (const PDModel_type& x)
        {
          this->PDModel_.set (x);
        }

        void DrugsConfigurationData::
        PDModel (const PDModel_optional& x)
        {
          this->PDModel_ = x;
        }

        void DrugsConfigurationData::
        PDModel (::std::unique_ptr< PDModel_type > x)
        {
          this->PDModel_.set (std::move (x));
        }


        // EnergyConfigurationData
        // 

        const EnergyConfigurationData::BodySpecificHeat_optional& EnergyConfigurationData::
        BodySpecificHeat () const
        {
          return this->BodySpecificHeat_;
        }

        EnergyConfigurationData::BodySpecificHeat_optional& EnergyConfigurationData::
        BodySpecificHeat ()
        {
          return this->BodySpecificHeat_;
        }

        void EnergyConfigurationData::
        BodySpecificHeat (const BodySpecificHeat_type& x)
        {
          this->BodySpecificHeat_.set (x);
        }

        void EnergyConfigurationData::
        BodySpecificHeat (const BodySpecificHeat_optional& x)
        {
          this->BodySpecificHeat_ = x;
        }

        void EnergyConfigurationData::
        BodySpecificHeat (::std::unique_ptr< BodySpecificHeat_type > x)
        {
          this->BodySpecificHeat_.set (std::move (x));
        }

        const EnergyConfigurationData::CoreTemperatureLow_optional& EnergyConfigurationData::
        CoreTemperatureLow () const
        {
          return this->CoreTemperatureLow_;
        }

        EnergyConfigurationData::CoreTemperatureLow_optional& EnergyConfigurationData::
        CoreTemperatureLow ()
        {
          return this->CoreTemperatureLow_;
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (const CoreTemperatureLow_type& x)
        {
          this->CoreTemperatureLow_.set (x);
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (const CoreTemperatureLow_optional& x)
        {
          this->CoreTemperatureLow_ = x;
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (::std::unique_ptr< CoreTemperatureLow_type > x)
        {
          this->CoreTemperatureLow_.set (std::move (x));
        }

        const EnergyConfigurationData::CoreTemperatureHigh_optional& EnergyConfigurationData::
        CoreTemperatureHigh () const
        {
          return this->CoreTemperatureHigh_;
        }

        EnergyConfigurationData::CoreTemperatureHigh_optional& EnergyConfigurationData::
        CoreTemperatureHigh ()
        {
          return this->CoreTemperatureHigh_;
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (const CoreTemperatureHigh_type& x)
        {
          this->CoreTemperatureHigh_.set (x);
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (const CoreTemperatureHigh_optional& x)
        {
          this->CoreTemperatureHigh_ = x;
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (::std::unique_ptr< CoreTemperatureHigh_type > x)
        {
          this->CoreTemperatureHigh_.set (std::move (x));
        }

        const EnergyConfigurationData::DeltaCoreTemperatureLow_optional& EnergyConfigurationData::
        DeltaCoreTemperatureLow () const
        {
          return this->DeltaCoreTemperatureLow_;
        }

        EnergyConfigurationData::DeltaCoreTemperatureLow_optional& EnergyConfigurationData::
        DeltaCoreTemperatureLow ()
        {
          return this->DeltaCoreTemperatureLow_;
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_type& x)
        {
          this->DeltaCoreTemperatureLow_.set (x);
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_optional& x)
        {
          this->DeltaCoreTemperatureLow_ = x;
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (::std::unique_ptr< DeltaCoreTemperatureLow_type > x)
        {
          this->DeltaCoreTemperatureLow_.set (std::move (x));
        }

        const EnergyConfigurationData::EnergyPerATP_optional& EnergyConfigurationData::
        EnergyPerATP () const
        {
          return this->EnergyPerATP_;
        }

        EnergyConfigurationData::EnergyPerATP_optional& EnergyConfigurationData::
        EnergyPerATP ()
        {
          return this->EnergyPerATP_;
        }

        void EnergyConfigurationData::
        EnergyPerATP (const EnergyPerATP_type& x)
        {
          this->EnergyPerATP_.set (x);
        }

        void EnergyConfigurationData::
        EnergyPerATP (const EnergyPerATP_optional& x)
        {
          this->EnergyPerATP_ = x;
        }

        void EnergyConfigurationData::
        EnergyPerATP (::std::unique_ptr< EnergyPerATP_type > x)
        {
          this->EnergyPerATP_.set (std::move (x));
        }

        const EnergyConfigurationData::SweatHeatTransfer_optional& EnergyConfigurationData::
        SweatHeatTransfer () const
        {
          return this->SweatHeatTransfer_;
        }

        EnergyConfigurationData::SweatHeatTransfer_optional& EnergyConfigurationData::
        SweatHeatTransfer ()
        {
          return this->SweatHeatTransfer_;
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (const SweatHeatTransfer_type& x)
        {
          this->SweatHeatTransfer_.set (x);
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (const SweatHeatTransfer_optional& x)
        {
          this->SweatHeatTransfer_ = x;
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (::std::unique_ptr< SweatHeatTransfer_type > x)
        {
          this->SweatHeatTransfer_.set (std::move (x));
        }

        const EnergyConfigurationData::VaporizationEnergy_optional& EnergyConfigurationData::
        VaporizationEnergy () const
        {
          return this->VaporizationEnergy_;
        }

        EnergyConfigurationData::VaporizationEnergy_optional& EnergyConfigurationData::
        VaporizationEnergy ()
        {
          return this->VaporizationEnergy_;
        }

        void EnergyConfigurationData::
        VaporizationEnergy (const VaporizationEnergy_type& x)
        {
          this->VaporizationEnergy_.set (x);
        }

        void EnergyConfigurationData::
        VaporizationEnergy (const VaporizationEnergy_optional& x)
        {
          this->VaporizationEnergy_ = x;
        }

        void EnergyConfigurationData::
        VaporizationEnergy (::std::unique_ptr< VaporizationEnergy_type > x)
        {
          this->VaporizationEnergy_.set (std::move (x));
        }

        const EnergyConfigurationData::VaporSpecificHeat_optional& EnergyConfigurationData::
        VaporSpecificHeat () const
        {
          return this->VaporSpecificHeat_;
        }

        EnergyConfigurationData::VaporSpecificHeat_optional& EnergyConfigurationData::
        VaporSpecificHeat ()
        {
          return this->VaporSpecificHeat_;
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (const VaporSpecificHeat_type& x)
        {
          this->VaporSpecificHeat_.set (x);
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (const VaporSpecificHeat_optional& x)
        {
          this->VaporSpecificHeat_ = x;
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (::std::unique_ptr< VaporSpecificHeat_type > x)
        {
          this->VaporSpecificHeat_.set (std::move (x));
        }


        // EnvironmentConfigurationData
        // 

        const EnvironmentConfigurationData::AirDensity_optional& EnvironmentConfigurationData::
        AirDensity () const
        {
          return this->AirDensity_;
        }

        EnvironmentConfigurationData::AirDensity_optional& EnvironmentConfigurationData::
        AirDensity ()
        {
          return this->AirDensity_;
        }

        void EnvironmentConfigurationData::
        AirDensity (const AirDensity_type& x)
        {
          this->AirDensity_.set (x);
        }

        void EnvironmentConfigurationData::
        AirDensity (const AirDensity_optional& x)
        {
          this->AirDensity_ = x;
        }

        void EnvironmentConfigurationData::
        AirDensity (::std::unique_ptr< AirDensity_type > x)
        {
          this->AirDensity_.set (std::move (x));
        }

        const EnvironmentConfigurationData::AirSpecificHeat_optional& EnvironmentConfigurationData::
        AirSpecificHeat () const
        {
          return this->AirSpecificHeat_;
        }

        EnvironmentConfigurationData::AirSpecificHeat_optional& EnvironmentConfigurationData::
        AirSpecificHeat ()
        {
          return this->AirSpecificHeat_;
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (const AirSpecificHeat_type& x)
        {
          this->AirSpecificHeat_.set (x);
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (const AirSpecificHeat_optional& x)
        {
          this->AirSpecificHeat_ = x;
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (::std::unique_ptr< AirSpecificHeat_type > x)
        {
          this->AirSpecificHeat_.set (std::move (x));
        }

        const EnvironmentConfigurationData::MolarMassOfDryAir_optional& EnvironmentConfigurationData::
        MolarMassOfDryAir () const
        {
          return this->MolarMassOfDryAir_;
        }

        EnvironmentConfigurationData::MolarMassOfDryAir_optional& EnvironmentConfigurationData::
        MolarMassOfDryAir ()
        {
          return this->MolarMassOfDryAir_;
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (const MolarMassOfDryAir_type& x)
        {
          this->MolarMassOfDryAir_.set (x);
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (const MolarMassOfDryAir_optional& x)
        {
          this->MolarMassOfDryAir_ = x;
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (::std::unique_ptr< MolarMassOfDryAir_type > x)
        {
          this->MolarMassOfDryAir_.set (std::move (x));
        }

        const EnvironmentConfigurationData::MolarMassOfWaterVapor_optional& EnvironmentConfigurationData::
        MolarMassOfWaterVapor () const
        {
          return this->MolarMassOfWaterVapor_;
        }

        EnvironmentConfigurationData::MolarMassOfWaterVapor_optional& EnvironmentConfigurationData::
        MolarMassOfWaterVapor ()
        {
          return this->MolarMassOfWaterVapor_;
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (const MolarMassOfWaterVapor_type& x)
        {
          this->MolarMassOfWaterVapor_.set (x);
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (const MolarMassOfWaterVapor_optional& x)
        {
          this->MolarMassOfWaterVapor_ = x;
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (::std::unique_ptr< MolarMassOfWaterVapor_type > x)
        {
          this->MolarMassOfWaterVapor_.set (std::move (x));
        }

        const EnvironmentConfigurationData::InitialEnvironmentalConditions_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditions () const
        {
          return this->InitialEnvironmentalConditions_;
        }

        EnvironmentConfigurationData::InitialEnvironmentalConditions_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditions ()
        {
          return this->InitialEnvironmentalConditions_;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (const InitialEnvironmentalConditions_type& x)
        {
          this->InitialEnvironmentalConditions_.set (x);
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (const InitialEnvironmentalConditions_optional& x)
        {
          this->InitialEnvironmentalConditions_ = x;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (::std::unique_ptr< InitialEnvironmentalConditions_type > x)
        {
          this->InitialEnvironmentalConditions_.set (std::move (x));
        }

        const EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile () const
        {
          return this->InitialEnvironmentalConditionsFile_;
        }

        EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile ()
        {
          return this->InitialEnvironmentalConditionsFile_;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_type& x)
        {
          this->InitialEnvironmentalConditionsFile_.set (x);
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_optional& x)
        {
          this->InitialEnvironmentalConditionsFile_ = x;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (::std::unique_ptr< InitialEnvironmentalConditionsFile_type > x)
        {
          this->InitialEnvironmentalConditionsFile_.set (std::move (x));
        }

        const EnvironmentConfigurationData::WaterDensity_optional& EnvironmentConfigurationData::
        WaterDensity () const
        {
          return this->WaterDensity_;
        }

        EnvironmentConfigurationData::WaterDensity_optional& EnvironmentConfigurationData::
        WaterDensity ()
        {
          return this->WaterDensity_;
        }

        void EnvironmentConfigurationData::
        WaterDensity (const WaterDensity_type& x)
        {
          this->WaterDensity_.set (x);
        }

        void EnvironmentConfigurationData::
        WaterDensity (const WaterDensity_optional& x)
        {
          this->WaterDensity_ = x;
        }

        void EnvironmentConfigurationData::
        WaterDensity (::std::unique_ptr< WaterDensity_type > x)
        {
          this->WaterDensity_.set (std::move (x));
        }


        // GastrointestinalConfigurationData
        // 

        const GastrointestinalConfigurationData::CalciumAbsorptionFraction_optional& GastrointestinalConfigurationData::
        CalciumAbsorptionFraction () const
        {
          return this->CalciumAbsorptionFraction_;
        }

        GastrointestinalConfigurationData::CalciumAbsorptionFraction_optional& GastrointestinalConfigurationData::
        CalciumAbsorptionFraction ()
        {
          return this->CalciumAbsorptionFraction_;
        }

        void GastrointestinalConfigurationData::
        CalciumAbsorptionFraction (const CalciumAbsorptionFraction_type& x)
        {
          this->CalciumAbsorptionFraction_.set (x);
        }

        void GastrointestinalConfigurationData::
        CalciumAbsorptionFraction (const CalciumAbsorptionFraction_optional& x)
        {
          this->CalciumAbsorptionFraction_ = x;
        }

        void GastrointestinalConfigurationData::
        CalciumAbsorptionFraction (::std::unique_ptr< CalciumAbsorptionFraction_type > x)
        {
          this->CalciumAbsorptionFraction_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::CalciumDigestionRate_optional& GastrointestinalConfigurationData::
        CalciumDigestionRate () const
        {
          return this->CalciumDigestionRate_;
        }

        GastrointestinalConfigurationData::CalciumDigestionRate_optional& GastrointestinalConfigurationData::
        CalciumDigestionRate ()
        {
          return this->CalciumDigestionRate_;
        }

        void GastrointestinalConfigurationData::
        CalciumDigestionRate (const CalciumDigestionRate_type& x)
        {
          this->CalciumDigestionRate_.set (x);
        }

        void GastrointestinalConfigurationData::
        CalciumDigestionRate (const CalciumDigestionRate_optional& x)
        {
          this->CalciumDigestionRate_ = x;
        }

        void GastrointestinalConfigurationData::
        CalciumDigestionRate (::std::unique_ptr< CalciumDigestionRate_type > x)
        {
          this->CalciumDigestionRate_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::CarbohydrateAbsorptionFraction_optional& GastrointestinalConfigurationData::
        CarbohydrateAbsorptionFraction () const
        {
          return this->CarbohydrateAbsorptionFraction_;
        }

        GastrointestinalConfigurationData::CarbohydrateAbsorptionFraction_optional& GastrointestinalConfigurationData::
        CarbohydrateAbsorptionFraction ()
        {
          return this->CarbohydrateAbsorptionFraction_;
        }

        void GastrointestinalConfigurationData::
        CarbohydrateAbsorptionFraction (const CarbohydrateAbsorptionFraction_type& x)
        {
          this->CarbohydrateAbsorptionFraction_.set (x);
        }

        void GastrointestinalConfigurationData::
        CarbohydrateAbsorptionFraction (const CarbohydrateAbsorptionFraction_optional& x)
        {
          this->CarbohydrateAbsorptionFraction_ = x;
        }

        void GastrointestinalConfigurationData::
        CarbohydrateAbsorptionFraction (::std::unique_ptr< CarbohydrateAbsorptionFraction_type > x)
        {
          this->CarbohydrateAbsorptionFraction_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::DefaultStomachContents_optional& GastrointestinalConfigurationData::
        DefaultStomachContents () const
        {
          return this->DefaultStomachContents_;
        }

        GastrointestinalConfigurationData::DefaultStomachContents_optional& GastrointestinalConfigurationData::
        DefaultStomachContents ()
        {
          return this->DefaultStomachContents_;
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContents (const DefaultStomachContents_type& x)
        {
          this->DefaultStomachContents_.set (x);
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContents (const DefaultStomachContents_optional& x)
        {
          this->DefaultStomachContents_ = x;
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContents (::std::unique_ptr< DefaultStomachContents_type > x)
        {
          this->DefaultStomachContents_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::DefaultStomachContentsFile_optional& GastrointestinalConfigurationData::
        DefaultStomachContentsFile () const
        {
          return this->DefaultStomachContentsFile_;
        }

        GastrointestinalConfigurationData::DefaultStomachContentsFile_optional& GastrointestinalConfigurationData::
        DefaultStomachContentsFile ()
        {
          return this->DefaultStomachContentsFile_;
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContentsFile (const DefaultStomachContentsFile_type& x)
        {
          this->DefaultStomachContentsFile_.set (x);
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContentsFile (const DefaultStomachContentsFile_optional& x)
        {
          this->DefaultStomachContentsFile_ = x;
        }

        void GastrointestinalConfigurationData::
        DefaultStomachContentsFile (::std::unique_ptr< DefaultStomachContentsFile_type > x)
        {
          this->DefaultStomachContentsFile_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::FatAbsorptionFraction_optional& GastrointestinalConfigurationData::
        FatAbsorptionFraction () const
        {
          return this->FatAbsorptionFraction_;
        }

        GastrointestinalConfigurationData::FatAbsorptionFraction_optional& GastrointestinalConfigurationData::
        FatAbsorptionFraction ()
        {
          return this->FatAbsorptionFraction_;
        }

        void GastrointestinalConfigurationData::
        FatAbsorptionFraction (const FatAbsorptionFraction_type& x)
        {
          this->FatAbsorptionFraction_.set (x);
        }

        void GastrointestinalConfigurationData::
        FatAbsorptionFraction (const FatAbsorptionFraction_optional& x)
        {
          this->FatAbsorptionFraction_ = x;
        }

        void GastrointestinalConfigurationData::
        FatAbsorptionFraction (::std::unique_ptr< FatAbsorptionFraction_type > x)
        {
          this->FatAbsorptionFraction_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::ProteinToUreaFraction_optional& GastrointestinalConfigurationData::
        ProteinToUreaFraction () const
        {
          return this->ProteinToUreaFraction_;
        }

        GastrointestinalConfigurationData::ProteinToUreaFraction_optional& GastrointestinalConfigurationData::
        ProteinToUreaFraction ()
        {
          return this->ProteinToUreaFraction_;
        }

        void GastrointestinalConfigurationData::
        ProteinToUreaFraction (const ProteinToUreaFraction_type& x)
        {
          this->ProteinToUreaFraction_.set (x);
        }

        void GastrointestinalConfigurationData::
        ProteinToUreaFraction (const ProteinToUreaFraction_optional& x)
        {
          this->ProteinToUreaFraction_ = x;
        }

        void GastrointestinalConfigurationData::
        ProteinToUreaFraction (::std::unique_ptr< ProteinToUreaFraction_type > x)
        {
          this->ProteinToUreaFraction_.set (std::move (x));
        }

        const GastrointestinalConfigurationData::WaterDigestionRate_optional& GastrointestinalConfigurationData::
        WaterDigestionRate () const
        {
          return this->WaterDigestionRate_;
        }

        GastrointestinalConfigurationData::WaterDigestionRate_optional& GastrointestinalConfigurationData::
        WaterDigestionRate ()
        {
          return this->WaterDigestionRate_;
        }

        void GastrointestinalConfigurationData::
        WaterDigestionRate (const WaterDigestionRate_type& x)
        {
          this->WaterDigestionRate_.set (x);
        }

        void GastrointestinalConfigurationData::
        WaterDigestionRate (const WaterDigestionRate_optional& x)
        {
          this->WaterDigestionRate_ = x;
        }

        void GastrointestinalConfigurationData::
        WaterDigestionRate (::std::unique_ptr< WaterDigestionRate_type > x)
        {
          this->WaterDigestionRate_.set (std::move (x));
        }


        // NervousConfigurationData
        // 

        const NervousConfigurationData::EnableCerebral_optional& NervousConfigurationData::
        EnableCerebral () const
        {
          return this->EnableCerebral_;
        }

        NervousConfigurationData::EnableCerebral_optional& NervousConfigurationData::
        EnableCerebral ()
        {
          return this->EnableCerebral_;
        }

        void NervousConfigurationData::
        EnableCerebral (const EnableCerebral_type& x)
        {
          this->EnableCerebral_.set (x);
        }

        void NervousConfigurationData::
        EnableCerebral (const EnableCerebral_optional& x)
        {
          this->EnableCerebral_ = x;
        }

        void NervousConfigurationData::
        EnableCerebral (::std::unique_ptr< EnableCerebral_type > x)
        {
          this->EnableCerebral_.set (std::move (x));
        }

        const NervousConfigurationData::PupilDiameterBaseline_optional& NervousConfigurationData::
        PupilDiameterBaseline () const
        {
          return this->PupilDiameterBaseline_;
        }

        NervousConfigurationData::PupilDiameterBaseline_optional& NervousConfigurationData::
        PupilDiameterBaseline ()
        {
          return this->PupilDiameterBaseline_;
        }

        void NervousConfigurationData::
        PupilDiameterBaseline (const PupilDiameterBaseline_type& x)
        {
          this->PupilDiameterBaseline_.set (x);
        }

        void NervousConfigurationData::
        PupilDiameterBaseline (const PupilDiameterBaseline_optional& x)
        {
          this->PupilDiameterBaseline_ = x;
        }

        void NervousConfigurationData::
        PupilDiameterBaseline (::std::unique_ptr< PupilDiameterBaseline_type > x)
        {
          this->PupilDiameterBaseline_.set (std::move (x));
        }


        // RenalConfigurationData
        // 

        const RenalConfigurationData::EnableRenal_optional& RenalConfigurationData::
        EnableRenal () const
        {
          return this->EnableRenal_;
        }

        RenalConfigurationData::EnableRenal_optional& RenalConfigurationData::
        EnableRenal ()
        {
          return this->EnableRenal_;
        }

        void RenalConfigurationData::
        EnableRenal (const EnableRenal_type& x)
        {
          this->EnableRenal_.set (x);
        }

        void RenalConfigurationData::
        EnableRenal (const EnableRenal_optional& x)
        {
          this->EnableRenal_ = x;
        }

        void RenalConfigurationData::
        EnableRenal (::std::unique_ptr< EnableRenal_type > x)
        {
          this->EnableRenal_.set (std::move (x));
        }

        const RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_optional& RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint () const
        {
          return this->PlasmaSodiumConcentrationSetPoint_;
        }

        RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_optional& RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint ()
        {
          return this->PlasmaSodiumConcentrationSetPoint_;
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_type& x)
        {
          this->PlasmaSodiumConcentrationSetPoint_.set (x);
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_optional& x)
        {
          this->PlasmaSodiumConcentrationSetPoint_ = x;
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > x)
        {
          this->PlasmaSodiumConcentrationSetPoint_.set (std::move (x));
        }

        const RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline () const
        {
          return this->LeftGlomerularFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline ()
        {
          return this->LeftGlomerularFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_type& x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_optional& x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline () const
        {
          return this->LeftGlomerularFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline ()
        {
          return this->LeftGlomerularFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_type& x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_optional& x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline () const
        {
          return this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline ()
        {
          return this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline () const
        {
          return this->LeftTubularReabsorptionFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline ()
        {
          return this->LeftTubularReabsorptionFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_type& x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_optional& x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::MaximumAfferentResistance_optional& RenalConfigurationData::
        MaximumAfferentResistance () const
        {
          return this->MaximumAfferentResistance_;
        }

        RenalConfigurationData::MaximumAfferentResistance_optional& RenalConfigurationData::
        MaximumAfferentResistance ()
        {
          return this->MaximumAfferentResistance_;
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (const MaximumAfferentResistance_type& x)
        {
          this->MaximumAfferentResistance_.set (x);
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (const MaximumAfferentResistance_optional& x)
        {
          this->MaximumAfferentResistance_ = x;
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (::std::unique_ptr< MaximumAfferentResistance_type > x)
        {
          this->MaximumAfferentResistance_.set (std::move (x));
        }

        const RenalConfigurationData::MinimumAfferentResistance_optional& RenalConfigurationData::
        MinimumAfferentResistance () const
        {
          return this->MinimumAfferentResistance_;
        }

        RenalConfigurationData::MinimumAfferentResistance_optional& RenalConfigurationData::
        MinimumAfferentResistance ()
        {
          return this->MinimumAfferentResistance_;
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (const MinimumAfferentResistance_type& x)
        {
          this->MinimumAfferentResistance_.set (x);
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (const MinimumAfferentResistance_optional& x)
        {
          this->MinimumAfferentResistance_ = x;
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (::std::unique_ptr< MinimumAfferentResistance_type > x)
        {
          this->MinimumAfferentResistance_.set (std::move (x));
        }

        const RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline () const
        {
          return this->RightGlomerularFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline ()
        {
          return this->RightGlomerularFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_type& x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_optional& x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline () const
        {
          return this->RightGlomerularFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline ()
        {
          return this->RightGlomerularFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_type& x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_optional& x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline () const
        {
          return this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline ()
        {
          return this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline () const
        {
          return this->RightTubularReabsorptionFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline ()
        {
          return this->RightTubularReabsorptionFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_type& x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_optional& x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::TargetSodiumDelivery_optional& RenalConfigurationData::
        TargetSodiumDelivery () const
        {
          return this->TargetSodiumDelivery_;
        }

        RenalConfigurationData::TargetSodiumDelivery_optional& RenalConfigurationData::
        TargetSodiumDelivery ()
        {
          return this->TargetSodiumDelivery_;
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (const TargetSodiumDelivery_type& x)
        {
          this->TargetSodiumDelivery_.set (x);
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (const TargetSodiumDelivery_optional& x)
        {
          this->TargetSodiumDelivery_ = x;
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (::std::unique_ptr< TargetSodiumDelivery_type > x)
        {
          this->TargetSodiumDelivery_.set (std::move (x));
        }


        // RespiratoryConfigurationData
        // 

        const RespiratoryConfigurationData::PleuralComplianceSensitivity_optional& RespiratoryConfigurationData::
        PleuralComplianceSensitivity () const
        {
          return this->PleuralComplianceSensitivity_;
        }

        RespiratoryConfigurationData::PleuralComplianceSensitivity_optional& RespiratoryConfigurationData::
        PleuralComplianceSensitivity ()
        {
          return this->PleuralComplianceSensitivity_;
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (const PleuralComplianceSensitivity_type& x)
        {
          this->PleuralComplianceSensitivity_.set (x);
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (const PleuralComplianceSensitivity_optional& x)
        {
          this->PleuralComplianceSensitivity_ = x;
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (::std::unique_ptr< PleuralComplianceSensitivity_type > x)
        {
          this->PleuralComplianceSensitivity_.set (std::move (x));
        }

        const RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_optional& RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum () const
        {
          return this->PulmonaryVentilationRateMaximum_;
        }

        RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_optional& RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum ()
        {
          return this->PulmonaryVentilationRateMaximum_;
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_type& x)
        {
          this->PulmonaryVentilationRateMaximum_.set (x);
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_optional& x)
        {
          this->PulmonaryVentilationRateMaximum_ = x;
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (::std::unique_ptr< PulmonaryVentilationRateMaximum_type > x)
        {
          this->PulmonaryVentilationRateMaximum_.set (std::move (x));
        }

        const RespiratoryConfigurationData::VentilatoryOcclusionPressure_optional& RespiratoryConfigurationData::
        VentilatoryOcclusionPressure () const
        {
          return this->VentilatoryOcclusionPressure_;
        }

        RespiratoryConfigurationData::VentilatoryOcclusionPressure_optional& RespiratoryConfigurationData::
        VentilatoryOcclusionPressure ()
        {
          return this->VentilatoryOcclusionPressure_;
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_type& x)
        {
          this->VentilatoryOcclusionPressure_.set (x);
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_optional& x)
        {
          this->VentilatoryOcclusionPressure_ = x;
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (::std::unique_ptr< VentilatoryOcclusionPressure_type > x)
        {
          this->VentilatoryOcclusionPressure_.set (std::move (x));
        }


        // TissueConfigurationData
        // 

        const TissueConfigurationData::EnableTissue_optional& TissueConfigurationData::
        EnableTissue () const
        {
          return this->EnableTissue_;
        }

        TissueConfigurationData::EnableTissue_optional& TissueConfigurationData::
        EnableTissue ()
        {
          return this->EnableTissue_;
        }

        void TissueConfigurationData::
        EnableTissue (const EnableTissue_type& x)
        {
          this->EnableTissue_.set (x);
        }

        void TissueConfigurationData::
        EnableTissue (const EnableTissue_optional& x)
        {
          this->EnableTissue_ = x;
        }

        void TissueConfigurationData::
        EnableTissue (::std::unique_ptr< EnableTissue_type > x)
        {
          this->EnableTissue_.set (std::move (x));
        }


        // BioGearsConfigurationData
        // 

        const BioGearsConfigurationData::BloodChemistryConfiguration_optional& BioGearsConfigurationData::
        BloodChemistryConfiguration () const
        {
          return this->BloodChemistryConfiguration_;
        }

        BioGearsConfigurationData::BloodChemistryConfiguration_optional& BioGearsConfigurationData::
        BloodChemistryConfiguration ()
        {
          return this->BloodChemistryConfiguration_;
        }

        void BioGearsConfigurationData::
        BloodChemistryConfiguration (const BloodChemistryConfiguration_type& x)
        {
          this->BloodChemistryConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        BloodChemistryConfiguration (const BloodChemistryConfiguration_optional& x)
        {
          this->BloodChemistryConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        BloodChemistryConfiguration (::std::unique_ptr< BloodChemistryConfiguration_type > x)
        {
          this->BloodChemistryConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::CardiovascularConfiguration_optional& BioGearsConfigurationData::
        CardiovascularConfiguration () const
        {
          return this->CardiovascularConfiguration_;
        }

        BioGearsConfigurationData::CardiovascularConfiguration_optional& BioGearsConfigurationData::
        CardiovascularConfiguration ()
        {
          return this->CardiovascularConfiguration_;
        }

        void BioGearsConfigurationData::
        CardiovascularConfiguration (const CardiovascularConfiguration_type& x)
        {
          this->CardiovascularConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        CardiovascularConfiguration (const CardiovascularConfiguration_optional& x)
        {
          this->CardiovascularConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        CardiovascularConfiguration (::std::unique_ptr< CardiovascularConfiguration_type > x)
        {
          this->CardiovascularConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::CircuitConfiguration_optional& BioGearsConfigurationData::
        CircuitConfiguration () const
        {
          return this->CircuitConfiguration_;
        }

        BioGearsConfigurationData::CircuitConfiguration_optional& BioGearsConfigurationData::
        CircuitConfiguration ()
        {
          return this->CircuitConfiguration_;
        }

        void BioGearsConfigurationData::
        CircuitConfiguration (const CircuitConfiguration_type& x)
        {
          this->CircuitConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        CircuitConfiguration (const CircuitConfiguration_optional& x)
        {
          this->CircuitConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        CircuitConfiguration (::std::unique_ptr< CircuitConfiguration_type > x)
        {
          this->CircuitConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::ConstantsConfiguration_optional& BioGearsConfigurationData::
        ConstantsConfiguration () const
        {
          return this->ConstantsConfiguration_;
        }

        BioGearsConfigurationData::ConstantsConfiguration_optional& BioGearsConfigurationData::
        ConstantsConfiguration ()
        {
          return this->ConstantsConfiguration_;
        }

        void BioGearsConfigurationData::
        ConstantsConfiguration (const ConstantsConfiguration_type& x)
        {
          this->ConstantsConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        ConstantsConfiguration (const ConstantsConfiguration_optional& x)
        {
          this->ConstantsConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        ConstantsConfiguration (::std::unique_ptr< ConstantsConfiguration_type > x)
        {
          this->ConstantsConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::DrugsConfiguration_optional& BioGearsConfigurationData::
        DrugsConfiguration () const
        {
          return this->DrugsConfiguration_;
        }

        BioGearsConfigurationData::DrugsConfiguration_optional& BioGearsConfigurationData::
        DrugsConfiguration ()
        {
          return this->DrugsConfiguration_;
        }

        void BioGearsConfigurationData::
        DrugsConfiguration (const DrugsConfiguration_type& x)
        {
          this->DrugsConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        DrugsConfiguration (const DrugsConfiguration_optional& x)
        {
          this->DrugsConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        DrugsConfiguration (::std::unique_ptr< DrugsConfiguration_type > x)
        {
          this->DrugsConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::EnergyConfiguration_optional& BioGearsConfigurationData::
        EnergyConfiguration () const
        {
          return this->EnergyConfiguration_;
        }

        BioGearsConfigurationData::EnergyConfiguration_optional& BioGearsConfigurationData::
        EnergyConfiguration ()
        {
          return this->EnergyConfiguration_;
        }

        void BioGearsConfigurationData::
        EnergyConfiguration (const EnergyConfiguration_type& x)
        {
          this->EnergyConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        EnergyConfiguration (const EnergyConfiguration_optional& x)
        {
          this->EnergyConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        EnergyConfiguration (::std::unique_ptr< EnergyConfiguration_type > x)
        {
          this->EnergyConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::EnvironmentConfiguration_optional& BioGearsConfigurationData::
        EnvironmentConfiguration () const
        {
          return this->EnvironmentConfiguration_;
        }

        BioGearsConfigurationData::EnvironmentConfiguration_optional& BioGearsConfigurationData::
        EnvironmentConfiguration ()
        {
          return this->EnvironmentConfiguration_;
        }

        void BioGearsConfigurationData::
        EnvironmentConfiguration (const EnvironmentConfiguration_type& x)
        {
          this->EnvironmentConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        EnvironmentConfiguration (const EnvironmentConfiguration_optional& x)
        {
          this->EnvironmentConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        EnvironmentConfiguration (::std::unique_ptr< EnvironmentConfiguration_type > x)
        {
          this->EnvironmentConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::GastrointestinalConfiguration_optional& BioGearsConfigurationData::
        GastrointestinalConfiguration () const
        {
          return this->GastrointestinalConfiguration_;
        }

        BioGearsConfigurationData::GastrointestinalConfiguration_optional& BioGearsConfigurationData::
        GastrointestinalConfiguration ()
        {
          return this->GastrointestinalConfiguration_;
        }

        void BioGearsConfigurationData::
        GastrointestinalConfiguration (const GastrointestinalConfiguration_type& x)
        {
          this->GastrointestinalConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        GastrointestinalConfiguration (const GastrointestinalConfiguration_optional& x)
        {
          this->GastrointestinalConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        GastrointestinalConfiguration (::std::unique_ptr< GastrointestinalConfiguration_type > x)
        {
          this->GastrointestinalConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::NervousConfiguration_optional& BioGearsConfigurationData::
        NervousConfiguration () const
        {
          return this->NervousConfiguration_;
        }

        BioGearsConfigurationData::NervousConfiguration_optional& BioGearsConfigurationData::
        NervousConfiguration ()
        {
          return this->NervousConfiguration_;
        }

        void BioGearsConfigurationData::
        NervousConfiguration (const NervousConfiguration_type& x)
        {
          this->NervousConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        NervousConfiguration (const NervousConfiguration_optional& x)
        {
          this->NervousConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        NervousConfiguration (::std::unique_ptr< NervousConfiguration_type > x)
        {
          this->NervousConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::RenalConfiguration_optional& BioGearsConfigurationData::
        RenalConfiguration () const
        {
          return this->RenalConfiguration_;
        }

        BioGearsConfigurationData::RenalConfiguration_optional& BioGearsConfigurationData::
        RenalConfiguration ()
        {
          return this->RenalConfiguration_;
        }

        void BioGearsConfigurationData::
        RenalConfiguration (const RenalConfiguration_type& x)
        {
          this->RenalConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        RenalConfiguration (const RenalConfiguration_optional& x)
        {
          this->RenalConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        RenalConfiguration (::std::unique_ptr< RenalConfiguration_type > x)
        {
          this->RenalConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::RespiratoryConfiguration_optional& BioGearsConfigurationData::
        RespiratoryConfiguration () const
        {
          return this->RespiratoryConfiguration_;
        }

        BioGearsConfigurationData::RespiratoryConfiguration_optional& BioGearsConfigurationData::
        RespiratoryConfiguration ()
        {
          return this->RespiratoryConfiguration_;
        }

        void BioGearsConfigurationData::
        RespiratoryConfiguration (const RespiratoryConfiguration_type& x)
        {
          this->RespiratoryConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        RespiratoryConfiguration (const RespiratoryConfiguration_optional& x)
        {
          this->RespiratoryConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        RespiratoryConfiguration (::std::unique_ptr< RespiratoryConfiguration_type > x)
        {
          this->RespiratoryConfiguration_.set (std::move (x));
        }

        const BioGearsConfigurationData::TissueConfiguration_optional& BioGearsConfigurationData::
        TissueConfiguration () const
        {
          return this->TissueConfiguration_;
        }

        BioGearsConfigurationData::TissueConfiguration_optional& BioGearsConfigurationData::
        TissueConfiguration ()
        {
          return this->TissueConfiguration_;
        }

        void BioGearsConfigurationData::
        TissueConfiguration (const TissueConfiguration_type& x)
        {
          this->TissueConfiguration_.set (x);
        }

        void BioGearsConfigurationData::
        TissueConfiguration (const TissueConfiguration_optional& x)
        {
          this->TissueConfiguration_ = x;
        }

        void BioGearsConfigurationData::
        TissueConfiguration (::std::unique_ptr< TissueConfiguration_type > x)
        {
          this->TissueConfiguration_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BloodChemistryConfigurationData
        //

        BloodChemistryConfigurationData::
        BloodChemistryConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularVolume_ (this),
          StandardDiffusionDistance_ (this),
          StandardOxygenDiffusionCoefficient_ (this)
        {
        }

        BloodChemistryConfigurationData::
        BloodChemistryConfigurationData (const BloodChemistryConfigurationData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          MeanCorpuscularHemoglobin_ (x.MeanCorpuscularHemoglobin_, f, this),
          MeanCorpuscularVolume_ (x.MeanCorpuscularVolume_, f, this),
          StandardDiffusionDistance_ (x.StandardDiffusionDistance_, f, this),
          StandardOxygenDiffusionCoefficient_ (x.StandardOxygenDiffusionCoefficient_, f, this)
        {
        }

        BloodChemistryConfigurationData::
        BloodChemistryConfigurationData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularVolume_ (this),
          StandardDiffusionDistance_ (this),
          StandardOxygenDiffusionCoefficient_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BloodChemistryConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MeanCorpuscularHemoglobin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularHemoglobin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularHemoglobin_)
                {
                  ::std::unique_ptr< MeanCorpuscularHemoglobin_type > r (
                    dynamic_cast< MeanCorpuscularHemoglobin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularHemoglobin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularVolume_)
                {
                  ::std::unique_ptr< MeanCorpuscularVolume_type > r (
                    dynamic_cast< MeanCorpuscularVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StandardDiffusionDistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StandardDiffusionDistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StandardDiffusionDistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StandardDiffusionDistance_)
                {
                  ::std::unique_ptr< StandardDiffusionDistance_type > r (
                    dynamic_cast< StandardDiffusionDistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StandardDiffusionDistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StandardOxygenDiffusionCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StandardOxygenDiffusionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StandardOxygenDiffusionCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StandardOxygenDiffusionCoefficient_)
                {
                  ::std::unique_ptr< StandardOxygenDiffusionCoefficient_type > r (
                    dynamic_cast< StandardOxygenDiffusionCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StandardOxygenDiffusionCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        BloodChemistryConfigurationData* BloodChemistryConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BloodChemistryConfigurationData (*this, f, c);
        }

        BloodChemistryConfigurationData& BloodChemistryConfigurationData::
        operator= (const BloodChemistryConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->MeanCorpuscularHemoglobin_ = x.MeanCorpuscularHemoglobin_;
            this->MeanCorpuscularVolume_ = x.MeanCorpuscularVolume_;
            this->StandardDiffusionDistance_ = x.StandardDiffusionDistance_;
            this->StandardOxygenDiffusionCoefficient_ = x.StandardOxygenDiffusionCoefficient_;
          }

          return *this;
        }

        BloodChemistryConfigurationData::
        ~BloodChemistryConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BloodChemistryConfigurationData >
        _xsd_BloodChemistryConfigurationData_type_factory_init (
          "BloodChemistryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CardiovascularConfigurationData
        //

        CardiovascularConfigurationData::
        CardiovascularConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LeftHeartElastanceMaximum_ (this),
          LeftHeartElastanceMinimum_ (this),
          MinimumBloodVolumeFraction_ (this),
          RightHeartElastanceMaximum_ (this),
          RightHeartElastanceMinimum_ (this),
          StandardPulmonaryCapillaryCoverage_ (this)
        {
        }

        CardiovascularConfigurationData::
        CardiovascularConfigurationData (const CardiovascularConfigurationData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          LeftHeartElastanceMaximum_ (x.LeftHeartElastanceMaximum_, f, this),
          LeftHeartElastanceMinimum_ (x.LeftHeartElastanceMinimum_, f, this),
          MinimumBloodVolumeFraction_ (x.MinimumBloodVolumeFraction_, f, this),
          RightHeartElastanceMaximum_ (x.RightHeartElastanceMaximum_, f, this),
          RightHeartElastanceMinimum_ (x.RightHeartElastanceMinimum_, f, this),
          StandardPulmonaryCapillaryCoverage_ (x.StandardPulmonaryCapillaryCoverage_, f, this)
        {
        }

        CardiovascularConfigurationData::
        CardiovascularConfigurationData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          LeftHeartElastanceMaximum_ (this),
          LeftHeartElastanceMinimum_ (this),
          MinimumBloodVolumeFraction_ (this),
          RightHeartElastanceMaximum_ (this),
          RightHeartElastanceMinimum_ (this),
          StandardPulmonaryCapillaryCoverage_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CardiovascularConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LeftHeartElastanceMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftHeartElastanceMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftHeartElastanceMaximum_)
                {
                  ::std::unique_ptr< LeftHeartElastanceMaximum_type > r (
                    dynamic_cast< LeftHeartElastanceMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftHeartElastanceMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftHeartElastanceMinimum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftHeartElastanceMinimum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftHeartElastanceMinimum_)
                {
                  ::std::unique_ptr< LeftHeartElastanceMinimum_type > r (
                    dynamic_cast< LeftHeartElastanceMinimum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftHeartElastanceMinimum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MinimumBloodVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumBloodVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumBloodVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MinimumBloodVolumeFraction_)
                {
                  ::std::unique_ptr< MinimumBloodVolumeFraction_type > r (
                    dynamic_cast< MinimumBloodVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumBloodVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightHeartElastanceMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightHeartElastanceMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightHeartElastanceMaximum_)
                {
                  ::std::unique_ptr< RightHeartElastanceMaximum_type > r (
                    dynamic_cast< RightHeartElastanceMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightHeartElastanceMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightHeartElastanceMinimum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightHeartElastanceMinimum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightHeartElastanceMinimum_)
                {
                  ::std::unique_ptr< RightHeartElastanceMinimum_type > r (
                    dynamic_cast< RightHeartElastanceMinimum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightHeartElastanceMinimum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StandardPulmonaryCapillaryCoverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StandardPulmonaryCapillaryCoverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StandardPulmonaryCapillaryCoverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StandardPulmonaryCapillaryCoverage_)
                {
                  ::std::unique_ptr< StandardPulmonaryCapillaryCoverage_type > r (
                    dynamic_cast< StandardPulmonaryCapillaryCoverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StandardPulmonaryCapillaryCoverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CardiovascularConfigurationData* CardiovascularConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CardiovascularConfigurationData (*this, f, c);
        }

        CardiovascularConfigurationData& CardiovascularConfigurationData::
        operator= (const CardiovascularConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->LeftHeartElastanceMaximum_ = x.LeftHeartElastanceMaximum_;
            this->LeftHeartElastanceMinimum_ = x.LeftHeartElastanceMinimum_;
            this->MinimumBloodVolumeFraction_ = x.MinimumBloodVolumeFraction_;
            this->RightHeartElastanceMaximum_ = x.RightHeartElastanceMaximum_;
            this->RightHeartElastanceMinimum_ = x.RightHeartElastanceMinimum_;
            this->StandardPulmonaryCapillaryCoverage_ = x.StandardPulmonaryCapillaryCoverage_;
          }

          return *this;
        }

        CardiovascularConfigurationData::
        ~CardiovascularConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_type_factory_init (
          "CardiovascularConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CircuitConfigurationData
        //

        CircuitConfigurationData::
        CircuitConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          CardiovascularOpenResistance_ (this),
          DefaultClosedElectricResistance_ (this),
          DefaultOpenElectricResistance_ (this),
          DefaultClosedFlowResistance_ (this),
          DefaultOpenFlowResistance_ (this),
          DefaultClosedHeatResistance_ (this),
          DefaultOpenHeatResistance_ (this),
          MachineClosedResistance_ (this),
          MachineOpenResistance_ (this),
          RespiratoryClosedResistance_ (this),
          RespiratoryOpenResistance_ (this)
        {
        }

        CircuitConfigurationData::
        CircuitConfigurationData (const CircuitConfigurationData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          CardiovascularOpenResistance_ (x.CardiovascularOpenResistance_, f, this),
          DefaultClosedElectricResistance_ (x.DefaultClosedElectricResistance_, f, this),
          DefaultOpenElectricResistance_ (x.DefaultOpenElectricResistance_, f, this),
          DefaultClosedFlowResistance_ (x.DefaultClosedFlowResistance_, f, this),
          DefaultOpenFlowResistance_ (x.DefaultOpenFlowResistance_, f, this),
          DefaultClosedHeatResistance_ (x.DefaultClosedHeatResistance_, f, this),
          DefaultOpenHeatResistance_ (x.DefaultOpenHeatResistance_, f, this),
          MachineClosedResistance_ (x.MachineClosedResistance_, f, this),
          MachineOpenResistance_ (x.MachineOpenResistance_, f, this),
          RespiratoryClosedResistance_ (x.RespiratoryClosedResistance_, f, this),
          RespiratoryOpenResistance_ (x.RespiratoryOpenResistance_, f, this)
        {
        }

        CircuitConfigurationData::
        CircuitConfigurationData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          CardiovascularOpenResistance_ (this),
          DefaultClosedElectricResistance_ (this),
          DefaultOpenElectricResistance_ (this),
          DefaultClosedFlowResistance_ (this),
          DefaultOpenFlowResistance_ (this),
          DefaultClosedHeatResistance_ (this),
          DefaultOpenHeatResistance_ (this),
          MachineClosedResistance_ (this),
          MachineOpenResistance_ (this),
          RespiratoryClosedResistance_ (this),
          RespiratoryOpenResistance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CircuitConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CardiovascularOpenResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiovascularOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiovascularOpenResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiovascularOpenResistance_)
                {
                  ::std::unique_ptr< CardiovascularOpenResistance_type > r (
                    dynamic_cast< CardiovascularOpenResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiovascularOpenResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultClosedElectricResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultClosedElectricResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultClosedElectricResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultClosedElectricResistance_)
                {
                  ::std::unique_ptr< DefaultClosedElectricResistance_type > r (
                    dynamic_cast< DefaultClosedElectricResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultClosedElectricResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultOpenElectricResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultOpenElectricResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultOpenElectricResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultOpenElectricResistance_)
                {
                  ::std::unique_ptr< DefaultOpenElectricResistance_type > r (
                    dynamic_cast< DefaultOpenElectricResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultOpenElectricResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultClosedFlowResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultClosedFlowResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultClosedFlowResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultClosedFlowResistance_)
                {
                  ::std::unique_ptr< DefaultClosedFlowResistance_type > r (
                    dynamic_cast< DefaultClosedFlowResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultClosedFlowResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultOpenFlowResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultOpenFlowResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultOpenFlowResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultOpenFlowResistance_)
                {
                  ::std::unique_ptr< DefaultOpenFlowResistance_type > r (
                    dynamic_cast< DefaultOpenFlowResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultOpenFlowResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultClosedHeatResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultClosedHeatResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultClosedHeatResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultClosedHeatResistance_)
                {
                  ::std::unique_ptr< DefaultClosedHeatResistance_type > r (
                    dynamic_cast< DefaultClosedHeatResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultClosedHeatResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultOpenHeatResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultOpenHeatResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultOpenHeatResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultOpenHeatResistance_)
                {
                  ::std::unique_ptr< DefaultOpenHeatResistance_type > r (
                    dynamic_cast< DefaultOpenHeatResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultOpenHeatResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MachineClosedResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MachineClosedResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MachineClosedResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MachineClosedResistance_)
                {
                  ::std::unique_ptr< MachineClosedResistance_type > r (
                    dynamic_cast< MachineClosedResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MachineClosedResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MachineOpenResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MachineOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MachineOpenResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MachineOpenResistance_)
                {
                  ::std::unique_ptr< MachineOpenResistance_type > r (
                    dynamic_cast< MachineOpenResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MachineOpenResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryClosedResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryClosedResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryClosedResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespiratoryClosedResistance_)
                {
                  ::std::unique_ptr< RespiratoryClosedResistance_type > r (
                    dynamic_cast< RespiratoryClosedResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryClosedResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryOpenResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryOpenResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespiratoryOpenResistance_)
                {
                  ::std::unique_ptr< RespiratoryOpenResistance_type > r (
                    dynamic_cast< RespiratoryOpenResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryOpenResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CircuitConfigurationData* CircuitConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CircuitConfigurationData (*this, f, c);
        }

        CircuitConfigurationData& CircuitConfigurationData::
        operator= (const CircuitConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->CardiovascularOpenResistance_ = x.CardiovascularOpenResistance_;
            this->DefaultClosedElectricResistance_ = x.DefaultClosedElectricResistance_;
            this->DefaultOpenElectricResistance_ = x.DefaultOpenElectricResistance_;
            this->DefaultClosedFlowResistance_ = x.DefaultClosedFlowResistance_;
            this->DefaultOpenFlowResistance_ = x.DefaultOpenFlowResistance_;
            this->DefaultClosedHeatResistance_ = x.DefaultClosedHeatResistance_;
            this->DefaultOpenHeatResistance_ = x.DefaultOpenHeatResistance_;
            this->MachineClosedResistance_ = x.MachineClosedResistance_;
            this->MachineOpenResistance_ = x.MachineOpenResistance_;
            this->RespiratoryClosedResistance_ = x.RespiratoryClosedResistance_;
            this->RespiratoryOpenResistance_ = x.RespiratoryOpenResistance_;
          }

          return *this;
        }

        CircuitConfigurationData::
        ~CircuitConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CircuitConfigurationData >
        _xsd_CircuitConfigurationData_type_factory_init (
          "CircuitConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ConstantsConfigurationData
        //

        ConstantsConfigurationData::
        ConstantsConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          OxygenMetabolicConstant_ (this),
          StefanBoltzmann_ (this),
          UniversalGasConstant_ (this)
        {
        }

        ConstantsConfigurationData::
        ConstantsConfigurationData (const ConstantsConfigurationData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          OxygenMetabolicConstant_ (x.OxygenMetabolicConstant_, f, this),
          StefanBoltzmann_ (x.StefanBoltzmann_, f, this),
          UniversalGasConstant_ (x.UniversalGasConstant_, f, this)
        {
        }

        ConstantsConfigurationData::
        ConstantsConfigurationData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          OxygenMetabolicConstant_ (this),
          StefanBoltzmann_ (this),
          UniversalGasConstant_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ConstantsConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // OxygenMetabolicConstant
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenMetabolicConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenMetabolicConstant_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenMetabolicConstant_)
                {
                  ::std::unique_ptr< OxygenMetabolicConstant_type > r (
                    dynamic_cast< OxygenMetabolicConstant_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenMetabolicConstant_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StefanBoltzmann
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StefanBoltzmann",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StefanBoltzmann_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StefanBoltzmann_)
                {
                  ::std::unique_ptr< StefanBoltzmann_type > r (
                    dynamic_cast< StefanBoltzmann_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StefanBoltzmann_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UniversalGasConstant
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UniversalGasConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UniversalGasConstant_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UniversalGasConstant_)
                {
                  ::std::unique_ptr< UniversalGasConstant_type > r (
                    dynamic_cast< UniversalGasConstant_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UniversalGasConstant_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ConstantsConfigurationData* ConstantsConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConstantsConfigurationData (*this, f, c);
        }

        ConstantsConfigurationData& ConstantsConfigurationData::
        operator= (const ConstantsConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->OxygenMetabolicConstant_ = x.OxygenMetabolicConstant_;
            this->StefanBoltzmann_ = x.StefanBoltzmann_;
            this->UniversalGasConstant_ = x.UniversalGasConstant_;
          }

          return *this;
        }

        ConstantsConfigurationData::
        ~ConstantsConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConstantsConfigurationData >
        _xsd_ConstantsConfigurationData_type_factory_init (
          "ConstantsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DrugsConfigurationData
        //

        DrugsConfigurationData::
        DrugsConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          PDModel_ (this)
        {
        }

        DrugsConfigurationData::
        DrugsConfigurationData (const DrugsConfigurationData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          PDModel_ (x.PDModel_, f, this)
        {
        }

        DrugsConfigurationData::
        DrugsConfigurationData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          PDModel_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DrugsConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PDModel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PDModel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PDModel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PDModel_)
                {
                  ::std::unique_ptr< PDModel_type > r (
                    dynamic_cast< PDModel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PDModel_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        DrugsConfigurationData* DrugsConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DrugsConfigurationData (*this, f, c);
        }

        DrugsConfigurationData& DrugsConfigurationData::
        operator= (const DrugsConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->PDModel_ = x.PDModel_;
          }

          return *this;
        }

        DrugsConfigurationData::
        ~DrugsConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DrugsConfigurationData >
        _xsd_DrugsConfigurationData_type_factory_init (
          "DrugsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnergyConfigurationData
        //

        EnergyConfigurationData::
        EnergyConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          BodySpecificHeat_ (this),
          CoreTemperatureLow_ (this),
          CoreTemperatureHigh_ (this),
          DeltaCoreTemperatureLow_ (this),
          EnergyPerATP_ (this),
          SweatHeatTransfer_ (this),
          VaporizationEnergy_ (this),
          VaporSpecificHeat_ (this)
        {
        }

        EnergyConfigurationData::
        EnergyConfigurationData (const EnergyConfigurationData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          BodySpecificHeat_ (x.BodySpecificHeat_, f, this),
          CoreTemperatureLow_ (x.CoreTemperatureLow_, f, this),
          CoreTemperatureHigh_ (x.CoreTemperatureHigh_, f, this),
          DeltaCoreTemperatureLow_ (x.DeltaCoreTemperatureLow_, f, this),
          EnergyPerATP_ (x.EnergyPerATP_, f, this),
          SweatHeatTransfer_ (x.SweatHeatTransfer_, f, this),
          VaporizationEnergy_ (x.VaporizationEnergy_, f, this),
          VaporSpecificHeat_ (x.VaporSpecificHeat_, f, this)
        {
        }

        EnergyConfigurationData::
        EnergyConfigurationData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          BodySpecificHeat_ (this),
          CoreTemperatureLow_ (this),
          CoreTemperatureHigh_ (this),
          DeltaCoreTemperatureLow_ (this),
          EnergyPerATP_ (this),
          SweatHeatTransfer_ (this),
          VaporizationEnergy_ (this),
          VaporSpecificHeat_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnergyConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BodySpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BodySpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BodySpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BodySpecificHeat_)
                {
                  ::std::unique_ptr< BodySpecificHeat_type > r (
                    dynamic_cast< BodySpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BodySpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperatureLow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperatureLow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperatureLow_)
                {
                  ::std::unique_ptr< CoreTemperatureLow_type > r (
                    dynamic_cast< CoreTemperatureLow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperatureLow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperatureHigh
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperatureHigh",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperatureHigh_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperatureHigh_)
                {
                  ::std::unique_ptr< CoreTemperatureHigh_type > r (
                    dynamic_cast< CoreTemperatureHigh_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperatureHigh_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DeltaCoreTemperatureLow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DeltaCoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DeltaCoreTemperatureLow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DeltaCoreTemperatureLow_)
                {
                  ::std::unique_ptr< DeltaCoreTemperatureLow_type > r (
                    dynamic_cast< DeltaCoreTemperatureLow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DeltaCoreTemperatureLow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EnergyPerATP
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnergyPerATP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnergyPerATP_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnergyPerATP_)
                {
                  ::std::unique_ptr< EnergyPerATP_type > r (
                    dynamic_cast< EnergyPerATP_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnergyPerATP_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SweatHeatTransfer
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SweatHeatTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SweatHeatTransfer_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SweatHeatTransfer_)
                {
                  ::std::unique_ptr< SweatHeatTransfer_type > r (
                    dynamic_cast< SweatHeatTransfer_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SweatHeatTransfer_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VaporizationEnergy
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VaporizationEnergy",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VaporizationEnergy_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VaporizationEnergy_)
                {
                  ::std::unique_ptr< VaporizationEnergy_type > r (
                    dynamic_cast< VaporizationEnergy_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VaporizationEnergy_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VaporSpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VaporSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VaporSpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VaporSpecificHeat_)
                {
                  ::std::unique_ptr< VaporSpecificHeat_type > r (
                    dynamic_cast< VaporSpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VaporSpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnergyConfigurationData* EnergyConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnergyConfigurationData (*this, f, c);
        }

        EnergyConfigurationData& EnergyConfigurationData::
        operator= (const EnergyConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->BodySpecificHeat_ = x.BodySpecificHeat_;
            this->CoreTemperatureLow_ = x.CoreTemperatureLow_;
            this->CoreTemperatureHigh_ = x.CoreTemperatureHigh_;
            this->DeltaCoreTemperatureLow_ = x.DeltaCoreTemperatureLow_;
            this->EnergyPerATP_ = x.EnergyPerATP_;
            this->SweatHeatTransfer_ = x.SweatHeatTransfer_;
            this->VaporizationEnergy_ = x.VaporizationEnergy_;
            this->VaporSpecificHeat_ = x.VaporSpecificHeat_;
          }

          return *this;
        }

        EnergyConfigurationData::
        ~EnergyConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_type_factory_init (
          "EnergyConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnvironmentConfigurationData
        //

        EnvironmentConfigurationData::
        EnvironmentConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AirDensity_ (this),
          AirSpecificHeat_ (this),
          MolarMassOfDryAir_ (this),
          MolarMassOfWaterVapor_ (this),
          InitialEnvironmentalConditions_ (this),
          InitialEnvironmentalConditionsFile_ (this),
          WaterDensity_ (this)
        {
        }

        EnvironmentConfigurationData::
        EnvironmentConfigurationData (const EnvironmentConfigurationData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          AirDensity_ (x.AirDensity_, f, this),
          AirSpecificHeat_ (x.AirSpecificHeat_, f, this),
          MolarMassOfDryAir_ (x.MolarMassOfDryAir_, f, this),
          MolarMassOfWaterVapor_ (x.MolarMassOfWaterVapor_, f, this),
          InitialEnvironmentalConditions_ (x.InitialEnvironmentalConditions_, f, this),
          InitialEnvironmentalConditionsFile_ (x.InitialEnvironmentalConditionsFile_, f, this),
          WaterDensity_ (x.WaterDensity_, f, this)
        {
        }

        EnvironmentConfigurationData::
        EnvironmentConfigurationData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          AirDensity_ (this),
          AirSpecificHeat_ (this),
          MolarMassOfDryAir_ (this),
          MolarMassOfWaterVapor_ (this),
          InitialEnvironmentalConditions_ (this),
          InitialEnvironmentalConditionsFile_ (this),
          WaterDensity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AirDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirDensity_)
                {
                  ::std::unique_ptr< AirDensity_type > r (
                    dynamic_cast< AirDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirSpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirSpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirSpecificHeat_)
                {
                  ::std::unique_ptr< AirSpecificHeat_type > r (
                    dynamic_cast< AirSpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirSpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MolarMassOfDryAir
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MolarMassOfDryAir",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MolarMassOfDryAir_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MolarMassOfDryAir_)
                {
                  ::std::unique_ptr< MolarMassOfDryAir_type > r (
                    dynamic_cast< MolarMassOfDryAir_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MolarMassOfDryAir_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MolarMassOfWaterVapor
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MolarMassOfWaterVapor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MolarMassOfWaterVapor_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MolarMassOfWaterVapor_)
                {
                  ::std::unique_ptr< MolarMassOfWaterVapor_type > r (
                    dynamic_cast< MolarMassOfWaterVapor_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MolarMassOfWaterVapor_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InitialEnvironmentalConditions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialEnvironmentalConditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialEnvironmentalConditions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InitialEnvironmentalConditions_)
                {
                  ::std::unique_ptr< InitialEnvironmentalConditions_type > r (
                    dynamic_cast< InitialEnvironmentalConditions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialEnvironmentalConditions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InitialEnvironmentalConditionsFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialEnvironmentalConditionsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialEnvironmentalConditionsFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InitialEnvironmentalConditionsFile_)
                {
                  ::std::unique_ptr< InitialEnvironmentalConditionsFile_type > r (
                    dynamic_cast< InitialEnvironmentalConditionsFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialEnvironmentalConditionsFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WaterDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WaterDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WaterDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WaterDensity_)
                {
                  ::std::unique_ptr< WaterDensity_type > r (
                    dynamic_cast< WaterDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WaterDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnvironmentConfigurationData* EnvironmentConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentConfigurationData (*this, f, c);
        }

        EnvironmentConfigurationData& EnvironmentConfigurationData::
        operator= (const EnvironmentConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->AirDensity_ = x.AirDensity_;
            this->AirSpecificHeat_ = x.AirSpecificHeat_;
            this->MolarMassOfDryAir_ = x.MolarMassOfDryAir_;
            this->MolarMassOfWaterVapor_ = x.MolarMassOfWaterVapor_;
            this->InitialEnvironmentalConditions_ = x.InitialEnvironmentalConditions_;
            this->InitialEnvironmentalConditionsFile_ = x.InitialEnvironmentalConditionsFile_;
            this->WaterDensity_ = x.WaterDensity_;
          }

          return *this;
        }

        EnvironmentConfigurationData::
        ~EnvironmentConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_type_factory_init (
          "EnvironmentConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GastrointestinalConfigurationData
        //

        GastrointestinalConfigurationData::
        GastrointestinalConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          CalciumAbsorptionFraction_ (this),
          CalciumDigestionRate_ (this),
          CarbohydrateAbsorptionFraction_ (this),
          DefaultStomachContents_ (this),
          DefaultStomachContentsFile_ (this),
          FatAbsorptionFraction_ (this),
          ProteinToUreaFraction_ (this),
          WaterDigestionRate_ (this)
        {
        }

        GastrointestinalConfigurationData::
        GastrointestinalConfigurationData (const GastrointestinalConfigurationData& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          CalciumAbsorptionFraction_ (x.CalciumAbsorptionFraction_, f, this),
          CalciumDigestionRate_ (x.CalciumDigestionRate_, f, this),
          CarbohydrateAbsorptionFraction_ (x.CarbohydrateAbsorptionFraction_, f, this),
          DefaultStomachContents_ (x.DefaultStomachContents_, f, this),
          DefaultStomachContentsFile_ (x.DefaultStomachContentsFile_, f, this),
          FatAbsorptionFraction_ (x.FatAbsorptionFraction_, f, this),
          ProteinToUreaFraction_ (x.ProteinToUreaFraction_, f, this),
          WaterDigestionRate_ (x.WaterDigestionRate_, f, this)
        {
        }

        GastrointestinalConfigurationData::
        GastrointestinalConfigurationData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          CalciumAbsorptionFraction_ (this),
          CalciumDigestionRate_ (this),
          CarbohydrateAbsorptionFraction_ (this),
          DefaultStomachContents_ (this),
          DefaultStomachContentsFile_ (this),
          FatAbsorptionFraction_ (this),
          ProteinToUreaFraction_ (this),
          WaterDigestionRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void GastrointestinalConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CalciumAbsorptionFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CalciumAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CalciumAbsorptionFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CalciumAbsorptionFraction_)
                {
                  ::std::unique_ptr< CalciumAbsorptionFraction_type > r (
                    dynamic_cast< CalciumAbsorptionFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CalciumAbsorptionFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CalciumDigestionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CalciumDigestionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CalciumDigestionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CalciumDigestionRate_)
                {
                  ::std::unique_ptr< CalciumDigestionRate_type > r (
                    dynamic_cast< CalciumDigestionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CalciumDigestionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarbohydrateAbsorptionFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbohydrateAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbohydrateAbsorptionFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbohydrateAbsorptionFraction_)
                {
                  ::std::unique_ptr< CarbohydrateAbsorptionFraction_type > r (
                    dynamic_cast< CarbohydrateAbsorptionFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbohydrateAbsorptionFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultStomachContents
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultStomachContents",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultStomachContents_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultStomachContents_)
                {
                  ::std::unique_ptr< DefaultStomachContents_type > r (
                    dynamic_cast< DefaultStomachContents_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultStomachContents_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DefaultStomachContentsFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultStomachContentsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultStomachContentsFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultStomachContentsFile_)
                {
                  ::std::unique_ptr< DefaultStomachContentsFile_type > r (
                    dynamic_cast< DefaultStomachContentsFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultStomachContentsFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatAbsorptionFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatAbsorptionFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatAbsorptionFraction_)
                {
                  ::std::unique_ptr< FatAbsorptionFraction_type > r (
                    dynamic_cast< FatAbsorptionFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatAbsorptionFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ProteinToUreaFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ProteinToUreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ProteinToUreaFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ProteinToUreaFraction_)
                {
                  ::std::unique_ptr< ProteinToUreaFraction_type > r (
                    dynamic_cast< ProteinToUreaFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ProteinToUreaFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WaterDigestionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WaterDigestionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WaterDigestionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WaterDigestionRate_)
                {
                  ::std::unique_ptr< WaterDigestionRate_type > r (
                    dynamic_cast< WaterDigestionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WaterDigestionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        GastrointestinalConfigurationData* GastrointestinalConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GastrointestinalConfigurationData (*this, f, c);
        }

        GastrointestinalConfigurationData& GastrointestinalConfigurationData::
        operator= (const GastrointestinalConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->CalciumAbsorptionFraction_ = x.CalciumAbsorptionFraction_;
            this->CalciumDigestionRate_ = x.CalciumDigestionRate_;
            this->CarbohydrateAbsorptionFraction_ = x.CarbohydrateAbsorptionFraction_;
            this->DefaultStomachContents_ = x.DefaultStomachContents_;
            this->DefaultStomachContentsFile_ = x.DefaultStomachContentsFile_;
            this->FatAbsorptionFraction_ = x.FatAbsorptionFraction_;
            this->ProteinToUreaFraction_ = x.ProteinToUreaFraction_;
            this->WaterDigestionRate_ = x.WaterDigestionRate_;
          }

          return *this;
        }

        GastrointestinalConfigurationData::
        ~GastrointestinalConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GastrointestinalConfigurationData >
        _xsd_GastrointestinalConfigurationData_type_factory_init (
          "GastrointestinalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // NervousConfigurationData
        //

        NervousConfigurationData::
        NervousConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          EnableCerebral_ (this),
          PupilDiameterBaseline_ (this)
        {
        }

        NervousConfigurationData::
        NervousConfigurationData (const NervousConfigurationData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          EnableCerebral_ (x.EnableCerebral_, f, this),
          PupilDiameterBaseline_ (x.PupilDiameterBaseline_, f, this)
        {
        }

        NervousConfigurationData::
        NervousConfigurationData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          EnableCerebral_ (this),
          PupilDiameterBaseline_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NervousConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EnableCerebral
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnableCerebral",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnableCerebral_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnableCerebral_)
                {
                  ::std::unique_ptr< EnableCerebral_type > r (
                    dynamic_cast< EnableCerebral_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnableCerebral_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PupilDiameterBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PupilDiameterBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PupilDiameterBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PupilDiameterBaseline_)
                {
                  ::std::unique_ptr< PupilDiameterBaseline_type > r (
                    dynamic_cast< PupilDiameterBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PupilDiameterBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        NervousConfigurationData* NervousConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NervousConfigurationData (*this, f, c);
        }

        NervousConfigurationData& NervousConfigurationData::
        operator= (const NervousConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->EnableCerebral_ = x.EnableCerebral_;
            this->PupilDiameterBaseline_ = x.PupilDiameterBaseline_;
          }

          return *this;
        }

        NervousConfigurationData::
        ~NervousConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NervousConfigurationData >
        _xsd_NervousConfigurationData_type_factory_init (
          "NervousConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // RenalConfigurationData
        //

        RenalConfigurationData::
        RenalConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          EnableRenal_ (this),
          PlasmaSodiumConcentrationSetPoint_ (this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (this),
          LeftGlomerularFluidPermeabilityBaseline_ (this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (this),
          MaximumAfferentResistance_ (this),
          MinimumAfferentResistance_ (this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (this),
          RightGlomerularFluidPermeabilityBaseline_ (this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (this),
          TargetSodiumDelivery_ (this)
        {
        }

        RenalConfigurationData::
        RenalConfigurationData (const RenalConfigurationData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          EnableRenal_ (x.EnableRenal_, f, this),
          PlasmaSodiumConcentrationSetPoint_ (x.PlasmaSodiumConcentrationSetPoint_, f, this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (x.LeftGlomerularFilteringSurfaceAreaBaseline_, f, this),
          LeftGlomerularFluidPermeabilityBaseline_ (x.LeftGlomerularFluidPermeabilityBaseline_, f, this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (x.LeftTubularReabsorptionFilteringSurfaceAreaBaseline_, f, this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (x.LeftTubularReabsorptionFluidPermeabilityBaseline_, f, this),
          MaximumAfferentResistance_ (x.MaximumAfferentResistance_, f, this),
          MinimumAfferentResistance_ (x.MinimumAfferentResistance_, f, this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (x.RightGlomerularFilteringSurfaceAreaBaseline_, f, this),
          RightGlomerularFluidPermeabilityBaseline_ (x.RightGlomerularFluidPermeabilityBaseline_, f, this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (x.RightTubularReabsorptionFilteringSurfaceAreaBaseline_, f, this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (x.RightTubularReabsorptionFluidPermeabilityBaseline_, f, this),
          TargetSodiumDelivery_ (x.TargetSodiumDelivery_, f, this)
        {
        }

        RenalConfigurationData::
        RenalConfigurationData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          EnableRenal_ (this),
          PlasmaSodiumConcentrationSetPoint_ (this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (this),
          LeftGlomerularFluidPermeabilityBaseline_ (this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (this),
          MaximumAfferentResistance_ (this),
          MinimumAfferentResistance_ (this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (this),
          RightGlomerularFluidPermeabilityBaseline_ (this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (this),
          TargetSodiumDelivery_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RenalConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EnableRenal
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnableRenal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnableRenal_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnableRenal_)
                {
                  ::std::unique_ptr< EnableRenal_type > r (
                    dynamic_cast< EnableRenal_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnableRenal_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlasmaSodiumConcentrationSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlasmaSodiumConcentrationSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlasmaSodiumConcentrationSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlasmaSodiumConcentrationSetPoint_)
                {
                  ::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > r (
                    dynamic_cast< PlasmaSodiumConcentrationSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlasmaSodiumConcentrationSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< LeftGlomerularFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > r (
                    dynamic_cast< LeftGlomerularFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > r (
                    dynamic_cast< LeftTubularReabsorptionFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MaximumAfferentResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MaximumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MaximumAfferentResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MaximumAfferentResistance_)
                {
                  ::std::unique_ptr< MaximumAfferentResistance_type > r (
                    dynamic_cast< MaximumAfferentResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MaximumAfferentResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MinimumAfferentResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumAfferentResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MinimumAfferentResistance_)
                {
                  ::std::unique_ptr< MinimumAfferentResistance_type > r (
                    dynamic_cast< MinimumAfferentResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumAfferentResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< RightGlomerularFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > r (
                    dynamic_cast< RightGlomerularFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > r (
                    dynamic_cast< RightTubularReabsorptionFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetSodiumDelivery
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetSodiumDelivery",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetSodiumDelivery_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TargetSodiumDelivery_)
                {
                  ::std::unique_ptr< TargetSodiumDelivery_type > r (
                    dynamic_cast< TargetSodiumDelivery_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetSodiumDelivery_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RenalConfigurationData* RenalConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RenalConfigurationData (*this, f, c);
        }

        RenalConfigurationData& RenalConfigurationData::
        operator= (const RenalConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->EnableRenal_ = x.EnableRenal_;
            this->PlasmaSodiumConcentrationSetPoint_ = x.PlasmaSodiumConcentrationSetPoint_;
            this->LeftGlomerularFilteringSurfaceAreaBaseline_ = x.LeftGlomerularFilteringSurfaceAreaBaseline_;
            this->LeftGlomerularFluidPermeabilityBaseline_ = x.LeftGlomerularFluidPermeabilityBaseline_;
            this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ = x.LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
            this->LeftTubularReabsorptionFluidPermeabilityBaseline_ = x.LeftTubularReabsorptionFluidPermeabilityBaseline_;
            this->MaximumAfferentResistance_ = x.MaximumAfferentResistance_;
            this->MinimumAfferentResistance_ = x.MinimumAfferentResistance_;
            this->RightGlomerularFilteringSurfaceAreaBaseline_ = x.RightGlomerularFilteringSurfaceAreaBaseline_;
            this->RightGlomerularFluidPermeabilityBaseline_ = x.RightGlomerularFluidPermeabilityBaseline_;
            this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_ = x.RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
            this->RightTubularReabsorptionFluidPermeabilityBaseline_ = x.RightTubularReabsorptionFluidPermeabilityBaseline_;
            this->TargetSodiumDelivery_ = x.TargetSodiumDelivery_;
          }

          return *this;
        }

        RenalConfigurationData::
        ~RenalConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_type_factory_init (
          "RenalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // RespiratoryConfigurationData
        //

        RespiratoryConfigurationData::
        RespiratoryConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          PleuralComplianceSensitivity_ (this),
          PulmonaryVentilationRateMaximum_ (this),
          VentilatoryOcclusionPressure_ (this)
        {
        }

        RespiratoryConfigurationData::
        RespiratoryConfigurationData (const RespiratoryConfigurationData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          PleuralComplianceSensitivity_ (x.PleuralComplianceSensitivity_, f, this),
          PulmonaryVentilationRateMaximum_ (x.PulmonaryVentilationRateMaximum_, f, this),
          VentilatoryOcclusionPressure_ (x.VentilatoryOcclusionPressure_, f, this)
        {
        }

        RespiratoryConfigurationData::
        RespiratoryConfigurationData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          PleuralComplianceSensitivity_ (this),
          PulmonaryVentilationRateMaximum_ (this),
          VentilatoryOcclusionPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RespiratoryConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PleuralComplianceSensitivity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PleuralComplianceSensitivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PleuralComplianceSensitivity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PleuralComplianceSensitivity_)
                {
                  ::std::unique_ptr< PleuralComplianceSensitivity_type > r (
                    dynamic_cast< PleuralComplianceSensitivity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PleuralComplianceSensitivity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVentilationRateMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVentilationRateMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVentilationRateMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVentilationRateMaximum_)
                {
                  ::std::unique_ptr< PulmonaryVentilationRateMaximum_type > r (
                    dynamic_cast< PulmonaryVentilationRateMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVentilationRateMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VentilatoryOcclusionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VentilatoryOcclusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VentilatoryOcclusionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VentilatoryOcclusionPressure_)
                {
                  ::std::unique_ptr< VentilatoryOcclusionPressure_type > r (
                    dynamic_cast< VentilatoryOcclusionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VentilatoryOcclusionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RespiratoryConfigurationData* RespiratoryConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RespiratoryConfigurationData (*this, f, c);
        }

        RespiratoryConfigurationData& RespiratoryConfigurationData::
        operator= (const RespiratoryConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->PleuralComplianceSensitivity_ = x.PleuralComplianceSensitivity_;
            this->PulmonaryVentilationRateMaximum_ = x.PulmonaryVentilationRateMaximum_;
            this->VentilatoryOcclusionPressure_ = x.VentilatoryOcclusionPressure_;
          }

          return *this;
        }

        RespiratoryConfigurationData::
        ~RespiratoryConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_type_factory_init (
          "RespiratoryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TissueConfigurationData
        //

        TissueConfigurationData::
        TissueConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          EnableTissue_ (this)
        {
        }

        TissueConfigurationData::
        TissueConfigurationData (const TissueConfigurationData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          EnableTissue_ (x.EnableTissue_, f, this)
        {
        }

        TissueConfigurationData::
        TissueConfigurationData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          EnableTissue_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TissueConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EnableTissue
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnableTissue",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnableTissue_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnableTissue_)
                {
                  ::std::unique_ptr< EnableTissue_type > r (
                    dynamic_cast< EnableTissue_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnableTissue_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        TissueConfigurationData* TissueConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueConfigurationData (*this, f, c);
        }

        TissueConfigurationData& TissueConfigurationData::
        operator= (const TissueConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->EnableTissue_ = x.EnableTissue_;
          }

          return *this;
        }

        TissueConfigurationData::
        ~TissueConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueConfigurationData >
        _xsd_TissueConfigurationData_type_factory_init (
          "TissueConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BioGearsConfigurationData
        //

        BioGearsConfigurationData::
        BioGearsConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData (),
          BloodChemistryConfiguration_ (this),
          CardiovascularConfiguration_ (this),
          CircuitConfiguration_ (this),
          ConstantsConfiguration_ (this),
          DrugsConfiguration_ (this),
          EnergyConfiguration_ (this),
          EnvironmentConfiguration_ (this),
          GastrointestinalConfiguration_ (this),
          NervousConfiguration_ (this),
          RenalConfiguration_ (this),
          RespiratoryConfiguration_ (this),
          TissueConfiguration_ (this)
        {
        }

        BioGearsConfigurationData::
        BioGearsConfigurationData (const BioGearsConfigurationData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData (x, f, c),
          BloodChemistryConfiguration_ (x.BloodChemistryConfiguration_, f, this),
          CardiovascularConfiguration_ (x.CardiovascularConfiguration_, f, this),
          CircuitConfiguration_ (x.CircuitConfiguration_, f, this),
          ConstantsConfiguration_ (x.ConstantsConfiguration_, f, this),
          DrugsConfiguration_ (x.DrugsConfiguration_, f, this),
          EnergyConfiguration_ (x.EnergyConfiguration_, f, this),
          EnvironmentConfiguration_ (x.EnvironmentConfiguration_, f, this),
          GastrointestinalConfiguration_ (x.GastrointestinalConfiguration_, f, this),
          NervousConfiguration_ (x.NervousConfiguration_, f, this),
          RenalConfiguration_ (x.RenalConfiguration_, f, this),
          RespiratoryConfiguration_ (x.RespiratoryConfiguration_, f, this),
          TissueConfiguration_ (x.TissueConfiguration_, f, this)
        {
        }

        BioGearsConfigurationData::
        BioGearsConfigurationData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData (e, f | ::xml_schema::flags::base, c),
          BloodChemistryConfiguration_ (this),
          CardiovascularConfiguration_ (this),
          CircuitConfiguration_ (this),
          ConstantsConfiguration_ (this),
          DrugsConfiguration_ (this),
          EnergyConfiguration_ (this),
          EnvironmentConfiguration_ (this),
          GastrointestinalConfiguration_ (this),
          NervousConfiguration_ (this),
          RenalConfiguration_ (this),
          RespiratoryConfiguration_ (this),
          TissueConfiguration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BloodChemistryConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodChemistryConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodChemistryConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodChemistryConfiguration_)
                {
                  ::std::unique_ptr< BloodChemistryConfiguration_type > r (
                    dynamic_cast< BloodChemistryConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodChemistryConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiovascularConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiovascularConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiovascularConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiovascularConfiguration_)
                {
                  ::std::unique_ptr< CardiovascularConfiguration_type > r (
                    dynamic_cast< CardiovascularConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiovascularConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CircuitConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CircuitConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CircuitConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CircuitConfiguration_)
                {
                  ::std::unique_ptr< CircuitConfiguration_type > r (
                    dynamic_cast< CircuitConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CircuitConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConstantsConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConstantsConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConstantsConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConstantsConfiguration_)
                {
                  ::std::unique_ptr< ConstantsConfiguration_type > r (
                    dynamic_cast< ConstantsConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConstantsConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DrugsConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DrugsConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DrugsConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DrugsConfiguration_)
                {
                  ::std::unique_ptr< DrugsConfiguration_type > r (
                    dynamic_cast< DrugsConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DrugsConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EnergyConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnergyConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnergyConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnergyConfiguration_)
                {
                  ::std::unique_ptr< EnergyConfiguration_type > r (
                    dynamic_cast< EnergyConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnergyConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EnvironmentConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnvironmentConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnvironmentConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnvironmentConfiguration_)
                {
                  ::std::unique_ptr< EnvironmentConfiguration_type > r (
                    dynamic_cast< EnvironmentConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnvironmentConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GastrointestinalConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GastrointestinalConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GastrointestinalConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GastrointestinalConfiguration_)
                {
                  ::std::unique_ptr< GastrointestinalConfiguration_type > r (
                    dynamic_cast< GastrointestinalConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GastrointestinalConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NervousConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NervousConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NervousConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NervousConfiguration_)
                {
                  ::std::unique_ptr< NervousConfiguration_type > r (
                    dynamic_cast< NervousConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NervousConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalConfiguration_)
                {
                  ::std::unique_ptr< RenalConfiguration_type > r (
                    dynamic_cast< RenalConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespiratoryConfiguration_)
                {
                  ::std::unique_ptr< RespiratoryConfiguration_type > r (
                    dynamic_cast< RespiratoryConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueConfiguration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueConfiguration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueConfiguration_)
                {
                  ::std::unique_ptr< TissueConfiguration_type > r (
                    dynamic_cast< TissueConfiguration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueConfiguration_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        BioGearsConfigurationData* BioGearsConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsConfigurationData (*this, f, c);
        }

        BioGearsConfigurationData& BioGearsConfigurationData::
        operator= (const BioGearsConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData& > (*this) = x;
            this->BloodChemistryConfiguration_ = x.BloodChemistryConfiguration_;
            this->CardiovascularConfiguration_ = x.CardiovascularConfiguration_;
            this->CircuitConfiguration_ = x.CircuitConfiguration_;
            this->ConstantsConfiguration_ = x.ConstantsConfiguration_;
            this->DrugsConfiguration_ = x.DrugsConfiguration_;
            this->EnergyConfiguration_ = x.EnergyConfiguration_;
            this->EnvironmentConfiguration_ = x.EnvironmentConfiguration_;
            this->GastrointestinalConfiguration_ = x.GastrointestinalConfiguration_;
            this->NervousConfiguration_ = x.NervousConfiguration_;
            this->RenalConfiguration_ = x.RenalConfiguration_;
            this->RespiratoryConfiguration_ = x.RespiratoryConfiguration_;
            this->TissueConfiguration_ = x.TissueConfiguration_;
          }

          return *this;
        }

        BioGearsConfigurationData::
        ~BioGearsConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsConfigurationData >
        _xsd_BioGearsConfigurationData_type_factory_init (
          "BioGearsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const BloodChemistryConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              o << ::std::endl << "MeanCorpuscularHemoglobin: ";
              om.insert (o, *i.MeanCorpuscularHemoglobin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              o << ::std::endl << "MeanCorpuscularVolume: ";
              om.insert (o, *i.MeanCorpuscularVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StandardDiffusionDistance ())
            {
              o << ::std::endl << "StandardDiffusionDistance: ";
              om.insert (o, *i.StandardDiffusionDistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StandardOxygenDiffusionCoefficient ())
            {
              o << ::std::endl << "StandardOxygenDiffusionCoefficient: ";
              om.insert (o, *i.StandardOxygenDiffusionCoefficient ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BloodChemistryConfigurationData >
        _xsd_BloodChemistryConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CardiovascularConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMaximum ())
            {
              o << ::std::endl << "LeftHeartElastanceMaximum: ";
              om.insert (o, *i.LeftHeartElastanceMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMinimum ())
            {
              o << ::std::endl << "LeftHeartElastanceMinimum: ";
              om.insert (o, *i.LeftHeartElastanceMinimum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MinimumBloodVolumeFraction ())
            {
              o << ::std::endl << "MinimumBloodVolumeFraction: ";
              om.insert (o, *i.MinimumBloodVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightHeartElastanceMaximum ())
            {
              o << ::std::endl << "RightHeartElastanceMaximum: ";
              om.insert (o, *i.RightHeartElastanceMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightHeartElastanceMinimum ())
            {
              o << ::std::endl << "RightHeartElastanceMinimum: ";
              om.insert (o, *i.RightHeartElastanceMinimum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StandardPulmonaryCapillaryCoverage ())
            {
              o << ::std::endl << "StandardPulmonaryCapillaryCoverage: ";
              om.insert (o, *i.StandardPulmonaryCapillaryCoverage ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CircuitConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiovascularOpenResistance ())
            {
              o << ::std::endl << "CardiovascularOpenResistance: ";
              om.insert (o, *i.CardiovascularOpenResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultClosedElectricResistance ())
            {
              o << ::std::endl << "DefaultClosedElectricResistance: ";
              om.insert (o, *i.DefaultClosedElectricResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultOpenElectricResistance ())
            {
              o << ::std::endl << "DefaultOpenElectricResistance: ";
              om.insert (o, *i.DefaultOpenElectricResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultClosedFlowResistance ())
            {
              o << ::std::endl << "DefaultClosedFlowResistance: ";
              om.insert (o, *i.DefaultClosedFlowResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultOpenFlowResistance ())
            {
              o << ::std::endl << "DefaultOpenFlowResistance: ";
              om.insert (o, *i.DefaultOpenFlowResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultClosedHeatResistance ())
            {
              o << ::std::endl << "DefaultClosedHeatResistance: ";
              om.insert (o, *i.DefaultClosedHeatResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultOpenHeatResistance ())
            {
              o << ::std::endl << "DefaultOpenHeatResistance: ";
              om.insert (o, *i.DefaultOpenHeatResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MachineClosedResistance ())
            {
              o << ::std::endl << "MachineClosedResistance: ";
              om.insert (o, *i.MachineClosedResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MachineOpenResistance ())
            {
              o << ::std::endl << "MachineOpenResistance: ";
              om.insert (o, *i.MachineOpenResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespiratoryClosedResistance ())
            {
              o << ::std::endl << "RespiratoryClosedResistance: ";
              om.insert (o, *i.RespiratoryClosedResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespiratoryOpenResistance ())
            {
              o << ::std::endl << "RespiratoryOpenResistance: ";
              om.insert (o, *i.RespiratoryOpenResistance ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CircuitConfigurationData >
        _xsd_CircuitConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ConstantsConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenMetabolicConstant ())
            {
              o << ::std::endl << "OxygenMetabolicConstant: ";
              om.insert (o, *i.OxygenMetabolicConstant ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StefanBoltzmann ())
            {
              o << ::std::endl << "StefanBoltzmann: ";
              om.insert (o, *i.StefanBoltzmann ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UniversalGasConstant ())
            {
              o << ::std::endl << "UniversalGasConstant: ";
              om.insert (o, *i.UniversalGasConstant ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConstantsConfigurationData >
        _xsd_ConstantsConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DrugsConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PDModel ())
            {
              o << ::std::endl << "PDModel: ";
              om.insert (o, *i.PDModel ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DrugsConfigurationData >
        _xsd_DrugsConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnergyConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BodySpecificHeat ())
            {
              o << ::std::endl << "BodySpecificHeat: ";
              om.insert (o, *i.BodySpecificHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperatureLow ())
            {
              o << ::std::endl << "CoreTemperatureLow: ";
              om.insert (o, *i.CoreTemperatureLow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperatureHigh ())
            {
              o << ::std::endl << "CoreTemperatureHigh: ";
              om.insert (o, *i.CoreTemperatureHigh ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DeltaCoreTemperatureLow ())
            {
              o << ::std::endl << "DeltaCoreTemperatureLow: ";
              om.insert (o, *i.DeltaCoreTemperatureLow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnergyPerATP ())
            {
              o << ::std::endl << "EnergyPerATP: ";
              om.insert (o, *i.EnergyPerATP ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SweatHeatTransfer ())
            {
              o << ::std::endl << "SweatHeatTransfer: ";
              om.insert (o, *i.SweatHeatTransfer ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VaporizationEnergy ())
            {
              o << ::std::endl << "VaporizationEnergy: ";
              om.insert (o, *i.VaporizationEnergy ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VaporSpecificHeat ())
            {
              o << ::std::endl << "VaporSpecificHeat: ";
              om.insert (o, *i.VaporSpecificHeat ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              o << ::std::endl << "AirDensity: ";
              om.insert (o, *i.AirDensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirSpecificHeat ())
            {
              o << ::std::endl << "AirSpecificHeat: ";
              om.insert (o, *i.AirSpecificHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MolarMassOfDryAir ())
            {
              o << ::std::endl << "MolarMassOfDryAir: ";
              om.insert (o, *i.MolarMassOfDryAir ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MolarMassOfWaterVapor ())
            {
              o << ::std::endl << "MolarMassOfWaterVapor: ";
              om.insert (o, *i.MolarMassOfWaterVapor ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditions ())
            {
              o << ::std::endl << "InitialEnvironmentalConditions: ";
              om.insert (o, *i.InitialEnvironmentalConditions ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditionsFile ())
            {
              o << ::std::endl << "InitialEnvironmentalConditionsFile: ";
              om.insert (o, *i.InitialEnvironmentalConditionsFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WaterDensity ())
            {
              o << ::std::endl << "WaterDensity: ";
              om.insert (o, *i.WaterDensity ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GastrointestinalConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CalciumAbsorptionFraction ())
            {
              o << ::std::endl << "CalciumAbsorptionFraction: ";
              om.insert (o, *i.CalciumAbsorptionFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CalciumDigestionRate ())
            {
              o << ::std::endl << "CalciumDigestionRate: ";
              om.insert (o, *i.CalciumDigestionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbohydrateAbsorptionFraction ())
            {
              o << ::std::endl << "CarbohydrateAbsorptionFraction: ";
              om.insert (o, *i.CarbohydrateAbsorptionFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultStomachContents ())
            {
              o << ::std::endl << "DefaultStomachContents: ";
              om.insert (o, *i.DefaultStomachContents ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultStomachContentsFile ())
            {
              o << ::std::endl << "DefaultStomachContentsFile: ";
              om.insert (o, *i.DefaultStomachContentsFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatAbsorptionFraction ())
            {
              o << ::std::endl << "FatAbsorptionFraction: ";
              om.insert (o, *i.FatAbsorptionFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ProteinToUreaFraction ())
            {
              o << ::std::endl << "ProteinToUreaFraction: ";
              om.insert (o, *i.ProteinToUreaFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WaterDigestionRate ())
            {
              o << ::std::endl << "WaterDigestionRate: ";
              om.insert (o, *i.WaterDigestionRate ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GastrointestinalConfigurationData >
        _xsd_GastrointestinalConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const NervousConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnableCerebral ())
            {
              o << ::std::endl << "EnableCerebral: ";
              om.insert (o, *i.EnableCerebral ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PupilDiameterBaseline ())
            {
              o << ::std::endl << "PupilDiameterBaseline: ";
              om.insert (o, *i.PupilDiameterBaseline ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NervousConfigurationData >
        _xsd_NervousConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const RenalConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnableRenal ())
            {
              o << ::std::endl << "EnableRenal: ";
              om.insert (o, *i.EnableRenal ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlasmaSodiumConcentrationSetPoint ())
            {
              o << ::std::endl << "PlasmaSodiumConcentrationSetPoint: ";
              om.insert (o, *i.PlasmaSodiumConcentrationSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "LeftGlomerularFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.LeftGlomerularFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "LeftGlomerularFluidPermeabilityBaseline: ";
              om.insert (o, *i.LeftGlomerularFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFluidPermeabilityBaseline: ";
              om.insert (o, *i.LeftTubularReabsorptionFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MaximumAfferentResistance ())
            {
              o << ::std::endl << "MaximumAfferentResistance: ";
              om.insert (o, *i.MaximumAfferentResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MinimumAfferentResistance ())
            {
              o << ::std::endl << "MinimumAfferentResistance: ";
              om.insert (o, *i.MinimumAfferentResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "RightGlomerularFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.RightGlomerularFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "RightGlomerularFluidPermeabilityBaseline: ";
              om.insert (o, *i.RightGlomerularFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "RightTubularReabsorptionFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "RightTubularReabsorptionFluidPermeabilityBaseline: ";
              om.insert (o, *i.RightTubularReabsorptionFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TargetSodiumDelivery ())
            {
              o << ::std::endl << "TargetSodiumDelivery: ";
              om.insert (o, *i.TargetSodiumDelivery ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const RespiratoryConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PleuralComplianceSensitivity ())
            {
              o << ::std::endl << "PleuralComplianceSensitivity: ";
              om.insert (o, *i.PleuralComplianceSensitivity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVentilationRateMaximum ())
            {
              o << ::std::endl << "PulmonaryVentilationRateMaximum: ";
              om.insert (o, *i.PulmonaryVentilationRateMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VentilatoryOcclusionPressure ())
            {
              o << ::std::endl << "VentilatoryOcclusionPressure: ";
              om.insert (o, *i.VentilatoryOcclusionPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TissueConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnableTissue ())
            {
              o << ::std::endl << "EnableTissue: ";
              om.insert (o, *i.EnableTissue ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueConfigurationData >
        _xsd_TissueConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodChemistryConfiguration ())
            {
              o << ::std::endl << "BloodChemistryConfiguration: ";
              om.insert (o, *i.BloodChemistryConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiovascularConfiguration ())
            {
              o << ::std::endl << "CardiovascularConfiguration: ";
              om.insert (o, *i.CardiovascularConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CircuitConfiguration ())
            {
              o << ::std::endl << "CircuitConfiguration: ";
              om.insert (o, *i.CircuitConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConstantsConfiguration ())
            {
              o << ::std::endl << "ConstantsConfiguration: ";
              om.insert (o, *i.ConstantsConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DrugsConfiguration ())
            {
              o << ::std::endl << "DrugsConfiguration: ";
              om.insert (o, *i.DrugsConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnergyConfiguration ())
            {
              o << ::std::endl << "EnergyConfiguration: ";
              om.insert (o, *i.EnergyConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnvironmentConfiguration ())
            {
              o << ::std::endl << "EnvironmentConfiguration: ";
              om.insert (o, *i.EnvironmentConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GastrointestinalConfiguration ())
            {
              o << ::std::endl << "GastrointestinalConfiguration: ";
              om.insert (o, *i.GastrointestinalConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NervousConfiguration ())
            {
              o << ::std::endl << "NervousConfiguration: ";
              om.insert (o, *i.NervousConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalConfiguration ())
            {
              o << ::std::endl << "RenalConfiguration: ";
              om.insert (o, *i.RenalConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespiratoryConfiguration ())
            {
              o << ::std::endl << "RespiratoryConfiguration: ";
              om.insert (o, *i.RespiratoryConfiguration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueConfiguration ())
            {
              o << ::std::endl << "TissueConfiguration: ";
              om.insert (o, *i.TissueConfiguration ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsConfigurationData >
        _xsd_BioGearsConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > (
              ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "BioGearsConfiguration",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BioGearsConfiguration",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >
        BioGearsConfiguration (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "BioGearsConfiguration",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BioGearsConfiguration",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const BloodChemistryConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // MeanCorpuscularHemoglobin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              const BloodChemistryConfigurationData::MeanCorpuscularHemoglobin_type& x (*i.MeanCorpuscularHemoglobin ());
              if (typeid (BloodChemistryConfigurationData::MeanCorpuscularHemoglobin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularHemoglobin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              const BloodChemistryConfigurationData::MeanCorpuscularVolume_type& x (*i.MeanCorpuscularVolume ());
              if (typeid (BloodChemistryConfigurationData::MeanCorpuscularVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StandardDiffusionDistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StandardDiffusionDistance ())
            {
              const BloodChemistryConfigurationData::StandardDiffusionDistance_type& x (*i.StandardDiffusionDistance ());
              if (typeid (BloodChemistryConfigurationData::StandardDiffusionDistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StandardDiffusionDistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StandardDiffusionDistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StandardOxygenDiffusionCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StandardOxygenDiffusionCoefficient ())
            {
              const BloodChemistryConfigurationData::StandardOxygenDiffusionCoefficient_type& x (*i.StandardOxygenDiffusionCoefficient ());
              if (typeid (BloodChemistryConfigurationData::StandardOxygenDiffusionCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StandardOxygenDiffusionCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StandardOxygenDiffusionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BloodChemistryConfigurationData >
        _xsd_BloodChemistryConfigurationData_type_serializer_init (
          "BloodChemistryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CardiovascularConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // LeftHeartElastanceMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMaximum ())
            {
              const CardiovascularConfigurationData::LeftHeartElastanceMaximum_type& x (*i.LeftHeartElastanceMaximum ());
              if (typeid (CardiovascularConfigurationData::LeftHeartElastanceMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftHeartElastanceMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftHeartElastanceMinimum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMinimum ())
            {
              const CardiovascularConfigurationData::LeftHeartElastanceMinimum_type& x (*i.LeftHeartElastanceMinimum ());
              if (typeid (CardiovascularConfigurationData::LeftHeartElastanceMinimum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftHeartElastanceMinimum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MinimumBloodVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MinimumBloodVolumeFraction ())
            {
              const CardiovascularConfigurationData::MinimumBloodVolumeFraction_type& x (*i.MinimumBloodVolumeFraction ());
              if (typeid (CardiovascularConfigurationData::MinimumBloodVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MinimumBloodVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MinimumBloodVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightHeartElastanceMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightHeartElastanceMaximum ())
            {
              const CardiovascularConfigurationData::RightHeartElastanceMaximum_type& x (*i.RightHeartElastanceMaximum ());
              if (typeid (CardiovascularConfigurationData::RightHeartElastanceMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightHeartElastanceMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightHeartElastanceMinimum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightHeartElastanceMinimum ())
            {
              const CardiovascularConfigurationData::RightHeartElastanceMinimum_type& x (*i.RightHeartElastanceMinimum ());
              if (typeid (CardiovascularConfigurationData::RightHeartElastanceMinimum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightHeartElastanceMinimum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StandardPulmonaryCapillaryCoverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StandardPulmonaryCapillaryCoverage ())
            {
              const CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_type& x (*i.StandardPulmonaryCapillaryCoverage ());
              if (typeid (CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StandardPulmonaryCapillaryCoverage",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StandardPulmonaryCapillaryCoverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_type_serializer_init (
          "CardiovascularConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CircuitConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // CardiovascularOpenResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiovascularOpenResistance ())
            {
              const CircuitConfigurationData::CardiovascularOpenResistance_type& x (*i.CardiovascularOpenResistance ());
              if (typeid (CircuitConfigurationData::CardiovascularOpenResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiovascularOpenResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiovascularOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultClosedElectricResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultClosedElectricResistance ())
            {
              const CircuitConfigurationData::DefaultClosedElectricResistance_type& x (*i.DefaultClosedElectricResistance ());
              if (typeid (CircuitConfigurationData::DefaultClosedElectricResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultClosedElectricResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultClosedElectricResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultOpenElectricResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultOpenElectricResistance ())
            {
              const CircuitConfigurationData::DefaultOpenElectricResistance_type& x (*i.DefaultOpenElectricResistance ());
              if (typeid (CircuitConfigurationData::DefaultOpenElectricResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultOpenElectricResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultOpenElectricResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultClosedFlowResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultClosedFlowResistance ())
            {
              const CircuitConfigurationData::DefaultClosedFlowResistance_type& x (*i.DefaultClosedFlowResistance ());
              if (typeid (CircuitConfigurationData::DefaultClosedFlowResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultClosedFlowResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultClosedFlowResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultOpenFlowResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultOpenFlowResistance ())
            {
              const CircuitConfigurationData::DefaultOpenFlowResistance_type& x (*i.DefaultOpenFlowResistance ());
              if (typeid (CircuitConfigurationData::DefaultOpenFlowResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultOpenFlowResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultOpenFlowResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultClosedHeatResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultClosedHeatResistance ())
            {
              const CircuitConfigurationData::DefaultClosedHeatResistance_type& x (*i.DefaultClosedHeatResistance ());
              if (typeid (CircuitConfigurationData::DefaultClosedHeatResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultClosedHeatResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultClosedHeatResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultOpenHeatResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultOpenHeatResistance ())
            {
              const CircuitConfigurationData::DefaultOpenHeatResistance_type& x (*i.DefaultOpenHeatResistance ());
              if (typeid (CircuitConfigurationData::DefaultOpenHeatResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultOpenHeatResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultOpenHeatResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MachineClosedResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MachineClosedResistance ())
            {
              const CircuitConfigurationData::MachineClosedResistance_type& x (*i.MachineClosedResistance ());
              if (typeid (CircuitConfigurationData::MachineClosedResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MachineClosedResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MachineClosedResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MachineOpenResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MachineOpenResistance ())
            {
              const CircuitConfigurationData::MachineOpenResistance_type& x (*i.MachineOpenResistance ());
              if (typeid (CircuitConfigurationData::MachineOpenResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MachineOpenResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MachineOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespiratoryClosedResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespiratoryClosedResistance ())
            {
              const CircuitConfigurationData::RespiratoryClosedResistance_type& x (*i.RespiratoryClosedResistance ());
              if (typeid (CircuitConfigurationData::RespiratoryClosedResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespiratoryClosedResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespiratoryClosedResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespiratoryOpenResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespiratoryOpenResistance ())
            {
              const CircuitConfigurationData::RespiratoryOpenResistance_type& x (*i.RespiratoryOpenResistance ());
              if (typeid (CircuitConfigurationData::RespiratoryOpenResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespiratoryOpenResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespiratoryOpenResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CircuitConfigurationData >
        _xsd_CircuitConfigurationData_type_serializer_init (
          "CircuitConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ConstantsConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // OxygenMetabolicConstant
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenMetabolicConstant ())
            {
              const ConstantsConfigurationData::OxygenMetabolicConstant_type& x (*i.OxygenMetabolicConstant ());
              if (typeid (ConstantsConfigurationData::OxygenMetabolicConstant_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenMetabolicConstant",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenMetabolicConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StefanBoltzmann
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StefanBoltzmann ())
            {
              const ConstantsConfigurationData::StefanBoltzmann_type& x (*i.StefanBoltzmann ());
              if (typeid (ConstantsConfigurationData::StefanBoltzmann_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StefanBoltzmann",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StefanBoltzmann",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UniversalGasConstant
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UniversalGasConstant ())
            {
              const ConstantsConfigurationData::UniversalGasConstant_type& x (*i.UniversalGasConstant ());
              if (typeid (ConstantsConfigurationData::UniversalGasConstant_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UniversalGasConstant",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UniversalGasConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConstantsConfigurationData >
        _xsd_ConstantsConfigurationData_type_serializer_init (
          "ConstantsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const DrugsConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // PDModel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PDModel ())
            {
              const DrugsConfigurationData::PDModel_type& x (*i.PDModel ());
              if (typeid (DrugsConfigurationData::PDModel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PDModel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PDModel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DrugsConfigurationData >
        _xsd_DrugsConfigurationData_type_serializer_init (
          "DrugsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EnergyConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // BodySpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BodySpecificHeat ())
            {
              const EnergyConfigurationData::BodySpecificHeat_type& x (*i.BodySpecificHeat ());
              if (typeid (EnergyConfigurationData::BodySpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BodySpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BodySpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperatureLow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperatureLow ())
            {
              const EnergyConfigurationData::CoreTemperatureLow_type& x (*i.CoreTemperatureLow ());
              if (typeid (EnergyConfigurationData::CoreTemperatureLow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperatureLow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperatureHigh
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperatureHigh ())
            {
              const EnergyConfigurationData::CoreTemperatureHigh_type& x (*i.CoreTemperatureHigh ());
              if (typeid (EnergyConfigurationData::CoreTemperatureHigh_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperatureHigh",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperatureHigh",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DeltaCoreTemperatureLow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DeltaCoreTemperatureLow ())
            {
              const EnergyConfigurationData::DeltaCoreTemperatureLow_type& x (*i.DeltaCoreTemperatureLow ());
              if (typeid (EnergyConfigurationData::DeltaCoreTemperatureLow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DeltaCoreTemperatureLow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DeltaCoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EnergyPerATP
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnergyPerATP ())
            {
              const EnergyConfigurationData::EnergyPerATP_type& x (*i.EnergyPerATP ());
              if (typeid (EnergyConfigurationData::EnergyPerATP_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnergyPerATP",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnergyPerATP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SweatHeatTransfer
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SweatHeatTransfer ())
            {
              const EnergyConfigurationData::SweatHeatTransfer_type& x (*i.SweatHeatTransfer ());
              if (typeid (EnergyConfigurationData::SweatHeatTransfer_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SweatHeatTransfer",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SweatHeatTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VaporizationEnergy
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VaporizationEnergy ())
            {
              const EnergyConfigurationData::VaporizationEnergy_type& x (*i.VaporizationEnergy ());
              if (typeid (EnergyConfigurationData::VaporizationEnergy_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VaporizationEnergy",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VaporizationEnergy",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VaporSpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VaporSpecificHeat ())
            {
              const EnergyConfigurationData::VaporSpecificHeat_type& x (*i.VaporSpecificHeat ());
              if (typeid (EnergyConfigurationData::VaporSpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VaporSpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VaporSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_type_serializer_init (
          "EnergyConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // AirDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              const EnvironmentConfigurationData::AirDensity_type& x (*i.AirDensity ());
              if (typeid (EnvironmentConfigurationData::AirDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirSpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirSpecificHeat ())
            {
              const EnvironmentConfigurationData::AirSpecificHeat_type& x (*i.AirSpecificHeat ());
              if (typeid (EnvironmentConfigurationData::AirSpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirSpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MolarMassOfDryAir
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MolarMassOfDryAir ())
            {
              const EnvironmentConfigurationData::MolarMassOfDryAir_type& x (*i.MolarMassOfDryAir ());
              if (typeid (EnvironmentConfigurationData::MolarMassOfDryAir_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MolarMassOfDryAir",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MolarMassOfDryAir",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MolarMassOfWaterVapor
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MolarMassOfWaterVapor ())
            {
              const EnvironmentConfigurationData::MolarMassOfWaterVapor_type& x (*i.MolarMassOfWaterVapor ());
              if (typeid (EnvironmentConfigurationData::MolarMassOfWaterVapor_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MolarMassOfWaterVapor",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MolarMassOfWaterVapor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InitialEnvironmentalConditions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditions ())
            {
              const EnvironmentConfigurationData::InitialEnvironmentalConditions_type& x (*i.InitialEnvironmentalConditions ());
              if (typeid (EnvironmentConfigurationData::InitialEnvironmentalConditions_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InitialEnvironmentalConditions",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InitialEnvironmentalConditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InitialEnvironmentalConditionsFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditionsFile ())
            {
              const EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_type& x (*i.InitialEnvironmentalConditionsFile ());
              if (typeid (EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InitialEnvironmentalConditionsFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InitialEnvironmentalConditionsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WaterDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WaterDensity ())
            {
              const EnvironmentConfigurationData::WaterDensity_type& x (*i.WaterDensity ());
              if (typeid (EnvironmentConfigurationData::WaterDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WaterDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WaterDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_type_serializer_init (
          "EnvironmentConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GastrointestinalConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // CalciumAbsorptionFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CalciumAbsorptionFraction ())
            {
              const GastrointestinalConfigurationData::CalciumAbsorptionFraction_type& x (*i.CalciumAbsorptionFraction ());
              if (typeid (GastrointestinalConfigurationData::CalciumAbsorptionFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CalciumAbsorptionFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CalciumAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CalciumDigestionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CalciumDigestionRate ())
            {
              const GastrointestinalConfigurationData::CalciumDigestionRate_type& x (*i.CalciumDigestionRate ());
              if (typeid (GastrointestinalConfigurationData::CalciumDigestionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CalciumDigestionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CalciumDigestionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarbohydrateAbsorptionFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbohydrateAbsorptionFraction ())
            {
              const GastrointestinalConfigurationData::CarbohydrateAbsorptionFraction_type& x (*i.CarbohydrateAbsorptionFraction ());
              if (typeid (GastrointestinalConfigurationData::CarbohydrateAbsorptionFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbohydrateAbsorptionFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbohydrateAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultStomachContents
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultStomachContents ())
            {
              const GastrointestinalConfigurationData::DefaultStomachContents_type& x (*i.DefaultStomachContents ());
              if (typeid (GastrointestinalConfigurationData::DefaultStomachContents_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultStomachContents",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultStomachContents",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DefaultStomachContentsFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultStomachContentsFile ())
            {
              const GastrointestinalConfigurationData::DefaultStomachContentsFile_type& x (*i.DefaultStomachContentsFile ());
              if (typeid (GastrointestinalConfigurationData::DefaultStomachContentsFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultStomachContentsFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultStomachContentsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatAbsorptionFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatAbsorptionFraction ())
            {
              const GastrointestinalConfigurationData::FatAbsorptionFraction_type& x (*i.FatAbsorptionFraction ());
              if (typeid (GastrointestinalConfigurationData::FatAbsorptionFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatAbsorptionFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatAbsorptionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ProteinToUreaFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ProteinToUreaFraction ())
            {
              const GastrointestinalConfigurationData::ProteinToUreaFraction_type& x (*i.ProteinToUreaFraction ());
              if (typeid (GastrointestinalConfigurationData::ProteinToUreaFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ProteinToUreaFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ProteinToUreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WaterDigestionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WaterDigestionRate ())
            {
              const GastrointestinalConfigurationData::WaterDigestionRate_type& x (*i.WaterDigestionRate ());
              if (typeid (GastrointestinalConfigurationData::WaterDigestionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WaterDigestionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WaterDigestionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GastrointestinalConfigurationData >
        _xsd_GastrointestinalConfigurationData_type_serializer_init (
          "GastrointestinalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const NervousConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // EnableCerebral
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnableCerebral ())
            {
              const NervousConfigurationData::EnableCerebral_type& x (*i.EnableCerebral ());
              if (typeid (NervousConfigurationData::EnableCerebral_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnableCerebral",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnableCerebral",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PupilDiameterBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PupilDiameterBaseline ())
            {
              const NervousConfigurationData::PupilDiameterBaseline_type& x (*i.PupilDiameterBaseline ());
              if (typeid (NervousConfigurationData::PupilDiameterBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PupilDiameterBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PupilDiameterBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NervousConfigurationData >
        _xsd_NervousConfigurationData_type_serializer_init (
          "NervousConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const RenalConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // EnableRenal
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnableRenal ())
            {
              const RenalConfigurationData::EnableRenal_type& x (*i.EnableRenal ());
              if (typeid (RenalConfigurationData::EnableRenal_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnableRenal",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnableRenal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlasmaSodiumConcentrationSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlasmaSodiumConcentrationSetPoint ())
            {
              const RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_type& x (*i.PlasmaSodiumConcentrationSetPoint ());
              if (typeid (RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlasmaSodiumConcentrationSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlasmaSodiumConcentrationSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_type& x (*i.LeftGlomerularFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_type& x (*i.LeftGlomerularFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x (*i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_type& x (*i.LeftTubularReabsorptionFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MaximumAfferentResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MaximumAfferentResistance ())
            {
              const RenalConfigurationData::MaximumAfferentResistance_type& x (*i.MaximumAfferentResistance ());
              if (typeid (RenalConfigurationData::MaximumAfferentResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MaximumAfferentResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MaximumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MinimumAfferentResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MinimumAfferentResistance ())
            {
              const RenalConfigurationData::MinimumAfferentResistance_type& x (*i.MinimumAfferentResistance ());
              if (typeid (RenalConfigurationData::MinimumAfferentResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MinimumAfferentResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MinimumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_type& x (*i.RightGlomerularFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_type& x (*i.RightGlomerularFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x (*i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_type& x (*i.RightTubularReabsorptionFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TargetSodiumDelivery
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TargetSodiumDelivery ())
            {
              const RenalConfigurationData::TargetSodiumDelivery_type& x (*i.TargetSodiumDelivery ());
              if (typeid (RenalConfigurationData::TargetSodiumDelivery_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TargetSodiumDelivery",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TargetSodiumDelivery",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_type_serializer_init (
          "RenalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const RespiratoryConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // PleuralComplianceSensitivity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PleuralComplianceSensitivity ())
            {
              const RespiratoryConfigurationData::PleuralComplianceSensitivity_type& x (*i.PleuralComplianceSensitivity ());
              if (typeid (RespiratoryConfigurationData::PleuralComplianceSensitivity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PleuralComplianceSensitivity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PleuralComplianceSensitivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVentilationRateMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVentilationRateMaximum ())
            {
              const RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_type& x (*i.PulmonaryVentilationRateMaximum ());
              if (typeid (RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVentilationRateMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVentilationRateMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VentilatoryOcclusionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VentilatoryOcclusionPressure ())
            {
              const RespiratoryConfigurationData::VentilatoryOcclusionPressure_type& x (*i.VentilatoryOcclusionPressure ());
              if (typeid (RespiratoryConfigurationData::VentilatoryOcclusionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VentilatoryOcclusionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VentilatoryOcclusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_type_serializer_init (
          "RespiratoryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TissueConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // EnableTissue
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnableTissue ())
            {
              const TissueConfigurationData::EnableTissue_type& x (*i.EnableTissue ());
              if (typeid (TissueConfigurationData::EnableTissue_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnableTissue",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnableTissue",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueConfigurationData >
        _xsd_TissueConfigurationData_type_serializer_init (
          "TissueConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BioGearsConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PhysiologyEngineConfigurationData& > (i);

          // BloodChemistryConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodChemistryConfiguration ())
            {
              const BioGearsConfigurationData::BloodChemistryConfiguration_type& x (*i.BloodChemistryConfiguration ());
              if (typeid (BioGearsConfigurationData::BloodChemistryConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodChemistryConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodChemistryConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiovascularConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiovascularConfiguration ())
            {
              const BioGearsConfigurationData::CardiovascularConfiguration_type& x (*i.CardiovascularConfiguration ());
              if (typeid (BioGearsConfigurationData::CardiovascularConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiovascularConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiovascularConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CircuitConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CircuitConfiguration ())
            {
              const BioGearsConfigurationData::CircuitConfiguration_type& x (*i.CircuitConfiguration ());
              if (typeid (BioGearsConfigurationData::CircuitConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CircuitConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CircuitConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConstantsConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConstantsConfiguration ())
            {
              const BioGearsConfigurationData::ConstantsConfiguration_type& x (*i.ConstantsConfiguration ());
              if (typeid (BioGearsConfigurationData::ConstantsConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConstantsConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConstantsConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DrugsConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DrugsConfiguration ())
            {
              const BioGearsConfigurationData::DrugsConfiguration_type& x (*i.DrugsConfiguration ());
              if (typeid (BioGearsConfigurationData::DrugsConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DrugsConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DrugsConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EnergyConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnergyConfiguration ())
            {
              const BioGearsConfigurationData::EnergyConfiguration_type& x (*i.EnergyConfiguration ());
              if (typeid (BioGearsConfigurationData::EnergyConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnergyConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnergyConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EnvironmentConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnvironmentConfiguration ())
            {
              const BioGearsConfigurationData::EnvironmentConfiguration_type& x (*i.EnvironmentConfiguration ());
              if (typeid (BioGearsConfigurationData::EnvironmentConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnvironmentConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnvironmentConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GastrointestinalConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GastrointestinalConfiguration ())
            {
              const BioGearsConfigurationData::GastrointestinalConfiguration_type& x (*i.GastrointestinalConfiguration ());
              if (typeid (BioGearsConfigurationData::GastrointestinalConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GastrointestinalConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GastrointestinalConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NervousConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NervousConfiguration ())
            {
              const BioGearsConfigurationData::NervousConfiguration_type& x (*i.NervousConfiguration ());
              if (typeid (BioGearsConfigurationData::NervousConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NervousConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NervousConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalConfiguration ())
            {
              const BioGearsConfigurationData::RenalConfiguration_type& x (*i.RenalConfiguration ());
              if (typeid (BioGearsConfigurationData::RenalConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespiratoryConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespiratoryConfiguration ())
            {
              const BioGearsConfigurationData::RespiratoryConfiguration_type& x (*i.RespiratoryConfiguration ());
              if (typeid (BioGearsConfigurationData::RespiratoryConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespiratoryConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespiratoryConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueConfiguration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueConfiguration ())
            {
              const BioGearsConfigurationData::TissueConfiguration_type& x (*i.TissueConfiguration ());
              if (typeid (BioGearsConfigurationData::TissueConfiguration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueConfiguration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueConfiguration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsConfigurationData >
        _xsd_BioGearsConfigurationData_type_serializer_init (
          "BioGearsConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        BioGearsConfiguration (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        BioGearsConfiguration (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BioGearsConfiguration (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BioGearsConfiguration (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BioGearsConfiguration (::xercesc::DOMDocument& d,
                               const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::BioGearsConfigurationData) == typeid (s))
          {
            if (n.name () == "BioGearsConfiguration" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "BioGearsConfiguration",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "BioGearsConfiguration",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        BioGearsConfiguration (const ::mil::tatrc::physiology::datamodel::BioGearsConfigurationData& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::BioGearsConfigurationData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "BioGearsConfiguration",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "BioGearsConfiguration",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::BioGearsConfiguration (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

