// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Compartment.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // enumCompartmentType
        // 

        enumCompartmentType::
        enumCompartmentType ()
        : ::xml_schema::string ()
        {
        }

        enumCompartmentType::
        enumCompartmentType (value v)
        : ::xml_schema::string (_xsd_enumCompartmentType_literals_[v])
        {
        }

        enumCompartmentType::
        enumCompartmentType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumCompartmentType::
        enumCompartmentType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumCompartmentType::
        enumCompartmentType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumCompartmentType::
        enumCompartmentType (const enumCompartmentType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumCompartmentType& enumCompartmentType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumCompartmentType_literals_[v]);

          return *this;
        }


        // CompartmentData
        // 

        const CompartmentData::Name_type& CompartmentData::
        Name () const
        {
          return this->Name_.get ();
        }

        CompartmentData::Name_type& CompartmentData::
        Name ()
        {
          return this->Name_.get ();
        }

        void CompartmentData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void CompartmentData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const CompartmentData::Node_sequence& CompartmentData::
        Node () const
        {
          return this->Node_;
        }

        CompartmentData::Node_sequence& CompartmentData::
        Node ()
        {
          return this->Node_;
        }

        void CompartmentData::
        Node (const Node_sequence& s)
        {
          this->Node_ = s;
        }

        const CompartmentData::Child_sequence& CompartmentData::
        Child () const
        {
          return this->Child_;
        }

        CompartmentData::Child_sequence& CompartmentData::
        Child ()
        {
          return this->Child_;
        }

        void CompartmentData::
        Child (const Child_sequence& s)
        {
          this->Child_ = s;
        }


        // CompartmentLinkData
        // 

        const CompartmentLinkData::Name_type& CompartmentLinkData::
        Name () const
        {
          return this->Name_.get ();
        }

        CompartmentLinkData::Name_type& CompartmentLinkData::
        Name ()
        {
          return this->Name_.get ();
        }

        void CompartmentLinkData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void CompartmentLinkData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const CompartmentLinkData::Path_optional& CompartmentLinkData::
        Path () const
        {
          return this->Path_;
        }

        CompartmentLinkData::Path_optional& CompartmentLinkData::
        Path ()
        {
          return this->Path_;
        }

        void CompartmentLinkData::
        Path (const Path_type& x)
        {
          this->Path_.set (x);
        }

        void CompartmentLinkData::
        Path (const Path_optional& x)
        {
          this->Path_ = x;
        }

        void CompartmentLinkData::
        Path (::std::unique_ptr< Path_type > x)
        {
          this->Path_.set (std::move (x));
        }

        const CompartmentLinkData::SourceCompartment_type& CompartmentLinkData::
        SourceCompartment () const
        {
          return this->SourceCompartment_.get ();
        }

        CompartmentLinkData::SourceCompartment_type& CompartmentLinkData::
        SourceCompartment ()
        {
          return this->SourceCompartment_.get ();
        }

        void CompartmentLinkData::
        SourceCompartment (const SourceCompartment_type& x)
        {
          this->SourceCompartment_.set (x);
        }

        void CompartmentLinkData::
        SourceCompartment (::std::unique_ptr< SourceCompartment_type > x)
        {
          this->SourceCompartment_.set (std::move (x));
        }

        const CompartmentLinkData::TargetCompartment_type& CompartmentLinkData::
        TargetCompartment () const
        {
          return this->TargetCompartment_.get ();
        }

        CompartmentLinkData::TargetCompartment_type& CompartmentLinkData::
        TargetCompartment ()
        {
          return this->TargetCompartment_.get ();
        }

        void CompartmentLinkData::
        TargetCompartment (const TargetCompartment_type& x)
        {
          this->TargetCompartment_.set (x);
        }

        void CompartmentLinkData::
        TargetCompartment (::std::unique_ptr< TargetCompartment_type > x)
        {
          this->TargetCompartment_.set (std::move (x));
        }


        // CompartmentGraphData
        // 

        const CompartmentGraphData::Name_type& CompartmentGraphData::
        Name () const
        {
          return this->Name_.get ();
        }

        CompartmentGraphData::Name_type& CompartmentGraphData::
        Name ()
        {
          return this->Name_.get ();
        }

        void CompartmentGraphData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void CompartmentGraphData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const CompartmentGraphData::Compartment_sequence& CompartmentGraphData::
        Compartment () const
        {
          return this->Compartment_;
        }

        CompartmentGraphData::Compartment_sequence& CompartmentGraphData::
        Compartment ()
        {
          return this->Compartment_;
        }

        void CompartmentGraphData::
        Compartment (const Compartment_sequence& s)
        {
          this->Compartment_ = s;
        }

        const CompartmentGraphData::Link_sequence& CompartmentGraphData::
        Link () const
        {
          return this->Link_;
        }

        CompartmentGraphData::Link_sequence& CompartmentGraphData::
        Link ()
        {
          return this->Link_;
        }

        void CompartmentGraphData::
        Link (const Link_sequence& s)
        {
          this->Link_ = s;
        }


        // FluidCompartmentData
        // 

        const FluidCompartmentData::InFlow_optional& FluidCompartmentData::
        InFlow () const
        {
          return this->InFlow_;
        }

        FluidCompartmentData::InFlow_optional& FluidCompartmentData::
        InFlow ()
        {
          return this->InFlow_;
        }

        void FluidCompartmentData::
        InFlow (const InFlow_type& x)
        {
          this->InFlow_.set (x);
        }

        void FluidCompartmentData::
        InFlow (const InFlow_optional& x)
        {
          this->InFlow_ = x;
        }

        void FluidCompartmentData::
        InFlow (::std::unique_ptr< InFlow_type > x)
        {
          this->InFlow_.set (std::move (x));
        }

        const FluidCompartmentData::OutFlow_optional& FluidCompartmentData::
        OutFlow () const
        {
          return this->OutFlow_;
        }

        FluidCompartmentData::OutFlow_optional& FluidCompartmentData::
        OutFlow ()
        {
          return this->OutFlow_;
        }

        void FluidCompartmentData::
        OutFlow (const OutFlow_type& x)
        {
          this->OutFlow_.set (x);
        }

        void FluidCompartmentData::
        OutFlow (const OutFlow_optional& x)
        {
          this->OutFlow_ = x;
        }

        void FluidCompartmentData::
        OutFlow (::std::unique_ptr< OutFlow_type > x)
        {
          this->OutFlow_.set (std::move (x));
        }

        const FluidCompartmentData::Pressure_optional& FluidCompartmentData::
        Pressure () const
        {
          return this->Pressure_;
        }

        FluidCompartmentData::Pressure_optional& FluidCompartmentData::
        Pressure ()
        {
          return this->Pressure_;
        }

        void FluidCompartmentData::
        Pressure (const Pressure_type& x)
        {
          this->Pressure_.set (x);
        }

        void FluidCompartmentData::
        Pressure (const Pressure_optional& x)
        {
          this->Pressure_ = x;
        }

        void FluidCompartmentData::
        Pressure (::std::unique_ptr< Pressure_type > x)
        {
          this->Pressure_.set (std::move (x));
        }

        const FluidCompartmentData::Volume_optional& FluidCompartmentData::
        Volume () const
        {
          return this->Volume_;
        }

        FluidCompartmentData::Volume_optional& FluidCompartmentData::
        Volume ()
        {
          return this->Volume_;
        }

        void FluidCompartmentData::
        Volume (const Volume_type& x)
        {
          this->Volume_.set (x);
        }

        void FluidCompartmentData::
        Volume (const Volume_optional& x)
        {
          this->Volume_ = x;
        }

        void FluidCompartmentData::
        Volume (::std::unique_ptr< Volume_type > x)
        {
          this->Volume_.set (std::move (x));
        }


        // FluidCompartmentLinkData
        // 

        const FluidCompartmentLinkData::Flow_optional& FluidCompartmentLinkData::
        Flow () const
        {
          return this->Flow_;
        }

        FluidCompartmentLinkData::Flow_optional& FluidCompartmentLinkData::
        Flow ()
        {
          return this->Flow_;
        }

        void FluidCompartmentLinkData::
        Flow (const Flow_type& x)
        {
          this->Flow_.set (x);
        }

        void FluidCompartmentLinkData::
        Flow (const Flow_optional& x)
        {
          this->Flow_ = x;
        }

        void FluidCompartmentLinkData::
        Flow (::std::unique_ptr< Flow_type > x)
        {
          this->Flow_.set (std::move (x));
        }


        // FluidCompartmentGraphData
        // 


        // GasCompartmentData
        // 

        const GasCompartmentData::SubstanceQuantity_sequence& GasCompartmentData::
        SubstanceQuantity () const
        {
          return this->SubstanceQuantity_;
        }

        GasCompartmentData::SubstanceQuantity_sequence& GasCompartmentData::
        SubstanceQuantity ()
        {
          return this->SubstanceQuantity_;
        }

        void GasCompartmentData::
        SubstanceQuantity (const SubstanceQuantity_sequence& s)
        {
          this->SubstanceQuantity_ = s;
        }


        // GasCompartmentLinkData
        // 


        // GasCompartmentGraphData
        // 


        // LiquidCompartmentData
        // 

        const LiquidCompartmentData::pH_optional& LiquidCompartmentData::
        pH () const
        {
          return this->pH_;
        }

        LiquidCompartmentData::pH_optional& LiquidCompartmentData::
        pH ()
        {
          return this->pH_;
        }

        void LiquidCompartmentData::
        pH (const pH_type& x)
        {
          this->pH_.set (x);
        }

        void LiquidCompartmentData::
        pH (const pH_optional& x)
        {
          this->pH_ = x;
        }

        void LiquidCompartmentData::
        pH (::std::unique_ptr< pH_type > x)
        {
          this->pH_.set (std::move (x));
        }

        const LiquidCompartmentData::WaterVolumeFraction_optional& LiquidCompartmentData::
        WaterVolumeFraction () const
        {
          return this->WaterVolumeFraction_;
        }

        LiquidCompartmentData::WaterVolumeFraction_optional& LiquidCompartmentData::
        WaterVolumeFraction ()
        {
          return this->WaterVolumeFraction_;
        }

        void LiquidCompartmentData::
        WaterVolumeFraction (const WaterVolumeFraction_type& x)
        {
          this->WaterVolumeFraction_.set (x);
        }

        void LiquidCompartmentData::
        WaterVolumeFraction (const WaterVolumeFraction_optional& x)
        {
          this->WaterVolumeFraction_ = x;
        }

        void LiquidCompartmentData::
        WaterVolumeFraction (::std::unique_ptr< WaterVolumeFraction_type > x)
        {
          this->WaterVolumeFraction_.set (std::move (x));
        }

        const LiquidCompartmentData::SubstanceQuantity_sequence& LiquidCompartmentData::
        SubstanceQuantity () const
        {
          return this->SubstanceQuantity_;
        }

        LiquidCompartmentData::SubstanceQuantity_sequence& LiquidCompartmentData::
        SubstanceQuantity ()
        {
          return this->SubstanceQuantity_;
        }

        void LiquidCompartmentData::
        SubstanceQuantity (const SubstanceQuantity_sequence& s)
        {
          this->SubstanceQuantity_ = s;
        }


        // LiquidCompartmentLinkData
        // 


        // LiquidCompartmentGraphData
        // 


        // TissueCompartmentData
        // 

        const TissueCompartmentData::AcidicPhospohlipidConcentration_optional& TissueCompartmentData::
        AcidicPhospohlipidConcentration () const
        {
          return this->AcidicPhospohlipidConcentration_;
        }

        TissueCompartmentData::AcidicPhospohlipidConcentration_optional& TissueCompartmentData::
        AcidicPhospohlipidConcentration ()
        {
          return this->AcidicPhospohlipidConcentration_;
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_type& x)
        {
          this->AcidicPhospohlipidConcentration_.set (x);
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_optional& x)
        {
          this->AcidicPhospohlipidConcentration_ = x;
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (::std::unique_ptr< AcidicPhospohlipidConcentration_type > x)
        {
          this->AcidicPhospohlipidConcentration_.set (std::move (x));
        }

        const TissueCompartmentData::MatrixVolume_optional& TissueCompartmentData::
        MatrixVolume () const
        {
          return this->MatrixVolume_;
        }

        TissueCompartmentData::MatrixVolume_optional& TissueCompartmentData::
        MatrixVolume ()
        {
          return this->MatrixVolume_;
        }

        void TissueCompartmentData::
        MatrixVolume (const MatrixVolume_type& x)
        {
          this->MatrixVolume_.set (x);
        }

        void TissueCompartmentData::
        MatrixVolume (const MatrixVolume_optional& x)
        {
          this->MatrixVolume_ = x;
        }

        void TissueCompartmentData::
        MatrixVolume (::std::unique_ptr< MatrixVolume_type > x)
        {
          this->MatrixVolume_.set (std::move (x));
        }

        const TissueCompartmentData::MembranePotential_optional& TissueCompartmentData::
        MembranePotential () const
        {
          return this->MembranePotential_;
        }

        TissueCompartmentData::MembranePotential_optional& TissueCompartmentData::
        MembranePotential ()
        {
          return this->MembranePotential_;
        }

        void TissueCompartmentData::
        MembranePotential (const MembranePotential_type& x)
        {
          this->MembranePotential_.set (x);
        }

        void TissueCompartmentData::
        MembranePotential (const MembranePotential_optional& x)
        {
          this->MembranePotential_ = x;
        }

        void TissueCompartmentData::
        MembranePotential (::std::unique_ptr< MembranePotential_type > x)
        {
          this->MembranePotential_.set (std::move (x));
        }

        const TissueCompartmentData::NeutralLipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralLipidsVolumeFraction () const
        {
          return this->NeutralLipidsVolumeFraction_;
        }

        TissueCompartmentData::NeutralLipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralLipidsVolumeFraction ()
        {
          return this->NeutralLipidsVolumeFraction_;
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_type& x)
        {
          this->NeutralLipidsVolumeFraction_.set (x);
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_optional& x)
        {
          this->NeutralLipidsVolumeFraction_ = x;
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (::std::unique_ptr< NeutralLipidsVolumeFraction_type > x)
        {
          this->NeutralLipidsVolumeFraction_.set (std::move (x));
        }

        const TissueCompartmentData::NeutralPhospholipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction () const
        {
          return this->NeutralPhospholipidsVolumeFraction_;
        }

        TissueCompartmentData::NeutralPhospholipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction ()
        {
          return this->NeutralPhospholipidsVolumeFraction_;
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_type& x)
        {
          this->NeutralPhospholipidsVolumeFraction_.set (x);
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_optional& x)
        {
          this->NeutralPhospholipidsVolumeFraction_ = x;
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (::std::unique_ptr< NeutralPhospholipidsVolumeFraction_type > x)
        {
          this->NeutralPhospholipidsVolumeFraction_.set (std::move (x));
        }

        const TissueCompartmentData::ReflectionCoefficient_optional& TissueCompartmentData::
        ReflectionCoefficient () const
        {
          return this->ReflectionCoefficient_;
        }

        TissueCompartmentData::ReflectionCoefficient_optional& TissueCompartmentData::
        ReflectionCoefficient ()
        {
          return this->ReflectionCoefficient_;
        }

        void TissueCompartmentData::
        ReflectionCoefficient (const ReflectionCoefficient_type& x)
        {
          this->ReflectionCoefficient_.set (x);
        }

        void TissueCompartmentData::
        ReflectionCoefficient (const ReflectionCoefficient_optional& x)
        {
          this->ReflectionCoefficient_ = x;
        }

        void TissueCompartmentData::
        ReflectionCoefficient (::std::unique_ptr< ReflectionCoefficient_type > x)
        {
          this->ReflectionCoefficient_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaAlbuminRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlbuminRatio () const
        {
          return this->TissueToPlasmaAlbuminRatio_;
        }

        TissueCompartmentData::TissueToPlasmaAlbuminRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlbuminRatio ()
        {
          return this->TissueToPlasmaAlbuminRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_type& x)
        {
          this->TissueToPlasmaAlbuminRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_optional& x)
        {
          this->TissueToPlasmaAlbuminRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > x)
        {
          this->TissueToPlasmaAlbuminRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio () const
        {
          return this->TissueToPlasmaAlphaAcidGlycoproteinRatio_;
        }

        TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio ()
        {
          return this->TissueToPlasmaAlphaAcidGlycoproteinRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_type& x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (::std::unique_ptr< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaLipoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio () const
        {
          return this->TissueToPlasmaLipoproteinRatio_;
        }

        TissueCompartmentData::TissueToPlasmaLipoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio ()
        {
          return this->TissueToPlasmaLipoproteinRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_type& x)
        {
          this->TissueToPlasmaLipoproteinRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_optional& x)
        {
          this->TissueToPlasmaLipoproteinRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > x)
        {
          this->TissueToPlasmaLipoproteinRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TotalMass_optional& TissueCompartmentData::
        TotalMass () const
        {
          return this->TotalMass_;
        }

        TissueCompartmentData::TotalMass_optional& TissueCompartmentData::
        TotalMass ()
        {
          return this->TotalMass_;
        }

        void TissueCompartmentData::
        TotalMass (const TotalMass_type& x)
        {
          this->TotalMass_.set (x);
        }

        void TissueCompartmentData::
        TotalMass (const TotalMass_optional& x)
        {
          this->TotalMass_ = x;
        }

        void TissueCompartmentData::
        TotalMass (::std::unique_ptr< TotalMass_type > x)
        {
          this->TotalMass_.set (std::move (x));
        }


        // ThermalCompartmentData
        // 

        const ThermalCompartmentData::HeatTransferRateIn_optional& ThermalCompartmentData::
        HeatTransferRateIn () const
        {
          return this->HeatTransferRateIn_;
        }

        ThermalCompartmentData::HeatTransferRateIn_optional& ThermalCompartmentData::
        HeatTransferRateIn ()
        {
          return this->HeatTransferRateIn_;
        }

        void ThermalCompartmentData::
        HeatTransferRateIn (const HeatTransferRateIn_type& x)
        {
          this->HeatTransferRateIn_.set (x);
        }

        void ThermalCompartmentData::
        HeatTransferRateIn (const HeatTransferRateIn_optional& x)
        {
          this->HeatTransferRateIn_ = x;
        }

        void ThermalCompartmentData::
        HeatTransferRateIn (::std::unique_ptr< HeatTransferRateIn_type > x)
        {
          this->HeatTransferRateIn_.set (std::move (x));
        }

        const ThermalCompartmentData::HeatTransferRateOut_optional& ThermalCompartmentData::
        HeatTransferRateOut () const
        {
          return this->HeatTransferRateOut_;
        }

        ThermalCompartmentData::HeatTransferRateOut_optional& ThermalCompartmentData::
        HeatTransferRateOut ()
        {
          return this->HeatTransferRateOut_;
        }

        void ThermalCompartmentData::
        HeatTransferRateOut (const HeatTransferRateOut_type& x)
        {
          this->HeatTransferRateOut_.set (x);
        }

        void ThermalCompartmentData::
        HeatTransferRateOut (const HeatTransferRateOut_optional& x)
        {
          this->HeatTransferRateOut_ = x;
        }

        void ThermalCompartmentData::
        HeatTransferRateOut (::std::unique_ptr< HeatTransferRateOut_type > x)
        {
          this->HeatTransferRateOut_.set (std::move (x));
        }

        const ThermalCompartmentData::Temperature_optional& ThermalCompartmentData::
        Temperature () const
        {
          return this->Temperature_;
        }

        ThermalCompartmentData::Temperature_optional& ThermalCompartmentData::
        Temperature ()
        {
          return this->Temperature_;
        }

        void ThermalCompartmentData::
        Temperature (const Temperature_type& x)
        {
          this->Temperature_.set (x);
        }

        void ThermalCompartmentData::
        Temperature (const Temperature_optional& x)
        {
          this->Temperature_ = x;
        }

        void ThermalCompartmentData::
        Temperature (::std::unique_ptr< Temperature_type > x)
        {
          this->Temperature_.set (std::move (x));
        }

        const ThermalCompartmentData::Heat_optional& ThermalCompartmentData::
        Heat () const
        {
          return this->Heat_;
        }

        ThermalCompartmentData::Heat_optional& ThermalCompartmentData::
        Heat ()
        {
          return this->Heat_;
        }

        void ThermalCompartmentData::
        Heat (const Heat_type& x)
        {
          this->Heat_.set (x);
        }

        void ThermalCompartmentData::
        Heat (const Heat_optional& x)
        {
          this->Heat_ = x;
        }

        void ThermalCompartmentData::
        Heat (::std::unique_ptr< Heat_type > x)
        {
          this->Heat_.set (std::move (x));
        }


        // ThermalCompartmentLinkData
        // 

        const ThermalCompartmentLinkData::HeatTransferRate_optional& ThermalCompartmentLinkData::
        HeatTransferRate () const
        {
          return this->HeatTransferRate_;
        }

        ThermalCompartmentLinkData::HeatTransferRate_optional& ThermalCompartmentLinkData::
        HeatTransferRate ()
        {
          return this->HeatTransferRate_;
        }

        void ThermalCompartmentLinkData::
        HeatTransferRate (const HeatTransferRate_type& x)
        {
          this->HeatTransferRate_.set (x);
        }

        void ThermalCompartmentLinkData::
        HeatTransferRate (const HeatTransferRate_optional& x)
        {
          this->HeatTransferRate_ = x;
        }

        void ThermalCompartmentLinkData::
        HeatTransferRate (::std::unique_ptr< HeatTransferRate_type > x)
        {
          this->HeatTransferRate_.set (std::move (x));
        }


        // ElectricalCompartmentData
        // 

        const ElectricalCompartmentData::CurrentIn_optional& ElectricalCompartmentData::
        CurrentIn () const
        {
          return this->CurrentIn_;
        }

        ElectricalCompartmentData::CurrentIn_optional& ElectricalCompartmentData::
        CurrentIn ()
        {
          return this->CurrentIn_;
        }

        void ElectricalCompartmentData::
        CurrentIn (const CurrentIn_type& x)
        {
          this->CurrentIn_.set (x);
        }

        void ElectricalCompartmentData::
        CurrentIn (const CurrentIn_optional& x)
        {
          this->CurrentIn_ = x;
        }

        void ElectricalCompartmentData::
        CurrentIn (::std::unique_ptr< CurrentIn_type > x)
        {
          this->CurrentIn_.set (std::move (x));
        }

        const ElectricalCompartmentData::CurrentOut_optional& ElectricalCompartmentData::
        CurrentOut () const
        {
          return this->CurrentOut_;
        }

        ElectricalCompartmentData::CurrentOut_optional& ElectricalCompartmentData::
        CurrentOut ()
        {
          return this->CurrentOut_;
        }

        void ElectricalCompartmentData::
        CurrentOut (const CurrentOut_type& x)
        {
          this->CurrentOut_.set (x);
        }

        void ElectricalCompartmentData::
        CurrentOut (const CurrentOut_optional& x)
        {
          this->CurrentOut_ = x;
        }

        void ElectricalCompartmentData::
        CurrentOut (::std::unique_ptr< CurrentOut_type > x)
        {
          this->CurrentOut_.set (std::move (x));
        }

        const ElectricalCompartmentData::Voltage_optional& ElectricalCompartmentData::
        Voltage () const
        {
          return this->Voltage_;
        }

        ElectricalCompartmentData::Voltage_optional& ElectricalCompartmentData::
        Voltage ()
        {
          return this->Voltage_;
        }

        void ElectricalCompartmentData::
        Voltage (const Voltage_type& x)
        {
          this->Voltage_.set (x);
        }

        void ElectricalCompartmentData::
        Voltage (const Voltage_optional& x)
        {
          this->Voltage_ = x;
        }

        void ElectricalCompartmentData::
        Voltage (::std::unique_ptr< Voltage_type > x)
        {
          this->Voltage_.set (std::move (x));
        }

        const ElectricalCompartmentData::Charge_optional& ElectricalCompartmentData::
        Charge () const
        {
          return this->Charge_;
        }

        ElectricalCompartmentData::Charge_optional& ElectricalCompartmentData::
        Charge ()
        {
          return this->Charge_;
        }

        void ElectricalCompartmentData::
        Charge (const Charge_type& x)
        {
          this->Charge_.set (x);
        }

        void ElectricalCompartmentData::
        Charge (const Charge_optional& x)
        {
          this->Charge_ = x;
        }

        void ElectricalCompartmentData::
        Charge (::std::unique_ptr< Charge_type > x)
        {
          this->Charge_.set (std::move (x));
        }


        // ElectricalCompartmentLinkData
        // 

        const ElectricalCompartmentLinkData::Current_optional& ElectricalCompartmentLinkData::
        Current () const
        {
          return this->Current_;
        }

        ElectricalCompartmentLinkData::Current_optional& ElectricalCompartmentLinkData::
        Current ()
        {
          return this->Current_;
        }

        void ElectricalCompartmentLinkData::
        Current (const Current_type& x)
        {
          this->Current_.set (x);
        }

        void ElectricalCompartmentLinkData::
        Current (const Current_optional& x)
        {
          this->Current_ = x;
        }

        void ElectricalCompartmentLinkData::
        Current (::std::unique_ptr< Current_type > x)
        {
          this->Current_.set (std::move (x));
        }


        // CompartmentManagerData
        // 

        const CompartmentManagerData::ElectricalCompartment_sequence& CompartmentManagerData::
        ElectricalCompartment () const
        {
          return this->ElectricalCompartment_;
        }

        CompartmentManagerData::ElectricalCompartment_sequence& CompartmentManagerData::
        ElectricalCompartment ()
        {
          return this->ElectricalCompartment_;
        }

        void CompartmentManagerData::
        ElectricalCompartment (const ElectricalCompartment_sequence& s)
        {
          this->ElectricalCompartment_ = s;
        }

        const CompartmentManagerData::ElectricalLink_sequence& CompartmentManagerData::
        ElectricalLink () const
        {
          return this->ElectricalLink_;
        }

        CompartmentManagerData::ElectricalLink_sequence& CompartmentManagerData::
        ElectricalLink ()
        {
          return this->ElectricalLink_;
        }

        void CompartmentManagerData::
        ElectricalLink (const ElectricalLink_sequence& s)
        {
          this->ElectricalLink_ = s;
        }

        const CompartmentManagerData::LiquidCompartment_sequence& CompartmentManagerData::
        LiquidCompartment () const
        {
          return this->LiquidCompartment_;
        }

        CompartmentManagerData::LiquidCompartment_sequence& CompartmentManagerData::
        LiquidCompartment ()
        {
          return this->LiquidCompartment_;
        }

        void CompartmentManagerData::
        LiquidCompartment (const LiquidCompartment_sequence& s)
        {
          this->LiquidCompartment_ = s;
        }

        const CompartmentManagerData::LiquidLink_sequence& CompartmentManagerData::
        LiquidLink () const
        {
          return this->LiquidLink_;
        }

        CompartmentManagerData::LiquidLink_sequence& CompartmentManagerData::
        LiquidLink ()
        {
          return this->LiquidLink_;
        }

        void CompartmentManagerData::
        LiquidLink (const LiquidLink_sequence& s)
        {
          this->LiquidLink_ = s;
        }

        const CompartmentManagerData::LiquidSubstance_sequence& CompartmentManagerData::
        LiquidSubstance () const
        {
          return this->LiquidSubstance_;
        }

        CompartmentManagerData::LiquidSubstance_sequence& CompartmentManagerData::
        LiquidSubstance ()
        {
          return this->LiquidSubstance_;
        }

        void CompartmentManagerData::
        LiquidSubstance (const LiquidSubstance_sequence& s)
        {
          this->LiquidSubstance_ = s;
        }

        const CompartmentManagerData::LiquidGraph_sequence& CompartmentManagerData::
        LiquidGraph () const
        {
          return this->LiquidGraph_;
        }

        CompartmentManagerData::LiquidGraph_sequence& CompartmentManagerData::
        LiquidGraph ()
        {
          return this->LiquidGraph_;
        }

        void CompartmentManagerData::
        LiquidGraph (const LiquidGraph_sequence& s)
        {
          this->LiquidGraph_ = s;
        }

        const CompartmentManagerData::GasCompartment_sequence& CompartmentManagerData::
        GasCompartment () const
        {
          return this->GasCompartment_;
        }

        CompartmentManagerData::GasCompartment_sequence& CompartmentManagerData::
        GasCompartment ()
        {
          return this->GasCompartment_;
        }

        void CompartmentManagerData::
        GasCompartment (const GasCompartment_sequence& s)
        {
          this->GasCompartment_ = s;
        }

        const CompartmentManagerData::GasLink_sequence& CompartmentManagerData::
        GasLink () const
        {
          return this->GasLink_;
        }

        CompartmentManagerData::GasLink_sequence& CompartmentManagerData::
        GasLink ()
        {
          return this->GasLink_;
        }

        void CompartmentManagerData::
        GasLink (const GasLink_sequence& s)
        {
          this->GasLink_ = s;
        }

        const CompartmentManagerData::GasSubstance_sequence& CompartmentManagerData::
        GasSubstance () const
        {
          return this->GasSubstance_;
        }

        CompartmentManagerData::GasSubstance_sequence& CompartmentManagerData::
        GasSubstance ()
        {
          return this->GasSubstance_;
        }

        void CompartmentManagerData::
        GasSubstance (const GasSubstance_sequence& s)
        {
          this->GasSubstance_ = s;
        }

        const CompartmentManagerData::GasGraph_sequence& CompartmentManagerData::
        GasGraph () const
        {
          return this->GasGraph_;
        }

        CompartmentManagerData::GasGraph_sequence& CompartmentManagerData::
        GasGraph ()
        {
          return this->GasGraph_;
        }

        void CompartmentManagerData::
        GasGraph (const GasGraph_sequence& s)
        {
          this->GasGraph_ = s;
        }

        const CompartmentManagerData::ThermalCompartment_sequence& CompartmentManagerData::
        ThermalCompartment () const
        {
          return this->ThermalCompartment_;
        }

        CompartmentManagerData::ThermalCompartment_sequence& CompartmentManagerData::
        ThermalCompartment ()
        {
          return this->ThermalCompartment_;
        }

        void CompartmentManagerData::
        ThermalCompartment (const ThermalCompartment_sequence& s)
        {
          this->ThermalCompartment_ = s;
        }

        const CompartmentManagerData::ThermalLink_sequence& CompartmentManagerData::
        ThermalLink () const
        {
          return this->ThermalLink_;
        }

        CompartmentManagerData::ThermalLink_sequence& CompartmentManagerData::
        ThermalLink ()
        {
          return this->ThermalLink_;
        }

        void CompartmentManagerData::
        ThermalLink (const ThermalLink_sequence& s)
        {
          this->ThermalLink_ = s;
        }

        const CompartmentManagerData::TissueCompartment_sequence& CompartmentManagerData::
        TissueCompartment () const
        {
          return this->TissueCompartment_;
        }

        CompartmentManagerData::TissueCompartment_sequence& CompartmentManagerData::
        TissueCompartment ()
        {
          return this->TissueCompartment_;
        }

        void CompartmentManagerData::
        TissueCompartment (const TissueCompartment_sequence& s)
        {
          this->TissueCompartment_ = s;
        }

        const CompartmentManagerData::TissueSubstance_sequence& CompartmentManagerData::
        TissueSubstance () const
        {
          return this->TissueSubstance_;
        }

        CompartmentManagerData::TissueSubstance_sequence& CompartmentManagerData::
        TissueSubstance ()
        {
          return this->TissueSubstance_;
        }

        void CompartmentManagerData::
        TissueSubstance (const TissueSubstance_sequence& s)
        {
          this->TissueSubstance_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // enumCompartmentType
        //

        enumCompartmentType::
        enumCompartmentType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumCompartmentType_convert ();
        }

        enumCompartmentType::
        enumCompartmentType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumCompartmentType_convert ();
        }

        enumCompartmentType::
        enumCompartmentType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumCompartmentType_convert ();
        }

        enumCompartmentType* enumCompartmentType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumCompartmentType (*this, f, c);
        }

        enumCompartmentType::value enumCompartmentType::
        _xsd_enumCompartmentType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumCompartmentType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumCompartmentType_indexes_,
                            _xsd_enumCompartmentType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_enumCompartmentType_indexes_ + 5 || _xsd_enumCompartmentType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumCompartmentType::
        _xsd_enumCompartmentType_literals_[5] =
        {
          "Electrical",
          "Gas",
          "Liquid",
          "Thermal",
          "Tissue"
        };

        const enumCompartmentType::value enumCompartmentType::
        _xsd_enumCompartmentType_indexes_[5] =
        {
          ::mil::tatrc::physiology::datamodel::enumCompartmentType::Electrical,
          ::mil::tatrc::physiology::datamodel::enumCompartmentType::Gas,
          ::mil::tatrc::physiology::datamodel::enumCompartmentType::Liquid,
          ::mil::tatrc::physiology::datamodel::enumCompartmentType::Thermal,
          ::mil::tatrc::physiology::datamodel::enumCompartmentType::Tissue
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumCompartmentType >
        _xsd_enumCompartmentType_type_factory_init (
          "enumCompartmentType",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentData
        //

        CompartmentData::
        CompartmentData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          Node_ (this),
          Child_ (this)
        {
        }

        CompartmentData::
        CompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (Name, this),
          Node_ (this),
          Child_ (this)
        {
        }

        CompartmentData::
        CompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (std::move (Name), this),
          Node_ (this),
          Child_ (this)
        {
        }

        CompartmentData::
        CompartmentData (const CompartmentData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          Node_ (x.Node_, f, this),
          Child_ (x.Child_, f, this)
        {
        }

        CompartmentData::
        CompartmentData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Node_ (this),
          Child_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Name_.present ())
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Node
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Node",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Node_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Node_type > r (
                  dynamic_cast< Node_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Node_.push_back (::std::move (r));
                continue;
              }
            }

            // Child
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Child",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Child_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Child_type > r (
                  dynamic_cast< Child_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Child_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Name",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        CompartmentData* CompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentData (*this, f, c);
        }

        CompartmentData& CompartmentData::
        operator= (const CompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Node_ = x.Node_;
            this->Child_ = x.Child_;
          }

          return *this;
        }

        CompartmentData::
        ~CompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentData >
        _xsd_CompartmentData_type_factory_init (
          "CompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentLinkData
        //

        CompartmentLinkData::
        CompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          Path_ (this),
          SourceCompartment_ (this),
          TargetCompartment_ (this)
        {
        }

        CompartmentLinkData::
        CompartmentLinkData (const Name_type& Name,
                             const SourceCompartment_type& SourceCompartment,
                             const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (Name, this),
          Path_ (this),
          SourceCompartment_ (SourceCompartment, this),
          TargetCompartment_ (TargetCompartment, this)
        {
        }

        CompartmentLinkData::
        CompartmentLinkData (::std::unique_ptr< Name_type > Name,
                             ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                             ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (std::move (Name), this),
          Path_ (this),
          SourceCompartment_ (std::move (SourceCompartment), this),
          TargetCompartment_ (std::move (TargetCompartment), this)
        {
        }

        CompartmentLinkData::
        CompartmentLinkData (const CompartmentLinkData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          Path_ (x.Path_, f, this),
          SourceCompartment_ (x.SourceCompartment_, f, this),
          TargetCompartment_ (x.TargetCompartment_, f, this)
        {
        }

        CompartmentLinkData::
        CompartmentLinkData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Path_ (this),
          SourceCompartment_ (this),
          TargetCompartment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentLinkData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Name_.present ())
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Path
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Path",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Path_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Path_)
                {
                  ::std::unique_ptr< Path_type > r (
                    dynamic_cast< Path_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Path_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SourceCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SourceCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SourceCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SourceCompartment_.present ())
                {
                  ::std::unique_ptr< SourceCompartment_type > r (
                    dynamic_cast< SourceCompartment_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SourceCompartment_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TargetCompartment_.present ())
                {
                  ::std::unique_ptr< TargetCompartment_type > r (
                    dynamic_cast< TargetCompartment_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetCompartment_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Name",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SourceCompartment_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SourceCompartment",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TargetCompartment_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TargetCompartment",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        CompartmentLinkData* CompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentLinkData (*this, f, c);
        }

        CompartmentLinkData& CompartmentLinkData::
        operator= (const CompartmentLinkData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Path_ = x.Path_;
            this->SourceCompartment_ = x.SourceCompartment_;
            this->TargetCompartment_ = x.TargetCompartment_;
          }

          return *this;
        }

        CompartmentLinkData::
        ~CompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentLinkData >
        _xsd_CompartmentLinkData_type_factory_init (
          "CompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentGraphData
        //

        CompartmentGraphData::
        CompartmentGraphData ()
        : ::xml_schema::type (),
          Name_ (this),
          Compartment_ (this),
          Link_ (this)
        {
        }

        CompartmentGraphData::
        CompartmentGraphData (const Name_type& Name)
        : ::xml_schema::type (),
          Name_ (Name, this),
          Compartment_ (this),
          Link_ (this)
        {
        }

        CompartmentGraphData::
        CompartmentGraphData (::std::unique_ptr< Name_type > Name)
        : ::xml_schema::type (),
          Name_ (std::move (Name), this),
          Compartment_ (this),
          Link_ (this)
        {
        }

        CompartmentGraphData::
        CompartmentGraphData (const CompartmentGraphData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Name_ (x.Name_, f, this),
          Compartment_ (x.Compartment_, f, this),
          Link_ (x.Link_, f, this)
        {
        }

        CompartmentGraphData::
        CompartmentGraphData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Compartment_ (this),
          Link_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void CompartmentGraphData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Name_.present ())
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Compartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Compartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Compartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Compartment_type > r (
                  dynamic_cast< Compartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Compartment_.push_back (::std::move (r));
                continue;
              }
            }

            // Link
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Link",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Link_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Link_type > r (
                  dynamic_cast< Link_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Link_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Name",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        CompartmentGraphData* CompartmentGraphData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentGraphData (*this, f, c);
        }

        CompartmentGraphData& CompartmentGraphData::
        operator= (const CompartmentGraphData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Name_ = x.Name_;
            this->Compartment_ = x.Compartment_;
            this->Link_ = x.Link_;
          }

          return *this;
        }

        CompartmentGraphData::
        ~CompartmentGraphData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentGraphData >
        _xsd_CompartmentGraphData_type_factory_init (
          "CompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");

        // FluidCompartmentData
        //

        FluidCompartmentData::
        FluidCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentData (),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (Name),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (std::move (Name)),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const FluidCompartmentData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (x, f, c),
          InFlow_ (x.InFlow_, f, this),
          OutFlow_ (x.OutFlow_, f, this),
          Pressure_ (x.Pressure_, f, this),
          Volume_ (x.Volume_, f, this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (e, f | ::xml_schema::flags::base, c),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void FluidCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InFlow_)
                {
                  ::std::unique_ptr< InFlow_type > r (
                    dynamic_cast< InFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OutFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OutFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OutFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OutFlow_)
                {
                  ::std::unique_ptr< OutFlow_type > r (
                    dynamic_cast< OutFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OutFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Pressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pressure_)
                {
                  ::std::unique_ptr< Pressure_type > r (
                    dynamic_cast< Pressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Volume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Volume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Volume_)
                {
                  ::std::unique_ptr< Volume_type > r (
                    dynamic_cast< Volume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Volume_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        FluidCompartmentData* FluidCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class FluidCompartmentData (*this, f, c);
        }

        FluidCompartmentData& FluidCompartmentData::
        operator= (const FluidCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentData& > (*this) = x;
            this->InFlow_ = x.InFlow_;
            this->OutFlow_ = x.OutFlow_;
            this->Pressure_ = x.Pressure_;
            this->Volume_ = x.Volume_;
          }

          return *this;
        }

        FluidCompartmentData::
        ~FluidCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_type_factory_init (
          "FluidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // FluidCompartmentLinkData
        //

        FluidCompartmentLinkData::
        FluidCompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (),
          Flow_ (this)
        {
        }

        FluidCompartmentLinkData::
        FluidCompartmentLinkData (const Name_type& Name,
                                  const SourceCompartment_type& SourceCompartment,
                                  const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (Name,
                                                                    SourceCompartment,
                                                                    TargetCompartment),
          Flow_ (this)
        {
        }

        FluidCompartmentLinkData::
        FluidCompartmentLinkData (::std::unique_ptr< Name_type > Name,
                                  ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                                  ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (std::move (Name),
                                                                    std::move (SourceCompartment),
                                                                    std::move (TargetCompartment)),
          Flow_ (this)
        {
        }

        FluidCompartmentLinkData::
        FluidCompartmentLinkData (const FluidCompartmentLinkData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (x, f, c),
          Flow_ (x.Flow_, f, this)
        {
        }

        FluidCompartmentLinkData::
        FluidCompartmentLinkData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (e, f | ::xml_schema::flags::base, c),
          Flow_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void FluidCompartmentLinkData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentLinkData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Flow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Flow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Flow_)
                {
                  ::std::unique_ptr< Flow_type > r (
                    dynamic_cast< Flow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Flow_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        FluidCompartmentLinkData* FluidCompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class FluidCompartmentLinkData (*this, f, c);
        }

        FluidCompartmentLinkData& FluidCompartmentLinkData::
        operator= (const FluidCompartmentLinkData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (*this) = x;
            this->Flow_ = x.Flow_;
          }

          return *this;
        }

        FluidCompartmentLinkData::
        ~FluidCompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, FluidCompartmentLinkData >
        _xsd_FluidCompartmentLinkData_type_factory_init (
          "FluidCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // FluidCompartmentGraphData
        //

        FluidCompartmentGraphData::
        FluidCompartmentGraphData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentGraphData ()
        {
        }

        FluidCompartmentGraphData::
        FluidCompartmentGraphData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentGraphData (Name)
        {
        }

        FluidCompartmentGraphData::
        FluidCompartmentGraphData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentGraphData (std::move (Name))
        {
        }

        FluidCompartmentGraphData::
        FluidCompartmentGraphData (const FluidCompartmentGraphData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentGraphData (x, f, c)
        {
        }

        FluidCompartmentGraphData::
        FluidCompartmentGraphData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentGraphData (e, f, c)
        {
        }

        FluidCompartmentGraphData* FluidCompartmentGraphData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class FluidCompartmentGraphData (*this, f, c);
        }

        FluidCompartmentGraphData::
        ~FluidCompartmentGraphData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, FluidCompartmentGraphData >
        _xsd_FluidCompartmentGraphData_type_factory_init (
          "FluidCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GasCompartmentData
        //

        GasCompartmentData::
        GasCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (),
          SubstanceQuantity_ (this)
        {
        }

        GasCompartmentData::
        GasCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (Name),
          SubstanceQuantity_ (this)
        {
        }

        GasCompartmentData::
        GasCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (std::move (Name)),
          SubstanceQuantity_ (this)
        {
        }

        GasCompartmentData::
        GasCompartmentData (const GasCompartmentData& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (x, f, c),
          SubstanceQuantity_ (x.SubstanceQuantity_, f, this)
        {
        }

        GasCompartmentData::
        GasCompartmentData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (e, f | ::xml_schema::flags::base, c),
          SubstanceQuantity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void GasCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::FluidCompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SubstanceQuantity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SubstanceQuantity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SubstanceQuantity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< SubstanceQuantity_type > r (
                  dynamic_cast< SubstanceQuantity_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->SubstanceQuantity_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        GasCompartmentData* GasCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GasCompartmentData (*this, f, c);
        }

        GasCompartmentData& GasCompartmentData::
        operator= (const GasCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (*this) = x;
            this->SubstanceQuantity_ = x.SubstanceQuantity_;
          }

          return *this;
        }

        GasCompartmentData::
        ~GasCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GasCompartmentData >
        _xsd_GasCompartmentData_type_factory_init (
          "GasCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GasCompartmentLinkData
        //

        GasCompartmentLinkData::
        GasCompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData ()
        {
        }

        GasCompartmentLinkData::
        GasCompartmentLinkData (const Name_type& Name,
                                const SourceCompartment_type& SourceCompartment,
                                const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (Name,
                                                                         SourceCompartment,
                                                                         TargetCompartment)
        {
        }

        GasCompartmentLinkData::
        GasCompartmentLinkData (::std::unique_ptr< Name_type > Name,
                                ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                                ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (std::move (Name),
                                                                         std::move (SourceCompartment),
                                                                         std::move (TargetCompartment))
        {
        }

        GasCompartmentLinkData::
        GasCompartmentLinkData (const GasCompartmentLinkData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (x, f, c)
        {
        }

        GasCompartmentLinkData::
        GasCompartmentLinkData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (e, f, c)
        {
        }

        GasCompartmentLinkData* GasCompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GasCompartmentLinkData (*this, f, c);
        }

        GasCompartmentLinkData::
        ~GasCompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GasCompartmentLinkData >
        _xsd_GasCompartmentLinkData_type_factory_init (
          "GasCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GasCompartmentGraphData
        //

        GasCompartmentGraphData::
        GasCompartmentGraphData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData ()
        {
        }

        GasCompartmentGraphData::
        GasCompartmentGraphData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (Name)
        {
        }

        GasCompartmentGraphData::
        GasCompartmentGraphData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (std::move (Name))
        {
        }

        GasCompartmentGraphData::
        GasCompartmentGraphData (const GasCompartmentGraphData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (x, f, c)
        {
        }

        GasCompartmentGraphData::
        GasCompartmentGraphData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (e, f, c)
        {
        }

        GasCompartmentGraphData* GasCompartmentGraphData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GasCompartmentGraphData (*this, f, c);
        }

        GasCompartmentGraphData::
        ~GasCompartmentGraphData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GasCompartmentGraphData >
        _xsd_GasCompartmentGraphData_type_factory_init (
          "GasCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LiquidCompartmentData
        //

        LiquidCompartmentData::
        LiquidCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (),
          pH_ (this),
          WaterVolumeFraction_ (this),
          SubstanceQuantity_ (this)
        {
        }

        LiquidCompartmentData::
        LiquidCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (Name),
          pH_ (this),
          WaterVolumeFraction_ (this),
          SubstanceQuantity_ (this)
        {
        }

        LiquidCompartmentData::
        LiquidCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (std::move (Name)),
          pH_ (this),
          WaterVolumeFraction_ (this),
          SubstanceQuantity_ (this)
        {
        }

        LiquidCompartmentData::
        LiquidCompartmentData (const LiquidCompartmentData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (x, f, c),
          pH_ (x.pH_, f, this),
          WaterVolumeFraction_ (x.WaterVolumeFraction_, f, this),
          SubstanceQuantity_ (x.SubstanceQuantity_, f, this)
        {
        }

        LiquidCompartmentData::
        LiquidCompartmentData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentData (e, f | ::xml_schema::flags::base, c),
          pH_ (this),
          WaterVolumeFraction_ (this),
          SubstanceQuantity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void LiquidCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::FluidCompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // pH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< pH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->pH_)
                {
                  ::std::unique_ptr< pH_type > r (
                    dynamic_cast< pH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->pH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WaterVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WaterVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WaterVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WaterVolumeFraction_)
                {
                  ::std::unique_ptr< WaterVolumeFraction_type > r (
                    dynamic_cast< WaterVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WaterVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SubstanceQuantity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SubstanceQuantity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SubstanceQuantity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< SubstanceQuantity_type > r (
                  dynamic_cast< SubstanceQuantity_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->SubstanceQuantity_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        LiquidCompartmentData* LiquidCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LiquidCompartmentData (*this, f, c);
        }

        LiquidCompartmentData& LiquidCompartmentData::
        operator= (const LiquidCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (*this) = x;
            this->pH_ = x.pH_;
            this->WaterVolumeFraction_ = x.WaterVolumeFraction_;
            this->SubstanceQuantity_ = x.SubstanceQuantity_;
          }

          return *this;
        }

        LiquidCompartmentData::
        ~LiquidCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidCompartmentData >
        _xsd_LiquidCompartmentData_type_factory_init (
          "LiquidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LiquidCompartmentLinkData
        //

        LiquidCompartmentLinkData::
        LiquidCompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData ()
        {
        }

        LiquidCompartmentLinkData::
        LiquidCompartmentLinkData (const Name_type& Name,
                                   const SourceCompartment_type& SourceCompartment,
                                   const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (Name,
                                                                         SourceCompartment,
                                                                         TargetCompartment)
        {
        }

        LiquidCompartmentLinkData::
        LiquidCompartmentLinkData (::std::unique_ptr< Name_type > Name,
                                   ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                                   ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (std::move (Name),
                                                                         std::move (SourceCompartment),
                                                                         std::move (TargetCompartment))
        {
        }

        LiquidCompartmentLinkData::
        LiquidCompartmentLinkData (const LiquidCompartmentLinkData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (x, f, c)
        {
        }

        LiquidCompartmentLinkData::
        LiquidCompartmentLinkData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData (e, f, c)
        {
        }

        LiquidCompartmentLinkData* LiquidCompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LiquidCompartmentLinkData (*this, f, c);
        }

        LiquidCompartmentLinkData::
        ~LiquidCompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidCompartmentLinkData >
        _xsd_LiquidCompartmentLinkData_type_factory_init (
          "LiquidCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LiquidCompartmentGraphData
        //

        LiquidCompartmentGraphData::
        LiquidCompartmentGraphData ()
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData ()
        {
        }

        LiquidCompartmentGraphData::
        LiquidCompartmentGraphData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (Name)
        {
        }

        LiquidCompartmentGraphData::
        LiquidCompartmentGraphData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (std::move (Name))
        {
        }

        LiquidCompartmentGraphData::
        LiquidCompartmentGraphData (const LiquidCompartmentGraphData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (x, f, c)
        {
        }

        LiquidCompartmentGraphData::
        LiquidCompartmentGraphData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData (e, f, c)
        {
        }

        LiquidCompartmentGraphData* LiquidCompartmentGraphData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LiquidCompartmentGraphData (*this, f, c);
        }

        LiquidCompartmentGraphData::
        ~LiquidCompartmentGraphData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidCompartmentGraphData >
        _xsd_LiquidCompartmentGraphData_type_factory_init (
          "LiquidCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TissueCompartmentData
        //

        TissueCompartmentData::
        TissueCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentData (),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (Name),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (std::move (Name)),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const TissueCompartmentData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (x, f, c),
          AcidicPhospohlipidConcentration_ (x.AcidicPhospohlipidConcentration_, f, this),
          MatrixVolume_ (x.MatrixVolume_, f, this),
          MembranePotential_ (x.MembranePotential_, f, this),
          NeutralLipidsVolumeFraction_ (x.NeutralLipidsVolumeFraction_, f, this),
          NeutralPhospholipidsVolumeFraction_ (x.NeutralPhospholipidsVolumeFraction_, f, this),
          ReflectionCoefficient_ (x.ReflectionCoefficient_, f, this),
          TissueToPlasmaAlbuminRatio_ (x.TissueToPlasmaAlbuminRatio_, f, this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (x.TissueToPlasmaAlphaAcidGlycoproteinRatio_, f, this),
          TissueToPlasmaLipoproteinRatio_ (x.TissueToPlasmaLipoproteinRatio_, f, this),
          TotalMass_ (x.TotalMass_, f, this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (e, f | ::xml_schema::flags::base, c),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TissueCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AcidicPhospohlipidConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AcidicPhospohlipidConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AcidicPhospohlipidConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AcidicPhospohlipidConcentration_)
                {
                  ::std::unique_ptr< AcidicPhospohlipidConcentration_type > r (
                    dynamic_cast< AcidicPhospohlipidConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AcidicPhospohlipidConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MatrixVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MatrixVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MatrixVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MatrixVolume_)
                {
                  ::std::unique_ptr< MatrixVolume_type > r (
                    dynamic_cast< MatrixVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MatrixVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MembranePotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MembranePotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MembranePotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MembranePotential_)
                {
                  ::std::unique_ptr< MembranePotential_type > r (
                    dynamic_cast< MembranePotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MembranePotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutralLipidsVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutralLipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutralLipidsVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeutralLipidsVolumeFraction_)
                {
                  ::std::unique_ptr< NeutralLipidsVolumeFraction_type > r (
                    dynamic_cast< NeutralLipidsVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutralLipidsVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutralPhospholipidsVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutralPhospholipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutralPhospholipidsVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeutralPhospholipidsVolumeFraction_)
                {
                  ::std::unique_ptr< NeutralPhospholipidsVolumeFraction_type > r (
                    dynamic_cast< NeutralPhospholipidsVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutralPhospholipidsVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReflectionCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReflectionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReflectionCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReflectionCoefficient_)
                {
                  ::std::unique_ptr< ReflectionCoefficient_type > r (
                    dynamic_cast< ReflectionCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReflectionCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaAlbuminRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaAlbuminRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaAlbuminRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaAlbuminRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > r (
                    dynamic_cast< TissueToPlasmaAlbuminRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaAlbuminRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaAlphaAcidGlycoproteinRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaAlphaAcidGlycoproteinRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaAlphaAcidGlycoproteinRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > r (
                    dynamic_cast< TissueToPlasmaAlphaAcidGlycoproteinRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaLipoproteinRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaLipoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaLipoproteinRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaLipoproteinRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > r (
                    dynamic_cast< TissueToPlasmaLipoproteinRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaLipoproteinRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalMass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalMass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalMass_)
                {
                  ::std::unique_ptr< TotalMass_type > r (
                    dynamic_cast< TotalMass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalMass_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        TissueCompartmentData* TissueCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueCompartmentData (*this, f, c);
        }

        TissueCompartmentData& TissueCompartmentData::
        operator= (const TissueCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentData& > (*this) = x;
            this->AcidicPhospohlipidConcentration_ = x.AcidicPhospohlipidConcentration_;
            this->MatrixVolume_ = x.MatrixVolume_;
            this->MembranePotential_ = x.MembranePotential_;
            this->NeutralLipidsVolumeFraction_ = x.NeutralLipidsVolumeFraction_;
            this->NeutralPhospholipidsVolumeFraction_ = x.NeutralPhospholipidsVolumeFraction_;
            this->ReflectionCoefficient_ = x.ReflectionCoefficient_;
            this->TissueToPlasmaAlbuminRatio_ = x.TissueToPlasmaAlbuminRatio_;
            this->TissueToPlasmaAlphaAcidGlycoproteinRatio_ = x.TissueToPlasmaAlphaAcidGlycoproteinRatio_;
            this->TissueToPlasmaLipoproteinRatio_ = x.TissueToPlasmaLipoproteinRatio_;
            this->TotalMass_ = x.TotalMass_;
          }

          return *this;
        }

        TissueCompartmentData::
        ~TissueCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_type_factory_init (
          "TissueCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ThermalCompartmentData
        //

        ThermalCompartmentData::
        ThermalCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentData (),
          HeatTransferRateIn_ (this),
          HeatTransferRateOut_ (this),
          Temperature_ (this),
          Heat_ (this)
        {
        }

        ThermalCompartmentData::
        ThermalCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (Name),
          HeatTransferRateIn_ (this),
          HeatTransferRateOut_ (this),
          Temperature_ (this),
          Heat_ (this)
        {
        }

        ThermalCompartmentData::
        ThermalCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (std::move (Name)),
          HeatTransferRateIn_ (this),
          HeatTransferRateOut_ (this),
          Temperature_ (this),
          Heat_ (this)
        {
        }

        ThermalCompartmentData::
        ThermalCompartmentData (const ThermalCompartmentData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (x, f, c),
          HeatTransferRateIn_ (x.HeatTransferRateIn_, f, this),
          HeatTransferRateOut_ (x.HeatTransferRateOut_, f, this),
          Temperature_ (x.Temperature_, f, this),
          Heat_ (x.Heat_, f, this)
        {
        }

        ThermalCompartmentData::
        ThermalCompartmentData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (e, f | ::xml_schema::flags::base, c),
          HeatTransferRateIn_ (this),
          HeatTransferRateOut_ (this),
          Temperature_ (this),
          Heat_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ThermalCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // HeatTransferRateIn
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatTransferRateIn",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatTransferRateIn_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatTransferRateIn_)
                {
                  ::std::unique_ptr< HeatTransferRateIn_type > r (
                    dynamic_cast< HeatTransferRateIn_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatTransferRateIn_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeatTransferRateOut
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatTransferRateOut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatTransferRateOut_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatTransferRateOut_)
                {
                  ::std::unique_ptr< HeatTransferRateOut_type > r (
                    dynamic_cast< HeatTransferRateOut_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatTransferRateOut_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Temperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Temperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Temperature_)
                {
                  ::std::unique_ptr< Temperature_type > r (
                    dynamic_cast< Temperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Temperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Heat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Heat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Heat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Heat_)
                {
                  ::std::unique_ptr< Heat_type > r (
                    dynamic_cast< Heat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Heat_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ThermalCompartmentData* ThermalCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ThermalCompartmentData (*this, f, c);
        }

        ThermalCompartmentData& ThermalCompartmentData::
        operator= (const ThermalCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentData& > (*this) = x;
            this->HeatTransferRateIn_ = x.HeatTransferRateIn_;
            this->HeatTransferRateOut_ = x.HeatTransferRateOut_;
            this->Temperature_ = x.Temperature_;
            this->Heat_ = x.Heat_;
          }

          return *this;
        }

        ThermalCompartmentData::
        ~ThermalCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ThermalCompartmentData >
        _xsd_ThermalCompartmentData_type_factory_init (
          "ThermalCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ThermalCompartmentLinkData
        //

        ThermalCompartmentLinkData::
        ThermalCompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (),
          HeatTransferRate_ (this)
        {
        }

        ThermalCompartmentLinkData::
        ThermalCompartmentLinkData (const Name_type& Name,
                                    const SourceCompartment_type& SourceCompartment,
                                    const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (Name,
                                                                    SourceCompartment,
                                                                    TargetCompartment),
          HeatTransferRate_ (this)
        {
        }

        ThermalCompartmentLinkData::
        ThermalCompartmentLinkData (::std::unique_ptr< Name_type > Name,
                                    ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                                    ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (std::move (Name),
                                                                    std::move (SourceCompartment),
                                                                    std::move (TargetCompartment)),
          HeatTransferRate_ (this)
        {
        }

        ThermalCompartmentLinkData::
        ThermalCompartmentLinkData (const ThermalCompartmentLinkData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (x, f, c),
          HeatTransferRate_ (x.HeatTransferRate_, f, this)
        {
        }

        ThermalCompartmentLinkData::
        ThermalCompartmentLinkData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (e, f | ::xml_schema::flags::base, c),
          HeatTransferRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ThermalCompartmentLinkData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentLinkData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // HeatTransferRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatTransferRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatTransferRate_)
                {
                  ::std::unique_ptr< HeatTransferRate_type > r (
                    dynamic_cast< HeatTransferRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatTransferRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ThermalCompartmentLinkData* ThermalCompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ThermalCompartmentLinkData (*this, f, c);
        }

        ThermalCompartmentLinkData& ThermalCompartmentLinkData::
        operator= (const ThermalCompartmentLinkData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (*this) = x;
            this->HeatTransferRate_ = x.HeatTransferRate_;
          }

          return *this;
        }

        ThermalCompartmentLinkData::
        ~ThermalCompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ThermalCompartmentLinkData >
        _xsd_ThermalCompartmentLinkData_type_factory_init (
          "ThermalCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ElectricalCompartmentData
        //

        ElectricalCompartmentData::
        ElectricalCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          CurrentIn_ (this),
          CurrentOut_ (this),
          Voltage_ (this),
          Charge_ (this)
        {
        }

        ElectricalCompartmentData::
        ElectricalCompartmentData (const ElectricalCompartmentData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          CurrentIn_ (x.CurrentIn_, f, this),
          CurrentOut_ (x.CurrentOut_, f, this),
          Voltage_ (x.Voltage_, f, this),
          Charge_ (x.Charge_, f, this)
        {
        }

        ElectricalCompartmentData::
        ElectricalCompartmentData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          CurrentIn_ (this),
          CurrentOut_ (this),
          Voltage_ (this),
          Charge_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectricalCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CurrentIn
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CurrentIn",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CurrentIn_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CurrentIn_)
                {
                  ::std::unique_ptr< CurrentIn_type > r (
                    dynamic_cast< CurrentIn_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CurrentIn_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CurrentOut
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CurrentOut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CurrentOut_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CurrentOut_)
                {
                  ::std::unique_ptr< CurrentOut_type > r (
                    dynamic_cast< CurrentOut_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CurrentOut_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Voltage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Voltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Voltage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Voltage_)
                {
                  ::std::unique_ptr< Voltage_type > r (
                    dynamic_cast< Voltage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Voltage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Charge
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Charge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Charge_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Charge_)
                {
                  ::std::unique_ptr< Charge_type > r (
                    dynamic_cast< Charge_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Charge_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ElectricalCompartmentData* ElectricalCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectricalCompartmentData (*this, f, c);
        }

        ElectricalCompartmentData& ElectricalCompartmentData::
        operator= (const ElectricalCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->CurrentIn_ = x.CurrentIn_;
            this->CurrentOut_ = x.CurrentOut_;
            this->Voltage_ = x.Voltage_;
            this->Charge_ = x.Charge_;
          }

          return *this;
        }

        ElectricalCompartmentData::
        ~ElectricalCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectricalCompartmentData >
        _xsd_ElectricalCompartmentData_type_factory_init (
          "ElectricalCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ElectricalCompartmentLinkData
        //

        ElectricalCompartmentLinkData::
        ElectricalCompartmentLinkData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (),
          Current_ (this)
        {
        }

        ElectricalCompartmentLinkData::
        ElectricalCompartmentLinkData (const Name_type& Name,
                                       const SourceCompartment_type& SourceCompartment,
                                       const TargetCompartment_type& TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (Name,
                                                                    SourceCompartment,
                                                                    TargetCompartment),
          Current_ (this)
        {
        }

        ElectricalCompartmentLinkData::
        ElectricalCompartmentLinkData (::std::unique_ptr< Name_type > Name,
                                       ::std::unique_ptr< SourceCompartment_type > SourceCompartment,
                                       ::std::unique_ptr< TargetCompartment_type > TargetCompartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (std::move (Name),
                                                                    std::move (SourceCompartment),
                                                                    std::move (TargetCompartment)),
          Current_ (this)
        {
        }

        ElectricalCompartmentLinkData::
        ElectricalCompartmentLinkData (const ElectricalCompartmentLinkData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (x, f, c),
          Current_ (x.Current_, f, this)
        {
        }

        ElectricalCompartmentLinkData::
        ElectricalCompartmentLinkData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentLinkData (e, f | ::xml_schema::flags::base, c),
          Current_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectricalCompartmentLinkData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentLinkData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Current
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Current",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Current_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Current_)
                {
                  ::std::unique_ptr< Current_type > r (
                    dynamic_cast< Current_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Current_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ElectricalCompartmentLinkData* ElectricalCompartmentLinkData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectricalCompartmentLinkData (*this, f, c);
        }

        ElectricalCompartmentLinkData& ElectricalCompartmentLinkData::
        operator= (const ElectricalCompartmentLinkData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (*this) = x;
            this->Current_ = x.Current_;
          }

          return *this;
        }

        ElectricalCompartmentLinkData::
        ~ElectricalCompartmentLinkData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectricalCompartmentLinkData >
        _xsd_ElectricalCompartmentLinkData_type_factory_init (
          "ElectricalCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentManagerData
        //

        CompartmentManagerData::
        CompartmentManagerData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          ElectricalCompartment_ (this),
          ElectricalLink_ (this),
          LiquidCompartment_ (this),
          LiquidLink_ (this),
          LiquidSubstance_ (this),
          LiquidGraph_ (this),
          GasCompartment_ (this),
          GasLink_ (this),
          GasSubstance_ (this),
          GasGraph_ (this),
          ThermalCompartment_ (this),
          ThermalLink_ (this),
          TissueCompartment_ (this),
          TissueSubstance_ (this)
        {
        }

        CompartmentManagerData::
        CompartmentManagerData (const CompartmentManagerData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          ElectricalCompartment_ (x.ElectricalCompartment_, f, this),
          ElectricalLink_ (x.ElectricalLink_, f, this),
          LiquidCompartment_ (x.LiquidCompartment_, f, this),
          LiquidLink_ (x.LiquidLink_, f, this),
          LiquidSubstance_ (x.LiquidSubstance_, f, this),
          LiquidGraph_ (x.LiquidGraph_, f, this),
          GasCompartment_ (x.GasCompartment_, f, this),
          GasLink_ (x.GasLink_, f, this),
          GasSubstance_ (x.GasSubstance_, f, this),
          GasGraph_ (x.GasGraph_, f, this),
          ThermalCompartment_ (x.ThermalCompartment_, f, this),
          ThermalLink_ (x.ThermalLink_, f, this),
          TissueCompartment_ (x.TissueCompartment_, f, this),
          TissueSubstance_ (x.TissueSubstance_, f, this)
        {
        }

        CompartmentManagerData::
        CompartmentManagerData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          ElectricalCompartment_ (this),
          ElectricalLink_ (this),
          LiquidCompartment_ (this),
          LiquidLink_ (this),
          LiquidSubstance_ (this),
          LiquidGraph_ (this),
          GasCompartment_ (this),
          GasLink_ (this),
          GasSubstance_ (this),
          GasGraph_ (this),
          ThermalCompartment_ (this),
          ThermalLink_ (this),
          TissueCompartment_ (this),
          TissueSubstance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentManagerData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ElectricalCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalCompartment_type > r (
                  dynamic_cast< ElectricalCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // ElectricalLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalLink_type > r (
                  dynamic_cast< ElectricalLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalLink_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidCompartment_type > r (
                  dynamic_cast< LiquidCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidLink_type > r (
                  dynamic_cast< LiquidLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidLink_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidSubstance_type > r (
                  dynamic_cast< LiquidSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidGraph
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidGraph_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidGraph_type > r (
                  dynamic_cast< LiquidGraph_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidGraph_.push_back (::std::move (r));
                continue;
              }
            }

            // GasCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasCompartment_type > r (
                  dynamic_cast< GasCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // GasLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasLink_type > r (
                  dynamic_cast< GasLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasLink_.push_back (::std::move (r));
                continue;
              }
            }

            // GasSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasSubstance_type > r (
                  dynamic_cast< GasSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            // GasGraph
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasGraph_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasGraph_type > r (
                  dynamic_cast< GasGraph_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasGraph_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalCompartment_type > r (
                  dynamic_cast< ThermalCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalLink_type > r (
                  dynamic_cast< ThermalLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalLink_.push_back (::std::move (r));
                continue;
              }
            }

            // TissueCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< TissueCompartment_type > r (
                  dynamic_cast< TissueCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->TissueCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // TissueSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< TissueSubstance_type > r (
                  dynamic_cast< TissueSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->TissueSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        CompartmentManagerData* CompartmentManagerData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentManagerData (*this, f, c);
        }

        CompartmentManagerData& CompartmentManagerData::
        operator= (const CompartmentManagerData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->ElectricalCompartment_ = x.ElectricalCompartment_;
            this->ElectricalLink_ = x.ElectricalLink_;
            this->LiquidCompartment_ = x.LiquidCompartment_;
            this->LiquidLink_ = x.LiquidLink_;
            this->LiquidSubstance_ = x.LiquidSubstance_;
            this->LiquidGraph_ = x.LiquidGraph_;
            this->GasCompartment_ = x.GasCompartment_;
            this->GasLink_ = x.GasLink_;
            this->GasSubstance_ = x.GasSubstance_;
            this->GasGraph_ = x.GasGraph_;
            this->ThermalCompartment_ = x.ThermalCompartment_;
            this->ThermalLink_ = x.ThermalLink_;
            this->TissueCompartment_ = x.TissueCompartment_;
            this->TissueSubstance_ = x.TissueSubstance_;
          }

          return *this;
        }

        CompartmentManagerData::
        ~CompartmentManagerData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_type_factory_init (
          "CompartmentManagerData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, enumCompartmentType::value i)
        {
          return o << enumCompartmentType::_xsd_enumCompartmentType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumCompartmentType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumCompartmentType >
        _xsd_enumCompartmentType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Name: ";
            om.insert (o, i.Name ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentData::Node_const_iterator
                 b (i.Node ().begin ()), e (i.Node ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Node: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentData::Child_const_iterator
                 b (i.Child ().begin ()), e (i.Child ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Child: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentData >
        _xsd_CompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Name: ";
            om.insert (o, i.Name ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Path ())
            {
              o << ::std::endl << "Path: ";
              om.insert (o, *i.Path ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SourceCompartment: ";
            om.insert (o, i.SourceCompartment ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TargetCompartment: ";
            om.insert (o, i.TargetCompartment ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentLinkData >
        _xsd_CompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentGraphData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Name: ";
            om.insert (o, i.Name ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentGraphData::Compartment_const_iterator
                 b (i.Compartment ().begin ()), e (i.Compartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Compartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentGraphData::Link_const_iterator
                 b (i.Link ().begin ()), e (i.Link ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Link: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentGraphData >
        _xsd_CompartmentGraphData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const FluidCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InFlow ())
            {
              o << ::std::endl << "InFlow: ";
              om.insert (o, *i.InFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OutFlow ())
            {
              o << ::std::endl << "OutFlow: ";
              om.insert (o, *i.OutFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              o << ::std::endl << "Pressure: ";
              om.insert (o, *i.Pressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Volume ())
            {
              o << ::std::endl << "Volume: ";
              om.insert (o, *i.Volume ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const FluidCompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Flow ())
            {
              o << ::std::endl << "Flow: ";
              om.insert (o, *i.Flow ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FluidCompartmentLinkData >
        _xsd_FluidCompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const FluidCompartmentGraphData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentGraphData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FluidCompartmentGraphData >
        _xsd_FluidCompartmentGraphData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GasCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (GasCompartmentData::SubstanceQuantity_const_iterator
                 b (i.SubstanceQuantity ().begin ()), e (i.SubstanceQuantity ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "SubstanceQuantity: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GasCompartmentData >
        _xsd_GasCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GasCompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GasCompartmentLinkData >
        _xsd_GasCompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GasCompartmentGraphData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GasCompartmentGraphData >
        _xsd_GasCompartmentGraphData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LiquidCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.pH ())
            {
              o << ::std::endl << "pH: ";
              om.insert (o, *i.pH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WaterVolumeFraction ())
            {
              o << ::std::endl << "WaterVolumeFraction: ";
              om.insert (o, *i.WaterVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (LiquidCompartmentData::SubstanceQuantity_const_iterator
                 b (i.SubstanceQuantity ().begin ()), e (i.SubstanceQuantity ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "SubstanceQuantity: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidCompartmentData >
        _xsd_LiquidCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LiquidCompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidCompartmentLinkData >
        _xsd_LiquidCompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LiquidCompartmentGraphData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidCompartmentGraphData >
        _xsd_LiquidCompartmentGraphData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TissueCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AcidicPhospohlipidConcentration ())
            {
              o << ::std::endl << "AcidicPhospohlipidConcentration: ";
              om.insert (o, *i.AcidicPhospohlipidConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MatrixVolume ())
            {
              o << ::std::endl << "MatrixVolume: ";
              om.insert (o, *i.MatrixVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MembranePotential ())
            {
              o << ::std::endl << "MembranePotential: ";
              om.insert (o, *i.MembranePotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeutralLipidsVolumeFraction ())
            {
              o << ::std::endl << "NeutralLipidsVolumeFraction: ";
              om.insert (o, *i.NeutralLipidsVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeutralPhospholipidsVolumeFraction ())
            {
              o << ::std::endl << "NeutralPhospholipidsVolumeFraction: ";
              om.insert (o, *i.NeutralPhospholipidsVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReflectionCoefficient ())
            {
              o << ::std::endl << "ReflectionCoefficient: ";
              om.insert (o, *i.ReflectionCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlbuminRatio ())
            {
              o << ::std::endl << "TissueToPlasmaAlbuminRatio: ";
              om.insert (o, *i.TissueToPlasmaAlbuminRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlphaAcidGlycoproteinRatio ())
            {
              o << ::std::endl << "TissueToPlasmaAlphaAcidGlycoproteinRatio: ";
              om.insert (o, *i.TissueToPlasmaAlphaAcidGlycoproteinRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaLipoproteinRatio ())
            {
              o << ::std::endl << "TissueToPlasmaLipoproteinRatio: ";
              om.insert (o, *i.TissueToPlasmaLipoproteinRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalMass ())
            {
              o << ::std::endl << "TotalMass: ";
              om.insert (o, *i.TotalMass ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ThermalCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatTransferRateIn ())
            {
              o << ::std::endl << "HeatTransferRateIn: ";
              om.insert (o, *i.HeatTransferRateIn ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatTransferRateOut ())
            {
              o << ::std::endl << "HeatTransferRateOut: ";
              om.insert (o, *i.HeatTransferRateOut ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              o << ::std::endl << "Temperature: ";
              om.insert (o, *i.Temperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Heat ())
            {
              o << ::std::endl << "Heat: ";
              om.insert (o, *i.Heat ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ThermalCompartmentData >
        _xsd_ThermalCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ThermalCompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatTransferRate ())
            {
              o << ::std::endl << "HeatTransferRate: ";
              om.insert (o, *i.HeatTransferRate ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ThermalCompartmentLinkData >
        _xsd_ThermalCompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ElectricalCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CurrentIn ())
            {
              o << ::std::endl << "CurrentIn: ";
              om.insert (o, *i.CurrentIn ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CurrentOut ())
            {
              o << ::std::endl << "CurrentOut: ";
              om.insert (o, *i.CurrentOut ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Voltage ())
            {
              o << ::std::endl << "Voltage: ";
              om.insert (o, *i.Voltage ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Charge ())
            {
              o << ::std::endl << "Charge: ";
              om.insert (o, *i.Charge ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectricalCompartmentData >
        _xsd_ElectricalCompartmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ElectricalCompartmentLinkData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Current ())
            {
              o << ::std::endl << "Current: ";
              om.insert (o, *i.Current ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectricalCompartmentLinkData >
        _xsd_ElectricalCompartmentLinkData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentManagerData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalCompartment_const_iterator
                 b (i.ElectricalCompartment ().begin ()), e (i.ElectricalCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalLink_const_iterator
                 b (i.ElectricalLink ().begin ()), e (i.ElectricalLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidCompartment_const_iterator
                 b (i.LiquidCompartment ().begin ()), e (i.LiquidCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidLink_const_iterator
                 b (i.LiquidLink ().begin ()), e (i.LiquidLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidSubstance_const_iterator
                 b (i.LiquidSubstance ().begin ()), e (i.LiquidSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidSubstance: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidGraph_const_iterator
                 b (i.LiquidGraph ().begin ()), e (i.LiquidGraph ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidGraph: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasCompartment_const_iterator
                 b (i.GasCompartment ().begin ()), e (i.GasCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasLink_const_iterator
                 b (i.GasLink ().begin ()), e (i.GasLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasSubstance_const_iterator
                 b (i.GasSubstance ().begin ()), e (i.GasSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasSubstance: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasGraph_const_iterator
                 b (i.GasGraph ().begin ()), e (i.GasGraph ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasGraph: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalCompartment_const_iterator
                 b (i.ThermalCompartment ().begin ()), e (i.ThermalCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalLink_const_iterator
                 b (i.ThermalLink ().begin ()), e (i.ThermalLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueCompartment_const_iterator
                 b (i.TissueCompartment ().begin ()), e (i.TissueCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "TissueCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueSubstance_const_iterator
                 b (i.TissueSubstance ().begin ()), e (i.TissueSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "TissueSubstance: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompartmentManager (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > (
              ::mil::tatrc::physiology::datamodel::CompartmentManager (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CompartmentManager",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CompartmentManagerData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CompartmentManager",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >
        CompartmentManager (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CompartmentManager",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CompartmentManagerData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompartmentManagerData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CompartmentManagerData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CompartmentManager",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const enumCompartmentType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumCompartmentType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumCompartmentType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumCompartmentType >
        _xsd_enumCompartmentType_type_serializer_init (
          "enumCompartmentType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CompartmentData::Name_type& x (i.Name ());
            if (typeid (CompartmentData::Name_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Name",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Node
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentData::Node_const_iterator
                 b (i.Node ().begin ()), n (i.Node ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentData::Node_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Node",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Node",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Child
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentData::Child_const_iterator
                 b (i.Child ().begin ()), n (i.Child ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentData::Child_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Child",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Child",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentData >
        _xsd_CompartmentData_type_serializer_init (
          "CompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CompartmentLinkData::Name_type& x (i.Name ());
            if (typeid (CompartmentLinkData::Name_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Name",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Path
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Path ())
            {
              const CompartmentLinkData::Path_type& x (*i.Path ());
              if (typeid (CompartmentLinkData::Path_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Path",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Path",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SourceCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CompartmentLinkData::SourceCompartment_type& x (i.SourceCompartment ());
            if (typeid (CompartmentLinkData::SourceCompartment_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SourceCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SourceCompartment",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TargetCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CompartmentLinkData::TargetCompartment_type& x (i.TargetCompartment ());
            if (typeid (CompartmentLinkData::TargetCompartment_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TargetCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TargetCompartment",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentLinkData >
        _xsd_CompartmentLinkData_type_serializer_init (
          "CompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentGraphData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CompartmentGraphData::Name_type& x (i.Name ());
            if (typeid (CompartmentGraphData::Name_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Name",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Compartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentGraphData::Compartment_const_iterator
                 b (i.Compartment ().begin ()), n (i.Compartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentGraphData::Compartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Compartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Compartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Link
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentGraphData::Link_const_iterator
                 b (i.Link ().begin ()), n (i.Link ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentGraphData::Link_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Link",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Link",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentGraphData >
        _xsd_CompartmentGraphData_type_serializer_init (
          "CompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const FluidCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          // InFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InFlow ())
            {
              const FluidCompartmentData::InFlow_type& x (*i.InFlow ());
              if (typeid (FluidCompartmentData::InFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OutFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OutFlow ())
            {
              const FluidCompartmentData::OutFlow_type& x (*i.OutFlow ());
              if (typeid (FluidCompartmentData::OutFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OutFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OutFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Pressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              const FluidCompartmentData::Pressure_type& x (*i.Pressure ());
              if (typeid (FluidCompartmentData::Pressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Volume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Volume ())
            {
              const FluidCompartmentData::Volume_type& x (*i.Volume ());
              if (typeid (FluidCompartmentData::Volume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Volume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_type_serializer_init (
          "FluidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const FluidCompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          // Flow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Flow ())
            {
              const FluidCompartmentLinkData::Flow_type& x (*i.Flow ());
              if (typeid (FluidCompartmentLinkData::Flow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Flow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FluidCompartmentLinkData >
        _xsd_FluidCompartmentLinkData_type_serializer_init (
          "FluidCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const FluidCompartmentGraphData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentGraphData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FluidCompartmentGraphData >
        _xsd_FluidCompartmentGraphData_type_serializer_init (
          "FluidCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GasCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (i);

          // SubstanceQuantity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (GasCompartmentData::SubstanceQuantity_const_iterator
                 b (i.SubstanceQuantity ().begin ()), n (i.SubstanceQuantity ().end ());
                 b != n; ++b)
            {
              if (typeid (GasCompartmentData::SubstanceQuantity_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SubstanceQuantity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "SubstanceQuantity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GasCompartmentData >
        _xsd_GasCompartmentData_type_serializer_init (
          "GasCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GasCompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GasCompartmentLinkData >
        _xsd_GasCompartmentLinkData_type_serializer_init (
          "GasCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GasCompartmentGraphData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GasCompartmentGraphData >
        _xsd_GasCompartmentGraphData_type_serializer_init (
          "GasCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LiquidCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentData& > (i);

          // pH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.pH ())
            {
              const LiquidCompartmentData::pH_type& x (*i.pH ());
              if (typeid (LiquidCompartmentData::pH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "pH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WaterVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WaterVolumeFraction ())
            {
              const LiquidCompartmentData::WaterVolumeFraction_type& x (*i.WaterVolumeFraction ());
              if (typeid (LiquidCompartmentData::WaterVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WaterVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WaterVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SubstanceQuantity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (LiquidCompartmentData::SubstanceQuantity_const_iterator
                 b (i.SubstanceQuantity ().begin ()), n (i.SubstanceQuantity ().end ());
                 b != n; ++b)
            {
              if (typeid (LiquidCompartmentData::SubstanceQuantity_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SubstanceQuantity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "SubstanceQuantity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidCompartmentData >
        _xsd_LiquidCompartmentData_type_serializer_init (
          "LiquidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LiquidCompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentLinkData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidCompartmentLinkData >
        _xsd_LiquidCompartmentLinkData_type_serializer_init (
          "LiquidCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LiquidCompartmentGraphData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::FluidCompartmentGraphData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidCompartmentGraphData >
        _xsd_LiquidCompartmentGraphData_type_serializer_init (
          "LiquidCompartmentGraphData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TissueCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          // AcidicPhospohlipidConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AcidicPhospohlipidConcentration ())
            {
              const TissueCompartmentData::AcidicPhospohlipidConcentration_type& x (*i.AcidicPhospohlipidConcentration ());
              if (typeid (TissueCompartmentData::AcidicPhospohlipidConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AcidicPhospohlipidConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AcidicPhospohlipidConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MatrixVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MatrixVolume ())
            {
              const TissueCompartmentData::MatrixVolume_type& x (*i.MatrixVolume ());
              if (typeid (TissueCompartmentData::MatrixVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MatrixVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MatrixVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MembranePotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MembranePotential ())
            {
              const TissueCompartmentData::MembranePotential_type& x (*i.MembranePotential ());
              if (typeid (TissueCompartmentData::MembranePotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MembranePotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MembranePotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeutralLipidsVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeutralLipidsVolumeFraction ())
            {
              const TissueCompartmentData::NeutralLipidsVolumeFraction_type& x (*i.NeutralLipidsVolumeFraction ());
              if (typeid (TissueCompartmentData::NeutralLipidsVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeutralLipidsVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeutralLipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeutralPhospholipidsVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeutralPhospholipidsVolumeFraction ())
            {
              const TissueCompartmentData::NeutralPhospholipidsVolumeFraction_type& x (*i.NeutralPhospholipidsVolumeFraction ());
              if (typeid (TissueCompartmentData::NeutralPhospholipidsVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeutralPhospholipidsVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeutralPhospholipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ReflectionCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReflectionCoefficient ())
            {
              const TissueCompartmentData::ReflectionCoefficient_type& x (*i.ReflectionCoefficient ());
              if (typeid (TissueCompartmentData::ReflectionCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReflectionCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReflectionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaAlbuminRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlbuminRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaAlbuminRatio_type& x (*i.TissueToPlasmaAlbuminRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaAlbuminRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaAlbuminRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaAlbuminRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaAlphaAcidGlycoproteinRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlphaAcidGlycoproteinRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_type& x (*i.TissueToPlasmaAlphaAcidGlycoproteinRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaLipoproteinRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaLipoproteinRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaLipoproteinRatio_type& x (*i.TissueToPlasmaLipoproteinRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaLipoproteinRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaLipoproteinRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaLipoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalMass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalMass ())
            {
              const TissueCompartmentData::TotalMass_type& x (*i.TotalMass ());
              if (typeid (TissueCompartmentData::TotalMass_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalMass",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_type_serializer_init (
          "TissueCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ThermalCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          // HeatTransferRateIn
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatTransferRateIn ())
            {
              const ThermalCompartmentData::HeatTransferRateIn_type& x (*i.HeatTransferRateIn ());
              if (typeid (ThermalCompartmentData::HeatTransferRateIn_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatTransferRateIn",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatTransferRateIn",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeatTransferRateOut
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatTransferRateOut ())
            {
              const ThermalCompartmentData::HeatTransferRateOut_type& x (*i.HeatTransferRateOut ());
              if (typeid (ThermalCompartmentData::HeatTransferRateOut_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatTransferRateOut",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatTransferRateOut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Temperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              const ThermalCompartmentData::Temperature_type& x (*i.Temperature ());
              if (typeid (ThermalCompartmentData::Temperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Temperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Heat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Heat ())
            {
              const ThermalCompartmentData::Heat_type& x (*i.Heat ());
              if (typeid (ThermalCompartmentData::Heat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Heat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Heat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ThermalCompartmentData >
        _xsd_ThermalCompartmentData_type_serializer_init (
          "ThermalCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ThermalCompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          // HeatTransferRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatTransferRate ())
            {
              const ThermalCompartmentLinkData::HeatTransferRate_type& x (*i.HeatTransferRate ());
              if (typeid (ThermalCompartmentLinkData::HeatTransferRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatTransferRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ThermalCompartmentLinkData >
        _xsd_ThermalCompartmentLinkData_type_serializer_init (
          "ThermalCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ElectricalCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // CurrentIn
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CurrentIn ())
            {
              const ElectricalCompartmentData::CurrentIn_type& x (*i.CurrentIn ());
              if (typeid (ElectricalCompartmentData::CurrentIn_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CurrentIn",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CurrentIn",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CurrentOut
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CurrentOut ())
            {
              const ElectricalCompartmentData::CurrentOut_type& x (*i.CurrentOut ());
              if (typeid (ElectricalCompartmentData::CurrentOut_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CurrentOut",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CurrentOut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Voltage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Voltage ())
            {
              const ElectricalCompartmentData::Voltage_type& x (*i.Voltage ());
              if (typeid (ElectricalCompartmentData::Voltage_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Voltage",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Voltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Charge
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Charge ())
            {
              const ElectricalCompartmentData::Charge_type& x (*i.Charge ());
              if (typeid (ElectricalCompartmentData::Charge_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Charge",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Charge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectricalCompartmentData >
        _xsd_ElectricalCompartmentData_type_serializer_init (
          "ElectricalCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ElectricalCompartmentLinkData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentLinkData& > (i);

          // Current
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Current ())
            {
              const ElectricalCompartmentLinkData::Current_type& x (*i.Current ());
              if (typeid (ElectricalCompartmentLinkData::Current_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Current",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Current",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectricalCompartmentLinkData >
        _xsd_ElectricalCompartmentLinkData_type_serializer_init (
          "ElectricalCompartmentLinkData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentManagerData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // ElectricalCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalCompartment_const_iterator
                 b (i.ElectricalCompartment ().begin ()), n (i.ElectricalCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ElectricalCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ElectricalLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalLink_const_iterator
                 b (i.ElectricalLink ().begin ()), n (i.ElectricalLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ElectricalLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidCompartment_const_iterator
                 b (i.LiquidCompartment ().begin ()), n (i.LiquidCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidLink_const_iterator
                 b (i.LiquidLink ().begin ()), n (i.LiquidLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidSubstance_const_iterator
                 b (i.LiquidSubstance ().begin ()), n (i.LiquidSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidGraph
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidGraph_const_iterator
                 b (i.LiquidGraph ().begin ()), n (i.LiquidGraph ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidGraph_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidGraph",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasCompartment_const_iterator
                 b (i.GasCompartment ().begin ()), n (i.GasCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasLink_const_iterator
                 b (i.GasLink ().begin ()), n (i.GasLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasSubstance_const_iterator
                 b (i.GasSubstance ().begin ()), n (i.GasSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasGraph
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasGraph_const_iterator
                 b (i.GasGraph ().begin ()), n (i.GasGraph ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasGraph_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasGraph",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalCompartment_const_iterator
                 b (i.ThermalCompartment ().begin ()), n (i.ThermalCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ThermalCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalLink_const_iterator
                 b (i.ThermalLink ().begin ()), n (i.ThermalLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ThermalLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // TissueCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueCompartment_const_iterator
                 b (i.TissueCompartment ().begin ()), n (i.TissueCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::TissueCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "TissueCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // TissueSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueSubstance_const_iterator
                 b (i.TissueSubstance ().begin ()), n (i.TissueSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::TissueSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "TissueSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_type_serializer_init (
          "CompartmentManagerData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        CompartmentManager (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CompartmentManager (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompartmentManager (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompartmentManager (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CompartmentManager (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompartmentManager (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompartmentManager (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompartmentManager (::xercesc::DOMDocument& d,
                            const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::CompartmentManagerData) == typeid (s))
          {
            if (n.name () == "CompartmentManager" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "CompartmentManager",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CompartmentManager",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        CompartmentManager (const ::mil::tatrc::physiology::datamodel::CompartmentManagerData& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::CompartmentManagerData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "CompartmentManager",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CompartmentManager",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::CompartmentManager (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

