// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "AnesthesiaActions.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // AnesthesiaMachineActionData
        // 


        // AnesthesiaMachineConfigurationData
        // 

        const AnesthesiaMachineConfigurationData::ConfigurationFile_optional& AnesthesiaMachineConfigurationData::
        ConfigurationFile () const
        {
          return this->ConfigurationFile_;
        }

        AnesthesiaMachineConfigurationData::ConfigurationFile_optional& AnesthesiaMachineConfigurationData::
        ConfigurationFile ()
        {
          return this->ConfigurationFile_;
        }

        void AnesthesiaMachineConfigurationData::
        ConfigurationFile (const ConfigurationFile_type& x)
        {
          this->ConfigurationFile_.set (x);
        }

        void AnesthesiaMachineConfigurationData::
        ConfigurationFile (const ConfigurationFile_optional& x)
        {
          this->ConfigurationFile_ = x;
        }

        void AnesthesiaMachineConfigurationData::
        ConfigurationFile (::std::unique_ptr< ConfigurationFile_type > x)
        {
          this->ConfigurationFile_.set (std::move (x));
        }

        const AnesthesiaMachineConfigurationData::Configuration_optional& AnesthesiaMachineConfigurationData::
        Configuration () const
        {
          return this->Configuration_;
        }

        AnesthesiaMachineConfigurationData::Configuration_optional& AnesthesiaMachineConfigurationData::
        Configuration ()
        {
          return this->Configuration_;
        }

        void AnesthesiaMachineConfigurationData::
        Configuration (const Configuration_type& x)
        {
          this->Configuration_.set (x);
        }

        void AnesthesiaMachineConfigurationData::
        Configuration (const Configuration_optional& x)
        {
          this->Configuration_ = x;
        }

        void AnesthesiaMachineConfigurationData::
        Configuration (::std::unique_ptr< Configuration_type > x)
        {
          this->Configuration_.set (std::move (x));
        }


        // ExpiratoryValveLeakData
        // 

        const ExpiratoryValveLeakData::Severity_type& ExpiratoryValveLeakData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        ExpiratoryValveLeakData::Severity_type& ExpiratoryValveLeakData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void ExpiratoryValveLeakData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void ExpiratoryValveLeakData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // ExpiratoryValveObstructionData
        // 

        const ExpiratoryValveObstructionData::Severity_type& ExpiratoryValveObstructionData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        ExpiratoryValveObstructionData::Severity_type& ExpiratoryValveObstructionData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void ExpiratoryValveObstructionData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void ExpiratoryValveObstructionData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // InspiratoryValveLeakData
        // 

        const InspiratoryValveLeakData::Severity_type& InspiratoryValveLeakData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        InspiratoryValveLeakData::Severity_type& InspiratoryValveLeakData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void InspiratoryValveLeakData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void InspiratoryValveLeakData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // InspiratoryValveObstructionData
        // 

        const InspiratoryValveObstructionData::Severity_type& InspiratoryValveObstructionData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        InspiratoryValveObstructionData::Severity_type& InspiratoryValveObstructionData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void InspiratoryValveObstructionData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void InspiratoryValveObstructionData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // MaskLeakData
        // 

        const MaskLeakData::Severity_type& MaskLeakData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        MaskLeakData::Severity_type& MaskLeakData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void MaskLeakData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void MaskLeakData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // SodaLimeFailureData
        // 

        const SodaLimeFailureData::Severity_type& SodaLimeFailureData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        SodaLimeFailureData::Severity_type& SodaLimeFailureData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void SodaLimeFailureData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void SodaLimeFailureData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // TubeCuffLeakData
        // 

        const TubeCuffLeakData::Severity_type& TubeCuffLeakData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        TubeCuffLeakData::Severity_type& TubeCuffLeakData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void TubeCuffLeakData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void TubeCuffLeakData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // VaporizerFailureData
        // 

        const VaporizerFailureData::Severity_type& VaporizerFailureData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        VaporizerFailureData::Severity_type& VaporizerFailureData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void VaporizerFailureData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void VaporizerFailureData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // VentilatorPressureLossData
        // 

        const VentilatorPressureLossData::Severity_type& VentilatorPressureLossData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        VentilatorPressureLossData::Severity_type& VentilatorPressureLossData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void VentilatorPressureLossData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void VentilatorPressureLossData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // YPieceDisconnectData
        // 

        const YPieceDisconnectData::Severity_type& YPieceDisconnectData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        YPieceDisconnectData::Severity_type& YPieceDisconnectData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void YPieceDisconnectData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void YPieceDisconnectData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // OxygenWallPortPressureLossData
        // 

        const OxygenWallPortPressureLossData::State_type& OxygenWallPortPressureLossData::
        State () const
        {
          return this->State_.get ();
        }

        OxygenWallPortPressureLossData::State_type& OxygenWallPortPressureLossData::
        State ()
        {
          return this->State_.get ();
        }

        void OxygenWallPortPressureLossData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void OxygenWallPortPressureLossData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }


        // OxygenTankPressureLossData
        // 

        const OxygenTankPressureLossData::State_type& OxygenTankPressureLossData::
        State () const
        {
          return this->State_.get ();
        }

        OxygenTankPressureLossData::State_type& OxygenTankPressureLossData::
        State ()
        {
          return this->State_.get ();
        }

        void OxygenTankPressureLossData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void OxygenTankPressureLossData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // AnesthesiaMachineActionData
        //

        AnesthesiaMachineActionData::
        AnesthesiaMachineActionData ()
        : ::mil::tatrc::physiology::datamodel::ActionData ()
        {
        }

        AnesthesiaMachineActionData::
        AnesthesiaMachineActionData (const AnesthesiaMachineActionData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (x, f, c)
        {
        }

        AnesthesiaMachineActionData::
        AnesthesiaMachineActionData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (e, f, c)
        {
        }

        AnesthesiaMachineActionData* AnesthesiaMachineActionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AnesthesiaMachineActionData (*this, f, c);
        }

        AnesthesiaMachineActionData::
        ~AnesthesiaMachineActionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnesthesiaMachineActionData >
        _xsd_AnesthesiaMachineActionData_type_factory_init (
          "AnesthesiaMachineActionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AnesthesiaMachineConfigurationData
        //

        AnesthesiaMachineConfigurationData::
        AnesthesiaMachineConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          ConfigurationFile_ (this),
          Configuration_ (this)
        {
        }

        AnesthesiaMachineConfigurationData::
        AnesthesiaMachineConfigurationData (const AnesthesiaMachineConfigurationData& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          ConfigurationFile_ (x.ConfigurationFile_, f, this),
          Configuration_ (x.Configuration_, f, this)
        {
        }

        AnesthesiaMachineConfigurationData::
        AnesthesiaMachineConfigurationData (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          ConfigurationFile_ (this),
          Configuration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AnesthesiaMachineConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ConfigurationFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConfigurationFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConfigurationFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConfigurationFile_)
                {
                  ::std::unique_ptr< ConfigurationFile_type > r (
                    dynamic_cast< ConfigurationFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConfigurationFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Configuration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Configuration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Configuration_)
                {
                  ::std::unique_ptr< Configuration_type > r (
                    dynamic_cast< Configuration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Configuration_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        AnesthesiaMachineConfigurationData* AnesthesiaMachineConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AnesthesiaMachineConfigurationData (*this, f, c);
        }

        AnesthesiaMachineConfigurationData& AnesthesiaMachineConfigurationData::
        operator= (const AnesthesiaMachineConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->ConfigurationFile_ = x.ConfigurationFile_;
            this->Configuration_ = x.Configuration_;
          }

          return *this;
        }

        AnesthesiaMachineConfigurationData::
        ~AnesthesiaMachineConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnesthesiaMachineConfigurationData >
        _xsd_AnesthesiaMachineConfigurationData_type_factory_init (
          "AnesthesiaMachineConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ExpiratoryValveLeakData
        //

        ExpiratoryValveLeakData::
        ExpiratoryValveLeakData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        ExpiratoryValveLeakData::
        ExpiratoryValveLeakData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        ExpiratoryValveLeakData::
        ExpiratoryValveLeakData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        ExpiratoryValveLeakData::
        ExpiratoryValveLeakData (const ExpiratoryValveLeakData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        ExpiratoryValveLeakData::
        ExpiratoryValveLeakData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ExpiratoryValveLeakData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ExpiratoryValveLeakData* ExpiratoryValveLeakData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ExpiratoryValveLeakData (*this, f, c);
        }

        ExpiratoryValveLeakData& ExpiratoryValveLeakData::
        operator= (const ExpiratoryValveLeakData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        ExpiratoryValveLeakData::
        ~ExpiratoryValveLeakData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ExpiratoryValveLeakData >
        _xsd_ExpiratoryValveLeakData_type_factory_init (
          "ExpiratoryValveLeakData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ExpiratoryValveObstructionData
        //

        ExpiratoryValveObstructionData::
        ExpiratoryValveObstructionData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        ExpiratoryValveObstructionData::
        ExpiratoryValveObstructionData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        ExpiratoryValveObstructionData::
        ExpiratoryValveObstructionData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        ExpiratoryValveObstructionData::
        ExpiratoryValveObstructionData (const ExpiratoryValveObstructionData& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        ExpiratoryValveObstructionData::
        ExpiratoryValveObstructionData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ExpiratoryValveObstructionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ExpiratoryValveObstructionData* ExpiratoryValveObstructionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ExpiratoryValveObstructionData (*this, f, c);
        }

        ExpiratoryValveObstructionData& ExpiratoryValveObstructionData::
        operator= (const ExpiratoryValveObstructionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        ExpiratoryValveObstructionData::
        ~ExpiratoryValveObstructionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ExpiratoryValveObstructionData >
        _xsd_ExpiratoryValveObstructionData_type_factory_init (
          "ExpiratoryValveObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // InspiratoryValveLeakData
        //

        InspiratoryValveLeakData::
        InspiratoryValveLeakData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        InspiratoryValveLeakData::
        InspiratoryValveLeakData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        InspiratoryValveLeakData::
        InspiratoryValveLeakData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        InspiratoryValveLeakData::
        InspiratoryValveLeakData (const InspiratoryValveLeakData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        InspiratoryValveLeakData::
        InspiratoryValveLeakData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void InspiratoryValveLeakData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        InspiratoryValveLeakData* InspiratoryValveLeakData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class InspiratoryValveLeakData (*this, f, c);
        }

        InspiratoryValveLeakData& InspiratoryValveLeakData::
        operator= (const InspiratoryValveLeakData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        InspiratoryValveLeakData::
        ~InspiratoryValveLeakData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, InspiratoryValveLeakData >
        _xsd_InspiratoryValveLeakData_type_factory_init (
          "InspiratoryValveLeakData",
          "uri:/mil/tatrc/physiology/datamodel");

        // InspiratoryValveObstructionData
        //

        InspiratoryValveObstructionData::
        InspiratoryValveObstructionData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        InspiratoryValveObstructionData::
        InspiratoryValveObstructionData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        InspiratoryValveObstructionData::
        InspiratoryValveObstructionData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        InspiratoryValveObstructionData::
        InspiratoryValveObstructionData (const InspiratoryValveObstructionData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        InspiratoryValveObstructionData::
        InspiratoryValveObstructionData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void InspiratoryValveObstructionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        InspiratoryValveObstructionData* InspiratoryValveObstructionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class InspiratoryValveObstructionData (*this, f, c);
        }

        InspiratoryValveObstructionData& InspiratoryValveObstructionData::
        operator= (const InspiratoryValveObstructionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        InspiratoryValveObstructionData::
        ~InspiratoryValveObstructionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, InspiratoryValveObstructionData >
        _xsd_InspiratoryValveObstructionData_type_factory_init (
          "InspiratoryValveObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // MaskLeakData
        //

        MaskLeakData::
        MaskLeakData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        MaskLeakData::
        MaskLeakData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        MaskLeakData::
        MaskLeakData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        MaskLeakData::
        MaskLeakData (const MaskLeakData& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        MaskLeakData::
        MaskLeakData (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void MaskLeakData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        MaskLeakData* MaskLeakData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class MaskLeakData (*this, f, c);
        }

        MaskLeakData& MaskLeakData::
        operator= (const MaskLeakData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        MaskLeakData::
        ~MaskLeakData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, MaskLeakData >
        _xsd_MaskLeakData_type_factory_init (
          "MaskLeakData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SodaLimeFailureData
        //

        SodaLimeFailureData::
        SodaLimeFailureData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        SodaLimeFailureData::
        SodaLimeFailureData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        SodaLimeFailureData::
        SodaLimeFailureData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        SodaLimeFailureData::
        SodaLimeFailureData (const SodaLimeFailureData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        SodaLimeFailureData::
        SodaLimeFailureData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void SodaLimeFailureData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SodaLimeFailureData* SodaLimeFailureData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SodaLimeFailureData (*this, f, c);
        }

        SodaLimeFailureData& SodaLimeFailureData::
        operator= (const SodaLimeFailureData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        SodaLimeFailureData::
        ~SodaLimeFailureData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SodaLimeFailureData >
        _xsd_SodaLimeFailureData_type_factory_init (
          "SodaLimeFailureData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TubeCuffLeakData
        //

        TubeCuffLeakData::
        TubeCuffLeakData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        TubeCuffLeakData::
        TubeCuffLeakData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        TubeCuffLeakData::
        TubeCuffLeakData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        TubeCuffLeakData::
        TubeCuffLeakData (const TubeCuffLeakData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        TubeCuffLeakData::
        TubeCuffLeakData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void TubeCuffLeakData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        TubeCuffLeakData* TubeCuffLeakData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TubeCuffLeakData (*this, f, c);
        }

        TubeCuffLeakData& TubeCuffLeakData::
        operator= (const TubeCuffLeakData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        TubeCuffLeakData::
        ~TubeCuffLeakData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TubeCuffLeakData >
        _xsd_TubeCuffLeakData_type_factory_init (
          "TubeCuffLeakData",
          "uri:/mil/tatrc/physiology/datamodel");

        // VaporizerFailureData
        //

        VaporizerFailureData::
        VaporizerFailureData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        VaporizerFailureData::
        VaporizerFailureData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        VaporizerFailureData::
        VaporizerFailureData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        VaporizerFailureData::
        VaporizerFailureData (const VaporizerFailureData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        VaporizerFailureData::
        VaporizerFailureData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void VaporizerFailureData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        VaporizerFailureData* VaporizerFailureData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class VaporizerFailureData (*this, f, c);
        }

        VaporizerFailureData& VaporizerFailureData::
        operator= (const VaporizerFailureData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        VaporizerFailureData::
        ~VaporizerFailureData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, VaporizerFailureData >
        _xsd_VaporizerFailureData_type_factory_init (
          "VaporizerFailureData",
          "uri:/mil/tatrc/physiology/datamodel");

        // VentilatorPressureLossData
        //

        VentilatorPressureLossData::
        VentilatorPressureLossData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        VentilatorPressureLossData::
        VentilatorPressureLossData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        VentilatorPressureLossData::
        VentilatorPressureLossData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        VentilatorPressureLossData::
        VentilatorPressureLossData (const VentilatorPressureLossData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        VentilatorPressureLossData::
        VentilatorPressureLossData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void VentilatorPressureLossData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        VentilatorPressureLossData* VentilatorPressureLossData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class VentilatorPressureLossData (*this, f, c);
        }

        VentilatorPressureLossData& VentilatorPressureLossData::
        operator= (const VentilatorPressureLossData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        VentilatorPressureLossData::
        ~VentilatorPressureLossData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, VentilatorPressureLossData >
        _xsd_VentilatorPressureLossData_type_factory_init (
          "VentilatorPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");

        // YPieceDisconnectData
        //

        YPieceDisconnectData::
        YPieceDisconnectData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (this)
        {
        }

        YPieceDisconnectData::
        YPieceDisconnectData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (Severity, this)
        {
        }

        YPieceDisconnectData::
        YPieceDisconnectData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        YPieceDisconnectData::
        YPieceDisconnectData (const YPieceDisconnectData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        YPieceDisconnectData::
        YPieceDisconnectData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void YPieceDisconnectData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        YPieceDisconnectData* YPieceDisconnectData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class YPieceDisconnectData (*this, f, c);
        }

        YPieceDisconnectData& YPieceDisconnectData::
        operator= (const YPieceDisconnectData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        YPieceDisconnectData::
        ~YPieceDisconnectData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, YPieceDisconnectData >
        _xsd_YPieceDisconnectData_type_factory_init (
          "YPieceDisconnectData",
          "uri:/mil/tatrc/physiology/datamodel");

        // OxygenWallPortPressureLossData
        //

        OxygenWallPortPressureLossData::
        OxygenWallPortPressureLossData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          State_ (this)
        {
        }

        OxygenWallPortPressureLossData::
        OxygenWallPortPressureLossData (const State_type& State)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          State_ (State, this)
        {
        }

        OxygenWallPortPressureLossData::
        OxygenWallPortPressureLossData (const OxygenWallPortPressureLossData& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          State_ (x.State_, f, this)
        {
        }

        OxygenWallPortPressureLossData::
        OxygenWallPortPressureLossData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void OxygenWallPortPressureLossData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }
        }

        OxygenWallPortPressureLossData* OxygenWallPortPressureLossData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class OxygenWallPortPressureLossData (*this, f, c);
        }

        OxygenWallPortPressureLossData& OxygenWallPortPressureLossData::
        operator= (const OxygenWallPortPressureLossData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->State_ = x.State_;
          }

          return *this;
        }

        OxygenWallPortPressureLossData::
        ~OxygenWallPortPressureLossData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, OxygenWallPortPressureLossData >
        _xsd_OxygenWallPortPressureLossData_type_factory_init (
          "OxygenWallPortPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");

        // OxygenTankPressureLossData
        //

        OxygenTankPressureLossData::
        OxygenTankPressureLossData ()
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          State_ (this)
        {
        }

        OxygenTankPressureLossData::
        OxygenTankPressureLossData (const State_type& State)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (),
          State_ (State, this)
        {
        }

        OxygenTankPressureLossData::
        OxygenTankPressureLossData (const OxygenTankPressureLossData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (x, f, c),
          State_ (x.State_, f, this)
        {
        }

        OxygenTankPressureLossData::
        OxygenTankPressureLossData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void OxygenTankPressureLossData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }
        }

        OxygenTankPressureLossData* OxygenTankPressureLossData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class OxygenTankPressureLossData (*this, f, c);
        }

        OxygenTankPressureLossData& OxygenTankPressureLossData::
        operator= (const OxygenTankPressureLossData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (*this) = x;
            this->State_ = x.State_;
          }

          return *this;
        }

        OxygenTankPressureLossData::
        ~OxygenTankPressureLossData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, OxygenTankPressureLossData >
        _xsd_OxygenTankPressureLossData_type_factory_init (
          "OxygenTankPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const AnesthesiaMachineActionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnesthesiaMachineActionData >
        _xsd_AnesthesiaMachineActionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AnesthesiaMachineConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConfigurationFile ())
            {
              o << ::std::endl << "ConfigurationFile: ";
              om.insert (o, *i.ConfigurationFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              o << ::std::endl << "Configuration: ";
              om.insert (o, *i.Configuration ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnesthesiaMachineConfigurationData >
        _xsd_AnesthesiaMachineConfigurationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ExpiratoryValveLeakData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ExpiratoryValveLeakData >
        _xsd_ExpiratoryValveLeakData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ExpiratoryValveObstructionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ExpiratoryValveObstructionData >
        _xsd_ExpiratoryValveObstructionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const InspiratoryValveLeakData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, InspiratoryValveLeakData >
        _xsd_InspiratoryValveLeakData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const InspiratoryValveObstructionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, InspiratoryValveObstructionData >
        _xsd_InspiratoryValveObstructionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const MaskLeakData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MaskLeakData >
        _xsd_MaskLeakData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SodaLimeFailureData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SodaLimeFailureData >
        _xsd_SodaLimeFailureData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TubeCuffLeakData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TubeCuffLeakData >
        _xsd_TubeCuffLeakData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const VaporizerFailureData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VaporizerFailureData >
        _xsd_VaporizerFailureData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const VentilatorPressureLossData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VentilatorPressureLossData >
        _xsd_VentilatorPressureLossData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const YPieceDisconnectData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, YPieceDisconnectData >
        _xsd_YPieceDisconnectData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const OxygenWallPortPressureLossData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OxygenWallPortPressureLossData >
        _xsd_OxygenWallPortPressureLossData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const OxygenTankPressureLossData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OxygenTankPressureLossData >
        _xsd_OxygenTankPressureLossData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const AnesthesiaMachineActionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnesthesiaMachineActionData >
        _xsd_AnesthesiaMachineActionData_type_serializer_init (
          "AnesthesiaMachineActionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AnesthesiaMachineConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // ConfigurationFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConfigurationFile ())
            {
              const AnesthesiaMachineConfigurationData::ConfigurationFile_type& x (*i.ConfigurationFile ());
              if (typeid (AnesthesiaMachineConfigurationData::ConfigurationFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConfigurationFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConfigurationFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Configuration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              const AnesthesiaMachineConfigurationData::Configuration_type& x (*i.Configuration ());
              if (typeid (AnesthesiaMachineConfigurationData::Configuration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Configuration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnesthesiaMachineConfigurationData >
        _xsd_AnesthesiaMachineConfigurationData_type_serializer_init (
          "AnesthesiaMachineConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ExpiratoryValveLeakData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ExpiratoryValveLeakData::Severity_type& x (i.Severity ());
            if (typeid (ExpiratoryValveLeakData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ExpiratoryValveLeakData >
        _xsd_ExpiratoryValveLeakData_type_serializer_init (
          "ExpiratoryValveLeakData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ExpiratoryValveObstructionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ExpiratoryValveObstructionData::Severity_type& x (i.Severity ());
            if (typeid (ExpiratoryValveObstructionData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ExpiratoryValveObstructionData >
        _xsd_ExpiratoryValveObstructionData_type_serializer_init (
          "ExpiratoryValveObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const InspiratoryValveLeakData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InspiratoryValveLeakData::Severity_type& x (i.Severity ());
            if (typeid (InspiratoryValveLeakData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InspiratoryValveLeakData >
        _xsd_InspiratoryValveLeakData_type_serializer_init (
          "InspiratoryValveLeakData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const InspiratoryValveObstructionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InspiratoryValveObstructionData::Severity_type& x (i.Severity ());
            if (typeid (InspiratoryValveObstructionData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InspiratoryValveObstructionData >
        _xsd_InspiratoryValveObstructionData_type_serializer_init (
          "InspiratoryValveObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const MaskLeakData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const MaskLeakData::Severity_type& x (i.Severity ());
            if (typeid (MaskLeakData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MaskLeakData >
        _xsd_MaskLeakData_type_serializer_init (
          "MaskLeakData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SodaLimeFailureData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SodaLimeFailureData::Severity_type& x (i.Severity ());
            if (typeid (SodaLimeFailureData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SodaLimeFailureData >
        _xsd_SodaLimeFailureData_type_serializer_init (
          "SodaLimeFailureData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TubeCuffLeakData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TubeCuffLeakData::Severity_type& x (i.Severity ());
            if (typeid (TubeCuffLeakData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TubeCuffLeakData >
        _xsd_TubeCuffLeakData_type_serializer_init (
          "TubeCuffLeakData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const VaporizerFailureData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const VaporizerFailureData::Severity_type& x (i.Severity ());
            if (typeid (VaporizerFailureData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VaporizerFailureData >
        _xsd_VaporizerFailureData_type_serializer_init (
          "VaporizerFailureData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const VentilatorPressureLossData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const VentilatorPressureLossData::Severity_type& x (i.Severity ());
            if (typeid (VentilatorPressureLossData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VentilatorPressureLossData >
        _xsd_VentilatorPressureLossData_type_serializer_init (
          "VentilatorPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const YPieceDisconnectData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const YPieceDisconnectData::Severity_type& x (i.Severity ());
            if (typeid (YPieceDisconnectData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, YPieceDisconnectData >
        _xsd_YPieceDisconnectData_type_serializer_init (
          "YPieceDisconnectData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const OxygenWallPortPressureLossData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OxygenWallPortPressureLossData >
        _xsd_OxygenWallPortPressureLossData_type_serializer_init (
          "OxygenWallPortPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const OxygenTankPressureLossData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::AnesthesiaMachineActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OxygenTankPressureLossData >
        _xsd_OxygenTankPressureLossData_type_serializer_init (
          "OxygenTankPressureLossData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

