// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "TestReport.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TestErrorStatisticsData
        // 

        const TestErrorStatisticsData::MinimumError_optional& TestErrorStatisticsData::
        MinimumError () const
        {
          return this->MinimumError_;
        }

        TestErrorStatisticsData::MinimumError_optional& TestErrorStatisticsData::
        MinimumError ()
        {
          return this->MinimumError_;
        }

        void TestErrorStatisticsData::
        MinimumError (const MinimumError_type& x)
        {
          this->MinimumError_.set (x);
        }

        void TestErrorStatisticsData::
        MinimumError (const MinimumError_optional& x)
        {
          this->MinimumError_ = x;
        }

        const TestErrorStatisticsData::MaximumError_optional& TestErrorStatisticsData::
        MaximumError () const
        {
          return this->MaximumError_;
        }

        TestErrorStatisticsData::MaximumError_optional& TestErrorStatisticsData::
        MaximumError ()
        {
          return this->MaximumError_;
        }

        void TestErrorStatisticsData::
        MaximumError (const MaximumError_type& x)
        {
          this->MaximumError_.set (x);
        }

        void TestErrorStatisticsData::
        MaximumError (const MaximumError_optional& x)
        {
          this->MaximumError_ = x;
        }

        const TestErrorStatisticsData::AverageError_optional& TestErrorStatisticsData::
        AverageError () const
        {
          return this->AverageError_;
        }

        TestErrorStatisticsData::AverageError_optional& TestErrorStatisticsData::
        AverageError ()
        {
          return this->AverageError_;
        }

        void TestErrorStatisticsData::
        AverageError (const AverageError_type& x)
        {
          this->AverageError_.set (x);
        }

        void TestErrorStatisticsData::
        AverageError (const AverageError_optional& x)
        {
          this->AverageError_ = x;
        }

        const TestErrorStatisticsData::StandardDeviation_optional& TestErrorStatisticsData::
        StandardDeviation () const
        {
          return this->StandardDeviation_;
        }

        TestErrorStatisticsData::StandardDeviation_optional& TestErrorStatisticsData::
        StandardDeviation ()
        {
          return this->StandardDeviation_;
        }

        void TestErrorStatisticsData::
        StandardDeviation (const StandardDeviation_type& x)
        {
          this->StandardDeviation_.set (x);
        }

        void TestErrorStatisticsData::
        StandardDeviation (const StandardDeviation_optional& x)
        {
          this->StandardDeviation_ = x;
        }

        const TestErrorStatisticsData::PercentToleranceVsNumErrors_optional& TestErrorStatisticsData::
        PercentToleranceVsNumErrors () const
        {
          return this->PercentToleranceVsNumErrors_;
        }

        TestErrorStatisticsData::PercentToleranceVsNumErrors_optional& TestErrorStatisticsData::
        PercentToleranceVsNumErrors ()
        {
          return this->PercentToleranceVsNumErrors_;
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (const PercentToleranceVsNumErrors_type& x)
        {
          this->PercentToleranceVsNumErrors_.set (x);
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (const PercentToleranceVsNumErrors_optional& x)
        {
          this->PercentToleranceVsNumErrors_ = x;
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (::std::unique_ptr< PercentToleranceVsNumErrors_type > x)
        {
          this->PercentToleranceVsNumErrors_.set (std::move (x));
        }

        const TestErrorStatisticsData::Differences_sequence& TestErrorStatisticsData::
        Differences () const
        {
          return this->Differences_;
        }

        TestErrorStatisticsData::Differences_sequence& TestErrorStatisticsData::
        Differences ()
        {
          return this->Differences_;
        }

        void TestErrorStatisticsData::
        Differences (const Differences_sequence& s)
        {
          this->Differences_ = s;
        }

        const TestErrorStatisticsData::ComputedPropertyID_type& TestErrorStatisticsData::
        ComputedPropertyID () const
        {
          return this->ComputedPropertyID_.get ();
        }

        TestErrorStatisticsData::ComputedPropertyID_type& TestErrorStatisticsData::
        ComputedPropertyID ()
        {
          return this->ComputedPropertyID_.get ();
        }

        void TestErrorStatisticsData::
        ComputedPropertyID (const ComputedPropertyID_type& x)
        {
          this->ComputedPropertyID_.set (x);
        }

        void TestErrorStatisticsData::
        ComputedPropertyID (::std::unique_ptr< ComputedPropertyID_type > x)
        {
          this->ComputedPropertyID_.set (std::move (x));
        }

        const TestErrorStatisticsData::ExpectedPropertyID_type& TestErrorStatisticsData::
        ExpectedPropertyID () const
        {
          return this->ExpectedPropertyID_.get ();
        }

        TestErrorStatisticsData::ExpectedPropertyID_type& TestErrorStatisticsData::
        ExpectedPropertyID ()
        {
          return this->ExpectedPropertyID_.get ();
        }

        void TestErrorStatisticsData::
        ExpectedPropertyID (const ExpectedPropertyID_type& x)
        {
          this->ExpectedPropertyID_.set (x);
        }

        void TestErrorStatisticsData::
        ExpectedPropertyID (::std::unique_ptr< ExpectedPropertyID_type > x)
        {
          this->ExpectedPropertyID_.set (std::move (x));
        }

        const TestErrorStatisticsData::NumberOfErrors_optional& TestErrorStatisticsData::
        NumberOfErrors () const
        {
          return this->NumberOfErrors_;
        }

        TestErrorStatisticsData::NumberOfErrors_optional& TestErrorStatisticsData::
        NumberOfErrors ()
        {
          return this->NumberOfErrors_;
        }

        void TestErrorStatisticsData::
        NumberOfErrors (const NumberOfErrors_type& x)
        {
          this->NumberOfErrors_.set (x);
        }

        void TestErrorStatisticsData::
        NumberOfErrors (const NumberOfErrors_optional& x)
        {
          this->NumberOfErrors_ = x;
        }

        const TestErrorStatisticsData::PercentTolerance_type& TestErrorStatisticsData::
        PercentTolerance () const
        {
          return this->PercentTolerance_.get ();
        }

        TestErrorStatisticsData::PercentTolerance_type& TestErrorStatisticsData::
        PercentTolerance ()
        {
          return this->PercentTolerance_.get ();
        }

        void TestErrorStatisticsData::
        PercentTolerance (const PercentTolerance_type& x)
        {
          this->PercentTolerance_.set (x);
        }

        const TestErrorStatisticsData::PropertyName_type& TestErrorStatisticsData::
        PropertyName () const
        {
          return this->PropertyName_.get ();
        }

        TestErrorStatisticsData::PropertyName_type& TestErrorStatisticsData::
        PropertyName ()
        {
          return this->PropertyName_.get ();
        }

        void TestErrorStatisticsData::
        PropertyName (const PropertyName_type& x)
        {
          this->PropertyName_.set (x);
        }

        void TestErrorStatisticsData::
        PropertyName (::std::unique_ptr< PropertyName_type > x)
        {
          this->PropertyName_.set (std::move (x));
        }


        // TestReportData
        // 

        const TestReportData::TestSuite_sequence& TestReportData::
        TestSuite () const
        {
          return this->TestSuite_;
        }

        TestReportData::TestSuite_sequence& TestReportData::
        TestSuite ()
        {
          return this->TestSuite_;
        }

        void TestReportData::
        TestSuite (const TestSuite_sequence& s)
        {
          this->TestSuite_ = s;
        }


        // TestSuite
        // 

        const TestSuite::Requirement_sequence& TestSuite::
        Requirement () const
        {
          return this->Requirement_;
        }

        TestSuite::Requirement_sequence& TestSuite::
        Requirement ()
        {
          return this->Requirement_;
        }

        void TestSuite::
        Requirement (const Requirement_sequence& s)
        {
          this->Requirement_ = s;
        }

        const TestSuite::SuiteEqualError_sequence& TestSuite::
        SuiteEqualError () const
        {
          return this->SuiteEqualError_;
        }

        TestSuite::SuiteEqualError_sequence& TestSuite::
        SuiteEqualError ()
        {
          return this->SuiteEqualError_;
        }

        void TestSuite::
        SuiteEqualError (const SuiteEqualError_sequence& s)
        {
          this->SuiteEqualError_ = s;
        }

        const TestSuite::Time_type& TestSuite::
        Time () const
        {
          return this->Time_.get ();
        }

        TestSuite::Time_type& TestSuite::
        Time ()
        {
          return this->Time_.get ();
        }

        void TestSuite::
        Time (const Time_type& x)
        {
          this->Time_.set (x);
        }

        void TestSuite::
        Time (::std::unique_ptr< Time_type > x)
        {
          this->Time_.set (std::move (x));
        }

        const TestSuite::TestCase_sequence& TestSuite::
        TestCase () const
        {
          return this->TestCase_;
        }

        TestSuite::TestCase_sequence& TestSuite::
        TestCase ()
        {
          return this->TestCase_;
        }

        void TestSuite::
        TestCase (const TestCase_sequence& s)
        {
          this->TestCase_ = s;
        }

        const TestSuite::Performed_type& TestSuite::
        Performed () const
        {
          return this->Performed_.get ();
        }

        TestSuite::Performed_type& TestSuite::
        Performed ()
        {
          return this->Performed_.get ();
        }

        void TestSuite::
        Performed (const Performed_type& x)
        {
          this->Performed_.set (x);
        }

        TestSuite::Performed_type TestSuite::
        Performed_default_value ()
        {
          return Performed_type (true);
        }

        const TestSuite::Errors_type& TestSuite::
        Errors () const
        {
          return this->Errors_.get ();
        }

        TestSuite::Errors_type& TestSuite::
        Errors ()
        {
          return this->Errors_.get ();
        }

        void TestSuite::
        Errors (const Errors_type& x)
        {
          this->Errors_.set (x);
        }

        const TestSuite::Tests_type& TestSuite::
        Tests () const
        {
          return this->Tests_.get ();
        }

        TestSuite::Tests_type& TestSuite::
        Tests ()
        {
          return this->Tests_.get ();
        }

        void TestSuite::
        Tests (const Tests_type& x)
        {
          this->Tests_.set (x);
        }

        const TestSuite::Name_type& TestSuite::
        Name () const
        {
          return this->Name_.get ();
        }

        TestSuite::Name_type& TestSuite::
        Name ()
        {
          return this->Name_.get ();
        }

        void TestSuite::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void TestSuite::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }


        // TestCase
        // 

        const TestCase::CaseEqualError_sequence& TestCase::
        CaseEqualError () const
        {
          return this->CaseEqualError_;
        }

        TestCase::CaseEqualError_sequence& TestCase::
        CaseEqualError ()
        {
          return this->CaseEqualError_;
        }

        void TestCase::
        CaseEqualError (const CaseEqualError_sequence& s)
        {
          this->CaseEqualError_ = s;
        }

        const TestCase::Failure_sequence& TestCase::
        Failure () const
        {
          return this->Failure_;
        }

        TestCase::Failure_sequence& TestCase::
        Failure ()
        {
          return this->Failure_;
        }

        void TestCase::
        Failure (const Failure_sequence& s)
        {
          this->Failure_ = s;
        }

        const TestCase::Time_type& TestCase::
        Time () const
        {
          return this->Time_.get ();
        }

        TestCase::Time_type& TestCase::
        Time ()
        {
          return this->Time_.get ();
        }

        void TestCase::
        Time (const Time_type& x)
        {
          this->Time_.set (x);
        }

        void TestCase::
        Time (::std::unique_ptr< Time_type > x)
        {
          this->Time_.set (std::move (x));
        }

        const TestCase::Name_type& TestCase::
        Name () const
        {
          return this->Name_.get ();
        }

        TestCase::Name_type& TestCase::
        Name ()
        {
          return this->Name_.get ();
        }

        void TestCase::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void TestCase::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TestErrorStatisticsData
        //

        TestErrorStatisticsData::
        TestErrorStatisticsData ()
        : ::xml_schema::type (),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (this),
          ExpectedPropertyID_ (this),
          NumberOfErrors_ (this),
          PercentTolerance_ (this),
          PropertyName_ (this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const ComputedPropertyID_type& ComputedPropertyID,
                                 const ExpectedPropertyID_type& ExpectedPropertyID,
                                 const PercentTolerance_type& PercentTolerance,
                                 const PropertyName_type& PropertyName)
        : ::xml_schema::type (),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (ComputedPropertyID, this),
          ExpectedPropertyID_ (ExpectedPropertyID, this),
          NumberOfErrors_ (this),
          PercentTolerance_ (PercentTolerance, this),
          PropertyName_ (PropertyName, this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const TestErrorStatisticsData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          MinimumError_ (x.MinimumError_, f, this),
          MaximumError_ (x.MaximumError_, f, this),
          AverageError_ (x.AverageError_, f, this),
          StandardDeviation_ (x.StandardDeviation_, f, this),
          PercentToleranceVsNumErrors_ (x.PercentToleranceVsNumErrors_, f, this),
          Differences_ (x.Differences_, f, this),
          ComputedPropertyID_ (x.ComputedPropertyID_, f, this),
          ExpectedPropertyID_ (x.ExpectedPropertyID_, f, this),
          NumberOfErrors_ (x.NumberOfErrors_, f, this),
          PercentTolerance_ (x.PercentTolerance_, f, this),
          PropertyName_ (x.PropertyName_, f, this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (this),
          ExpectedPropertyID_ (this),
          NumberOfErrors_ (this),
          PercentTolerance_ (this),
          PropertyName_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TestErrorStatisticsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MinimumError
            //
            if (n.name () == "MinimumError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->MinimumError_)
              {
                this->MinimumError_.set (MinimumError_traits::create (i, f, this));
                continue;
              }
            }

            // MaximumError
            //
            if (n.name () == "MaximumError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->MaximumError_)
              {
                this->MaximumError_.set (MaximumError_traits::create (i, f, this));
                continue;
              }
            }

            // AverageError
            //
            if (n.name () == "AverageError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->AverageError_)
              {
                this->AverageError_.set (AverageError_traits::create (i, f, this));
                continue;
              }
            }

            // StandardDeviation
            //
            if (n.name () == "StandardDeviation" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->StandardDeviation_)
              {
                this->StandardDeviation_.set (StandardDeviation_traits::create (i, f, this));
                continue;
              }
            }

            // PercentToleranceVsNumErrors
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PercentToleranceVsNumErrors",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PercentToleranceVsNumErrors_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PercentToleranceVsNumErrors_)
                {
                  ::std::unique_ptr< PercentToleranceVsNumErrors_type > r (
                    dynamic_cast< PercentToleranceVsNumErrors_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PercentToleranceVsNumErrors_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Differences
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Differences",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Differences_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Differences_type > r (
                  dynamic_cast< Differences_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Differences_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "ComputedPropertyID" && n.namespace_ ().empty ())
            {
              this->ComputedPropertyID_.set (ComputedPropertyID_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "ExpectedPropertyID" && n.namespace_ ().empty ())
            {
              this->ExpectedPropertyID_.set (ExpectedPropertyID_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "NumberOfErrors" && n.namespace_ ().empty ())
            {
              this->NumberOfErrors_.set (NumberOfErrors_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "PercentTolerance" && n.namespace_ ().empty ())
            {
              this->PercentTolerance_.set (PercentTolerance_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "PropertyName" && n.namespace_ ().empty ())
            {
              this->PropertyName_.set (PropertyName_traits::create (i, f, this));
              continue;
            }
          }

          if (!ComputedPropertyID_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ComputedPropertyID",
              "");
          }

          if (!ExpectedPropertyID_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ExpectedPropertyID",
              "");
          }

          if (!PercentTolerance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PercentTolerance",
              "");
          }

          if (!PropertyName_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PropertyName",
              "");
          }
        }

        TestErrorStatisticsData* TestErrorStatisticsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TestErrorStatisticsData (*this, f, c);
        }

        TestErrorStatisticsData& TestErrorStatisticsData::
        operator= (const TestErrorStatisticsData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->MinimumError_ = x.MinimumError_;
            this->MaximumError_ = x.MaximumError_;
            this->AverageError_ = x.AverageError_;
            this->StandardDeviation_ = x.StandardDeviation_;
            this->PercentToleranceVsNumErrors_ = x.PercentToleranceVsNumErrors_;
            this->Differences_ = x.Differences_;
            this->ComputedPropertyID_ = x.ComputedPropertyID_;
            this->ExpectedPropertyID_ = x.ExpectedPropertyID_;
            this->NumberOfErrors_ = x.NumberOfErrors_;
            this->PercentTolerance_ = x.PercentTolerance_;
            this->PropertyName_ = x.PropertyName_;
          }

          return *this;
        }

        TestErrorStatisticsData::
        ~TestErrorStatisticsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_type_factory_init (
          "TestErrorStatisticsData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TestReportData
        //

        TestReportData::
        TestReportData ()
        : ::xml_schema::type (),
          TestSuite_ (this)
        {
        }

        TestReportData::
        TestReportData (const TestReportData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          TestSuite_ (x.TestSuite_, f, this)
        {
        }

        TestReportData::
        TestReportData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          TestSuite_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void TestReportData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TestSuite
            //
            if (n.name () == "TestSuite" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              ::std::unique_ptr< TestSuite_type > r (
                TestSuite_traits::create (i, f, this));

              this->TestSuite_.push_back (::std::move (r));
              continue;
            }

            break;
          }
        }

        TestReportData* TestReportData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TestReportData (*this, f, c);
        }

        TestReportData& TestReportData::
        operator= (const TestReportData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->TestSuite_ = x.TestSuite_;
          }

          return *this;
        }

        TestReportData::
        ~TestReportData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TestReportData >
        _xsd_TestReportData_type_factory_init (
          "TestReportData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TestSuite
        //

        TestSuite::
        TestSuite ()
        : ::xml_schema::type (),
          Requirement_ (this),
          SuiteEqualError_ (this),
          Time_ (this),
          TestCase_ (this),
          Performed_ (Performed_default_value (), this),
          Errors_ (this),
          Tests_ (this),
          Name_ (this)
        {
        }

        TestSuite::
        TestSuite (const Time_type& Time,
                   const Errors_type& Errors,
                   const Tests_type& Tests,
                   const Name_type& Name)
        : ::xml_schema::type (),
          Requirement_ (this),
          SuiteEqualError_ (this),
          Time_ (Time, this),
          TestCase_ (this),
          Performed_ (Performed_default_value (), this),
          Errors_ (Errors, this),
          Tests_ (Tests, this),
          Name_ (Name, this)
        {
        }

        TestSuite::
        TestSuite (::std::unique_ptr< Time_type > Time,
                   const Errors_type& Errors,
                   const Tests_type& Tests,
                   const Name_type& Name)
        : ::xml_schema::type (),
          Requirement_ (this),
          SuiteEqualError_ (this),
          Time_ (std::move (Time), this),
          TestCase_ (this),
          Performed_ (Performed_default_value (), this),
          Errors_ (Errors, this),
          Tests_ (Tests, this),
          Name_ (Name, this)
        {
        }

        TestSuite::
        TestSuite (const TestSuite& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Requirement_ (x.Requirement_, f, this),
          SuiteEqualError_ (x.SuiteEqualError_, f, this),
          Time_ (x.Time_, f, this),
          TestCase_ (x.TestCase_, f, this),
          Performed_ (x.Performed_, f, this),
          Errors_ (x.Errors_, f, this),
          Tests_ (x.Tests_, f, this),
          Name_ (x.Name_, f, this)
        {
        }

        TestSuite::
        TestSuite (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Requirement_ (this),
          SuiteEqualError_ (this),
          Time_ (this),
          TestCase_ (this),
          Performed_ (this),
          Errors_ (this),
          Tests_ (this),
          Name_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TestSuite::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Requirement
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Requirement",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Requirement_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Requirement_type > r (
                  dynamic_cast< Requirement_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Requirement_.push_back (::std::move (r));
                continue;
              }
            }

            // SuiteEqualError
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SuiteEqualError",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SuiteEqualError_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< SuiteEqualError_type > r (
                  dynamic_cast< SuiteEqualError_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->SuiteEqualError_.push_back (::std::move (r));
                continue;
              }
            }

            // Time
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Time_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Time_.present ())
                {
                  ::std::unique_ptr< Time_type > r (
                    dynamic_cast< Time_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Time_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TestCase
            //
            if (n.name () == "TestCase" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              ::std::unique_ptr< TestCase_type > r (
                TestCase_traits::create (i, f, this));

              this->TestCase_.push_back (::std::move (r));
              continue;
            }

            break;
          }

          if (!Time_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Time",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Performed" && n.namespace_ ().empty ())
            {
              this->Performed_.set (Performed_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Errors" && n.namespace_ ().empty ())
            {
              this->Errors_.set (Errors_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Tests" && n.namespace_ ().empty ())
            {
              this->Tests_.set (Tests_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Name" && n.namespace_ ().empty ())
            {
              this->Name_.set (Name_traits::create (i, f, this));
              continue;
            }
          }

          if (!Performed_.present ())
          {
            this->Performed_.set (Performed_default_value ());
          }

          if (!Errors_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Errors",
              "");
          }

          if (!Tests_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Tests",
              "");
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Name",
              "");
          }
        }

        TestSuite* TestSuite::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TestSuite (*this, f, c);
        }

        TestSuite& TestSuite::
        operator= (const TestSuite& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Requirement_ = x.Requirement_;
            this->SuiteEqualError_ = x.SuiteEqualError_;
            this->Time_ = x.Time_;
            this->TestCase_ = x.TestCase_;
            this->Performed_ = x.Performed_;
            this->Errors_ = x.Errors_;
            this->Tests_ = x.Tests_;
            this->Name_ = x.Name_;
          }

          return *this;
        }

        TestSuite::
        ~TestSuite ()
        {
        }

        // TestCase
        //

        TestCase::
        TestCase ()
        : ::xml_schema::type (),
          CaseEqualError_ (this),
          Failure_ (this),
          Time_ (this),
          Name_ (this)
        {
        }

        TestCase::
        TestCase (const Time_type& Time,
                  const Name_type& Name)
        : ::xml_schema::type (),
          CaseEqualError_ (this),
          Failure_ (this),
          Time_ (Time, this),
          Name_ (Name, this)
        {
        }

        TestCase::
        TestCase (::std::unique_ptr< Time_type > Time,
                  const Name_type& Name)
        : ::xml_schema::type (),
          CaseEqualError_ (this),
          Failure_ (this),
          Time_ (std::move (Time), this),
          Name_ (Name, this)
        {
        }

        TestCase::
        TestCase (const TestCase& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          CaseEqualError_ (x.CaseEqualError_, f, this),
          Failure_ (x.Failure_, f, this),
          Time_ (x.Time_, f, this),
          Name_ (x.Name_, f, this)
        {
        }

        TestCase::
        TestCase (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          CaseEqualError_ (this),
          Failure_ (this),
          Time_ (this),
          Name_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TestCase::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CaseEqualError
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CaseEqualError",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CaseEqualError_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< CaseEqualError_type > r (
                  dynamic_cast< CaseEqualError_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->CaseEqualError_.push_back (::std::move (r));
                continue;
              }
            }

            // Failure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Failure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Failure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Failure_type > r (
                  dynamic_cast< Failure_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Failure_.push_back (::std::move (r));
                continue;
              }
            }

            // Time
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Time_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Time_.present ())
                {
                  ::std::unique_ptr< Time_type > r (
                    dynamic_cast< Time_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Time_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Time_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Time",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Name" && n.namespace_ ().empty ())
            {
              this->Name_.set (Name_traits::create (i, f, this));
              continue;
            }
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Name",
              "");
          }
        }

        TestCase* TestCase::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TestCase (*this, f, c);
        }

        TestCase& TestCase::
        operator= (const TestCase& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->CaseEqualError_ = x.CaseEqualError_;
            this->Failure_ = x.Failure_;
            this->Time_ = x.Time_;
            this->Name_ = x.Name_;
          }

          return *this;
        }

        TestCase::
        ~TestCase ()
        {
        }
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const TestErrorStatisticsData& i)
        {
          if (i.MinimumError ())
          {
            o << ::std::endl << "MinimumError: " << *i.MinimumError ();
          }

          if (i.MaximumError ())
          {
            o << ::std::endl << "MaximumError: " << *i.MaximumError ();
          }

          if (i.AverageError ())
          {
            o << ::std::endl << "AverageError: " << *i.AverageError ();
          }

          if (i.StandardDeviation ())
          {
            o << ::std::endl << "StandardDeviation: " << *i.StandardDeviation ();
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PercentToleranceVsNumErrors ())
            {
              o << ::std::endl << "PercentToleranceVsNumErrors: ";
              om.insert (o, *i.PercentToleranceVsNumErrors ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestErrorStatisticsData::Differences_const_iterator
                 b (i.Differences ().begin ()), e (i.Differences ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Differences: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "ComputedPropertyID: " << i.ComputedPropertyID ();
          o << ::std::endl << "ExpectedPropertyID: " << i.ExpectedPropertyID ();
          if (i.NumberOfErrors ())
          {
            o << ::std::endl << "NumberOfErrors: " << *i.NumberOfErrors ();
          }

          o << ::std::endl << "PercentTolerance: " << i.PercentTolerance ();
          o << ::std::endl << "PropertyName: " << i.PropertyName ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TestReportData& i)
        {
          for (TestReportData::TestSuite_const_iterator
               b (i.TestSuite ().begin ()), e (i.TestSuite ().end ());
               b != e; ++b)
          {
            o << ::std::endl << "TestSuite: " << *b;
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TestReportData >
        _xsd_TestReportData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TestSuite& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestSuite::Requirement_const_iterator
                 b (i.Requirement ().begin ()), e (i.Requirement ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Requirement: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestSuite::SuiteEqualError_const_iterator
                 b (i.SuiteEqualError ().begin ()), e (i.SuiteEqualError ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "SuiteEqualError: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Time: ";
            om.insert (o, i.Time ());
          }

          for (TestSuite::TestCase_const_iterator
               b (i.TestCase ().begin ()), e (i.TestCase ().end ());
               b != e; ++b)
          {
            o << ::std::endl << "TestCase: " << *b;
          }

          o << ::std::endl << "Performed: " << i.Performed ();
          o << ::std::endl << "Errors: " << i.Errors ();
          o << ::std::endl << "Tests: " << i.Tests ();
          o << ::std::endl << "Name: " << i.Name ();
          return o;
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const TestCase& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestCase::CaseEqualError_const_iterator
                 b (i.CaseEqualError ().begin ()), e (i.CaseEqualError ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "CaseEqualError: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestCase::Failure_const_iterator
                 b (i.Failure ().begin ()), e (i.Failure ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Failure: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Time: ";
            om.insert (o, i.Time ());
          }

          o << ::std::endl << "Name: " << i.Name ();
          return o;
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TestReport (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
            ::mil::tatrc::physiology::datamodel::TestReport (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > (
              ::mil::tatrc::physiology::datamodel::TestReport (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "TestReport",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::TestReportData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::TestReportData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TestReport",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData >
        TestReport (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "TestReport",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::TestReportData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TestReportData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::TestReportData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TestReport",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const TestErrorStatisticsData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // MinimumError
          //
          if (i.MinimumError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MinimumError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.MinimumError ());
          }

          // MaximumError
          //
          if (i.MaximumError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MaximumError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.MaximumError ());
          }

          // AverageError
          //
          if (i.AverageError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AverageError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.AverageError ());
          }

          // StandardDeviation
          //
          if (i.StandardDeviation ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StandardDeviation",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.StandardDeviation ());
          }

          // PercentToleranceVsNumErrors
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PercentToleranceVsNumErrors ())
            {
              const TestErrorStatisticsData::PercentToleranceVsNumErrors_type& x (*i.PercentToleranceVsNumErrors ());
              if (typeid (TestErrorStatisticsData::PercentToleranceVsNumErrors_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PercentToleranceVsNumErrors",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PercentToleranceVsNumErrors",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Differences
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestErrorStatisticsData::Differences_const_iterator
                 b (i.Differences ().begin ()), n (i.Differences ().end ());
                 b != n; ++b)
            {
              if (typeid (TestErrorStatisticsData::Differences_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Differences",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Differences",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ComputedPropertyID
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ComputedPropertyID",
                e));

            a << i.ComputedPropertyID ();
          }

          // ExpectedPropertyID
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ExpectedPropertyID",
                e));

            a << i.ExpectedPropertyID ();
          }

          // NumberOfErrors
          //
          if (i.NumberOfErrors ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "NumberOfErrors",
                e));

            a << *i.NumberOfErrors ();
          }

          // PercentTolerance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PercentTolerance",
                e));

            a << ::xml_schema::as_double(i.PercentTolerance ());
          }

          // PropertyName
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PropertyName",
                e));

            a << i.PropertyName ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_type_serializer_init (
          "TestErrorStatisticsData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TestReportData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // TestSuite
          //
          for (TestReportData::TestSuite_const_iterator
               b (i.TestSuite ().begin ()), n (i.TestSuite ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TestSuite",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << *b;
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TestReportData >
        _xsd_TestReportData_type_serializer_init (
          "TestReportData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        TestReport (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        TestReport (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TestReport (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TestReport (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        TestReport (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TestReport (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TestReport (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TestReport (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::TestReportData) == typeid (s))
          {
            if (n.name () == "TestReport" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "TestReport",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "TestReport",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        TestReport (const ::mil::tatrc::physiology::datamodel::TestReportData& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::TestReportData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "TestReport",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "TestReport",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::TestReport (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const TestSuite& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Requirement
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestSuite::Requirement_const_iterator
                 b (i.Requirement ().begin ()), n (i.Requirement ().end ());
                 b != n; ++b)
            {
              if (typeid (TestSuite::Requirement_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Requirement",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Requirement",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // SuiteEqualError
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestSuite::SuiteEqualError_const_iterator
                 b (i.SuiteEqualError ().begin ()), n (i.SuiteEqualError ().end ());
                 b != n; ++b)
            {
              if (typeid (TestSuite::SuiteEqualError_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SuiteEqualError",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "SuiteEqualError",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Time
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TestSuite::Time_type& x (i.Time ());
            if (typeid (TestSuite::Time_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Time",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TestCase
          //
          for (TestSuite::TestCase_const_iterator
               b (i.TestCase ().begin ()), n (i.TestCase ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TestCase",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << *b;
          }

          // Performed
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Performed",
                e));

            a << i.Performed ();
          }

          // Errors
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Errors",
                e));

            a << i.Errors ();
          }

          // Tests
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Tests",
                e));

            a << i.Tests ();
          }

          // Name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Name",
                e));

            a << i.Name ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const TestCase& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // CaseEqualError
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestCase::CaseEqualError_const_iterator
                 b (i.CaseEqualError ().begin ()), n (i.CaseEqualError ().end ());
                 b != n; ++b)
            {
              if (typeid (TestCase::CaseEqualError_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CaseEqualError",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "CaseEqualError",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Failure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestCase::Failure_const_iterator
                 b (i.Failure ().begin ()), n (i.Failure ().end ());
                 b != n; ++b)
            {
              if (typeid (TestCase::Failure_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Failure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Failure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Time
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TestCase::Time_type& x (i.Time ());
            if (typeid (TestCase::Time_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Time",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Name",
                e));

            a << i.Name ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

