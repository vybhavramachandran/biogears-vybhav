// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from PatientActions.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ACTIONS_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ACTIONS_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class PatientActionData;
        class enumPatientAssessment;
        class PatientAssessmentRequestData;
        class AcuteRespiratoryDistressData;
        class AcuteStressData;
        class AirwayObstructionData;
        class ApneaData;
        class AsthmaAttackData;
        class enumBrainInjuryType;
        class BrainInjuryData;
        class BronchoconstrictionData;
        class BurnWoundData;
        class CardiacArrestData;
        class ChestCompressionData;
        class ChestCompressionForceData;
        class ChestCompressionForceScaleData;
        class ChestOcclusiveDressingData;
        class ConsciousRespirationCommandData;
        class ForcedInhaleData;
        class ForcedExhaleData;
        class BreathHoldData;
        class UseInhalerData;
        class ConsciousRespirationData;
        class ConsumeNutrientsData;
        class GenericExerciseData;
        class RunningExerciseData;
        class CyclingExerciseData;
        class StrengthExerciseData;
        class ExerciseData;
        class HemorrhageData;
        class enumInfectionSeverity;
        class InfectionData;
        class enumIntubationType;
        class IntubationData;
        class MechanicalVentilationData;
        class NeedleDecompressionData;
        class NasalStateData;
        class PainStimulusData;
        class PericardialEffusionData;
        class enumPneumothoraxType;
        class TensionPneumothoraxData;
        class SleepData;
        class enumBolusAdministration;
        class enumOralAdministration;
        class SubstanceAdministrationData;
        class SubstanceBolusData;
        class SubstanceBolusStateData;
        class SubstanceCompoundInfusionData;
        class SubstanceInfusionData;
        class SubstanceNasalDoseData;
        class SubstanceOralDoseData;
        class enumTourniquetApplicationLevel;
        class TourniquetData;
        class TransmucosalStateData;
        class UrinateData;
        class OverrideData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Scenario.hxx"

#include "PatientNutrition.hxx"

#include "Substance.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %PatientActionData schema type.
         *
         * Base Patient Action Type
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PatientActionData: public ::mil::tatrc::physiology::datamodel::ActionData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PatientActionData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PatientActionData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PatientActionData (const PatientActionData& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PatientActionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PatientActionData ();
        };

        /**
         * @brief Enumeration class corresponding to the %enumPatientAssessment
         * schema type.
         */
        class BIOGEARS_CDM_API enumPatientAssessment: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            PulmonaryFunctionTest,
            CompleteBloodCount,
            ComprehensiveMetabolicPanel,
            SequentialOrganFailureAssessment,
            Urinalysis
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumPatientAssessment ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumPatientAssessment (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumPatientAssessment (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumPatientAssessment (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumPatientAssessment (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPatientAssessment (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPatientAssessment (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPatientAssessment (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumPatientAssessment (const enumPatientAssessment& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumPatientAssessment*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumPatientAssessment&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumPatientAssessment_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumPatientAssessment_convert () const;

          public:
          static const char* const _xsd_enumPatientAssessment_literals_[5];
          static const value _xsd_enumPatientAssessment_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PatientAssessmentRequestData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PatientAssessmentRequestData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Type
           *
           * @brief Accessor and modifier functions for the %Type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPatientAssessment Type_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Type_type&
          Type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Type_type&
          Type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Type (const Type_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Type (::std::unique_ptr< Type_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PatientAssessmentRequestData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PatientAssessmentRequestData (const Type_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PatientAssessmentRequestData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PatientAssessmentRequestData (const PatientAssessmentRequestData& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PatientAssessmentRequestData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PatientAssessmentRequestData&
          operator= (const PatientAssessmentRequestData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PatientAssessmentRequestData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Type_type > Type_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AcuteRespiratoryDistressData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API AcuteRespiratoryDistressData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          AcuteRespiratoryDistressData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AcuteRespiratoryDistressData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          AcuteRespiratoryDistressData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AcuteRespiratoryDistressData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AcuteRespiratoryDistressData (const AcuteRespiratoryDistressData& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AcuteRespiratoryDistressData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AcuteRespiratoryDistressData&
          operator= (const AcuteRespiratoryDistressData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AcuteRespiratoryDistressData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AcuteStressData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API AcuteStressData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          AcuteStressData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AcuteStressData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          AcuteStressData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AcuteStressData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AcuteStressData (const AcuteStressData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AcuteStressData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AcuteStressData&
          operator= (const AcuteStressData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AcuteStressData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AirwayObstructionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API AirwayObstructionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          AirwayObstructionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AirwayObstructionData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          AirwayObstructionData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AirwayObstructionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AirwayObstructionData (const AirwayObstructionData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AirwayObstructionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AirwayObstructionData&
          operator= (const AirwayObstructionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AirwayObstructionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ApneaData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ApneaData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ApneaData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ApneaData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ApneaData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ApneaData (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ApneaData (const ApneaData& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ApneaData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ApneaData&
          operator= (const ApneaData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ApneaData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AsthmaAttackData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API AsthmaAttackData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          AsthmaAttackData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AsthmaAttackData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          AsthmaAttackData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AsthmaAttackData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AsthmaAttackData (const AsthmaAttackData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AsthmaAttackData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AsthmaAttackData&
          operator= (const AsthmaAttackData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AsthmaAttackData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumBrainInjuryType
         * schema type.
         */
        class BIOGEARS_CDM_API enumBrainInjuryType: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Diffuse,
            LeftFocal,
            RightFocal
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumBrainInjuryType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumBrainInjuryType (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumBrainInjuryType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumBrainInjuryType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumBrainInjuryType (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBrainInjuryType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBrainInjuryType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBrainInjuryType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumBrainInjuryType (const enumBrainInjuryType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumBrainInjuryType*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumBrainInjuryType&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumBrainInjuryType_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumBrainInjuryType_convert () const;

          public:
          static const char* const _xsd_enumBrainInjuryType_literals_[3];
          static const value _xsd_enumBrainInjuryType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BrainInjuryData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BrainInjuryData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Type
           *
           * @brief Accessor and modifier functions for the %Type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumBrainInjuryType Type_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Type_type&
          Type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Type_type&
          Type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Type (const Type_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Type (::std::unique_ptr< Type_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BrainInjuryData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BrainInjuryData (const Severity_type&,
                           const Type_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BrainInjuryData (::std::unique_ptr< Severity_type >,
                           const Type_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BrainInjuryData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BrainInjuryData (const BrainInjuryData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BrainInjuryData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BrainInjuryData&
          operator= (const BrainInjuryData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BrainInjuryData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;
          ::xsd::cxx::tree::one< Type_type > Type_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BronchoconstrictionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BronchoconstrictionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BronchoconstrictionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BronchoconstrictionData (const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BronchoconstrictionData (::std::unique_ptr< Severity_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BronchoconstrictionData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BronchoconstrictionData (const BronchoconstrictionData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BronchoconstrictionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BronchoconstrictionData&
          operator= (const BronchoconstrictionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BronchoconstrictionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BurnWoundData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BurnWoundData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name TotalBodySurfaceArea
           *
           * @brief Accessor and modifier functions for the %TotalBodySurfaceArea
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data TotalBodySurfaceArea_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBodySurfaceArea_type, char > TotalBodySurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TotalBodySurfaceArea_type&
          TotalBodySurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TotalBodySurfaceArea_type&
          TotalBodySurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBodySurfaceArea (const TotalBodySurfaceArea_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TotalBodySurfaceArea (::std::unique_ptr< TotalBodySurfaceArea_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BurnWoundData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BurnWoundData (const TotalBodySurfaceArea_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BurnWoundData (::std::unique_ptr< TotalBodySurfaceArea_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BurnWoundData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BurnWoundData (const BurnWoundData& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BurnWoundData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BurnWoundData&
          operator= (const BurnWoundData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BurnWoundData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< TotalBodySurfaceArea_type > TotalBodySurfaceArea_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CardiacArrestData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CardiacArrestData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const State_type&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          State_type&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          CardiacArrestData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CardiacArrestData (const State_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardiacArrestData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiacArrestData (const CardiacArrestData& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CardiacArrestData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiacArrestData&
          operator= (const CardiacArrestData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CardiacArrestData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< State_type > State_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ChestCompressionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ChestCompressionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ChestCompressionData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ChestCompressionData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestCompressionData (const ChestCompressionData& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ChestCompressionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ChestCompressionData ();
        };

        /**
         * @brief Class corresponding to the %ChestCompressionForceData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ChestCompressionForceData: public ::mil::tatrc::physiology::datamodel::ChestCompressionData
        {
          public:
          /**
           * @name Force
           *
           * @brief Accessor and modifier functions for the %Force
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarForceData Force_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Force_type, char > Force_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Force_type&
          Force () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Force_type&
          Force ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Force (const Force_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Force (::std::unique_ptr< Force_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ChestCompressionForceData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ChestCompressionForceData (const Force_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ChestCompressionForceData (::std::unique_ptr< Force_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ChestCompressionForceData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestCompressionForceData (const ChestCompressionForceData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ChestCompressionForceData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestCompressionForceData&
          operator= (const ChestCompressionForceData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ChestCompressionForceData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Force_type > Force_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ChestCompressionForceScaleData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ChestCompressionForceScaleData: public ::mil::tatrc::physiology::datamodel::ChestCompressionData
        {
          public:
          /**
           * @name ForceScale
           *
           * @brief Accessor and modifier functions for the %ForceScale
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data ForceScale_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForceScale_type, char > ForceScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ForceScale_type&
          ForceScale () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ForceScale_type&
          ForceScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ForceScale (const ForceScale_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ForceScale (::std::unique_ptr< ForceScale_type > p);

          //@}

          /**
           * @name ForcePeriod
           *
           * @brief Accessor and modifier functions for the %ForcePeriod
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ForcePeriod_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ForcePeriod_type > ForcePeriod_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForcePeriod_type, char > ForcePeriod_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ForcePeriod_optional&
          ForcePeriod () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ForcePeriod_optional&
          ForcePeriod ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ForcePeriod (const ForcePeriod_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ForcePeriod (const ForcePeriod_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ForcePeriod (::std::unique_ptr< ForcePeriod_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ChestCompressionForceScaleData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ChestCompressionForceScaleData (const ForceScale_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ChestCompressionForceScaleData (::std::unique_ptr< ForceScale_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ChestCompressionForceScaleData (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestCompressionForceScaleData (const ChestCompressionForceScaleData& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ChestCompressionForceScaleData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestCompressionForceScaleData&
          operator= (const ChestCompressionForceScaleData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ChestCompressionForceScaleData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ForceScale_type > ForceScale_;
          ForcePeriod_optional ForcePeriod_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ChestOcclusiveDressingData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ChestOcclusiveDressingData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const State_type&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          State_type&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Side
           *
           * @brief Accessor and modifier functions for the %Side
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSide Side_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Side_type, char > Side_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Side_type&
          Side () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Side_type&
          Side ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Side (const Side_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Side (::std::unique_ptr< Side_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ChestOcclusiveDressingData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ChestOcclusiveDressingData (const State_type&,
                                      const Side_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ChestOcclusiveDressingData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestOcclusiveDressingData (const ChestOcclusiveDressingData& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ChestOcclusiveDressingData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ChestOcclusiveDressingData&
          operator= (const ChestOcclusiveDressingData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ChestOcclusiveDressingData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< State_type > State_;
          ::xsd::cxx::tree::one< Side_type > Side_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConsciousRespirationCommandData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ConsciousRespirationCommandData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Comment
           *
           * @brief Accessor and modifier functions for the %Comment
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Comment_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Comment_type > Comment_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Comment_type, char > Comment_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Comment_optional&
          Comment () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Comment_optional&
          Comment ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Comment (const Comment_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Comment (const Comment_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Comment (::std::unique_ptr< Comment_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConsciousRespirationCommandData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConsciousRespirationCommandData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsciousRespirationCommandData (const ConsciousRespirationCommandData& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConsciousRespirationCommandData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsciousRespirationCommandData&
          operator= (const ConsciousRespirationCommandData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConsciousRespirationCommandData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Comment_optional Comment_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ForcedInhaleData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ForcedInhaleData: public ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData
        {
          public:
          /**
           * @name InspiratoryCapacityFraction
           *
           * @brief Accessor and modifier functions for the %InspiratoryCapacityFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data InspiratoryCapacityFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryCapacityFraction_type, char > InspiratoryCapacityFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          InspiratoryCapacityFraction (::std::unique_ptr< InspiratoryCapacityFraction_type > p);

          //@}

          /**
           * @name Period
           *
           * @brief Accessor and modifier functions for the %Period
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData Period_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Period_type, char > Period_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Period_type&
          Period () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Period_type&
          Period ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Period (const Period_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Period (::std::unique_ptr< Period_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ForcedInhaleData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ForcedInhaleData (const InspiratoryCapacityFraction_type&,
                            const Period_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ForcedInhaleData (::std::unique_ptr< InspiratoryCapacityFraction_type >,
                            ::std::unique_ptr< Period_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ForcedInhaleData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ForcedInhaleData (const ForcedInhaleData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ForcedInhaleData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ForcedInhaleData&
          operator= (const ForcedInhaleData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ForcedInhaleData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< InspiratoryCapacityFraction_type > InspiratoryCapacityFraction_;
          ::xsd::cxx::tree::one< Period_type > Period_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ForcedExhaleData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ForcedExhaleData: public ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData
        {
          public:
          /**
           * @name ExpiratoryReserveVolumeFraction
           *
           * @brief Accessor and modifier functions for the %ExpiratoryReserveVolumeFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data ExpiratoryReserveVolumeFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryReserveVolumeFraction_type, char > ExpiratoryReserveVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ExpiratoryReserveVolumeFraction (::std::unique_ptr< ExpiratoryReserveVolumeFraction_type > p);

          //@}

          /**
           * @name Period
           *
           * @brief Accessor and modifier functions for the %Period
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData Period_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Period_type, char > Period_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Period_type&
          Period () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Period_type&
          Period ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Period (const Period_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Period (::std::unique_ptr< Period_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ForcedExhaleData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ForcedExhaleData (const ExpiratoryReserveVolumeFraction_type&,
                            const Period_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ForcedExhaleData (::std::unique_ptr< ExpiratoryReserveVolumeFraction_type >,
                            ::std::unique_ptr< Period_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ForcedExhaleData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ForcedExhaleData (const ForcedExhaleData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ForcedExhaleData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ForcedExhaleData&
          operator= (const ForcedExhaleData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ForcedExhaleData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ExpiratoryReserveVolumeFraction_type > ExpiratoryReserveVolumeFraction_;
          ::xsd::cxx::tree::one< Period_type > Period_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BreathHoldData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BreathHoldData: public ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData
        {
          public:
          /**
           * @name Period
           *
           * @brief Accessor and modifier functions for the %Period
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData Period_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Period_type, char > Period_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Period_type&
          Period () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Period_type&
          Period ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Period (const Period_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Period (::std::unique_ptr< Period_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BreathHoldData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BreathHoldData (const Period_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BreathHoldData (::std::unique_ptr< Period_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BreathHoldData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BreathHoldData (const BreathHoldData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BreathHoldData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BreathHoldData&
          operator= (const BreathHoldData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BreathHoldData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Period_type > Period_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %UseInhalerData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API UseInhalerData: public ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          UseInhalerData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          UseInhalerData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UseInhalerData (const UseInhalerData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual UseInhalerData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~UseInhalerData ();
        };

        /**
         * @brief Class corresponding to the %ConsciousRespirationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ConsciousRespirationData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Command
           *
           * @brief Accessor and modifier functions for the %Command
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData Command_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Command_type > Command_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef Command_sequence::iterator Command_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Command_sequence::const_iterator Command_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Command_type, char > Command_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Command_sequence&
          Command () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Command_sequence&
          Command ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          Command (const Command_sequence& s);

          //@}

          /**
           * @name AppendToPrevious
           *
           * @brief Accessor and modifier functions for the %AppendToPrevious
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean AppendToPrevious_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< AppendToPrevious_type, char > AppendToPrevious_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const AppendToPrevious_type&
          AppendToPrevious () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          AppendToPrevious_type&
          AppendToPrevious ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          AppendToPrevious (const AppendToPrevious_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ConsciousRespirationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConsciousRespirationData (const AppendToPrevious_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConsciousRespirationData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsciousRespirationData (const ConsciousRespirationData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConsciousRespirationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsciousRespirationData&
          operator= (const ConsciousRespirationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConsciousRespirationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Command_sequence Command_;
          ::xsd::cxx::tree::one< AppendToPrevious_type > AppendToPrevious_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConsumeNutrientsData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ConsumeNutrientsData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name NutritionFile
           *
           * @brief Accessor and modifier functions for the %NutritionFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string NutritionFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NutritionFile_type > NutritionFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NutritionFile_type, char > NutritionFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NutritionFile_optional&
          NutritionFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NutritionFile_optional&
          NutritionFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NutritionFile (const NutritionFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NutritionFile (const NutritionFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NutritionFile (::std::unique_ptr< NutritionFile_type > p);

          //@}

          /**
           * @name Nutrition
           *
           * @brief Accessor and modifier functions for the %Nutrition
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::NutritionData Nutrition_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Nutrition_type > Nutrition_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Nutrition_type, char > Nutrition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Nutrition_optional&
          Nutrition () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Nutrition_optional&
          Nutrition ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Nutrition (const Nutrition_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Nutrition (const Nutrition_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Nutrition (::std::unique_ptr< Nutrition_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConsumeNutrientsData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConsumeNutrientsData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsumeNutrientsData (const ConsumeNutrientsData& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConsumeNutrientsData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConsumeNutrientsData&
          operator= (const ConsumeNutrientsData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConsumeNutrientsData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          NutritionFile_optional NutritionFile_;
          Nutrition_optional Nutrition_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %GenericExerciseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API GenericExerciseData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Intensity
           *
           * @brief Accessor and modifier functions for the %Intensity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Intensity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Intensity_type > Intensity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Intensity_type, char > Intensity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Intensity_optional&
          Intensity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Intensity_optional&
          Intensity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Intensity (const Intensity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Intensity (const Intensity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Intensity (::std::unique_ptr< Intensity_type > p);

          //@}

          /**
           * @name DesiredWorkRate
           *
           * @brief Accessor and modifier functions for the %DesiredWorkRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData DesiredWorkRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DesiredWorkRate_type > DesiredWorkRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DesiredWorkRate_type, char > DesiredWorkRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DesiredWorkRate_optional&
          DesiredWorkRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DesiredWorkRate_optional&
          DesiredWorkRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DesiredWorkRate (const DesiredWorkRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DesiredWorkRate (const DesiredWorkRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DesiredWorkRate (::std::unique_ptr< DesiredWorkRate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          GenericExerciseData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GenericExerciseData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GenericExerciseData (const GenericExerciseData& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual GenericExerciseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GenericExerciseData&
          operator= (const GenericExerciseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~GenericExerciseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Intensity_optional Intensity_;
          DesiredWorkRate_optional DesiredWorkRate_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RunningExerciseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API RunningExerciseData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Speed
           *
           * @brief Accessor and modifier functions for the %Speed
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarLengthPerTimeData Speed_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Speed_type, char > Speed_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Speed_type&
          Speed () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Speed_type&
          Speed ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Speed (const Speed_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Speed (::std::unique_ptr< Speed_type > p);

          //@}

          /**
           * @name Incline
           *
           * @brief Accessor and modifier functions for the %Incline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Incline_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Incline_type, char > Incline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Incline_type&
          Incline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Incline_type&
          Incline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Incline (const Incline_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Incline (::std::unique_ptr< Incline_type > p);

          //@}

          /**
           * @name AddedWeight
           *
           * @brief Accessor and modifier functions for the %AddedWeight
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData AddedWeight_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AddedWeight_type > AddedWeight_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AddedWeight_type, char > AddedWeight_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AddedWeight_optional&
          AddedWeight () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AddedWeight_optional&
          AddedWeight ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AddedWeight (const AddedWeight_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AddedWeight (const AddedWeight_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AddedWeight (::std::unique_ptr< AddedWeight_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          RunningExerciseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RunningExerciseData (const Speed_type&,
                               const Incline_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          RunningExerciseData (::std::unique_ptr< Speed_type >,
                               ::std::unique_ptr< Incline_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RunningExerciseData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RunningExerciseData (const RunningExerciseData& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RunningExerciseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RunningExerciseData&
          operator= (const RunningExerciseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RunningExerciseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Speed_type > Speed_;
          ::xsd::cxx::tree::one< Incline_type > Incline_;
          AddedWeight_optional AddedWeight_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CyclingExerciseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CyclingExerciseData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Cadence
           *
           * @brief Accessor and modifier functions for the %Cadence
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData Cadence_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Cadence_type, char > Cadence_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Cadence_type&
          Cadence () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Cadence_type&
          Cadence ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Cadence (const Cadence_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Cadence (::std::unique_ptr< Cadence_type > p);

          //@}

          /**
           * @name Power
           *
           * @brief Accessor and modifier functions for the %Power
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData Power_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Power_type, char > Power_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Power_type&
          Power () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Power_type&
          Power ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Power (const Power_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Power (::std::unique_ptr< Power_type > p);

          //@}

          /**
           * @name AddedWeight
           *
           * @brief Accessor and modifier functions for the %AddedWeight
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData AddedWeight_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AddedWeight_type > AddedWeight_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AddedWeight_type, char > AddedWeight_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AddedWeight_optional&
          AddedWeight () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AddedWeight_optional&
          AddedWeight ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AddedWeight (const AddedWeight_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AddedWeight (const AddedWeight_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AddedWeight (::std::unique_ptr< AddedWeight_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          CyclingExerciseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CyclingExerciseData (const Cadence_type&,
                               const Power_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          CyclingExerciseData (::std::unique_ptr< Cadence_type >,
                               ::std::unique_ptr< Power_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CyclingExerciseData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CyclingExerciseData (const CyclingExerciseData& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CyclingExerciseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CyclingExerciseData&
          operator= (const CyclingExerciseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CyclingExerciseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Cadence_type > Cadence_;
          ::xsd::cxx::tree::one< Power_type > Power_;
          AddedWeight_optional AddedWeight_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %StrengthExerciseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API StrengthExerciseData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Weight
           *
           * @brief Accessor and modifier functions for the %Weight
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData Weight_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Weight_type, char > Weight_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Weight_type&
          Weight () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Weight_type&
          Weight ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Weight (const Weight_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Weight (::std::unique_ptr< Weight_type > p);

          //@}

          /**
           * @name Repetitions
           *
           * @brief Accessor and modifier functions for the %Repetitions
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Repetitions_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Repetitions_type, char > Repetitions_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Repetitions_type&
          Repetitions () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Repetitions_type&
          Repetitions ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Repetitions (const Repetitions_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Repetitions (::std::unique_ptr< Repetitions_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          StrengthExerciseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StrengthExerciseData (const Weight_type&,
                                const Repetitions_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          StrengthExerciseData (::std::unique_ptr< Weight_type >,
                                ::std::unique_ptr< Repetitions_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StrengthExerciseData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StrengthExerciseData (const StrengthExerciseData& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StrengthExerciseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StrengthExerciseData&
          operator= (const StrengthExerciseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~StrengthExerciseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Weight_type > Weight_;
          ::xsd::cxx::tree::one< Repetitions_type > Repetitions_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ExerciseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ExerciseData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name GenericExercise
           *
           * @brief Accessor and modifier functions for the %GenericExercise
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::GenericExerciseData GenericExercise_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GenericExercise_type > GenericExercise_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GenericExercise_type, char > GenericExercise_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GenericExercise_optional&
          GenericExercise () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GenericExercise_optional&
          GenericExercise ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GenericExercise (const GenericExercise_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GenericExercise (const GenericExercise_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GenericExercise (::std::unique_ptr< GenericExercise_type > p);

          //@}

          /**
           * @name RunningExercise
           *
           * @brief Accessor and modifier functions for the %RunningExercise
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningExerciseData RunningExercise_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RunningExercise_type > RunningExercise_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RunningExercise_type, char > RunningExercise_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RunningExercise_optional&
          RunningExercise () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RunningExercise_optional&
          RunningExercise ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RunningExercise (const RunningExercise_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RunningExercise (const RunningExercise_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RunningExercise (::std::unique_ptr< RunningExercise_type > p);

          //@}

          /**
           * @name CyclingExercise
           *
           * @brief Accessor and modifier functions for the %CyclingExercise
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::CyclingExerciseData CyclingExercise_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CyclingExercise_type > CyclingExercise_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CyclingExercise_type, char > CyclingExercise_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CyclingExercise_optional&
          CyclingExercise () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CyclingExercise_optional&
          CyclingExercise ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CyclingExercise (const CyclingExercise_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CyclingExercise (const CyclingExercise_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CyclingExercise (::std::unique_ptr< CyclingExercise_type > p);

          //@}

          /**
           * @name StrengthExercise
           *
           * @brief Accessor and modifier functions for the %StrengthExercise
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::StrengthExerciseData StrengthExercise_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StrengthExercise_type > StrengthExercise_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StrengthExercise_type, char > StrengthExercise_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StrengthExercise_optional&
          StrengthExercise () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StrengthExercise_optional&
          StrengthExercise ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StrengthExercise (const StrengthExercise_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StrengthExercise (const StrengthExercise_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StrengthExercise (::std::unique_ptr< StrengthExercise_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ExerciseData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ExerciseData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ExerciseData (const ExerciseData& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ExerciseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ExerciseData&
          operator= (const ExerciseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ExerciseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          GenericExercise_optional GenericExercise_;
          RunningExercise_optional RunningExercise_;
          CyclingExercise_optional CyclingExercise_;
          StrengthExercise_optional StrengthExercise_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %HemorrhageData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API HemorrhageData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name InitialRate
           *
           * @brief Accessor and modifier functions for the %InitialRate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData InitialRate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialRate_type, char > InitialRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialRate_type&
          InitialRate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialRate_type&
          InitialRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialRate (const InitialRate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          InitialRate (::std::unique_ptr< InitialRate_type > p);

          //@}

          /**
           * @name Compartment
           *
           * @brief Accessor and modifier functions for the %Compartment
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Compartment_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Compartment_type, char > Compartment_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Compartment_type&
          Compartment () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Compartment_type&
          Compartment ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Compartment (const Compartment_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Compartment (::std::unique_ptr< Compartment_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          HemorrhageData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          HemorrhageData (const InitialRate_type&,
                          const Compartment_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          HemorrhageData (::std::unique_ptr< InitialRate_type >,
                          const Compartment_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          HemorrhageData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          HemorrhageData (const HemorrhageData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual HemorrhageData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          HemorrhageData&
          operator= (const HemorrhageData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~HemorrhageData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< InitialRate_type > InitialRate_;
          ::xsd::cxx::tree::one< Compartment_type > Compartment_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumInfectionSeverity
         * schema type.
         */
        class BIOGEARS_CDM_API enumInfectionSeverity: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Eliminated,
            Mild,
            Moderate,
            Severe
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumInfectionSeverity ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumInfectionSeverity (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumInfectionSeverity (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumInfectionSeverity (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumInfectionSeverity (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInfectionSeverity (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInfectionSeverity (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInfectionSeverity (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumInfectionSeverity (const enumInfectionSeverity& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumInfectionSeverity*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumInfectionSeverity&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumInfectionSeverity_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumInfectionSeverity_convert () const;

          public:
          static const char* const _xsd_enumInfectionSeverity_literals_[4];
          static const value _xsd_enumInfectionSeverity_indexes_[4];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %InfectionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API InfectionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name MinimumInhibitoryConcentration
           *
           * @brief Accessor and modifier functions for the %MinimumInhibitoryConcentration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData MinimumInhibitoryConcentration_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumInhibitoryConcentration_type, char > MinimumInhibitoryConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MinimumInhibitoryConcentration_type&
          MinimumInhibitoryConcentration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MinimumInhibitoryConcentration_type&
          MinimumInhibitoryConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumInhibitoryConcentration (const MinimumInhibitoryConcentration_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MinimumInhibitoryConcentration (::std::unique_ptr< MinimumInhibitoryConcentration_type > p);

          //@}

          /**
           * @name Location
           *
           * @brief Accessor and modifier functions for the %Location
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Location_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Location_type&
          Location () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Location_type&
          Location ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Location (const Location_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Location (::std::unique_ptr< Location_type > p);

          //@}

          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumInfectionSeverity Severity_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          InfectionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          InfectionData (const MinimumInhibitoryConcentration_type&,
                         const Location_type&,
                         const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          InfectionData (::std::unique_ptr< MinimumInhibitoryConcentration_type >,
                         const Location_type&,
                         const Severity_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          InfectionData (::std::unique_ptr< MinimumInhibitoryConcentration_type >,
                         ::std::unique_ptr< Location_type >,
                         const Severity_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          InfectionData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          InfectionData (const InfectionData& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual InfectionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          InfectionData&
          operator= (const InfectionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~InfectionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< MinimumInhibitoryConcentration_type > MinimumInhibitoryConcentration_;
          ::xsd::cxx::tree::one< Location_type > Location_;
          ::xsd::cxx::tree::one< Severity_type > Severity_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumIntubationType
         * schema type.
         */
        class BIOGEARS_CDM_API enumIntubationType: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Off,
            Esophageal,
            LeftMainstem,
            RightMainstem,
            Tracheal
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumIntubationType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumIntubationType (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumIntubationType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumIntubationType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumIntubationType (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumIntubationType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumIntubationType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumIntubationType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumIntubationType (const enumIntubationType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumIntubationType*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumIntubationType&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumIntubationType_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumIntubationType_convert () const;

          public:
          static const char* const _xsd_enumIntubationType_literals_[5];
          static const value _xsd_enumIntubationType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %IntubationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API IntubationData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Type
           *
           * @brief Accessor and modifier functions for the %Type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumIntubationType Type_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Type_type&
          Type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Type_type&
          Type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Type (const Type_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Type (::std::unique_ptr< Type_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          IntubationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          IntubationData (const Type_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          IntubationData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          IntubationData (const IntubationData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual IntubationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          IntubationData&
          operator= (const IntubationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~IntubationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Type_type > Type_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %MechanicalVentilationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API MechanicalVentilationData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Pressure
           *
           * @brief Accessor and modifier functions for the %Pressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData Pressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Pressure_type > Pressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pressure_type, char > Pressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Pressure_optional&
          Pressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Pressure_optional&
          Pressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Pressure (const Pressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Pressure (const Pressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Pressure (::std::unique_ptr< Pressure_type > p);

          //@}

          /**
           * @name Flow
           *
           * @brief Accessor and modifier functions for the %Flow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData Flow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Flow_type > Flow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Flow_type, char > Flow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Flow_optional&
          Flow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Flow_optional&
          Flow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Flow (const Flow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Flow (const Flow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Flow (::std::unique_ptr< Flow_type > p);

          //@}

          /**
           * @name GasFraction
           *
           * @brief Accessor and modifier functions for the %GasFraction
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstanceFractionData GasFraction_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< GasFraction_type > GasFraction_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef GasFraction_sequence::iterator GasFraction_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef GasFraction_sequence::const_iterator GasFraction_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GasFraction_type, char > GasFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const GasFraction_sequence&
          GasFraction () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          GasFraction_sequence&
          GasFraction ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          GasFraction (const GasFraction_sequence& s);

          //@}

          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const State_type&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          State_type&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          MechanicalVentilationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          MechanicalVentilationData (const State_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          MechanicalVentilationData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          MechanicalVentilationData (const MechanicalVentilationData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual MechanicalVentilationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          MechanicalVentilationData&
          operator= (const MechanicalVentilationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~MechanicalVentilationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Pressure_optional Pressure_;
          Flow_optional Flow_;
          GasFraction_sequence GasFraction_;
          ::xsd::cxx::tree::one< State_type > State_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %NeedleDecompressionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API NeedleDecompressionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const State_type&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          State_type&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Side
           *
           * @brief Accessor and modifier functions for the %Side
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSide Side_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Side_type, char > Side_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Side_type&
          Side () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Side_type&
          Side ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Side (const Side_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Side (::std::unique_ptr< Side_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          NeedleDecompressionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          NeedleDecompressionData (const State_type&,
                                   const Side_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NeedleDecompressionData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NeedleDecompressionData (const NeedleDecompressionData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual NeedleDecompressionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NeedleDecompressionData&
          operator= (const NeedleDecompressionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~NeedleDecompressionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< State_type > State_;
          ::xsd::cxx::tree::one< Side_type > Side_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %NasalStateData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API NasalStateData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name TotalNasalDose
           *
           * @brief Accessor and modifier functions for the %TotalNasalDose
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData TotalNasalDose_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalNasalDose_type, char > TotalNasalDose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TotalNasalDose_type&
          TotalNasalDose () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TotalNasalDose_type&
          TotalNasalDose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalNasalDose (const TotalNasalDose_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TotalNasalDose (::std::unique_ptr< TotalNasalDose_type > p);

          //@}

          /**
           * @name UnreleasedDrugMasses
           *
           * @brief Accessor and modifier functions for the %UnreleasedDrugMasses
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData UnreleasedDrugMasses_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< UnreleasedDrugMasses_type > UnreleasedDrugMasses_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef UnreleasedDrugMasses_sequence::iterator UnreleasedDrugMasses_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef UnreleasedDrugMasses_sequence::const_iterator UnreleasedDrugMasses_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UnreleasedDrugMasses_type, char > UnreleasedDrugMasses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const UnreleasedDrugMasses_sequence&
          UnreleasedDrugMasses () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          UnreleasedDrugMasses_sequence&
          UnreleasedDrugMasses ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          UnreleasedDrugMasses (const UnreleasedDrugMasses_sequence& s);

          //@}

          /**
           * @name ReleasedDrugMasses
           *
           * @brief Accessor and modifier functions for the %ReleasedDrugMasses
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData ReleasedDrugMasses_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ReleasedDrugMasses_type > ReleasedDrugMasses_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ReleasedDrugMasses_sequence::iterator ReleasedDrugMasses_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ReleasedDrugMasses_sequence::const_iterator ReleasedDrugMasses_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReleasedDrugMasses_type, char > ReleasedDrugMasses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ReleasedDrugMasses_sequence&
          ReleasedDrugMasses () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ReleasedDrugMasses_sequence&
          ReleasedDrugMasses ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ReleasedDrugMasses (const ReleasedDrugMasses_sequence& s);

          //@}

          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          NasalStateData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          NasalStateData (const TotalNasalDose_type&,
                          const Substance_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          NasalStateData (::std::unique_ptr< TotalNasalDose_type >,
                          const Substance_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NasalStateData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NasalStateData (const NasalStateData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual NasalStateData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NasalStateData&
          operator= (const NasalStateData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~NasalStateData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< TotalNasalDose_type > TotalNasalDose_;
          UnreleasedDrugMasses_sequence UnreleasedDrugMasses_;
          ReleasedDrugMasses_sequence ReleasedDrugMasses_;
          ::xsd::cxx::tree::one< Substance_type > Substance_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PainStimulusData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PainStimulusData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name HalfLife
           *
           * @brief Accessor and modifier functions for the %HalfLife
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData HalfLife_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HalfLife_type > HalfLife_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HalfLife_type, char > HalfLife_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HalfLife_optional&
          HalfLife () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HalfLife_optional&
          HalfLife ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HalfLife (const HalfLife_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HalfLife (const HalfLife_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HalfLife (::std::unique_ptr< HalfLife_type > p);

          //@}

          /**
           * @name Location
           *
           * @brief Accessor and modifier functions for the %Location
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Location_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Location_type&
          Location () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Location_type&
          Location ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Location (const Location_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Location (::std::unique_ptr< Location_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PainStimulusData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PainStimulusData (const Severity_type&,
                            const Location_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PainStimulusData (::std::unique_ptr< Severity_type >,
                            const Location_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PainStimulusData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PainStimulusData (const PainStimulusData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PainStimulusData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PainStimulusData&
          operator= (const PainStimulusData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PainStimulusData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;
          HalfLife_optional HalfLife_;
          ::xsd::cxx::tree::one< Location_type > Location_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PericardialEffusionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PericardialEffusionData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name EffusionRate
           *
           * @brief Accessor and modifier functions for the %EffusionRate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData EffusionRate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EffusionRate_type, char > EffusionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EffusionRate_type&
          EffusionRate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EffusionRate_type&
          EffusionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EffusionRate (const EffusionRate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          EffusionRate (::std::unique_ptr< EffusionRate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PericardialEffusionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PericardialEffusionData (const EffusionRate_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PericardialEffusionData (::std::unique_ptr< EffusionRate_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PericardialEffusionData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PericardialEffusionData (const PericardialEffusionData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PericardialEffusionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PericardialEffusionData&
          operator= (const PericardialEffusionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PericardialEffusionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< EffusionRate_type > EffusionRate_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumPneumothoraxType
         * schema type.
         */
        class BIOGEARS_CDM_API enumPneumothoraxType: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Open,
            Closed
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumPneumothoraxType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumPneumothoraxType (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumPneumothoraxType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumPneumothoraxType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumPneumothoraxType (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPneumothoraxType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPneumothoraxType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPneumothoraxType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumPneumothoraxType (const enumPneumothoraxType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumPneumothoraxType*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumPneumothoraxType&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumPneumothoraxType_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumPneumothoraxType_convert () const;

          public:
          static const char* const _xsd_enumPneumothoraxType_literals_[2];
          static const value _xsd_enumPneumothoraxType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TensionPneumothoraxData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TensionPneumothoraxData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Severity
           *
           * @brief Accessor and modifier functions for the %Severity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data Severity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Severity_type, char > Severity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Severity_type&
          Severity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Severity_type&
          Severity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Severity (const Severity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Severity (::std::unique_ptr< Severity_type > p);

          //@}

          /**
           * @name Type
           *
           * @brief Accessor and modifier functions for the %Type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPneumothoraxType Type_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Type_type&
          Type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Type_type&
          Type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Type (const Type_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Type (::std::unique_ptr< Type_type > p);

          //@}

          /**
           * @name Side
           *
           * @brief Accessor and modifier functions for the %Side
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSide Side_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Side_type, char > Side_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Side_type&
          Side () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Side_type&
          Side ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Side (const Side_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Side (::std::unique_ptr< Side_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          TensionPneumothoraxData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TensionPneumothoraxData (const Severity_type&,
                                   const Type_type&,
                                   const Side_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          TensionPneumothoraxData (::std::unique_ptr< Severity_type >,
                                   const Type_type&,
                                   const Side_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TensionPneumothoraxData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TensionPneumothoraxData (const TensionPneumothoraxData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TensionPneumothoraxData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TensionPneumothoraxData&
          operator= (const TensionPneumothoraxData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TensionPneumothoraxData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Severity_type > Severity_;
          ::xsd::cxx::tree::one< Type_type > Type_;
          ::xsd::cxx::tree::one< Side_type > Side_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SleepData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SleepData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Sleep
           *
           * @brief Accessor and modifier functions for the %Sleep
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff Sleep_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Sleep_type, char > Sleep_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Sleep_type&
          Sleep () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Sleep_type&
          Sleep ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Sleep (const Sleep_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Sleep (::std::unique_ptr< Sleep_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SleepData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SleepData (const Sleep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SleepData (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SleepData (const SleepData& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SleepData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SleepData&
          operator= (const SleepData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SleepData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Sleep_type > Sleep_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumBolusAdministration
         * schema type.
         */
        class BIOGEARS_CDM_API enumBolusAdministration: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Intraarterial,
            Intramuscular,
            Intravenous
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumBolusAdministration ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumBolusAdministration (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumBolusAdministration (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumBolusAdministration (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumBolusAdministration (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBolusAdministration (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBolusAdministration (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumBolusAdministration (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumBolusAdministration (const enumBolusAdministration& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumBolusAdministration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumBolusAdministration&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumBolusAdministration_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumBolusAdministration_convert () const;

          public:
          static const char* const _xsd_enumBolusAdministration_literals_[3];
          static const value _xsd_enumBolusAdministration_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumOralAdministration
         * schema type.
         */
        class BIOGEARS_CDM_API enumOralAdministration: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Transmucosal,
            Gastrointestinal
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumOralAdministration ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumOralAdministration (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumOralAdministration (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumOralAdministration (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumOralAdministration (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumOralAdministration (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumOralAdministration (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumOralAdministration (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumOralAdministration (const enumOralAdministration& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumOralAdministration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumOralAdministration&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumOralAdministration_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumOralAdministration_convert () const;

          public:
          static const char* const _xsd_enumOralAdministration_literals_[2];
          static const value _xsd_enumOralAdministration_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceAdministrationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceAdministrationData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceAdministrationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceAdministrationData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceAdministrationData (const SubstanceAdministrationData& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceAdministrationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceAdministrationData ();
        };

        /**
         * @brief Class corresponding to the %SubstanceBolusData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceBolusData: public ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData
        {
          public:
          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Concentration
           *
           * @brief Accessor and modifier functions for the %Concentration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Concentration_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Concentration_type, char > Concentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Concentration_type&
          Concentration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Concentration_type&
          Concentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Concentration (const Concentration_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Concentration (::std::unique_ptr< Concentration_type > p);

          //@}

          /**
           * @name Dose
           *
           * @brief Accessor and modifier functions for the %Dose
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData Dose_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Dose_type, char > Dose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Dose_type&
          Dose () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Dose_type&
          Dose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Dose (const Dose_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Dose (::std::unique_ptr< Dose_type > p);

          //@}

          /**
           * @name AdminTime
           *
           * @brief Accessor and modifier functions for the %AdminTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData AdminTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AdminTime_type > AdminTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AdminTime_type, char > AdminTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AdminTime_optional&
          AdminTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AdminTime_optional&
          AdminTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AdminTime (const AdminTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AdminTime (const AdminTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AdminTime (::std::unique_ptr< AdminTime_type > p);

          //@}

          /**
           * @name AdminRoute
           *
           * @brief Accessor and modifier functions for the %AdminRoute
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumBolusAdministration AdminRoute_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< AdminRoute_type, char > AdminRoute_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const AdminRoute_type&
          AdminRoute () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          AdminRoute_type&
          AdminRoute ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          AdminRoute (const AdminRoute_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          AdminRoute (::std::unique_ptr< AdminRoute_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceBolusData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceBolusData (const Substance_type&,
                              const Concentration_type&,
                              const Dose_type&,
                              const AdminRoute_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceBolusData (const Substance_type&,
                              ::std::unique_ptr< Concentration_type >,
                              ::std::unique_ptr< Dose_type >,
                              const AdminRoute_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceBolusData (::std::unique_ptr< Substance_type >,
                              ::std::unique_ptr< Concentration_type >,
                              ::std::unique_ptr< Dose_type >,
                              const AdminRoute_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceBolusData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceBolusData (const SubstanceBolusData& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceBolusData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceBolusData&
          operator= (const SubstanceBolusData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceBolusData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Substance_type > Substance_;
          ::xsd::cxx::tree::one< Concentration_type > Concentration_;
          ::xsd::cxx::tree::one< Dose_type > Dose_;
          AdminTime_optional AdminTime_;
          ::xsd::cxx::tree::one< AdminRoute_type > AdminRoute_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceBolusStateData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceBolusStateData: public ::xml_schema::type
        {
          public:
          /**
           * @name ElapsedTime
           *
           * @brief Accessor and modifier functions for the %ElapsedTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ElapsedTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElapsedTime_type, char > ElapsedTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElapsedTime_type&
          ElapsedTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElapsedTime_type&
          ElapsedTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElapsedTime (const ElapsedTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ElapsedTime (::std::unique_ptr< ElapsedTime_type > p);

          //@}

          /**
           * @name AdministeredDose
           *
           * @brief Accessor and modifier functions for the %AdministeredDose
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData AdministeredDose_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AdministeredDose_type, char > AdministeredDose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AdministeredDose_type&
          AdministeredDose () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AdministeredDose_type&
          AdministeredDose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AdministeredDose (const AdministeredDose_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          AdministeredDose (::std::unique_ptr< AdministeredDose_type > p);

          //@}

          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceBolusStateData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceBolusStateData (const ElapsedTime_type&,
                                   const AdministeredDose_type&,
                                   const Substance_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceBolusStateData (::std::unique_ptr< ElapsedTime_type >,
                                   ::std::unique_ptr< AdministeredDose_type >,
                                   const Substance_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceBolusStateData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceBolusStateData (const SubstanceBolusStateData& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceBolusStateData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceBolusStateData&
          operator= (const SubstanceBolusStateData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceBolusStateData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ElapsedTime_type > ElapsedTime_;
          ::xsd::cxx::tree::one< AdministeredDose_type > AdministeredDose_;
          ::xsd::cxx::tree::one< Substance_type > Substance_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceCompoundInfusionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceCompoundInfusionData: public ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData
        {
          public:
          /**
           * @name SubstanceCompound
           *
           * @brief Accessor and modifier functions for the %SubstanceCompound
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string SubstanceCompound_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SubstanceCompound_type, char > SubstanceCompound_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SubstanceCompound_type&
          SubstanceCompound () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SubstanceCompound_type&
          SubstanceCompound ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SubstanceCompound (const SubstanceCompound_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SubstanceCompound (::std::unique_ptr< SubstanceCompound_type > p);

          //@}

          /**
           * @name BagVolume
           *
           * @brief Accessor and modifier functions for the %BagVolume
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData BagVolume_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BagVolume_type, char > BagVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BagVolume_type&
          BagVolume () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BagVolume_type&
          BagVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BagVolume (const BagVolume_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BagVolume (::std::unique_ptr< BagVolume_type > p);

          //@}

          /**
           * @name Rate
           *
           * @brief Accessor and modifier functions for the %Rate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData Rate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Rate_type, char > Rate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Rate_type&
          Rate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Rate_type&
          Rate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Rate (const Rate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Rate (::std::unique_ptr< Rate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceCompoundInfusionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceCompoundInfusionData (const SubstanceCompound_type&,
                                         const BagVolume_type&,
                                         const Rate_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceCompoundInfusionData (const SubstanceCompound_type&,
                                         ::std::unique_ptr< BagVolume_type >,
                                         ::std::unique_ptr< Rate_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceCompoundInfusionData (::std::unique_ptr< SubstanceCompound_type >,
                                         ::std::unique_ptr< BagVolume_type >,
                                         ::std::unique_ptr< Rate_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceCompoundInfusionData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceCompoundInfusionData (const SubstanceCompoundInfusionData& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceCompoundInfusionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceCompoundInfusionData&
          operator= (const SubstanceCompoundInfusionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceCompoundInfusionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< SubstanceCompound_type > SubstanceCompound_;
          ::xsd::cxx::tree::one< BagVolume_type > BagVolume_;
          ::xsd::cxx::tree::one< Rate_type > Rate_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceInfusionData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceInfusionData: public ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData
        {
          public:
          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Concentration
           *
           * @brief Accessor and modifier functions for the %Concentration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Concentration_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Concentration_type, char > Concentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Concentration_type&
          Concentration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Concentration_type&
          Concentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Concentration (const Concentration_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Concentration (::std::unique_ptr< Concentration_type > p);

          //@}

          /**
           * @name Rate
           *
           * @brief Accessor and modifier functions for the %Rate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData Rate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Rate_type, char > Rate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Rate_type&
          Rate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Rate_type&
          Rate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Rate (const Rate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Rate (::std::unique_ptr< Rate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceInfusionData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceInfusionData (const Substance_type&,
                                 const Concentration_type&,
                                 const Rate_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceInfusionData (const Substance_type&,
                                 ::std::unique_ptr< Concentration_type >,
                                 ::std::unique_ptr< Rate_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceInfusionData (::std::unique_ptr< Substance_type >,
                                 ::std::unique_ptr< Concentration_type >,
                                 ::std::unique_ptr< Rate_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceInfusionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceInfusionData (const SubstanceInfusionData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceInfusionData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceInfusionData&
          operator= (const SubstanceInfusionData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceInfusionData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Substance_type > Substance_;
          ::xsd::cxx::tree::one< Concentration_type > Concentration_;
          ::xsd::cxx::tree::one< Rate_type > Rate_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceNasalDoseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceNasalDoseData: public ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData
        {
          public:
          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Dose
           *
           * @brief Accessor and modifier functions for the %Dose
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData Dose_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Dose_type, char > Dose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Dose_type&
          Dose () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Dose_type&
          Dose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Dose (const Dose_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Dose (::std::unique_ptr< Dose_type > p);

          //@}

          /**
           * @name ElapsedTime
           *
           * @brief Accessor and modifier functions for the %ElapsedTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ElapsedTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElapsedTime_type > ElapsedTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElapsedTime_type, char > ElapsedTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElapsedTime_optional&
          ElapsedTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElapsedTime_optional&
          ElapsedTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElapsedTime (const ElapsedTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElapsedTime (const ElapsedTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElapsedTime (::std::unique_ptr< ElapsedTime_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceNasalDoseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceNasalDoseData (const Substance_type&,
                                  const Dose_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceNasalDoseData (const Substance_type&,
                                  ::std::unique_ptr< Dose_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceNasalDoseData (::std::unique_ptr< Substance_type >,
                                  ::std::unique_ptr< Dose_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceNasalDoseData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceNasalDoseData (const SubstanceNasalDoseData& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceNasalDoseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceNasalDoseData&
          operator= (const SubstanceNasalDoseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceNasalDoseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Substance_type > Substance_;
          ::xsd::cxx::tree::one< Dose_type > Dose_;
          ElapsedTime_optional ElapsedTime_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SubstanceOralDoseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceOralDoseData: public ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData
        {
          public:
          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Dose
           *
           * @brief Accessor and modifier functions for the %Dose
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData Dose_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Dose_type, char > Dose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Dose_type&
          Dose () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Dose_type&
          Dose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Dose (const Dose_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Dose (::std::unique_ptr< Dose_type > p);

          //@}

          /**
           * @name AdminRoute
           *
           * @brief Accessor and modifier functions for the %AdminRoute
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOralAdministration AdminRoute_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< AdminRoute_type, char > AdminRoute_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const AdminRoute_type&
          AdminRoute () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          AdminRoute_type&
          AdminRoute ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          AdminRoute (const AdminRoute_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          AdminRoute (::std::unique_ptr< AdminRoute_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceOralDoseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceOralDoseData (const Substance_type&,
                                 const Dose_type&,
                                 const AdminRoute_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceOralDoseData (const Substance_type&,
                                 ::std::unique_ptr< Dose_type >,
                                 const AdminRoute_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceOralDoseData (::std::unique_ptr< Substance_type >,
                                 ::std::unique_ptr< Dose_type >,
                                 const AdminRoute_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceOralDoseData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceOralDoseData (const SubstanceOralDoseData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceOralDoseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceOralDoseData&
          operator= (const SubstanceOralDoseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceOralDoseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Substance_type > Substance_;
          ::xsd::cxx::tree::one< Dose_type > Dose_;
          ::xsd::cxx::tree::one< AdminRoute_type > AdminRoute_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumTourniquetApplicationLevel
         * schema type.
         */
        class BIOGEARS_CDM_API enumTourniquetApplicationLevel: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Applied,
            Misapplied,
            None
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumTourniquetApplicationLevel ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumTourniquetApplicationLevel (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumTourniquetApplicationLevel (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumTourniquetApplicationLevel (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumTourniquetApplicationLevel (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumTourniquetApplicationLevel (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumTourniquetApplicationLevel (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumTourniquetApplicationLevel (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumTourniquetApplicationLevel (const enumTourniquetApplicationLevel& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumTourniquetApplicationLevel*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumTourniquetApplicationLevel&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumTourniquetApplicationLevel_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumTourniquetApplicationLevel_convert () const;

          public:
          static const char* const _xsd_enumTourniquetApplicationLevel_literals_[3];
          static const value _xsd_enumTourniquetApplicationLevel_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TourniquetData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TourniquetData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Compartment
           *
           * @brief Accessor and modifier functions for the %Compartment
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Compartment_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Compartment_type, char > Compartment_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Compartment_type&
          Compartment () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Compartment_type&
          Compartment ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Compartment (const Compartment_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Compartment (::std::unique_ptr< Compartment_type > p);

          //@}

          /**
           * @name TourniquetLevel
           *
           * @brief Accessor and modifier functions for the %TourniquetLevel
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumTourniquetApplicationLevel TourniquetLevel_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TourniquetLevel_type, char > TourniquetLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TourniquetLevel_type&
          TourniquetLevel () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TourniquetLevel_type&
          TourniquetLevel ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          TourniquetLevel (const TourniquetLevel_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TourniquetLevel (::std::unique_ptr< TourniquetLevel_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          TourniquetData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TourniquetData (const Compartment_type&,
                          const TourniquetLevel_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TourniquetData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TourniquetData (const TourniquetData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TourniquetData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TourniquetData&
          operator= (const TourniquetData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TourniquetData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Compartment_type > Compartment_;
          ::xsd::cxx::tree::one< TourniquetLevel_type > TourniquetLevel_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TransmucosalStateData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TransmucosalStateData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name MouthSolidMass
           *
           * @brief Accessor and modifier functions for the %MouthSolidMass
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MouthSolidMass_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MouthSolidMass_type, char > MouthSolidMass_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MouthSolidMass_type&
          MouthSolidMass () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MouthSolidMass_type&
          MouthSolidMass ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MouthSolidMass (const MouthSolidMass_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MouthSolidMass (::std::unique_ptr< MouthSolidMass_type > p);

          //@}

          /**
           * @name SalivaConcentration
           *
           * @brief Accessor and modifier functions for the %SalivaConcentration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData SalivaConcentration_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SalivaConcentration_type, char > SalivaConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SalivaConcentration_type&
          SalivaConcentration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SalivaConcentration_type&
          SalivaConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SalivaConcentration (const SalivaConcentration_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          SalivaConcentration (::std::unique_ptr< SalivaConcentration_type > p);

          //@}

          /**
           * @name BuccalConcentrations
           *
           * @brief Accessor and modifier functions for the %BuccalConcentrations
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BuccalConcentrations_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< BuccalConcentrations_type > BuccalConcentrations_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef BuccalConcentrations_sequence::iterator BuccalConcentrations_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef BuccalConcentrations_sequence::const_iterator BuccalConcentrations_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BuccalConcentrations_type, char > BuccalConcentrations_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const BuccalConcentrations_sequence&
          BuccalConcentrations () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          BuccalConcentrations_sequence&
          BuccalConcentrations ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          BuccalConcentrations (const BuccalConcentrations_sequence& s);

          //@}

          /**
           * @name SublingualConcentrations
           *
           * @brief Accessor and modifier functions for the %SublingualConcentrations
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData SublingualConcentrations_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< SublingualConcentrations_type > SublingualConcentrations_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef SublingualConcentrations_sequence::iterator SublingualConcentrations_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef SublingualConcentrations_sequence::const_iterator SublingualConcentrations_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SublingualConcentrations_type, char > SublingualConcentrations_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const SublingualConcentrations_sequence&
          SublingualConcentrations () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          SublingualConcentrations_sequence&
          SublingualConcentrations ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          SublingualConcentrations (const SublingualConcentrations_sequence& s);

          //@}

          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          TransmucosalStateData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TransmucosalStateData (const MouthSolidMass_type&,
                                 const SalivaConcentration_type&,
                                 const Substance_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          TransmucosalStateData (::std::unique_ptr< MouthSolidMass_type >,
                                 ::std::unique_ptr< SalivaConcentration_type >,
                                 const Substance_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TransmucosalStateData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TransmucosalStateData (const TransmucosalStateData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TransmucosalStateData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TransmucosalStateData&
          operator= (const TransmucosalStateData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TransmucosalStateData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< MouthSolidMass_type > MouthSolidMass_;
          ::xsd::cxx::tree::one< SalivaConcentration_type > SalivaConcentration_;
          BuccalConcentrations_sequence BuccalConcentrations_;
          SublingualConcentrations_sequence SublingualConcentrations_;
          ::xsd::cxx::tree::one< Substance_type > Substance_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %UrinateData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API UrinateData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          UrinateData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          UrinateData (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UrinateData (const UrinateData& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual UrinateData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~UrinateData ();
        };

        /**
         * @brief Class corresponding to the %OverrideData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API OverrideData: public ::mil::tatrc::physiology::datamodel::PatientActionData
        {
          public:
          /**
           * @name ArterialBloodPHOverride
           *
           * @brief Accessor and modifier functions for the %ArterialBloodPHOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ArterialBloodPHOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialBloodPHOverride_type > ArterialBloodPHOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialBloodPHOverride_type, char > ArterialBloodPHOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialBloodPHOverride_optional&
          ArterialBloodPHOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialBloodPHOverride_optional&
          ArterialBloodPHOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialBloodPHOverride (const ArterialBloodPHOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialBloodPHOverride (const ArterialBloodPHOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialBloodPHOverride (::std::unique_ptr< ArterialBloodPHOverride_type > p);

          //@}

          /**
           * @name CalciumConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %CalciumConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData CalciumConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CalciumConcentrationOverride_type > CalciumConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CalciumConcentrationOverride_type, char > CalciumConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CalciumConcentrationOverride_optional&
          CalciumConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CalciumConcentrationOverride_optional&
          CalciumConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CalciumConcentrationOverride (const CalciumConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CalciumConcentrationOverride (const CalciumConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CalciumConcentrationOverride (::std::unique_ptr< CalciumConcentrationOverride_type > p);

          //@}

          /**
           * @name CarbonDioxideSaturationOverride
           *
           * @brief Accessor and modifier functions for the %CarbonDioxideSaturationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonDioxideSaturationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonDioxideSaturationOverride_type > CarbonDioxideSaturationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonDioxideSaturationOverride_type, char > CarbonDioxideSaturationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonDioxideSaturationOverride_optional&
          CarbonDioxideSaturationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonDioxideSaturationOverride_optional&
          CarbonDioxideSaturationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonDioxideSaturationOverride (const CarbonDioxideSaturationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonDioxideSaturationOverride (const CarbonDioxideSaturationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonDioxideSaturationOverride (::std::unique_ptr< CarbonDioxideSaturationOverride_type > p);

          //@}

          /**
           * @name CarbonMonoxideSaturationOverride
           *
           * @brief Accessor and modifier functions for the %CarbonMonoxideSaturationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonMonoxideSaturationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonMonoxideSaturationOverride_type > CarbonMonoxideSaturationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonMonoxideSaturationOverride_type, char > CarbonMonoxideSaturationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonMonoxideSaturationOverride_optional&
          CarbonMonoxideSaturationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonMonoxideSaturationOverride_optional&
          CarbonMonoxideSaturationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonMonoxideSaturationOverride (const CarbonMonoxideSaturationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonMonoxideSaturationOverride (const CarbonMonoxideSaturationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonMonoxideSaturationOverride (::std::unique_ptr< CarbonMonoxideSaturationOverride_type > p);

          //@}

          /**
           * @name GlucoseConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %GlucoseConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData GlucoseConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlucoseConcentrationOverride_type > GlucoseConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlucoseConcentrationOverride_type, char > GlucoseConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlucoseConcentrationOverride_optional&
          GlucoseConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlucoseConcentrationOverride_optional&
          GlucoseConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlucoseConcentrationOverride (const GlucoseConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlucoseConcentrationOverride (const GlucoseConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlucoseConcentrationOverride (::std::unique_ptr< GlucoseConcentrationOverride_type > p);

          //@}

          /**
           * @name LactateConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %LactateConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData LactateConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LactateConcentrationOverride_type > LactateConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LactateConcentrationOverride_type, char > LactateConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LactateConcentrationOverride_optional&
          LactateConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LactateConcentrationOverride_optional&
          LactateConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LactateConcentrationOverride (const LactateConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LactateConcentrationOverride (const LactateConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LactateConcentrationOverride (::std::unique_ptr< LactateConcentrationOverride_type > p);

          //@}

          /**
           * @name OxygenSaturationOverride
           *
           * @brief Accessor and modifier functions for the %OxygenSaturationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData OxygenSaturationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenSaturationOverride_type > OxygenSaturationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenSaturationOverride_type, char > OxygenSaturationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenSaturationOverride_optional&
          OxygenSaturationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenSaturationOverride_optional&
          OxygenSaturationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenSaturationOverride (const OxygenSaturationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenSaturationOverride (const OxygenSaturationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenSaturationOverride (::std::unique_ptr< OxygenSaturationOverride_type > p);

          //@}

          /**
           * @name PhosphateOverride
           *
           * @brief Accessor and modifier functions for the %PhosphateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData PhosphateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PhosphateOverride_type > PhosphateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PhosphateOverride_type, char > PhosphateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PhosphateOverride_optional&
          PhosphateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PhosphateOverride_optional&
          PhosphateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PhosphateOverride (const PhosphateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PhosphateOverride (const PhosphateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PhosphateOverride (::std::unique_ptr< PhosphateOverride_type > p);

          //@}

          /**
           * @name PotassiumConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %PotassiumConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData PotassiumConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PotassiumConcentrationOverride_type > PotassiumConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PotassiumConcentrationOverride_type, char > PotassiumConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PotassiumConcentrationOverride_optional&
          PotassiumConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PotassiumConcentrationOverride_optional&
          PotassiumConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PotassiumConcentrationOverride (const PotassiumConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PotassiumConcentrationOverride (const PotassiumConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PotassiumConcentrationOverride (::std::unique_ptr< PotassiumConcentrationOverride_type > p);

          //@}

          /**
           * @name SodiumConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %SodiumConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData SodiumConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SodiumConcentrationOverride_type > SodiumConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SodiumConcentrationOverride_type, char > SodiumConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SodiumConcentrationOverride_optional&
          SodiumConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SodiumConcentrationOverride_optional&
          SodiumConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SodiumConcentrationOverride (const SodiumConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SodiumConcentrationOverride (const SodiumConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SodiumConcentrationOverride (::std::unique_ptr< SodiumConcentrationOverride_type > p);

          //@}

          /**
           * @name TotalBilirubinOverride
           *
           * @brief Accessor and modifier functions for the %TotalBilirubinOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalBilirubinOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalBilirubinOverride_type > TotalBilirubinOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBilirubinOverride_type, char > TotalBilirubinOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalBilirubinOverride_optional&
          TotalBilirubinOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalBilirubinOverride_optional&
          TotalBilirubinOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBilirubinOverride (const TotalBilirubinOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalBilirubinOverride (const TotalBilirubinOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalBilirubinOverride (::std::unique_ptr< TotalBilirubinOverride_type > p);

          //@}

          /**
           * @name VenousBloodPHOverride
           *
           * @brief Accessor and modifier functions for the %VenousBloodPHOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData VenousBloodPHOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousBloodPHOverride_type > VenousBloodPHOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousBloodPHOverride_type, char > VenousBloodPHOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousBloodPHOverride_optional&
          VenousBloodPHOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousBloodPHOverride_optional&
          VenousBloodPHOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousBloodPHOverride (const VenousBloodPHOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousBloodPHOverride (const VenousBloodPHOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousBloodPHOverride (::std::unique_ptr< VenousBloodPHOverride_type > p);

          //@}

          /**
           * @name WhiteBloodCellCountOverride
           *
           * @brief Accessor and modifier functions for the %WhiteBloodCellCountOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData WhiteBloodCellCountOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WhiteBloodCellCountOverride_type > WhiteBloodCellCountOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WhiteBloodCellCountOverride_type, char > WhiteBloodCellCountOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WhiteBloodCellCountOverride_optional&
          WhiteBloodCellCountOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WhiteBloodCellCountOverride_optional&
          WhiteBloodCellCountOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WhiteBloodCellCountOverride (const WhiteBloodCellCountOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WhiteBloodCellCountOverride (const WhiteBloodCellCountOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WhiteBloodCellCountOverride (::std::unique_ptr< WhiteBloodCellCountOverride_type > p);

          //@}

          /**
           * @name BloodVolumeOverride
           *
           * @brief Accessor and modifier functions for the %BloodVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData BloodVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodVolumeOverride_type > BloodVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodVolumeOverride_type, char > BloodVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodVolumeOverride_optional&
          BloodVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodVolumeOverride_optional&
          BloodVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodVolumeOverride (const BloodVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodVolumeOverride (const BloodVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodVolumeOverride (::std::unique_ptr< BloodVolumeOverride_type > p);

          //@}

          /**
           * @name CardiacOutputOverride
           *
           * @brief Accessor and modifier functions for the %CardiacOutputOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData CardiacOutputOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CardiacOutputOverride_type > CardiacOutputOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacOutputOverride_type, char > CardiacOutputOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CardiacOutputOverride_optional&
          CardiacOutputOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CardiacOutputOverride_optional&
          CardiacOutputOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacOutputOverride (const CardiacOutputOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CardiacOutputOverride (const CardiacOutputOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CardiacOutputOverride (::std::unique_ptr< CardiacOutputOverride_type > p);

          //@}

          /**
           * @name DiastolicArterialPressureOverride
           *
           * @brief Accessor and modifier functions for the %DiastolicArterialPressureOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData DiastolicArterialPressureOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DiastolicArterialPressureOverride_type > DiastolicArterialPressureOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DiastolicArterialPressureOverride_type, char > DiastolicArterialPressureOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DiastolicArterialPressureOverride_optional&
          DiastolicArterialPressureOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DiastolicArterialPressureOverride_optional&
          DiastolicArterialPressureOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DiastolicArterialPressureOverride (const DiastolicArterialPressureOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DiastolicArterialPressureOverride (const DiastolicArterialPressureOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DiastolicArterialPressureOverride (::std::unique_ptr< DiastolicArterialPressureOverride_type > p);

          //@}

          /**
           * @name HeartRateOverride
           *
           * @brief Accessor and modifier functions for the %HeartRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData HeartRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRateOverride_type > HeartRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateOverride_type, char > HeartRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRateOverride_optional&
          HeartRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRateOverride_optional&
          HeartRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateOverride (const HeartRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRateOverride (const HeartRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRateOverride (::std::unique_ptr< HeartRateOverride_type > p);

          //@}

          /**
           * @name HeartStrokeVolumeOverride
           *
           * @brief Accessor and modifier functions for the %HeartStrokeVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData HeartStrokeVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartStrokeVolumeOverride_type > HeartStrokeVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartStrokeVolumeOverride_type, char > HeartStrokeVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartStrokeVolumeOverride_optional&
          HeartStrokeVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartStrokeVolumeOverride_optional&
          HeartStrokeVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartStrokeVolumeOverride (const HeartStrokeVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartStrokeVolumeOverride (const HeartStrokeVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartStrokeVolumeOverride (::std::unique_ptr< HeartStrokeVolumeOverride_type > p);

          //@}

          /**
           * @name MeanArterialPressureOverride
           *
           * @brief Accessor and modifier functions for the %MeanArterialPressureOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanArterialPressureOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanArterialPressureOverride_type > MeanArterialPressureOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanArterialPressureOverride_type, char > MeanArterialPressureOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanArterialPressureOverride_optional&
          MeanArterialPressureOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanArterialPressureOverride_optional&
          MeanArterialPressureOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanArterialPressureOverride (const MeanArterialPressureOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanArterialPressureOverride (const MeanArterialPressureOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanArterialPressureOverride (::std::unique_ptr< MeanArterialPressureOverride_type > p);

          //@}

          /**
           * @name SystolicArterialPressureOverride
           *
           * @brief Accessor and modifier functions for the %SystolicArterialPressureOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData SystolicArterialPressureOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SystolicArterialPressureOverride_type > SystolicArterialPressureOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystolicArterialPressureOverride_type, char > SystolicArterialPressureOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SystolicArterialPressureOverride_optional&
          SystolicArterialPressureOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SystolicArterialPressureOverride_optional&
          SystolicArterialPressureOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystolicArterialPressureOverride (const SystolicArterialPressureOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SystolicArterialPressureOverride (const SystolicArterialPressureOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SystolicArterialPressureOverride (::std::unique_ptr< SystolicArterialPressureOverride_type > p);

          //@}

          /**
           * @name InsulinSynthesisRateOverride
           *
           * @brief Accessor and modifier functions for the %InsulinSynthesisRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData InsulinSynthesisRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InsulinSynthesisRateOverride_type > InsulinSynthesisRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InsulinSynthesisRateOverride_type, char > InsulinSynthesisRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InsulinSynthesisRateOverride_optional&
          InsulinSynthesisRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InsulinSynthesisRateOverride_optional&
          InsulinSynthesisRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InsulinSynthesisRateOverride (const InsulinSynthesisRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InsulinSynthesisRateOverride (const InsulinSynthesisRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InsulinSynthesisRateOverride (::std::unique_ptr< InsulinSynthesisRateOverride_type > p);

          //@}

          /**
           * @name GlucagonSynthesisRateOverride
           *
           * @brief Accessor and modifier functions for the %GlucagonSynthesisRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData GlucagonSynthesisRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlucagonSynthesisRateOverride_type > GlucagonSynthesisRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlucagonSynthesisRateOverride_type, char > GlucagonSynthesisRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlucagonSynthesisRateOverride_optional&
          GlucagonSynthesisRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlucagonSynthesisRateOverride_optional&
          GlucagonSynthesisRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlucagonSynthesisRateOverride (const GlucagonSynthesisRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlucagonSynthesisRateOverride (const GlucagonSynthesisRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlucagonSynthesisRateOverride (::std::unique_ptr< GlucagonSynthesisRateOverride_type > p);

          //@}

          /**
           * @name AchievedExerciseLevelOverride
           *
           * @brief Accessor and modifier functions for the %AchievedExerciseLevelOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData AchievedExerciseLevelOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AchievedExerciseLevelOverride_type > AchievedExerciseLevelOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AchievedExerciseLevelOverride_type, char > AchievedExerciseLevelOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AchievedExerciseLevelOverride_optional&
          AchievedExerciseLevelOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AchievedExerciseLevelOverride_optional&
          AchievedExerciseLevelOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AchievedExerciseLevelOverride (const AchievedExerciseLevelOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AchievedExerciseLevelOverride (const AchievedExerciseLevelOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AchievedExerciseLevelOverride (::std::unique_ptr< AchievedExerciseLevelOverride_type > p);

          //@}

          /**
           * @name ChlorideLostToSweatOverride
           *
           * @brief Accessor and modifier functions for the %ChlorideLostToSweatOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData ChlorideLostToSweatOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ChlorideLostToSweatOverride_type > ChlorideLostToSweatOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ChlorideLostToSweatOverride_type, char > ChlorideLostToSweatOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ChlorideLostToSweatOverride_optional&
          ChlorideLostToSweatOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ChlorideLostToSweatOverride_optional&
          ChlorideLostToSweatOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ChlorideLostToSweatOverride (const ChlorideLostToSweatOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ChlorideLostToSweatOverride (const ChlorideLostToSweatOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ChlorideLostToSweatOverride (::std::unique_ptr< ChlorideLostToSweatOverride_type > p);

          //@}

          /**
           * @name CoreTemperatureOverride
           *
           * @brief Accessor and modifier functions for the %CoreTemperatureOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData CoreTemperatureOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CoreTemperatureOverride_type > CoreTemperatureOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CoreTemperatureOverride_type, char > CoreTemperatureOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CoreTemperatureOverride_optional&
          CoreTemperatureOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CoreTemperatureOverride_optional&
          CoreTemperatureOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CoreTemperatureOverride (const CoreTemperatureOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CoreTemperatureOverride (const CoreTemperatureOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CoreTemperatureOverride (::std::unique_ptr< CoreTemperatureOverride_type > p);

          //@}

          /**
           * @name CreatinineProductionRateOverride
           *
           * @brief Accessor and modifier functions for the %CreatinineProductionRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData CreatinineProductionRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CreatinineProductionRateOverride_type > CreatinineProductionRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CreatinineProductionRateOverride_type, char > CreatinineProductionRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CreatinineProductionRateOverride_optional&
          CreatinineProductionRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CreatinineProductionRateOverride_optional&
          CreatinineProductionRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CreatinineProductionRateOverride (const CreatinineProductionRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CreatinineProductionRateOverride (const CreatinineProductionRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CreatinineProductionRateOverride (::std::unique_ptr< CreatinineProductionRateOverride_type > p);

          //@}

          /**
           * @name ExerciseMeanArterialPressureDeltaOverride
           *
           * @brief Accessor and modifier functions for the %ExerciseMeanArterialPressureDeltaOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ExerciseMeanArterialPressureDeltaOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExerciseMeanArterialPressureDeltaOverride_type > ExerciseMeanArterialPressureDeltaOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExerciseMeanArterialPressureDeltaOverride_type, char > ExerciseMeanArterialPressureDeltaOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExerciseMeanArterialPressureDeltaOverride_optional&
          ExerciseMeanArterialPressureDeltaOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExerciseMeanArterialPressureDeltaOverride_optional&
          ExerciseMeanArterialPressureDeltaOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExerciseMeanArterialPressureDeltaOverride (const ExerciseMeanArterialPressureDeltaOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExerciseMeanArterialPressureDeltaOverride (const ExerciseMeanArterialPressureDeltaOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExerciseMeanArterialPressureDeltaOverride (::std::unique_ptr< ExerciseMeanArterialPressureDeltaOverride_type > p);

          //@}

          /**
           * @name FatigueLevelOverride
           *
           * @brief Accessor and modifier functions for the %FatigueLevelOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FatigueLevelOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FatigueLevelOverride_type > FatigueLevelOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatigueLevelOverride_type, char > FatigueLevelOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FatigueLevelOverride_optional&
          FatigueLevelOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FatigueLevelOverride_optional&
          FatigueLevelOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatigueLevelOverride (const FatigueLevelOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FatigueLevelOverride (const FatigueLevelOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FatigueLevelOverride (::std::unique_ptr< FatigueLevelOverride_type > p);

          //@}

          /**
           * @name LactateProductionRateOverride
           *
           * @brief Accessor and modifier functions for the %LactateProductionRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData LactateProductionRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LactateProductionRateOverride_type > LactateProductionRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LactateProductionRateOverride_type, char > LactateProductionRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LactateProductionRateOverride_optional&
          LactateProductionRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LactateProductionRateOverride_optional&
          LactateProductionRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LactateProductionRateOverride (const LactateProductionRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LactateProductionRateOverride (const LactateProductionRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LactateProductionRateOverride (::std::unique_ptr< LactateProductionRateOverride_type > p);

          //@}

          /**
           * @name PotassiumLostToSweatOverride
           *
           * @brief Accessor and modifier functions for the %PotassiumLostToSweatOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData PotassiumLostToSweatOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PotassiumLostToSweatOverride_type > PotassiumLostToSweatOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PotassiumLostToSweatOverride_type, char > PotassiumLostToSweatOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PotassiumLostToSweatOverride_optional&
          PotassiumLostToSweatOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PotassiumLostToSweatOverride_optional&
          PotassiumLostToSweatOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PotassiumLostToSweatOverride (const PotassiumLostToSweatOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PotassiumLostToSweatOverride (const PotassiumLostToSweatOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PotassiumLostToSweatOverride (::std::unique_ptr< PotassiumLostToSweatOverride_type > p);

          //@}

          /**
           * @name SkinTemperatureOverride
           *
           * @brief Accessor and modifier functions for the %SkinTemperatureOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData SkinTemperatureOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SkinTemperatureOverride_type > SkinTemperatureOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SkinTemperatureOverride_type, char > SkinTemperatureOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SkinTemperatureOverride_optional&
          SkinTemperatureOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SkinTemperatureOverride_optional&
          SkinTemperatureOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SkinTemperatureOverride (const SkinTemperatureOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SkinTemperatureOverride (const SkinTemperatureOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SkinTemperatureOverride (::std::unique_ptr< SkinTemperatureOverride_type > p);

          //@}

          /**
           * @name SodiumLostToSweatOverride
           *
           * @brief Accessor and modifier functions for the %SodiumLostToSweatOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData SodiumLostToSweatOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SodiumLostToSweatOverride_type > SodiumLostToSweatOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SodiumLostToSweatOverride_type, char > SodiumLostToSweatOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SodiumLostToSweatOverride_optional&
          SodiumLostToSweatOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SodiumLostToSweatOverride_optional&
          SodiumLostToSweatOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SodiumLostToSweatOverride (const SodiumLostToSweatOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SodiumLostToSweatOverride (const SodiumLostToSweatOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SodiumLostToSweatOverride (::std::unique_ptr< SodiumLostToSweatOverride_type > p);

          //@}

          /**
           * @name SweatRateOverride
           *
           * @brief Accessor and modifier functions for the %SweatRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerTimeData SweatRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SweatRateOverride_type > SweatRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SweatRateOverride_type, char > SweatRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SweatRateOverride_optional&
          SweatRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SweatRateOverride_optional&
          SweatRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SweatRateOverride (const SweatRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SweatRateOverride (const SweatRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SweatRateOverride (::std::unique_ptr< SweatRateOverride_type > p);

          //@}

          /**
           * @name TotalMetabolicRateOverride
           *
           * @brief Accessor and modifier functions for the %TotalMetabolicRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData TotalMetabolicRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalMetabolicRateOverride_type > TotalMetabolicRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalMetabolicRateOverride_type, char > TotalMetabolicRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalMetabolicRateOverride_optional&
          TotalMetabolicRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalMetabolicRateOverride_optional&
          TotalMetabolicRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalMetabolicRateOverride (const TotalMetabolicRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalMetabolicRateOverride (const TotalMetabolicRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalMetabolicRateOverride (::std::unique_ptr< TotalMetabolicRateOverride_type > p);

          //@}

          /**
           * @name TotalWorkRateLevelOverride
           *
           * @brief Accessor and modifier functions for the %TotalWorkRateLevelOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData TotalWorkRateLevelOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalWorkRateLevelOverride_type > TotalWorkRateLevelOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalWorkRateLevelOverride_type, char > TotalWorkRateLevelOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalWorkRateLevelOverride_optional&
          TotalWorkRateLevelOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalWorkRateLevelOverride_optional&
          TotalWorkRateLevelOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalWorkRateLevelOverride (const TotalWorkRateLevelOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalWorkRateLevelOverride (const TotalWorkRateLevelOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalWorkRateLevelOverride (::std::unique_ptr< TotalWorkRateLevelOverride_type > p);

          //@}

          /**
           * @name LeftAfferentArterioleResistanceOverride
           *
           * @brief Accessor and modifier functions for the %LeftAfferentArterioleResistanceOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData LeftAfferentArterioleResistanceOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftAfferentArterioleResistanceOverride_type > LeftAfferentArterioleResistanceOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftAfferentArterioleResistanceOverride_type, char > LeftAfferentArterioleResistanceOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftAfferentArterioleResistanceOverride_optional&
          LeftAfferentArterioleResistanceOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftAfferentArterioleResistanceOverride_optional&
          LeftAfferentArterioleResistanceOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftAfferentArterioleResistanceOverride (const LeftAfferentArterioleResistanceOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftAfferentArterioleResistanceOverride (const LeftAfferentArterioleResistanceOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftAfferentArterioleResistanceOverride (::std::unique_ptr< LeftAfferentArterioleResistanceOverride_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationRateOverride
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftGlomerularFiltrationRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationRateOverride_type > LeftGlomerularFiltrationRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationRateOverride_type, char > LeftGlomerularFiltrationRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationRateOverride_optional&
          LeftGlomerularFiltrationRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationRateOverride_optional&
          LeftGlomerularFiltrationRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationRateOverride (const LeftGlomerularFiltrationRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationRateOverride (const LeftGlomerularFiltrationRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationRateOverride (::std::unique_ptr< LeftGlomerularFiltrationRateOverride_type > p);

          //@}

          /**
           * @name LeftReabsorptionRateOverride
           *
           * @brief Accessor and modifier functions for the %LeftReabsorptionRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftReabsorptionRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftReabsorptionRateOverride_type > LeftReabsorptionRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftReabsorptionRateOverride_type, char > LeftReabsorptionRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftReabsorptionRateOverride_optional&
          LeftReabsorptionRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftReabsorptionRateOverride_optional&
          LeftReabsorptionRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftReabsorptionRateOverride (const LeftReabsorptionRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftReabsorptionRateOverride (const LeftReabsorptionRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftReabsorptionRateOverride (::std::unique_ptr< LeftReabsorptionRateOverride_type > p);

          //@}

          /**
           * @name RenalBloodFlowOverride
           *
           * @brief Accessor and modifier functions for the %RenalBloodFlowOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalBloodFlowOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalBloodFlowOverride_type > RenalBloodFlowOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalBloodFlowOverride_type, char > RenalBloodFlowOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalBloodFlowOverride_optional&
          RenalBloodFlowOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalBloodFlowOverride_optional&
          RenalBloodFlowOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalBloodFlowOverride (const RenalBloodFlowOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalBloodFlowOverride (const RenalBloodFlowOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalBloodFlowOverride (::std::unique_ptr< RenalBloodFlowOverride_type > p);

          //@}

          /**
           * @name RenalPlasmaFlowOverride
           *
           * @brief Accessor and modifier functions for the %RenalPlasmaFlowOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalPlasmaFlowOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalPlasmaFlowOverride_type > RenalPlasmaFlowOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalPlasmaFlowOverride_type, char > RenalPlasmaFlowOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalPlasmaFlowOverride_optional&
          RenalPlasmaFlowOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalPlasmaFlowOverride_optional&
          RenalPlasmaFlowOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalPlasmaFlowOverride (const RenalPlasmaFlowOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalPlasmaFlowOverride (const RenalPlasmaFlowOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalPlasmaFlowOverride (::std::unique_ptr< RenalPlasmaFlowOverride_type > p);

          //@}

          /**
           * @name RightAfferentArterioleResistanceOverride
           *
           * @brief Accessor and modifier functions for the %RightAfferentArterioleResistanceOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RightAfferentArterioleResistanceOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightAfferentArterioleResistanceOverride_type > RightAfferentArterioleResistanceOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightAfferentArterioleResistanceOverride_type, char > RightAfferentArterioleResistanceOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightAfferentArterioleResistanceOverride_optional&
          RightAfferentArterioleResistanceOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightAfferentArterioleResistanceOverride_optional&
          RightAfferentArterioleResistanceOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightAfferentArterioleResistanceOverride (const RightAfferentArterioleResistanceOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightAfferentArterioleResistanceOverride (const RightAfferentArterioleResistanceOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightAfferentArterioleResistanceOverride (::std::unique_ptr< RightAfferentArterioleResistanceOverride_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationRateOverride
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightGlomerularFiltrationRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationRateOverride_type > RightGlomerularFiltrationRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationRateOverride_type, char > RightGlomerularFiltrationRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationRateOverride_optional&
          RightGlomerularFiltrationRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationRateOverride_optional&
          RightGlomerularFiltrationRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationRateOverride (const RightGlomerularFiltrationRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationRateOverride (const RightGlomerularFiltrationRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationRateOverride (::std::unique_ptr< RightGlomerularFiltrationRateOverride_type > p);

          //@}

          /**
           * @name RightReabsorptionRateOverride
           *
           * @brief Accessor and modifier functions for the %RightReabsorptionRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightReabsorptionRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightReabsorptionRateOverride_type > RightReabsorptionRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightReabsorptionRateOverride_type, char > RightReabsorptionRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightReabsorptionRateOverride_optional&
          RightReabsorptionRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightReabsorptionRateOverride_optional&
          RightReabsorptionRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightReabsorptionRateOverride (const RightReabsorptionRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightReabsorptionRateOverride (const RightReabsorptionRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightReabsorptionRateOverride (::std::unique_ptr< RightReabsorptionRateOverride_type > p);

          //@}

          /**
           * @name UrinationRateOverride
           *
           * @brief Accessor and modifier functions for the %UrinationRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrinationRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrinationRateOverride_type > UrinationRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrinationRateOverride_type, char > UrinationRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrinationRateOverride_optional&
          UrinationRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrinationRateOverride_optional&
          UrinationRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrinationRateOverride (const UrinationRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrinationRateOverride (const UrinationRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrinationRateOverride (::std::unique_ptr< UrinationRateOverride_type > p);

          //@}

          /**
           * @name UrineProductionRateOverride
           *
           * @brief Accessor and modifier functions for the %UrineProductionRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrineProductionRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineProductionRateOverride_type > UrineProductionRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineProductionRateOverride_type, char > UrineProductionRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineProductionRateOverride_optional&
          UrineProductionRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineProductionRateOverride_optional&
          UrineProductionRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineProductionRateOverride (const UrineProductionRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineProductionRateOverride (const UrineProductionRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineProductionRateOverride (::std::unique_ptr< UrineProductionRateOverride_type > p);

          //@}

          /**
           * @name UrineOsmolalityOverride
           *
           * @brief Accessor and modifier functions for the %UrineOsmolalityOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarOsmolalityData UrineOsmolalityOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineOsmolalityOverride_type > UrineOsmolalityOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolalityOverride_type, char > UrineOsmolalityOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineOsmolalityOverride_optional&
          UrineOsmolalityOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineOsmolalityOverride_optional&
          UrineOsmolalityOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolalityOverride (const UrineOsmolalityOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineOsmolalityOverride (const UrineOsmolalityOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineOsmolalityOverride (::std::unique_ptr< UrineOsmolalityOverride_type > p);

          //@}

          /**
           * @name UrineVolumeOverride
           *
           * @brief Accessor and modifier functions for the %UrineVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData UrineVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineVolumeOverride_type > UrineVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineVolumeOverride_type, char > UrineVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineVolumeOverride_optional&
          UrineVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineVolumeOverride_optional&
          UrineVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineVolumeOverride (const UrineVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineVolumeOverride (const UrineVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineVolumeOverride (::std::unique_ptr< UrineVolumeOverride_type > p);

          //@}

          /**
           * @name UrineUreaNitrogenConcentrationOverride
           *
           * @brief Accessor and modifier functions for the %UrineUreaNitrogenConcentrationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData UrineUreaNitrogenConcentrationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineUreaNitrogenConcentrationOverride_type > UrineUreaNitrogenConcentrationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineUreaNitrogenConcentrationOverride_type, char > UrineUreaNitrogenConcentrationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineUreaNitrogenConcentrationOverride_optional&
          UrineUreaNitrogenConcentrationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineUreaNitrogenConcentrationOverride_optional&
          UrineUreaNitrogenConcentrationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineUreaNitrogenConcentrationOverride (const UrineUreaNitrogenConcentrationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineUreaNitrogenConcentrationOverride (const UrineUreaNitrogenConcentrationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineUreaNitrogenConcentrationOverride (::std::unique_ptr< UrineUreaNitrogenConcentrationOverride_type > p);

          //@}

          /**
           * @name ExpiratoryFlowOverride
           *
           * @brief Accessor and modifier functions for the %ExpiratoryFlowOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData ExpiratoryFlowOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExpiratoryFlowOverride_type > ExpiratoryFlowOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryFlowOverride_type, char > ExpiratoryFlowOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExpiratoryFlowOverride_optional&
          ExpiratoryFlowOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExpiratoryFlowOverride_optional&
          ExpiratoryFlowOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryFlowOverride (const ExpiratoryFlowOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExpiratoryFlowOverride (const ExpiratoryFlowOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExpiratoryFlowOverride (::std::unique_ptr< ExpiratoryFlowOverride_type > p);

          //@}

          /**
           * @name InspiratoryFlowOverride
           *
           * @brief Accessor and modifier functions for the %InspiratoryFlowOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData InspiratoryFlowOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryFlowOverride_type > InspiratoryFlowOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryFlowOverride_type, char > InspiratoryFlowOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryFlowOverride_optional&
          InspiratoryFlowOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryFlowOverride_optional&
          InspiratoryFlowOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryFlowOverride (const InspiratoryFlowOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryFlowOverride (const InspiratoryFlowOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryFlowOverride (::std::unique_ptr< InspiratoryFlowOverride_type > p);

          //@}

          /**
           * @name PulmonaryComplianceOverride
           *
           * @brief Accessor and modifier functions for the %PulmonaryComplianceOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowComplianceData PulmonaryComplianceOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryComplianceOverride_type > PulmonaryComplianceOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryComplianceOverride_type, char > PulmonaryComplianceOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryComplianceOverride_optional&
          PulmonaryComplianceOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryComplianceOverride_optional&
          PulmonaryComplianceOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryComplianceOverride (const PulmonaryComplianceOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryComplianceOverride (const PulmonaryComplianceOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryComplianceOverride (::std::unique_ptr< PulmonaryComplianceOverride_type > p);

          //@}

          /**
           * @name PulmonaryResistanceOverride
           *
           * @brief Accessor and modifier functions for the %PulmonaryResistanceOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData PulmonaryResistanceOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryResistanceOverride_type > PulmonaryResistanceOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryResistanceOverride_type, char > PulmonaryResistanceOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryResistanceOverride_optional&
          PulmonaryResistanceOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryResistanceOverride_optional&
          PulmonaryResistanceOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryResistanceOverride (const PulmonaryResistanceOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryResistanceOverride (const PulmonaryResistanceOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryResistanceOverride (::std::unique_ptr< PulmonaryResistanceOverride_type > p);

          //@}

          /**
           * @name RespirationRateOverride
           *
           * @brief Accessor and modifier functions for the %RespirationRateOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData RespirationRateOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationRateOverride_type > RespirationRateOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationRateOverride_type, char > RespirationRateOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationRateOverride_optional&
          RespirationRateOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationRateOverride_optional&
          RespirationRateOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationRateOverride (const RespirationRateOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationRateOverride (const RespirationRateOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationRateOverride (::std::unique_ptr< RespirationRateOverride_type > p);

          //@}

          /**
           * @name TargetPulmonaryVentilationOverride
           *
           * @brief Accessor and modifier functions for the %TargetPulmonaryVentilationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TargetPulmonaryVentilationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TargetPulmonaryVentilationOverride_type > TargetPulmonaryVentilationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TargetPulmonaryVentilationOverride_type, char > TargetPulmonaryVentilationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TargetPulmonaryVentilationOverride_optional&
          TargetPulmonaryVentilationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TargetPulmonaryVentilationOverride_optional&
          TargetPulmonaryVentilationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TargetPulmonaryVentilationOverride (const TargetPulmonaryVentilationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TargetPulmonaryVentilationOverride (const TargetPulmonaryVentilationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TargetPulmonaryVentilationOverride (::std::unique_ptr< TargetPulmonaryVentilationOverride_type > p);

          //@}

          /**
           * @name TidalVolumeOverride
           *
           * @brief Accessor and modifier functions for the %TidalVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TidalVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TidalVolumeOverride_type > TidalVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TidalVolumeOverride_type, char > TidalVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TidalVolumeOverride_optional&
          TidalVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TidalVolumeOverride_optional&
          TidalVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TidalVolumeOverride (const TidalVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TidalVolumeOverride (const TidalVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TidalVolumeOverride (::std::unique_ptr< TidalVolumeOverride_type > p);

          //@}

          /**
           * @name TotalAlveolarVentilationOverride
           *
           * @brief Accessor and modifier functions for the %TotalAlveolarVentilationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TotalAlveolarVentilationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalAlveolarVentilationOverride_type > TotalAlveolarVentilationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalAlveolarVentilationOverride_type, char > TotalAlveolarVentilationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalAlveolarVentilationOverride_optional&
          TotalAlveolarVentilationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalAlveolarVentilationOverride_optional&
          TotalAlveolarVentilationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalAlveolarVentilationOverride (const TotalAlveolarVentilationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalAlveolarVentilationOverride (const TotalAlveolarVentilationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalAlveolarVentilationOverride (::std::unique_ptr< TotalAlveolarVentilationOverride_type > p);

          //@}

          /**
           * @name TotalLungVolumeOverride
           *
           * @brief Accessor and modifier functions for the %TotalLungVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TotalLungVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalLungVolumeOverride_type > TotalLungVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalLungVolumeOverride_type, char > TotalLungVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalLungVolumeOverride_optional&
          TotalLungVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalLungVolumeOverride_optional&
          TotalLungVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalLungVolumeOverride (const TotalLungVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalLungVolumeOverride (const TotalLungVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalLungVolumeOverride (::std::unique_ptr< TotalLungVolumeOverride_type > p);

          //@}

          /**
           * @name TotalPulmonaryVentilationOverride
           *
           * @brief Accessor and modifier functions for the %TotalPulmonaryVentilationOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TotalPulmonaryVentilationOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalPulmonaryVentilationOverride_type > TotalPulmonaryVentilationOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalPulmonaryVentilationOverride_type, char > TotalPulmonaryVentilationOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalPulmonaryVentilationOverride_optional&
          TotalPulmonaryVentilationOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalPulmonaryVentilationOverride_optional&
          TotalPulmonaryVentilationOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalPulmonaryVentilationOverride (const TotalPulmonaryVentilationOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalPulmonaryVentilationOverride (const TotalPulmonaryVentilationOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalPulmonaryVentilationOverride (::std::unique_ptr< TotalPulmonaryVentilationOverride_type > p);

          //@}

          /**
           * @name ExtravascularFluidVolumeOverride
           *
           * @brief Accessor and modifier functions for the %ExtravascularFluidVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ExtravascularFluidVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExtravascularFluidVolumeOverride_type > ExtravascularFluidVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExtravascularFluidVolumeOverride_type, char > ExtravascularFluidVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExtravascularFluidVolumeOverride_optional&
          ExtravascularFluidVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExtravascularFluidVolumeOverride_optional&
          ExtravascularFluidVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExtravascularFluidVolumeOverride (const ExtravascularFluidVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExtravascularFluidVolumeOverride (const ExtravascularFluidVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExtravascularFluidVolumeOverride (::std::unique_ptr< ExtravascularFluidVolumeOverride_type > p);

          //@}

          /**
           * @name IntracellularFluidVolumeOverride
           *
           * @brief Accessor and modifier functions for the %IntracellularFluidVolumeOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData IntracellularFluidVolumeOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< IntracellularFluidVolumeOverride_type > IntracellularFluidVolumeOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IntracellularFluidVolumeOverride_type, char > IntracellularFluidVolumeOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const IntracellularFluidVolumeOverride_optional&
          IntracellularFluidVolumeOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          IntracellularFluidVolumeOverride_optional&
          IntracellularFluidVolumeOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IntracellularFluidVolumeOverride (const IntracellularFluidVolumeOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          IntracellularFluidVolumeOverride (const IntracellularFluidVolumeOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          IntracellularFluidVolumeOverride (::std::unique_ptr< IntracellularFluidVolumeOverride_type > p);

          //@}

          /**
           * @name LiverGlycogenOverride
           *
           * @brief Accessor and modifier functions for the %LiverGlycogenOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData LiverGlycogenOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LiverGlycogenOverride_type > LiverGlycogenOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiverGlycogenOverride_type, char > LiverGlycogenOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LiverGlycogenOverride_optional&
          LiverGlycogenOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LiverGlycogenOverride_optional&
          LiverGlycogenOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LiverGlycogenOverride (const LiverGlycogenOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LiverGlycogenOverride (const LiverGlycogenOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LiverGlycogenOverride (::std::unique_ptr< LiverGlycogenOverride_type > p);

          //@}

          /**
           * @name MuscleGlycogenOverride
           *
           * @brief Accessor and modifier functions for the %MuscleGlycogenOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MuscleGlycogenOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MuscleGlycogenOverride_type > MuscleGlycogenOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MuscleGlycogenOverride_type, char > MuscleGlycogenOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MuscleGlycogenOverride_optional&
          MuscleGlycogenOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MuscleGlycogenOverride_optional&
          MuscleGlycogenOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MuscleGlycogenOverride (const MuscleGlycogenOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MuscleGlycogenOverride (const MuscleGlycogenOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MuscleGlycogenOverride (::std::unique_ptr< MuscleGlycogenOverride_type > p);

          //@}

          /**
           * @name StoredFatOverride
           *
           * @brief Accessor and modifier functions for the %StoredFatOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData StoredFatOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StoredFatOverride_type > StoredFatOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StoredFatOverride_type, char > StoredFatOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StoredFatOverride_optional&
          StoredFatOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StoredFatOverride_optional&
          StoredFatOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StoredFatOverride (const StoredFatOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StoredFatOverride (const StoredFatOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StoredFatOverride (::std::unique_ptr< StoredFatOverride_type > p);

          //@}

          /**
           * @name StoredProteinOverride
           *
           * @brief Accessor and modifier functions for the %StoredProteinOverride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData StoredProteinOverride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StoredProteinOverride_type > StoredProteinOverride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StoredProteinOverride_type, char > StoredProteinOverride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StoredProteinOverride_optional&
          StoredProteinOverride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StoredProteinOverride_optional&
          StoredProteinOverride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StoredProteinOverride (const StoredProteinOverride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StoredProteinOverride (const StoredProteinOverride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StoredProteinOverride (::std::unique_ptr< StoredProteinOverride_type > p);

          //@}

          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff State_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const State_type&
          State () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          State_type&
          State ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name Conformant
           *
           * @brief Accessor and modifier functions for the %Conformant
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff Conformant_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Conformant_type, char > Conformant_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Conformant_type&
          Conformant () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Conformant_type&
          Conformant ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Conformant (const Conformant_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Conformant (::std::unique_ptr< Conformant_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          OverrideData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          OverrideData (const State_type&,
                        const Conformant_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          OverrideData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          OverrideData (const OverrideData& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual OverrideData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          OverrideData&
          operator= (const OverrideData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~OverrideData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ArterialBloodPHOverride_optional ArterialBloodPHOverride_;
          CalciumConcentrationOverride_optional CalciumConcentrationOverride_;
          CarbonDioxideSaturationOverride_optional CarbonDioxideSaturationOverride_;
          CarbonMonoxideSaturationOverride_optional CarbonMonoxideSaturationOverride_;
          GlucoseConcentrationOverride_optional GlucoseConcentrationOverride_;
          LactateConcentrationOverride_optional LactateConcentrationOverride_;
          OxygenSaturationOverride_optional OxygenSaturationOverride_;
          PhosphateOverride_optional PhosphateOverride_;
          PotassiumConcentrationOverride_optional PotassiumConcentrationOverride_;
          SodiumConcentrationOverride_optional SodiumConcentrationOverride_;
          TotalBilirubinOverride_optional TotalBilirubinOverride_;
          VenousBloodPHOverride_optional VenousBloodPHOverride_;
          WhiteBloodCellCountOverride_optional WhiteBloodCellCountOverride_;
          BloodVolumeOverride_optional BloodVolumeOverride_;
          CardiacOutputOverride_optional CardiacOutputOverride_;
          DiastolicArterialPressureOverride_optional DiastolicArterialPressureOverride_;
          HeartRateOverride_optional HeartRateOverride_;
          HeartStrokeVolumeOverride_optional HeartStrokeVolumeOverride_;
          MeanArterialPressureOverride_optional MeanArterialPressureOverride_;
          SystolicArterialPressureOverride_optional SystolicArterialPressureOverride_;
          InsulinSynthesisRateOverride_optional InsulinSynthesisRateOverride_;
          GlucagonSynthesisRateOverride_optional GlucagonSynthesisRateOverride_;
          AchievedExerciseLevelOverride_optional AchievedExerciseLevelOverride_;
          ChlorideLostToSweatOverride_optional ChlorideLostToSweatOverride_;
          CoreTemperatureOverride_optional CoreTemperatureOverride_;
          CreatinineProductionRateOverride_optional CreatinineProductionRateOverride_;
          ExerciseMeanArterialPressureDeltaOverride_optional ExerciseMeanArterialPressureDeltaOverride_;
          FatigueLevelOverride_optional FatigueLevelOverride_;
          LactateProductionRateOverride_optional LactateProductionRateOverride_;
          PotassiumLostToSweatOverride_optional PotassiumLostToSweatOverride_;
          SkinTemperatureOverride_optional SkinTemperatureOverride_;
          SodiumLostToSweatOverride_optional SodiumLostToSweatOverride_;
          SweatRateOverride_optional SweatRateOverride_;
          TotalMetabolicRateOverride_optional TotalMetabolicRateOverride_;
          TotalWorkRateLevelOverride_optional TotalWorkRateLevelOverride_;
          LeftAfferentArterioleResistanceOverride_optional LeftAfferentArterioleResistanceOverride_;
          LeftGlomerularFiltrationRateOverride_optional LeftGlomerularFiltrationRateOverride_;
          LeftReabsorptionRateOverride_optional LeftReabsorptionRateOverride_;
          RenalBloodFlowOverride_optional RenalBloodFlowOverride_;
          RenalPlasmaFlowOverride_optional RenalPlasmaFlowOverride_;
          RightAfferentArterioleResistanceOverride_optional RightAfferentArterioleResistanceOverride_;
          RightGlomerularFiltrationRateOverride_optional RightGlomerularFiltrationRateOverride_;
          RightReabsorptionRateOverride_optional RightReabsorptionRateOverride_;
          UrinationRateOverride_optional UrinationRateOverride_;
          UrineProductionRateOverride_optional UrineProductionRateOverride_;
          UrineOsmolalityOverride_optional UrineOsmolalityOverride_;
          UrineVolumeOverride_optional UrineVolumeOverride_;
          UrineUreaNitrogenConcentrationOverride_optional UrineUreaNitrogenConcentrationOverride_;
          ExpiratoryFlowOverride_optional ExpiratoryFlowOverride_;
          InspiratoryFlowOverride_optional InspiratoryFlowOverride_;
          PulmonaryComplianceOverride_optional PulmonaryComplianceOverride_;
          PulmonaryResistanceOverride_optional PulmonaryResistanceOverride_;
          RespirationRateOverride_optional RespirationRateOverride_;
          TargetPulmonaryVentilationOverride_optional TargetPulmonaryVentilationOverride_;
          TidalVolumeOverride_optional TidalVolumeOverride_;
          TotalAlveolarVentilationOverride_optional TotalAlveolarVentilationOverride_;
          TotalLungVolumeOverride_optional TotalLungVolumeOverride_;
          TotalPulmonaryVentilationOverride_optional TotalPulmonaryVentilationOverride_;
          ExtravascularFluidVolumeOverride_optional ExtravascularFluidVolumeOverride_;
          IntracellularFluidVolumeOverride_optional IntracellularFluidVolumeOverride_;
          LiverGlycogenOverride_optional LiverGlycogenOverride_;
          MuscleGlycogenOverride_optional MuscleGlycogenOverride_;
          StoredFatOverride_optional StoredFatOverride_;
          StoredProteinOverride_optional StoredProteinOverride_;
          ::xsd::cxx::tree::one< State_type > State_;
          ::xsd::cxx::tree::one< Conformant_type > Conformant_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PatientActionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumPatientAssessment::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumPatientAssessment&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PatientAssessmentRequestData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const AcuteRespiratoryDistressData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const AcuteStressData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const AirwayObstructionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ApneaData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const AsthmaAttackData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumBrainInjuryType::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumBrainInjuryType&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BrainInjuryData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BronchoconstrictionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BurnWoundData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CardiacArrestData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ChestCompressionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ChestCompressionForceData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ChestCompressionForceScaleData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ChestOcclusiveDressingData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ConsciousRespirationCommandData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ForcedInhaleData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ForcedExhaleData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BreathHoldData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const UseInhalerData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ConsciousRespirationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ConsumeNutrientsData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const GenericExerciseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const RunningExerciseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CyclingExerciseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const StrengthExerciseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ExerciseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const HemorrhageData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumInfectionSeverity::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumInfectionSeverity&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const InfectionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumIntubationType::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumIntubationType&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const IntubationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const MechanicalVentilationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const NeedleDecompressionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const NasalStateData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PainStimulusData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PericardialEffusionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumPneumothoraxType::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumPneumothoraxType&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TensionPneumothoraxData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SleepData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumBolusAdministration::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumBolusAdministration&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumOralAdministration::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumOralAdministration&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceAdministrationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceBolusData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceBolusStateData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceCompoundInfusionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceInfusionData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceNasalDoseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceOralDoseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumTourniquetApplicationLevel::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumTourniquetApplicationLevel&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TourniquetData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TransmucosalStateData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const UrinateData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const OverrideData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PatientActionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumPatientAssessment&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumPatientAssessment&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumPatientAssessment&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PatientAssessmentRequestData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const AcuteRespiratoryDistressData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const AcuteStressData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const AirwayObstructionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ApneaData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const AsthmaAttackData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumBrainInjuryType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumBrainInjuryType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumBrainInjuryType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BrainInjuryData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BronchoconstrictionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BurnWoundData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CardiacArrestData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ChestCompressionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ChestCompressionForceData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ChestCompressionForceScaleData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ChestOcclusiveDressingData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ConsciousRespirationCommandData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ForcedInhaleData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ForcedExhaleData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BreathHoldData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const UseInhalerData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ConsciousRespirationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ConsumeNutrientsData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const GenericExerciseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const RunningExerciseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CyclingExerciseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const StrengthExerciseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ExerciseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const HemorrhageData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumInfectionSeverity&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumInfectionSeverity&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumInfectionSeverity&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const InfectionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumIntubationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumIntubationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumIntubationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const IntubationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const MechanicalVentilationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const NeedleDecompressionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const NasalStateData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PainStimulusData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PericardialEffusionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumPneumothoraxType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumPneumothoraxType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumPneumothoraxType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TensionPneumothoraxData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SleepData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumBolusAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumBolusAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumBolusAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumOralAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumOralAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumOralAdministration&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceAdministrationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceBolusData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceBolusStateData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceCompoundInfusionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceInfusionData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceNasalDoseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceOralDoseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumTourniquetApplicationLevel&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumTourniquetApplicationLevel&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumTourniquetApplicationLevel&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TourniquetData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TransmucosalStateData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const UrinateData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const OverrideData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ACTIONS_HXX
