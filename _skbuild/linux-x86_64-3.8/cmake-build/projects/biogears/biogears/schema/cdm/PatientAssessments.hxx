// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from PatientAssessments.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ASSESSMENTS_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ASSESSMENTS_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class PatientAssessmentData;
        class PulmonaryFunctionTestData;
        class SequentialOrganFailureAssessmentData;
        class CompleteBloodCountData;
        class PsychomotorVigilanceTaskData;
        class ComprehensiveMetabolicPanelData;
        class enumPresenceIndicator;
        class enumClarityIndicator;
        class enumUrineColor;
        class enumMicroscopicObservationType;
        class enumMicroscopicObservationAmount;
        class UrinalysisData;
        class UrinalysisMicroscopicData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Properties.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %PatientAssessmentData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PatientAssessmentData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PatientAssessmentData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PatientAssessmentData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PatientAssessmentData (const PatientAssessmentData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PatientAssessmentData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PatientAssessmentData ();
        };

        /**
         * @brief Class corresponding to the %PulmonaryFunctionTestData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PulmonaryFunctionTestData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name ExpiratoryReserveVolume
           *
           * @brief Accessor and modifier functions for the %ExpiratoryReserveVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ExpiratoryReserveVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExpiratoryReserveVolume_type > ExpiratoryReserveVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryReserveVolume_type, char > ExpiratoryReserveVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExpiratoryReserveVolume_optional&
          ExpiratoryReserveVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExpiratoryReserveVolume_optional&
          ExpiratoryReserveVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryReserveVolume (const ExpiratoryReserveVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExpiratoryReserveVolume (const ExpiratoryReserveVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExpiratoryReserveVolume (::std::unique_ptr< ExpiratoryReserveVolume_type > p);

          //@}

          /**
           * @name ForcedVitalCapacity
           *
           * @brief Accessor and modifier functions for the %ForcedVitalCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ForcedVitalCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ForcedVitalCapacity_type > ForcedVitalCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForcedVitalCapacity_type, char > ForcedVitalCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ForcedVitalCapacity_optional&
          ForcedVitalCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ForcedVitalCapacity_optional&
          ForcedVitalCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ForcedVitalCapacity (const ForcedVitalCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ForcedVitalCapacity (const ForcedVitalCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ForcedVitalCapacity (::std::unique_ptr< ForcedVitalCapacity_type > p);

          //@}

          /**
           * @name ForcedExpiratoryVolume
           *
           * @brief Accessor and modifier functions for the %ForcedExpiratoryVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ForcedExpiratoryVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ForcedExpiratoryVolume_type > ForcedExpiratoryVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForcedExpiratoryVolume_type, char > ForcedExpiratoryVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ForcedExpiratoryVolume_optional&
          ForcedExpiratoryVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ForcedExpiratoryVolume_optional&
          ForcedExpiratoryVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ForcedExpiratoryVolume (const ForcedExpiratoryVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ForcedExpiratoryVolume (const ForcedExpiratoryVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ForcedExpiratoryVolume (::std::unique_ptr< ForcedExpiratoryVolume_type > p);

          //@}

          /**
           * @name ForcedExpiratoryFlow
           *
           * @brief Accessor and modifier functions for the %ForcedExpiratoryFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData ForcedExpiratoryFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ForcedExpiratoryFlow_type > ForcedExpiratoryFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForcedExpiratoryFlow_type, char > ForcedExpiratoryFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ForcedExpiratoryFlow_optional&
          ForcedExpiratoryFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ForcedExpiratoryFlow_optional&
          ForcedExpiratoryFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ForcedExpiratoryFlow (const ForcedExpiratoryFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ForcedExpiratoryFlow (const ForcedExpiratoryFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ForcedExpiratoryFlow (::std::unique_ptr< ForcedExpiratoryFlow_type > p);

          //@}

          /**
           * @name FunctionalResidualCapacity
           *
           * @brief Accessor and modifier functions for the %FunctionalResidualCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData FunctionalResidualCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FunctionalResidualCapacity_type > FunctionalResidualCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FunctionalResidualCapacity_type, char > FunctionalResidualCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FunctionalResidualCapacity_optional&
          FunctionalResidualCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FunctionalResidualCapacity_optional&
          FunctionalResidualCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FunctionalResidualCapacity (const FunctionalResidualCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FunctionalResidualCapacity (const FunctionalResidualCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FunctionalResidualCapacity (::std::unique_ptr< FunctionalResidualCapacity_type > p);

          //@}

          /**
           * @name InspiratoryCapacity
           *
           * @brief Accessor and modifier functions for the %InspiratoryCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData InspiratoryCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryCapacity_type > InspiratoryCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryCapacity_type, char > InspiratoryCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryCapacity_optional&
          InspiratoryCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryCapacity_optional&
          InspiratoryCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryCapacity (const InspiratoryCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryCapacity (const InspiratoryCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryCapacity (::std::unique_ptr< InspiratoryCapacity_type > p);

          //@}

          /**
           * @name InspiratoryReserveVolume
           *
           * @brief Accessor and modifier functions for the %InspiratoryReserveVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData InspiratoryReserveVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryReserveVolume_type > InspiratoryReserveVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryReserveVolume_type, char > InspiratoryReserveVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryReserveVolume_optional&
          InspiratoryReserveVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryReserveVolume_optional&
          InspiratoryReserveVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryReserveVolume (const InspiratoryReserveVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryReserveVolume (const InspiratoryReserveVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryReserveVolume (::std::unique_ptr< InspiratoryReserveVolume_type > p);

          //@}

          /**
           * @name MaximumVoluntaryVentilation
           *
           * @brief Accessor and modifier functions for the %MaximumVoluntaryVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData MaximumVoluntaryVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MaximumVoluntaryVentilation_type > MaximumVoluntaryVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumVoluntaryVentilation_type, char > MaximumVoluntaryVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MaximumVoluntaryVentilation_optional&
          MaximumVoluntaryVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MaximumVoluntaryVentilation_optional&
          MaximumVoluntaryVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumVoluntaryVentilation (const MaximumVoluntaryVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MaximumVoluntaryVentilation (const MaximumVoluntaryVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MaximumVoluntaryVentilation (::std::unique_ptr< MaximumVoluntaryVentilation_type > p);

          //@}

          /**
           * @name PeakExpiratoryFlow
           *
           * @brief Accessor and modifier functions for the %PeakExpiratoryFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData PeakExpiratoryFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PeakExpiratoryFlow_type > PeakExpiratoryFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeakExpiratoryFlow_type, char > PeakExpiratoryFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PeakExpiratoryFlow_optional&
          PeakExpiratoryFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PeakExpiratoryFlow_optional&
          PeakExpiratoryFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeakExpiratoryFlow (const PeakExpiratoryFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PeakExpiratoryFlow (const PeakExpiratoryFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PeakExpiratoryFlow (::std::unique_ptr< PeakExpiratoryFlow_type > p);

          //@}

          /**
           * @name ResidualVolume
           *
           * @brief Accessor and modifier functions for the %ResidualVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ResidualVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResidualVolume_type > ResidualVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResidualVolume_type, char > ResidualVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResidualVolume_optional&
          ResidualVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResidualVolume_optional&
          ResidualVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResidualVolume (const ResidualVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResidualVolume (const ResidualVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResidualVolume (::std::unique_ptr< ResidualVolume_type > p);

          //@}

          /**
           * @name SlowVitalCapacity
           *
           * @brief Accessor and modifier functions for the %SlowVitalCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData SlowVitalCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SlowVitalCapacity_type > SlowVitalCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SlowVitalCapacity_type, char > SlowVitalCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SlowVitalCapacity_optional&
          SlowVitalCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SlowVitalCapacity_optional&
          SlowVitalCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SlowVitalCapacity (const SlowVitalCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SlowVitalCapacity (const SlowVitalCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SlowVitalCapacity (::std::unique_ptr< SlowVitalCapacity_type > p);

          //@}

          /**
           * @name TotalLungCapacity
           *
           * @brief Accessor and modifier functions for the %TotalLungCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TotalLungCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalLungCapacity_type > TotalLungCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalLungCapacity_type, char > TotalLungCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalLungCapacity_optional&
          TotalLungCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalLungCapacity_optional&
          TotalLungCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalLungCapacity (const TotalLungCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalLungCapacity (const TotalLungCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalLungCapacity (::std::unique_ptr< TotalLungCapacity_type > p);

          //@}

          /**
           * @name VitalCapacity
           *
           * @brief Accessor and modifier functions for the %VitalCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData VitalCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VitalCapacity_type > VitalCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VitalCapacity_type, char > VitalCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VitalCapacity_optional&
          VitalCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VitalCapacity_optional&
          VitalCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VitalCapacity (const VitalCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VitalCapacity (const VitalCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VitalCapacity (::std::unique_ptr< VitalCapacity_type > p);

          //@}

          /**
           * @name LungVolumePlot
           *
           * @brief Accessor and modifier functions for the %LungVolumePlot
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::FunctionVolumeVsTimeData LungVolumePlot_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LungVolumePlot_type > LungVolumePlot_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LungVolumePlot_type, char > LungVolumePlot_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LungVolumePlot_optional&
          LungVolumePlot () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LungVolumePlot_optional&
          LungVolumePlot ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LungVolumePlot (const LungVolumePlot_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LungVolumePlot (const LungVolumePlot_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LungVolumePlot (::std::unique_ptr< LungVolumePlot_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PulmonaryFunctionTestData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PulmonaryFunctionTestData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PulmonaryFunctionTestData (const PulmonaryFunctionTestData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PulmonaryFunctionTestData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PulmonaryFunctionTestData&
          operator= (const PulmonaryFunctionTestData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PulmonaryFunctionTestData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ExpiratoryReserveVolume_optional ExpiratoryReserveVolume_;
          ForcedVitalCapacity_optional ForcedVitalCapacity_;
          ForcedExpiratoryVolume_optional ForcedExpiratoryVolume_;
          ForcedExpiratoryFlow_optional ForcedExpiratoryFlow_;
          FunctionalResidualCapacity_optional FunctionalResidualCapacity_;
          InspiratoryCapacity_optional InspiratoryCapacity_;
          InspiratoryReserveVolume_optional InspiratoryReserveVolume_;
          MaximumVoluntaryVentilation_optional MaximumVoluntaryVentilation_;
          PeakExpiratoryFlow_optional PeakExpiratoryFlow_;
          ResidualVolume_optional ResidualVolume_;
          SlowVitalCapacity_optional SlowVitalCapacity_;
          TotalLungCapacity_optional TotalLungCapacity_;
          VitalCapacity_optional VitalCapacity_;
          LungVolumePlot_optional LungVolumePlot_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SequentialOrganFailureAssessmentData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SequentialOrganFailureAssessmentData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name RespirationSOFA
           *
           * @brief Accessor and modifier functions for the %RespirationSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RespirationSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationSOFA_type, char > RespirationSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RespirationSOFA_type&
          RespirationSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RespirationSOFA_type&
          RespirationSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationSOFA (const RespirationSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RespirationSOFA (::std::unique_ptr< RespirationSOFA_type > p);

          //@}

          /**
           * @name CoagulationSOFA
           *
           * @brief Accessor and modifier functions for the %CoagulationSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData CoagulationSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CoagulationSOFA_type, char > CoagulationSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CoagulationSOFA_type&
          CoagulationSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CoagulationSOFA_type&
          CoagulationSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CoagulationSOFA (const CoagulationSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CoagulationSOFA (::std::unique_ptr< CoagulationSOFA_type > p);

          //@}

          /**
           * @name LiverSOFA
           *
           * @brief Accessor and modifier functions for the %LiverSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LiverSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiverSOFA_type, char > LiverSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LiverSOFA_type&
          LiverSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LiverSOFA_type&
          LiverSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LiverSOFA (const LiverSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LiverSOFA (::std::unique_ptr< LiverSOFA_type > p);

          //@}

          /**
           * @name CardiovascularSOFA
           *
           * @brief Accessor and modifier functions for the %CardiovascularSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData CardiovascularSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiovascularSOFA_type, char > CardiovascularSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiovascularSOFA_type&
          CardiovascularSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiovascularSOFA_type&
          CardiovascularSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiovascularSOFA (const CardiovascularSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiovascularSOFA (::std::unique_ptr< CardiovascularSOFA_type > p);

          //@}

          /**
           * @name CentralNervousSOFA
           *
           * @brief Accessor and modifier functions for the %CentralNervousSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData CentralNervousSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CentralNervousSOFA_type, char > CentralNervousSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CentralNervousSOFA_type&
          CentralNervousSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CentralNervousSOFA_type&
          CentralNervousSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CentralNervousSOFA (const CentralNervousSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CentralNervousSOFA (::std::unique_ptr< CentralNervousSOFA_type > p);

          //@}

          /**
           * @name RenalSOFA
           *
           * @brief Accessor and modifier functions for the %RenalSOFA
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RenalSOFA_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalSOFA_type, char > RenalSOFA_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RenalSOFA_type&
          RenalSOFA () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RenalSOFA_type&
          RenalSOFA ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalSOFA (const RenalSOFA_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RenalSOFA (::std::unique_ptr< RenalSOFA_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SequentialOrganFailureAssessmentData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SequentialOrganFailureAssessmentData (const RespirationSOFA_type&,
                                                const CoagulationSOFA_type&,
                                                const LiverSOFA_type&,
                                                const CardiovascularSOFA_type&,
                                                const CentralNervousSOFA_type&,
                                                const RenalSOFA_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SequentialOrganFailureAssessmentData (::std::unique_ptr< RespirationSOFA_type >,
                                                ::std::unique_ptr< CoagulationSOFA_type >,
                                                ::std::unique_ptr< LiverSOFA_type >,
                                                ::std::unique_ptr< CardiovascularSOFA_type >,
                                                ::std::unique_ptr< CentralNervousSOFA_type >,
                                                ::std::unique_ptr< RenalSOFA_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SequentialOrganFailureAssessmentData (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SequentialOrganFailureAssessmentData (const SequentialOrganFailureAssessmentData& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SequentialOrganFailureAssessmentData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SequentialOrganFailureAssessmentData&
          operator= (const SequentialOrganFailureAssessmentData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SequentialOrganFailureAssessmentData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< RespirationSOFA_type > RespirationSOFA_;
          ::xsd::cxx::tree::one< CoagulationSOFA_type > CoagulationSOFA_;
          ::xsd::cxx::tree::one< LiverSOFA_type > LiverSOFA_;
          ::xsd::cxx::tree::one< CardiovascularSOFA_type > CardiovascularSOFA_;
          ::xsd::cxx::tree::one< CentralNervousSOFA_type > CentralNervousSOFA_;
          ::xsd::cxx::tree::one< RenalSOFA_type > RenalSOFA_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CompleteBloodCountData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CompleteBloodCountData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name Hematocrit
           *
           * @brief Accessor and modifier functions for the %Hematocrit
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData Hematocrit_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Hematocrit_type > Hematocrit_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Hematocrit_type, char > Hematocrit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Hematocrit_optional&
          Hematocrit () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Hematocrit_optional&
          Hematocrit ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Hematocrit (const Hematocrit_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Hematocrit (const Hematocrit_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Hematocrit (::std::unique_ptr< Hematocrit_type > p);

          //@}

          /**
           * @name Hemoglobin
           *
           * @brief Accessor and modifier functions for the %Hemoglobin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Hemoglobin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Hemoglobin_type > Hemoglobin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Hemoglobin_type, char > Hemoglobin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Hemoglobin_optional&
          Hemoglobin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Hemoglobin_optional&
          Hemoglobin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Hemoglobin (const Hemoglobin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Hemoglobin (const Hemoglobin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Hemoglobin (::std::unique_ptr< Hemoglobin_type > p);

          //@}

          /**
           * @name PlateletCount
           *
           * @brief Accessor and modifier functions for the %PlateletCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData PlateletCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlateletCount_type > PlateletCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlateletCount_type, char > PlateletCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlateletCount_optional&
          PlateletCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlateletCount_optional&
          PlateletCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlateletCount (const PlateletCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlateletCount (const PlateletCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlateletCount (::std::unique_ptr< PlateletCount_type > p);

          //@}

          /**
           * @name MeanCorpuscularHemoglobin
           *
           * @brief Accessor and modifier functions for the %MeanCorpuscularHemoglobin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAmountData MeanCorpuscularHemoglobin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCorpuscularHemoglobin_type > MeanCorpuscularHemoglobin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCorpuscularHemoglobin_type, char > MeanCorpuscularHemoglobin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCorpuscularHemoglobin_optional&
          MeanCorpuscularHemoglobin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCorpuscularHemoglobin_optional&
          MeanCorpuscularHemoglobin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCorpuscularHemoglobin (::std::unique_ptr< MeanCorpuscularHemoglobin_type > p);

          //@}

          /**
           * @name MeanCorpuscularHemoglobinConcentration
           *
           * @brief Accessor and modifier functions for the %MeanCorpuscularHemoglobinConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCorpuscularHemoglobinConcentration_type > MeanCorpuscularHemoglobinConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCorpuscularHemoglobinConcentration_type, char > MeanCorpuscularHemoglobinConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCorpuscularHemoglobinConcentration_optional&
          MeanCorpuscularHemoglobinConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCorpuscularHemoglobinConcentration_optional&
          MeanCorpuscularHemoglobinConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCorpuscularHemoglobinConcentration (::std::unique_ptr< MeanCorpuscularHemoglobinConcentration_type > p);

          //@}

          /**
           * @name MeanCorpuscularVolume
           *
           * @brief Accessor and modifier functions for the %MeanCorpuscularVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData MeanCorpuscularVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCorpuscularVolume_type > MeanCorpuscularVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCorpuscularVolume_type, char > MeanCorpuscularVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCorpuscularVolume_optional&
          MeanCorpuscularVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCorpuscularVolume_optional&
          MeanCorpuscularVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCorpuscularVolume (const MeanCorpuscularVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCorpuscularVolume (const MeanCorpuscularVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCorpuscularVolume (::std::unique_ptr< MeanCorpuscularVolume_type > p);

          //@}

          /**
           * @name RedBloodCellCount
           *
           * @brief Accessor and modifier functions for the %RedBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData RedBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCellCount_type > RedBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCellCount_type, char > RedBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCellCount_optional&
          RedBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCellCount_optional&
          RedBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > p);

          //@}

          /**
           * @name WhiteBloodCellCount
           *
           * @brief Accessor and modifier functions for the %WhiteBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData WhiteBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WhiteBloodCellCount_type > WhiteBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WhiteBloodCellCount_type, char > WhiteBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WhiteBloodCellCount_optional&
          WhiteBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WhiteBloodCellCount_optional&
          WhiteBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CompleteBloodCountData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CompleteBloodCountData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CompleteBloodCountData (const CompleteBloodCountData& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CompleteBloodCountData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CompleteBloodCountData&
          operator= (const CompleteBloodCountData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CompleteBloodCountData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Hematocrit_optional Hematocrit_;
          Hemoglobin_optional Hemoglobin_;
          PlateletCount_optional PlateletCount_;
          MeanCorpuscularHemoglobin_optional MeanCorpuscularHemoglobin_;
          MeanCorpuscularHemoglobinConcentration_optional MeanCorpuscularHemoglobinConcentration_;
          MeanCorpuscularVolume_optional MeanCorpuscularVolume_;
          RedBloodCellCount_optional RedBloodCellCount_;
          WhiteBloodCellCount_optional WhiteBloodCellCount_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PsychomotorVigilanceTaskData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PsychomotorVigilanceTaskData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name ReactionTime
           *
           * @brief Accessor and modifier functions for the %ReactionTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ReactionTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ReactionTime_type > ReactionTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReactionTime_type, char > ReactionTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ReactionTime_optional&
          ReactionTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ReactionTime_optional&
          ReactionTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ReactionTime (const ReactionTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ReactionTime (const ReactionTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ReactionTime (::std::unique_ptr< ReactionTime_type > p);

          //@}

          /**
           * @name AttentionLapses
           *
           * @brief Accessor and modifier functions for the %AttentionLapses
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData AttentionLapses_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AttentionLapses_type > AttentionLapses_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AttentionLapses_type, char > AttentionLapses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AttentionLapses_optional&
          AttentionLapses () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AttentionLapses_optional&
          AttentionLapses ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AttentionLapses (const AttentionLapses_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AttentionLapses (const AttentionLapses_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AttentionLapses (::std::unique_ptr< AttentionLapses_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PsychomotorVigilanceTaskData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PsychomotorVigilanceTaskData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PsychomotorVigilanceTaskData (const PsychomotorVigilanceTaskData& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PsychomotorVigilanceTaskData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PsychomotorVigilanceTaskData&
          operator= (const PsychomotorVigilanceTaskData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PsychomotorVigilanceTaskData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ReactionTime_optional ReactionTime_;
          AttentionLapses_optional AttentionLapses_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ComprehensiveMetabolicPanelData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API ComprehensiveMetabolicPanelData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name Albumin
           *
           * @brief Accessor and modifier functions for the %Albumin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Albumin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Albumin_type > Albumin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Albumin_type, char > Albumin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Albumin_optional&
          Albumin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Albumin_optional&
          Albumin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Albumin (const Albumin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Albumin (const Albumin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Albumin (::std::unique_ptr< Albumin_type > p);

          //@}

          /**
           * @name ALP
           *
           * @brief Accessor and modifier functions for the %ALP
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData ALP_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ALP_type > ALP_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ALP_type, char > ALP_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ALP_optional&
          ALP () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ALP_optional&
          ALP ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ALP (const ALP_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ALP (const ALP_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ALP (::std::unique_ptr< ALP_type > p);

          //@}

          /**
           * @name ALT
           *
           * @brief Accessor and modifier functions for the %ALT
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData ALT_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ALT_type > ALT_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ALT_type, char > ALT_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ALT_optional&
          ALT () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ALT_optional&
          ALT ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ALT (const ALT_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ALT (const ALT_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ALT (::std::unique_ptr< ALT_type > p);

          //@}

          /**
           * @name AST
           *
           * @brief Accessor and modifier functions for the %AST
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData AST_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AST_type > AST_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AST_type, char > AST_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AST_optional&
          AST () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AST_optional&
          AST ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AST (const AST_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AST (const AST_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AST (::std::unique_ptr< AST_type > p);

          //@}

          /**
           * @name BUN
           *
           * @brief Accessor and modifier functions for the %BUN
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BUN_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BUN_type > BUN_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BUN_type, char > BUN_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BUN_optional&
          BUN () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BUN_optional&
          BUN ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BUN (const BUN_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BUN (const BUN_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BUN (::std::unique_ptr< BUN_type > p);

          //@}

          /**
           * @name Calcium
           *
           * @brief Accessor and modifier functions for the %Calcium
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Calcium_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Calcium_type > Calcium_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Calcium_type, char > Calcium_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Calcium_optional&
          Calcium () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Calcium_optional&
          Calcium ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Calcium (const Calcium_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Calcium (const Calcium_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Calcium (::std::unique_ptr< Calcium_type > p);

          //@}

          /**
           * @name Chloride
           *
           * @brief Accessor and modifier functions for the %Chloride
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData Chloride_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Chloride_type > Chloride_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Chloride_type, char > Chloride_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Chloride_optional&
          Chloride () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Chloride_optional&
          Chloride ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Chloride (const Chloride_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Chloride (const Chloride_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Chloride (::std::unique_ptr< Chloride_type > p);

          //@}

          /**
           * @name CO2
           *
           * @brief Accessor and modifier functions for the %CO2
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData CO2_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CO2_type > CO2_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CO2_type, char > CO2_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CO2_optional&
          CO2 () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CO2_optional&
          CO2 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CO2 (const CO2_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CO2 (const CO2_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CO2 (::std::unique_ptr< CO2_type > p);

          //@}

          /**
           * @name Creatinine
           *
           * @brief Accessor and modifier functions for the %Creatinine
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Creatinine_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Creatinine_type > Creatinine_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Creatinine_type, char > Creatinine_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Creatinine_optional&
          Creatinine () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Creatinine_optional&
          Creatinine ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Creatinine (const Creatinine_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Creatinine (const Creatinine_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Creatinine (::std::unique_ptr< Creatinine_type > p);

          //@}

          /**
           * @name Glucose
           *
           * @brief Accessor and modifier functions for the %Glucose
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Glucose_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Glucose_type > Glucose_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Glucose_type, char > Glucose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Glucose_optional&
          Glucose () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Glucose_optional&
          Glucose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Glucose (const Glucose_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Glucose (const Glucose_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Glucose (::std::unique_ptr< Glucose_type > p);

          //@}

          /**
           * @name Potassium
           *
           * @brief Accessor and modifier functions for the %Potassium
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData Potassium_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Potassium_type > Potassium_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Potassium_type, char > Potassium_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Potassium_optional&
          Potassium () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Potassium_optional&
          Potassium ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Potassium (const Potassium_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Potassium (const Potassium_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Potassium (::std::unique_ptr< Potassium_type > p);

          //@}

          /**
           * @name Sodium
           *
           * @brief Accessor and modifier functions for the %Sodium
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData Sodium_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Sodium_type > Sodium_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Sodium_type, char > Sodium_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Sodium_optional&
          Sodium () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Sodium_optional&
          Sodium ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Sodium (const Sodium_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Sodium (const Sodium_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Sodium (::std::unique_ptr< Sodium_type > p);

          //@}

          /**
           * @name TotalBilirubin
           *
           * @brief Accessor and modifier functions for the %TotalBilirubin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalBilirubin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalBilirubin_type > TotalBilirubin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBilirubin_type, char > TotalBilirubin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalBilirubin_optional&
          TotalBilirubin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalBilirubin_optional&
          TotalBilirubin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBilirubin (const TotalBilirubin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalBilirubin (const TotalBilirubin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > p);

          //@}

          /**
           * @name TotalProtein
           *
           * @brief Accessor and modifier functions for the %TotalProtein
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalProtein_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalProtein_type > TotalProtein_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalProtein_type, char > TotalProtein_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalProtein_optional&
          TotalProtein () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalProtein_optional&
          TotalProtein ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalProtein (const TotalProtein_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalProtein (const TotalProtein_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalProtein (::std::unique_ptr< TotalProtein_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ComprehensiveMetabolicPanelData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ComprehensiveMetabolicPanelData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ComprehensiveMetabolicPanelData (const ComprehensiveMetabolicPanelData& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ComprehensiveMetabolicPanelData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ComprehensiveMetabolicPanelData&
          operator= (const ComprehensiveMetabolicPanelData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ComprehensiveMetabolicPanelData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Albumin_optional Albumin_;
          ALP_optional ALP_;
          ALT_optional ALT_;
          AST_optional AST_;
          BUN_optional BUN_;
          Calcium_optional Calcium_;
          Chloride_optional Chloride_;
          CO2_optional CO2_;
          Creatinine_optional Creatinine_;
          Glucose_optional Glucose_;
          Potassium_optional Potassium_;
          Sodium_optional Sodium_;
          TotalBilirubin_optional TotalBilirubin_;
          TotalProtein_optional TotalProtein_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumPresenceIndicator
         * schema type.
         */
        class BIOGEARS_CDM_API enumPresenceIndicator: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Positive,
            Negative
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumPresenceIndicator ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumPresenceIndicator (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumPresenceIndicator (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumPresenceIndicator (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumPresenceIndicator (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPresenceIndicator (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPresenceIndicator (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumPresenceIndicator (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumPresenceIndicator (const enumPresenceIndicator& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumPresenceIndicator*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumPresenceIndicator&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumPresenceIndicator_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumPresenceIndicator_convert () const;

          public:
          static const char* const _xsd_enumPresenceIndicator_literals_[2];
          static const value _xsd_enumPresenceIndicator_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumClarityIndicator
         * schema type.
         */
        class BIOGEARS_CDM_API enumClarityIndicator: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Clear,
            SlightlyCloudy,
            Cloudy,
            Turbid
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumClarityIndicator ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumClarityIndicator (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumClarityIndicator (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumClarityIndicator (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumClarityIndicator (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumClarityIndicator (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumClarityIndicator (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumClarityIndicator (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumClarityIndicator (const enumClarityIndicator& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumClarityIndicator*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumClarityIndicator&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumClarityIndicator_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumClarityIndicator_convert () const;

          public:
          static const char* const _xsd_enumClarityIndicator_literals_[4];
          static const value _xsd_enumClarityIndicator_indexes_[4];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumUrineColor
         * schema type.
         */
        class BIOGEARS_CDM_API enumUrineColor: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            PaleYellow,
            Yellow,
            DarkYellow,
            Pink
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumUrineColor ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumUrineColor (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumUrineColor (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumUrineColor (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumUrineColor (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumUrineColor (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumUrineColor (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumUrineColor (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumUrineColor (const enumUrineColor& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumUrineColor*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumUrineColor&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumUrineColor_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumUrineColor_convert () const;

          public:
          static const char* const _xsd_enumUrineColor_literals_[4];
          static const value _xsd_enumUrineColor_indexes_[4];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumMicroscopicObservationType
         * schema type.
         */
        class BIOGEARS_CDM_API enumMicroscopicObservationType: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            LowPowerField,
            HighPowerField
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumMicroscopicObservationType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumMicroscopicObservationType (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumMicroscopicObservationType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumMicroscopicObservationType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumMicroscopicObservationType (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumMicroscopicObservationType (const enumMicroscopicObservationType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumMicroscopicObservationType*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumMicroscopicObservationType&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumMicroscopicObservationType_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumMicroscopicObservationType_convert () const;

          public:
          static const char* const _xsd_enumMicroscopicObservationType_literals_[2];
          static const value _xsd_enumMicroscopicObservationType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumMicroscopicObservationAmount
         * schema type.
         */
        class BIOGEARS_CDM_API enumMicroscopicObservationAmount: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Few,
            Moderate,
            Many
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumMicroscopicObservationAmount ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumMicroscopicObservationAmount (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumMicroscopicObservationAmount (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumMicroscopicObservationAmount (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumMicroscopicObservationAmount (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationAmount (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationAmount (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumMicroscopicObservationAmount (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumMicroscopicObservationAmount (const enumMicroscopicObservationAmount& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumMicroscopicObservationAmount*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumMicroscopicObservationAmount&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumMicroscopicObservationAmount_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumMicroscopicObservationAmount_convert () const;

          public:
          static const char* const _xsd_enumMicroscopicObservationAmount_literals_[3];
          static const value _xsd_enumMicroscopicObservationAmount_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %UrinalysisData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API UrinalysisData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name Color
           *
           * @brief Accessor and modifier functions for the %Color
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumUrineColor Color_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Color_optional&
          Color () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Color_optional&
          Color ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Color (const Color_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Color (const Color_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Color (::std::unique_ptr< Color_type > p);

          //@}

          /**
           * @name Appearance
           *
           * @brief Accessor and modifier functions for the %Appearance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumClarityIndicator Appearance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Appearance_type > Appearance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Appearance_optional&
          Appearance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Appearance_optional&
          Appearance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Appearance (const Appearance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Appearance (const Appearance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Appearance (::std::unique_ptr< Appearance_type > p);

          //@}

          /**
           * @name Glucose
           *
           * @brief Accessor and modifier functions for the %Glucose
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator Glucose_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Glucose_type > Glucose_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Glucose_type, char > Glucose_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Glucose_optional&
          Glucose () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Glucose_optional&
          Glucose ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Glucose (const Glucose_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Glucose (const Glucose_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Glucose (::std::unique_ptr< Glucose_type > p);

          //@}

          /**
           * @name Ketone
           *
           * @brief Accessor and modifier functions for the %Ketone
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator Ketone_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Ketone_type > Ketone_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ketone_type, char > Ketone_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Ketone_optional&
          Ketone () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Ketone_optional&
          Ketone ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Ketone (const Ketone_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Ketone (const Ketone_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Ketone (::std::unique_ptr< Ketone_type > p);

          //@}

          /**
           * @name Bilirubin
           *
           * @brief Accessor and modifier functions for the %Bilirubin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Bilirubin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Bilirubin_type > Bilirubin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Bilirubin_type, char > Bilirubin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Bilirubin_optional&
          Bilirubin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Bilirubin_optional&
          Bilirubin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Bilirubin (const Bilirubin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Bilirubin (const Bilirubin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Bilirubin (::std::unique_ptr< Bilirubin_type > p);

          //@}

          /**
           * @name SpecificGravity
           *
           * @brief Accessor and modifier functions for the %SpecificGravity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData SpecificGravity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SpecificGravity_type > SpecificGravity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SpecificGravity_type, char > SpecificGravity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SpecificGravity_optional&
          SpecificGravity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SpecificGravity_optional&
          SpecificGravity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SpecificGravity (const SpecificGravity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SpecificGravity (const SpecificGravity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SpecificGravity (::std::unique_ptr< SpecificGravity_type > p);

          //@}

          /**
           * @name Blood
           *
           * @brief Accessor and modifier functions for the %Blood
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator Blood_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Blood_type > Blood_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Blood_type, char > Blood_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Blood_optional&
          Blood () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Blood_optional&
          Blood ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Blood (const Blood_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Blood (const Blood_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Blood (::std::unique_ptr< Blood_type > p);

          //@}

          /**
           * @name pH
           *
           * @brief Accessor and modifier functions for the %pH
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData pH_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< pH_type > pH_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< pH_type, char > pH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const pH_optional&
          pH () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          pH_optional&
          pH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          pH (const pH_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          pH (const pH_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          pH (::std::unique_ptr< pH_type > p);

          //@}

          /**
           * @name Protein
           *
           * @brief Accessor and modifier functions for the %Protein
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator Protein_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Protein_type > Protein_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Protein_type, char > Protein_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Protein_optional&
          Protein () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Protein_optional&
          Protein ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Protein (const Protein_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Protein (const Protein_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Protein (::std::unique_ptr< Protein_type > p);

          //@}

          /**
           * @name Urobilinogen
           *
           * @brief Accessor and modifier functions for the %Urobilinogen
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Urobilinogen_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Urobilinogen_type > Urobilinogen_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Urobilinogen_type, char > Urobilinogen_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Urobilinogen_optional&
          Urobilinogen () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Urobilinogen_optional&
          Urobilinogen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Urobilinogen (const Urobilinogen_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Urobilinogen (const Urobilinogen_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Urobilinogen (::std::unique_ptr< Urobilinogen_type > p);

          //@}

          /**
           * @name Nitrite
           *
           * @brief Accessor and modifier functions for the %Nitrite
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator Nitrite_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Nitrite_type > Nitrite_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Nitrite_type, char > Nitrite_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Nitrite_optional&
          Nitrite () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Nitrite_optional&
          Nitrite ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Nitrite (const Nitrite_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Nitrite (const Nitrite_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Nitrite (::std::unique_ptr< Nitrite_type > p);

          //@}

          /**
           * @name LeukocyteEsterase
           *
           * @brief Accessor and modifier functions for the %LeukocyteEsterase
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumPresenceIndicator LeukocyteEsterase_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeukocyteEsterase_type > LeukocyteEsterase_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeukocyteEsterase_type, char > LeukocyteEsterase_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeukocyteEsterase_optional&
          LeukocyteEsterase () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeukocyteEsterase_optional&
          LeukocyteEsterase ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeukocyteEsterase (const LeukocyteEsterase_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeukocyteEsterase (const LeukocyteEsterase_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeukocyteEsterase (::std::unique_ptr< LeukocyteEsterase_type > p);

          //@}

          /**
           * @name Microscopic
           *
           * @brief Accessor and modifier functions for the %Microscopic
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::UrinalysisMicroscopicData Microscopic_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Microscopic_type > Microscopic_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Microscopic_type, char > Microscopic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Microscopic_optional&
          Microscopic () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Microscopic_optional&
          Microscopic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Microscopic (const Microscopic_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Microscopic (const Microscopic_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Microscopic (::std::unique_ptr< Microscopic_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          UrinalysisData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          UrinalysisData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UrinalysisData (const UrinalysisData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual UrinalysisData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UrinalysisData&
          operator= (const UrinalysisData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~UrinalysisData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          Color_optional Color_;
          Appearance_optional Appearance_;
          Glucose_optional Glucose_;
          Ketone_optional Ketone_;
          Bilirubin_optional Bilirubin_;
          SpecificGravity_optional SpecificGravity_;
          Blood_optional Blood_;
          pH_optional pH_;
          Protein_optional Protein_;
          Urobilinogen_optional Urobilinogen_;
          Nitrite_optional Nitrite_;
          LeukocyteEsterase_optional LeukocyteEsterase_;
          Microscopic_optional Microscopic_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %UrinalysisMicroscopicData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API UrinalysisMicroscopicData: public ::mil::tatrc::physiology::datamodel::PatientAssessmentData
        {
          public:
          /**
           * @name ObservationType
           *
           * @brief Accessor and modifier functions for the %ObservationType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationType ObservationType_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ObservationType_type, char > ObservationType_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ObservationType_type&
          ObservationType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ObservationType_type&
          ObservationType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ObservationType (const ObservationType_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ObservationType (::std::unique_ptr< ObservationType_type > p);

          //@}

          /**
           * @name RedBloodCells
           *
           * @brief Accessor and modifier functions for the %RedBloodCells
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountData RedBloodCells_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCells_type > RedBloodCells_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCells_type, char > RedBloodCells_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCells_optional&
          RedBloodCells () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCells_optional&
          RedBloodCells ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCells (const RedBloodCells_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCells (const RedBloodCells_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCells (::std::unique_ptr< RedBloodCells_type > p);

          //@}

          /**
           * @name WhiteBloodCells
           *
           * @brief Accessor and modifier functions for the %WhiteBloodCells
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountData WhiteBloodCells_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WhiteBloodCells_type > WhiteBloodCells_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WhiteBloodCells_type, char > WhiteBloodCells_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WhiteBloodCells_optional&
          WhiteBloodCells () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WhiteBloodCells_optional&
          WhiteBloodCells ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WhiteBloodCells (const WhiteBloodCells_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WhiteBloodCells (const WhiteBloodCells_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WhiteBloodCells (::std::unique_ptr< WhiteBloodCells_type > p);

          //@}

          /**
           * @name EpithelialCells
           *
           * @brief Accessor and modifier functions for the %EpithelialCells
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount EpithelialCells_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EpithelialCells_type > EpithelialCells_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EpithelialCells_type, char > EpithelialCells_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EpithelialCells_optional&
          EpithelialCells () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EpithelialCells_optional&
          EpithelialCells ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EpithelialCells (const EpithelialCells_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EpithelialCells (const EpithelialCells_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EpithelialCells (::std::unique_ptr< EpithelialCells_type > p);

          //@}

          /**
           * @name Casts
           *
           * @brief Accessor and modifier functions for the %Casts
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountData Casts_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Casts_type > Casts_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Casts_type, char > Casts_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Casts_optional&
          Casts () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Casts_optional&
          Casts ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Casts (const Casts_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Casts (const Casts_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Casts (::std::unique_ptr< Casts_type > p);

          //@}

          /**
           * @name Crystals
           *
           * @brief Accessor and modifier functions for the %Crystals
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount Crystals_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Crystals_type > Crystals_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Crystals_type, char > Crystals_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Crystals_optional&
          Crystals () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Crystals_optional&
          Crystals ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Crystals (const Crystals_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Crystals (const Crystals_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Crystals (::std::unique_ptr< Crystals_type > p);

          //@}

          /**
           * @name Bacteria
           *
           * @brief Accessor and modifier functions for the %Bacteria
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount Bacteria_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Bacteria_type > Bacteria_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Bacteria_type, char > Bacteria_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Bacteria_optional&
          Bacteria () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Bacteria_optional&
          Bacteria ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Bacteria (const Bacteria_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Bacteria (const Bacteria_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Bacteria (::std::unique_ptr< Bacteria_type > p);

          //@}

          /**
           * @name Trichomonads
           *
           * @brief Accessor and modifier functions for the %Trichomonads
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount Trichomonads_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Trichomonads_type > Trichomonads_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Trichomonads_type, char > Trichomonads_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Trichomonads_optional&
          Trichomonads () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Trichomonads_optional&
          Trichomonads ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Trichomonads (const Trichomonads_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Trichomonads (const Trichomonads_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Trichomonads (::std::unique_ptr< Trichomonads_type > p);

          //@}

          /**
           * @name Yeast
           *
           * @brief Accessor and modifier functions for the %Yeast
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount Yeast_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Yeast_type > Yeast_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Yeast_type, char > Yeast_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Yeast_optional&
          Yeast () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Yeast_optional&
          Yeast ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Yeast (const Yeast_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Yeast (const Yeast_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Yeast (::std::unique_ptr< Yeast_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          UrinalysisMicroscopicData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          UrinalysisMicroscopicData (const ObservationType_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          UrinalysisMicroscopicData (::std::unique_ptr< ObservationType_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          UrinalysisMicroscopicData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UrinalysisMicroscopicData (const UrinalysisMicroscopicData& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual UrinalysisMicroscopicData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          UrinalysisMicroscopicData&
          operator= (const UrinalysisMicroscopicData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~UrinalysisMicroscopicData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ObservationType_type > ObservationType_;
          RedBloodCells_optional RedBloodCells_;
          WhiteBloodCells_optional WhiteBloodCells_;
          EpithelialCells_optional EpithelialCells_;
          Casts_optional Casts_;
          Crystals_optional Crystals_;
          Bacteria_optional Bacteria_;
          Trichomonads_optional Trichomonads_;
          Yeast_optional Yeast_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PatientAssessmentData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PulmonaryFunctionTestData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SequentialOrganFailureAssessmentData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CompleteBloodCountData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PsychomotorVigilanceTaskData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const ComprehensiveMetabolicPanelData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumPresenceIndicator::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumPresenceIndicator&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumClarityIndicator::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumClarityIndicator&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumUrineColor::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumUrineColor&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumMicroscopicObservationType::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumMicroscopicObservationType&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumMicroscopicObservationAmount::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumMicroscopicObservationAmount&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const UrinalysisData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const UrinalysisMicroscopicData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        /**
         * @name Parsing functions for the %PulmonaryFunctionTest document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %SequentialOrganFailureAssessment document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %CompleteBloodCount document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %PsychomotorVigilanceTask document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %ComprehensiveMetabolicPanel document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %Urinalysis document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PatientAssessmentData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PulmonaryFunctionTestData&);

        /**
         * @name Serialization functions for the %PulmonaryFunctionTest document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::std::ostream& os,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& ft,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        PulmonaryFunctionTest (::xercesc::DOMDocument& d,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x,
                               ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PulmonaryFunctionTest (const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SequentialOrganFailureAssessmentData&);

        /**
         * @name Serialization functions for the %SequentialOrganFailureAssessment document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::std::ostream& os,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::std::ostream& os,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::std::ostream& os,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& ft,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& ft,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& ft,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        SequentialOrganFailureAssessment (::xercesc::DOMDocument& d,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x,
                                          ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        SequentialOrganFailureAssessment (const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CompleteBloodCountData&);

        /**
         * @name Serialization functions for the %CompleteBloodCount document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::std::ostream& os,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::std::ostream& os,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::std::ostream& os,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& ft,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& ft,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& ft,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        CompleteBloodCount (::xercesc::DOMDocument& d,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x,
                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        CompleteBloodCount (const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PsychomotorVigilanceTaskData&);

        /**
         * @name Serialization functions for the %PsychomotorVigilanceTask document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::std::ostream& os,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::std::ostream& os,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::std::ostream& os,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& ft,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& ft,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& ft,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        PsychomotorVigilanceTask (::xercesc::DOMDocument& d,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x,
                                  ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PsychomotorVigilanceTask (const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const ComprehensiveMetabolicPanelData&);

        /**
         * @name Serialization functions for the %ComprehensiveMetabolicPanel document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::std::ostream& os,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::std::ostream& os,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::std::ostream& os,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& ft,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& ft,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& ft,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        ComprehensiveMetabolicPanel (::xercesc::DOMDocument& d,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x,
                                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ComprehensiveMetabolicPanel (const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumPresenceIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumPresenceIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumPresenceIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumClarityIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumClarityIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumClarityIndicator&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumUrineColor&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumUrineColor&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumUrineColor&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumMicroscopicObservationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumMicroscopicObservationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumMicroscopicObservationType&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumMicroscopicObservationAmount&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumMicroscopicObservationAmount&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumMicroscopicObservationAmount&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const UrinalysisData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const UrinalysisMicroscopicData&);

        /**
         * @name Serialization functions for the %Urinalysis document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        Urinalysis (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& x,
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        Urinalysis (const ::mil::tatrc::physiology::datamodel::UrinalysisData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

        //@}
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PATIENT_ASSESSMENTS_HXX
