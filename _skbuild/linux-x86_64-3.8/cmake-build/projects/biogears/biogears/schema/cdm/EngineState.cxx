// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EngineState.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineStateData
        // 

        const PhysiologyEngineStateData::SimulationTime_optional& PhysiologyEngineStateData::
        SimulationTime () const
        {
          return this->SimulationTime_;
        }

        PhysiologyEngineStateData::SimulationTime_optional& PhysiologyEngineStateData::
        SimulationTime ()
        {
          return this->SimulationTime_;
        }

        void PhysiologyEngineStateData::
        SimulationTime (const SimulationTime_type& x)
        {
          this->SimulationTime_.set (x);
        }

        void PhysiologyEngineStateData::
        SimulationTime (const SimulationTime_optional& x)
        {
          this->SimulationTime_ = x;
        }

        void PhysiologyEngineStateData::
        SimulationTime (::std::unique_ptr< SimulationTime_type > x)
        {
          this->SimulationTime_.set (std::move (x));
        }

        const PhysiologyEngineStateData::Patient_optional& PhysiologyEngineStateData::
        Patient () const
        {
          return this->Patient_;
        }

        PhysiologyEngineStateData::Patient_optional& PhysiologyEngineStateData::
        Patient ()
        {
          return this->Patient_;
        }

        void PhysiologyEngineStateData::
        Patient (const Patient_type& x)
        {
          this->Patient_.set (x);
        }

        void PhysiologyEngineStateData::
        Patient (const Patient_optional& x)
        {
          this->Patient_ = x;
        }

        void PhysiologyEngineStateData::
        Patient (::std::unique_ptr< Patient_type > x)
        {
          this->Patient_.set (std::move (x));
        }

        const PhysiologyEngineStateData::Condition_sequence& PhysiologyEngineStateData::
        Condition () const
        {
          return this->Condition_;
        }

        PhysiologyEngineStateData::Condition_sequence& PhysiologyEngineStateData::
        Condition ()
        {
          return this->Condition_;
        }

        void PhysiologyEngineStateData::
        Condition (const Condition_sequence& s)
        {
          this->Condition_ = s;
        }

        const PhysiologyEngineStateData::ActiveAction_sequence& PhysiologyEngineStateData::
        ActiveAction () const
        {
          return this->ActiveAction_;
        }

        PhysiologyEngineStateData::ActiveAction_sequence& PhysiologyEngineStateData::
        ActiveAction ()
        {
          return this->ActiveAction_;
        }

        void PhysiologyEngineStateData::
        ActiveAction (const ActiveAction_sequence& s)
        {
          this->ActiveAction_ = s;
        }

        const PhysiologyEngineStateData::ActiveSubstance_sequence& PhysiologyEngineStateData::
        ActiveSubstance () const
        {
          return this->ActiveSubstance_;
        }

        PhysiologyEngineStateData::ActiveSubstance_sequence& PhysiologyEngineStateData::
        ActiveSubstance ()
        {
          return this->ActiveSubstance_;
        }

        void PhysiologyEngineStateData::
        ActiveSubstance (const ActiveSubstance_sequence& s)
        {
          this->ActiveSubstance_ = s;
        }

        const PhysiologyEngineStateData::ActiveSubstanceCompound_sequence& PhysiologyEngineStateData::
        ActiveSubstanceCompound () const
        {
          return this->ActiveSubstanceCompound_;
        }

        PhysiologyEngineStateData::ActiveSubstanceCompound_sequence& PhysiologyEngineStateData::
        ActiveSubstanceCompound ()
        {
          return this->ActiveSubstanceCompound_;
        }

        void PhysiologyEngineStateData::
        ActiveSubstanceCompound (const ActiveSubstanceCompound_sequence& s)
        {
          this->ActiveSubstanceCompound_ = s;
        }

        const PhysiologyEngineStateData::System_sequence& PhysiologyEngineStateData::
        System () const
        {
          return this->System_;
        }

        PhysiologyEngineStateData::System_sequence& PhysiologyEngineStateData::
        System ()
        {
          return this->System_;
        }

        void PhysiologyEngineStateData::
        System (const System_sequence& s)
        {
          this->System_ = s;
        }

        const PhysiologyEngineStateData::CompartmentManager_optional& PhysiologyEngineStateData::
        CompartmentManager () const
        {
          return this->CompartmentManager_;
        }

        PhysiologyEngineStateData::CompartmentManager_optional& PhysiologyEngineStateData::
        CompartmentManager ()
        {
          return this->CompartmentManager_;
        }

        void PhysiologyEngineStateData::
        CompartmentManager (const CompartmentManager_type& x)
        {
          this->CompartmentManager_.set (x);
        }

        void PhysiologyEngineStateData::
        CompartmentManager (const CompartmentManager_optional& x)
        {
          this->CompartmentManager_ = x;
        }

        void PhysiologyEngineStateData::
        CompartmentManager (::std::unique_ptr< CompartmentManager_type > x)
        {
          this->CompartmentManager_.set (std::move (x));
        }

        const PhysiologyEngineStateData::Configuration_optional& PhysiologyEngineStateData::
        Configuration () const
        {
          return this->Configuration_;
        }

        PhysiologyEngineStateData::Configuration_optional& PhysiologyEngineStateData::
        Configuration ()
        {
          return this->Configuration_;
        }

        void PhysiologyEngineStateData::
        Configuration (const Configuration_type& x)
        {
          this->Configuration_.set (x);
        }

        void PhysiologyEngineStateData::
        Configuration (const Configuration_optional& x)
        {
          this->Configuration_ = x;
        }

        void PhysiologyEngineStateData::
        Configuration (::std::unique_ptr< Configuration_type > x)
        {
          this->Configuration_.set (std::move (x));
        }

        const PhysiologyEngineStateData::CircuitManager_optional& PhysiologyEngineStateData::
        CircuitManager () const
        {
          return this->CircuitManager_;
        }

        PhysiologyEngineStateData::CircuitManager_optional& PhysiologyEngineStateData::
        CircuitManager ()
        {
          return this->CircuitManager_;
        }

        void PhysiologyEngineStateData::
        CircuitManager (const CircuitManager_type& x)
        {
          this->CircuitManager_.set (x);
        }

        void PhysiologyEngineStateData::
        CircuitManager (const CircuitManager_optional& x)
        {
          this->CircuitManager_ = x;
        }

        void PhysiologyEngineStateData::
        CircuitManager (::std::unique_ptr< CircuitManager_type > x)
        {
          this->CircuitManager_.set (std::move (x));
        }

        const PhysiologyEngineStateData::DataRequests_optional& PhysiologyEngineStateData::
        DataRequests () const
        {
          return this->DataRequests_;
        }

        PhysiologyEngineStateData::DataRequests_optional& PhysiologyEngineStateData::
        DataRequests ()
        {
          return this->DataRequests_;
        }

        void PhysiologyEngineStateData::
        DataRequests (const DataRequests_type& x)
        {
          this->DataRequests_.set (x);
        }

        void PhysiologyEngineStateData::
        DataRequests (const DataRequests_optional& x)
        {
          this->DataRequests_ = x;
        }

        void PhysiologyEngineStateData::
        DataRequests (::std::unique_ptr< DataRequests_type > x)
        {
          this->DataRequests_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineStateData
        //

        PhysiologyEngineStateData::
        PhysiologyEngineStateData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          SimulationTime_ (this),
          Patient_ (this),
          Condition_ (this),
          ActiveAction_ (this),
          ActiveSubstance_ (this),
          ActiveSubstanceCompound_ (this),
          System_ (this),
          CompartmentManager_ (this),
          Configuration_ (this),
          CircuitManager_ (this),
          DataRequests_ (this)
        {
        }

        PhysiologyEngineStateData::
        PhysiologyEngineStateData (const PhysiologyEngineStateData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          SimulationTime_ (x.SimulationTime_, f, this),
          Patient_ (x.Patient_, f, this),
          Condition_ (x.Condition_, f, this),
          ActiveAction_ (x.ActiveAction_, f, this),
          ActiveSubstance_ (x.ActiveSubstance_, f, this),
          ActiveSubstanceCompound_ (x.ActiveSubstanceCompound_, f, this),
          System_ (x.System_, f, this),
          CompartmentManager_ (x.CompartmentManager_, f, this),
          Configuration_ (x.Configuration_, f, this),
          CircuitManager_ (x.CircuitManager_, f, this),
          DataRequests_ (x.DataRequests_, f, this)
        {
        }

        PhysiologyEngineStateData::
        PhysiologyEngineStateData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          SimulationTime_ (this),
          Patient_ (this),
          Condition_ (this),
          ActiveAction_ (this),
          ActiveSubstance_ (this),
          ActiveSubstanceCompound_ (this),
          System_ (this),
          CompartmentManager_ (this),
          Configuration_ (this),
          CircuitManager_ (this),
          DataRequests_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PhysiologyEngineStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SimulationTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SimulationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SimulationTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SimulationTime_)
                {
                  ::std::unique_ptr< SimulationTime_type > r (
                    dynamic_cast< SimulationTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SimulationTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Patient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Patient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Patient_)
                {
                  ::std::unique_ptr< Patient_type > r (
                    dynamic_cast< Patient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Patient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Condition
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Condition_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Condition_type > r (
                  dynamic_cast< Condition_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Condition_.push_back (::std::move (r));
                continue;
              }
            }

            // ActiveAction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveAction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveAction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ActiveAction_type > r (
                  dynamic_cast< ActiveAction_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ActiveAction_.push_back (::std::move (r));
                continue;
              }
            }

            // ActiveSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ActiveSubstance_type > r (
                  dynamic_cast< ActiveSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ActiveSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            // ActiveSubstanceCompound
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveSubstanceCompound",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveSubstanceCompound_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ActiveSubstanceCompound_type > r (
                  dynamic_cast< ActiveSubstanceCompound_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ActiveSubstanceCompound_.push_back (::std::move (r));
                continue;
              }
            }

            // System
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "System",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< System_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< System_type > r (
                  dynamic_cast< System_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->System_.push_back (::std::move (r));
                continue;
              }
            }

            // CompartmentManager
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CompartmentManager",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CompartmentManager_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CompartmentManager_)
                {
                  ::std::unique_ptr< CompartmentManager_type > r (
                    dynamic_cast< CompartmentManager_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CompartmentManager_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Configuration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Configuration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Configuration_)
                {
                  ::std::unique_ptr< Configuration_type > r (
                    dynamic_cast< Configuration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Configuration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CircuitManager
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CircuitManager",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CircuitManager_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CircuitManager_)
                {
                  ::std::unique_ptr< CircuitManager_type > r (
                    dynamic_cast< CircuitManager_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CircuitManager_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DataRequests
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DataRequests",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DataRequests_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DataRequests_)
                {
                  ::std::unique_ptr< DataRequests_type > r (
                    dynamic_cast< DataRequests_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DataRequests_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        PhysiologyEngineStateData* PhysiologyEngineStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PhysiologyEngineStateData (*this, f, c);
        }

        PhysiologyEngineStateData& PhysiologyEngineStateData::
        operator= (const PhysiologyEngineStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->SimulationTime_ = x.SimulationTime_;
            this->Patient_ = x.Patient_;
            this->Condition_ = x.Condition_;
            this->ActiveAction_ = x.ActiveAction_;
            this->ActiveSubstance_ = x.ActiveSubstance_;
            this->ActiveSubstanceCompound_ = x.ActiveSubstanceCompound_;
            this->System_ = x.System_;
            this->CompartmentManager_ = x.CompartmentManager_;
            this->Configuration_ = x.Configuration_;
            this->CircuitManager_ = x.CircuitManager_;
            this->DataRequests_ = x.DataRequests_;
          }

          return *this;
        }

        PhysiologyEngineStateData::
        ~PhysiologyEngineStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PhysiologyEngineStateData >
        _xsd_PhysiologyEngineStateData_type_factory_init (
          "PhysiologyEngineStateData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PhysiologyEngineStateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SimulationTime ())
            {
              o << ::std::endl << "SimulationTime: ";
              om.insert (o, *i.SimulationTime ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Patient ())
            {
              o << ::std::endl << "Patient: ";
              om.insert (o, *i.Patient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::Condition_const_iterator
                 b (i.Condition ().begin ()), e (i.Condition ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Condition: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveAction_const_iterator
                 b (i.ActiveAction ().begin ()), e (i.ActiveAction ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ActiveAction: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveSubstance_const_iterator
                 b (i.ActiveSubstance ().begin ()), e (i.ActiveSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ActiveSubstance: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveSubstanceCompound_const_iterator
                 b (i.ActiveSubstanceCompound ().begin ()), e (i.ActiveSubstanceCompound ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ActiveSubstanceCompound: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::System_const_iterator
                 b (i.System ().begin ()), e (i.System ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "System: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CompartmentManager ())
            {
              o << ::std::endl << "CompartmentManager: ";
              om.insert (o, *i.CompartmentManager ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              o << ::std::endl << "Configuration: ";
              om.insert (o, *i.Configuration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CircuitManager ())
            {
              o << ::std::endl << "CircuitManager: ";
              om.insert (o, *i.CircuitManager ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DataRequests ())
            {
              o << ::std::endl << "DataRequests: ";
              om.insert (o, *i.DataRequests ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PhysiologyEngineStateData >
        _xsd_PhysiologyEngineStateData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PhysiologyEngineStateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // SimulationTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SimulationTime ())
            {
              const PhysiologyEngineStateData::SimulationTime_type& x (*i.SimulationTime ());
              if (typeid (PhysiologyEngineStateData::SimulationTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SimulationTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SimulationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Patient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Patient ())
            {
              const PhysiologyEngineStateData::Patient_type& x (*i.Patient ());
              if (typeid (PhysiologyEngineStateData::Patient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Patient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Condition
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::Condition_const_iterator
                 b (i.Condition ().begin ()), n (i.Condition ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineStateData::Condition_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Condition",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ActiveAction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveAction_const_iterator
                 b (i.ActiveAction ().begin ()), n (i.ActiveAction ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineStateData::ActiveAction_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveAction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ActiveAction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ActiveSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveSubstance_const_iterator
                 b (i.ActiveSubstance ().begin ()), n (i.ActiveSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineStateData::ActiveSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ActiveSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ActiveSubstanceCompound
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::ActiveSubstanceCompound_const_iterator
                 b (i.ActiveSubstanceCompound ().begin ()), n (i.ActiveSubstanceCompound ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineStateData::ActiveSubstanceCompound_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveSubstanceCompound",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ActiveSubstanceCompound",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // System
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineStateData::System_const_iterator
                 b (i.System ().begin ()), n (i.System ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineStateData::System_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "System",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "System",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // CompartmentManager
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CompartmentManager ())
            {
              const PhysiologyEngineStateData::CompartmentManager_type& x (*i.CompartmentManager ());
              if (typeid (PhysiologyEngineStateData::CompartmentManager_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CompartmentManager",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CompartmentManager",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Configuration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              const PhysiologyEngineStateData::Configuration_type& x (*i.Configuration ());
              if (typeid (PhysiologyEngineStateData::Configuration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Configuration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CircuitManager
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CircuitManager ())
            {
              const PhysiologyEngineStateData::CircuitManager_type& x (*i.CircuitManager ());
              if (typeid (PhysiologyEngineStateData::CircuitManager_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CircuitManager",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CircuitManager",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DataRequests
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DataRequests ())
            {
              const PhysiologyEngineStateData::DataRequests_type& x (*i.DataRequests ());
              if (typeid (PhysiologyEngineStateData::DataRequests_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DataRequests",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DataRequests",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PhysiologyEngineStateData >
        _xsd_PhysiologyEngineStateData_type_serializer_init (
          "PhysiologyEngineStateData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

