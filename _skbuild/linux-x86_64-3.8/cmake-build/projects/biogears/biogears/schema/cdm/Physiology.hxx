// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from Physiology.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PHYSIOLOGY_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PHYSIOLOGY_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class PupillaryResponseData;
        class enumInflammationSource;
        class InflammatoryResponseData;
        class BloodChemistrySystemData;
        class enumHeartRhythm;
        class CardiovascularSystemData;
        class DrugSystemData;
        class EndocrineSystemData;
        class EnergySystemData;
        class DrugTransitStateData;
        class GastrointestinalSystemData;
        class HepaticSystemData;
        class enumSleepState;
        class NervousSystemData;
        class RenalSystemData;
        class RespiratorySystemData;
        class TissueSystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "System.hxx"

#include "PatientNutrition.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %PupillaryResponseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PupillaryResponseData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name ReactivityModifier
           *
           * @brief Accessor and modifier functions for the %ReactivityModifier
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarNeg1To1Data ReactivityModifier_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ReactivityModifier_type > ReactivityModifier_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReactivityModifier_type, char > ReactivityModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ReactivityModifier_optional&
          ReactivityModifier () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ReactivityModifier_optional&
          ReactivityModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ReactivityModifier (const ReactivityModifier_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ReactivityModifier (const ReactivityModifier_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ReactivityModifier (::std::unique_ptr< ReactivityModifier_type > p);

          //@}

          /**
           * @name ShapeModifier
           *
           * @brief Accessor and modifier functions for the %ShapeModifier
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarNeg1To1Data ShapeModifier_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ShapeModifier_type > ShapeModifier_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ShapeModifier_type, char > ShapeModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ShapeModifier_optional&
          ShapeModifier () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ShapeModifier_optional&
          ShapeModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ShapeModifier (const ShapeModifier_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ShapeModifier (const ShapeModifier_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ShapeModifier (::std::unique_ptr< ShapeModifier_type > p);

          //@}

          /**
           * @name SizeModifier
           *
           * @brief Accessor and modifier functions for the %SizeModifier
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarNeg1To1Data SizeModifier_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SizeModifier_type > SizeModifier_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SizeModifier_type, char > SizeModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SizeModifier_optional&
          SizeModifier () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SizeModifier_optional&
          SizeModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SizeModifier (const SizeModifier_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SizeModifier (const SizeModifier_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SizeModifier (::std::unique_ptr< SizeModifier_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PupillaryResponseData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PupillaryResponseData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PupillaryResponseData (const PupillaryResponseData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PupillaryResponseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PupillaryResponseData&
          operator= (const PupillaryResponseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PupillaryResponseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ReactivityModifier_optional ReactivityModifier_;
          ShapeModifier_optional ShapeModifier_;
          SizeModifier_optional SizeModifier_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumInflammationSource
         * schema type.
         */
        class BIOGEARS_CDM_API enumInflammationSource: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Burn,
            Hemorrhage,
            Infection
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumInflammationSource ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumInflammationSource (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumInflammationSource (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumInflammationSource (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumInflammationSource (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInflammationSource (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInflammationSource (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumInflammationSource (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumInflammationSource (const enumInflammationSource& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumInflammationSource*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumInflammationSource&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumInflammationSource_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumInflammationSource_convert () const;

          public:
          static const char* const _xsd_enumInflammationSource_literals_[3];
          static const value _xsd_enumInflammationSource_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %InflammatoryResponseData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API InflammatoryResponseData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name LocalPathogen
           *
           * @brief Accessor and modifier functions for the %LocalPathogen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LocalPathogen_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LocalPathogen_type, char > LocalPathogen_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LocalPathogen_type&
          LocalPathogen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LocalPathogen_type&
          LocalPathogen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LocalPathogen (const LocalPathogen_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LocalPathogen (::std::unique_ptr< LocalPathogen_type > p);

          //@}

          /**
           * @name LocalMacrophage
           *
           * @brief Accessor and modifier functions for the %LocalMacrophage
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LocalMacrophage_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LocalMacrophage_type, char > LocalMacrophage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LocalMacrophage_type&
          LocalMacrophage () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LocalMacrophage_type&
          LocalMacrophage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LocalMacrophage (const LocalMacrophage_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LocalMacrophage (::std::unique_ptr< LocalMacrophage_type > p);

          //@}

          /**
           * @name LocalNeutrophil
           *
           * @brief Accessor and modifier functions for the %LocalNeutrophil
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LocalNeutrophil_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LocalNeutrophil_type, char > LocalNeutrophil_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LocalNeutrophil_type&
          LocalNeutrophil () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LocalNeutrophil_type&
          LocalNeutrophil ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LocalNeutrophil (const LocalNeutrophil_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LocalNeutrophil (::std::unique_ptr< LocalNeutrophil_type > p);

          //@}

          /**
           * @name LocalBarrier
           *
           * @brief Accessor and modifier functions for the %LocalBarrier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData LocalBarrier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LocalBarrier_type, char > LocalBarrier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LocalBarrier_type&
          LocalBarrier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LocalBarrier_type&
          LocalBarrier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LocalBarrier (const LocalBarrier_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          LocalBarrier (::std::unique_ptr< LocalBarrier_type > p);

          //@}

          /**
           * @name ActiveTLR
           *
           * @brief Accessor and modifier functions for the %ActiveTLR
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff ActiveTLR_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ActiveTLR_type, char > ActiveTLR_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ActiveTLR_type&
          ActiveTLR () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ActiveTLR_type&
          ActiveTLR ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ActiveTLR (const ActiveTLR_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ActiveTLR (::std::unique_ptr< ActiveTLR_type > p);

          //@}

          /**
           * @name AutonomicResponseLevel
           *
           * @brief Accessor and modifier functions for the %AutonomicResponseLevel
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData AutonomicResponseLevel_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AutonomicResponseLevel_type, char > AutonomicResponseLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AutonomicResponseLevel_type&
          AutonomicResponseLevel () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AutonomicResponseLevel_type&
          AutonomicResponseLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AutonomicResponseLevel (const AutonomicResponseLevel_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          AutonomicResponseLevel (::std::unique_ptr< AutonomicResponseLevel_type > p);

          //@}

          /**
           * @name BloodPathogen
           *
           * @brief Accessor and modifier functions for the %BloodPathogen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData BloodPathogen_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodPathogen_type, char > BloodPathogen_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BloodPathogen_type&
          BloodPathogen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BloodPathogen_type&
          BloodPathogen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodPathogen (const BloodPathogen_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BloodPathogen (::std::unique_ptr< BloodPathogen_type > p);

          //@}

          /**
           * @name Trauma
           *
           * @brief Accessor and modifier functions for the %Trauma
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Trauma_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Trauma_type, char > Trauma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Trauma_type&
          Trauma () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Trauma_type&
          Trauma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Trauma (const Trauma_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Trauma (::std::unique_ptr< Trauma_type > p);

          //@}

          /**
           * @name MacrophageResting
           *
           * @brief Accessor and modifier functions for the %MacrophageResting
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData MacrophageResting_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MacrophageResting_type, char > MacrophageResting_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MacrophageResting_type&
          MacrophageResting () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MacrophageResting_type&
          MacrophageResting ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MacrophageResting (const MacrophageResting_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MacrophageResting (::std::unique_ptr< MacrophageResting_type > p);

          //@}

          /**
           * @name MacrophageActive
           *
           * @brief Accessor and modifier functions for the %MacrophageActive
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData MacrophageActive_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MacrophageActive_type, char > MacrophageActive_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MacrophageActive_type&
          MacrophageActive () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MacrophageActive_type&
          MacrophageActive ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MacrophageActive (const MacrophageActive_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MacrophageActive (::std::unique_ptr< MacrophageActive_type > p);

          //@}

          /**
           * @name NeutrophilResting
           *
           * @brief Accessor and modifier functions for the %NeutrophilResting
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NeutrophilResting_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeutrophilResting_type, char > NeutrophilResting_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NeutrophilResting_type&
          NeutrophilResting () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NeutrophilResting_type&
          NeutrophilResting ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeutrophilResting (const NeutrophilResting_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NeutrophilResting (::std::unique_ptr< NeutrophilResting_type > p);

          //@}

          /**
           * @name NeutrophilActive
           *
           * @brief Accessor and modifier functions for the %NeutrophilActive
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NeutrophilActive_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeutrophilActive_type, char > NeutrophilActive_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NeutrophilActive_type&
          NeutrophilActive () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NeutrophilActive_type&
          NeutrophilActive ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeutrophilActive (const NeutrophilActive_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NeutrophilActive (::std::unique_ptr< NeutrophilActive_type > p);

          //@}

          /**
           * @name TumorNecrosisFactor
           *
           * @brief Accessor and modifier functions for the %TumorNecrosisFactor
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TumorNecrosisFactor_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TumorNecrosisFactor_type, char > TumorNecrosisFactor_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TumorNecrosisFactor_type&
          TumorNecrosisFactor () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TumorNecrosisFactor_type&
          TumorNecrosisFactor ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TumorNecrosisFactor (const TumorNecrosisFactor_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TumorNecrosisFactor (::std::unique_ptr< TumorNecrosisFactor_type > p);

          //@}

          /**
           * @name Interleukin6
           *
           * @brief Accessor and modifier functions for the %Interleukin6
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Interleukin6_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Interleukin6_type, char > Interleukin6_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Interleukin6_type&
          Interleukin6 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Interleukin6_type&
          Interleukin6 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Interleukin6 (const Interleukin6_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Interleukin6 (::std::unique_ptr< Interleukin6_type > p);

          //@}

          /**
           * @name Interleukin10
           *
           * @brief Accessor and modifier functions for the %Interleukin10
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Interleukin10_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Interleukin10_type, char > Interleukin10_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Interleukin10_type&
          Interleukin10 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Interleukin10_type&
          Interleukin10 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Interleukin10 (const Interleukin10_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Interleukin10 (::std::unique_ptr< Interleukin10_type > p);

          //@}

          /**
           * @name Interleukin12
           *
           * @brief Accessor and modifier functions for the %Interleukin12
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Interleukin12_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Interleukin12_type, char > Interleukin12_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Interleukin12_type&
          Interleukin12 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Interleukin12_type&
          Interleukin12 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Interleukin12 (const Interleukin12_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Interleukin12 (::std::unique_ptr< Interleukin12_type > p);

          //@}

          /**
           * @name InducibleNOSPre
           *
           * @brief Accessor and modifier functions for the %InducibleNOSPre
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData InducibleNOSPre_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InducibleNOSPre_type, char > InducibleNOSPre_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InducibleNOSPre_type&
          InducibleNOSPre () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InducibleNOSPre_type&
          InducibleNOSPre ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InducibleNOSPre (const InducibleNOSPre_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          InducibleNOSPre (::std::unique_ptr< InducibleNOSPre_type > p);

          //@}

          /**
           * @name InducibleNOS
           *
           * @brief Accessor and modifier functions for the %InducibleNOS
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData InducibleNOS_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InducibleNOS_type, char > InducibleNOS_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InducibleNOS_type&
          InducibleNOS () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InducibleNOS_type&
          InducibleNOS ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InducibleNOS (const InducibleNOS_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          InducibleNOS (::std::unique_ptr< InducibleNOS_type > p);

          //@}

          /**
           * @name ConstitutiveNOS
           *
           * @brief Accessor and modifier functions for the %ConstitutiveNOS
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ConstitutiveNOS_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConstitutiveNOS_type, char > ConstitutiveNOS_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConstitutiveNOS_type&
          ConstitutiveNOS () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConstitutiveNOS_type&
          ConstitutiveNOS ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConstitutiveNOS (const ConstitutiveNOS_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ConstitutiveNOS (::std::unique_ptr< ConstitutiveNOS_type > p);

          //@}

          /**
           * @name Nitrate
           *
           * @brief Accessor and modifier functions for the %Nitrate
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Nitrate_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Nitrate_type, char > Nitrate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Nitrate_type&
          Nitrate () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Nitrate_type&
          Nitrate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Nitrate (const Nitrate_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Nitrate (::std::unique_ptr< Nitrate_type > p);

          //@}

          /**
           * @name NitricOxide
           *
           * @brief Accessor and modifier functions for the %NitricOxide
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData NitricOxide_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NitricOxide_type, char > NitricOxide_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NitricOxide_type&
          NitricOxide () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NitricOxide_type&
          NitricOxide ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NitricOxide (const NitricOxide_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          NitricOxide (::std::unique_ptr< NitricOxide_type > p);

          //@}

          /**
           * @name TissueIntegrity
           *
           * @brief Accessor and modifier functions for the %TissueIntegrity
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data TissueIntegrity_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueIntegrity_type, char > TissueIntegrity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TissueIntegrity_type&
          TissueIntegrity () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TissueIntegrity_type&
          TissueIntegrity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueIntegrity (const TissueIntegrity_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          TissueIntegrity (::std::unique_ptr< TissueIntegrity_type > p);

          //@}

          /**
           * @name Catecholamines
           *
           * @brief Accessor and modifier functions for the %Catecholamines
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData Catecholamines_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Catecholamines_type, char > Catecholamines_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Catecholamines_type&
          Catecholamines () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Catecholamines_type&
          Catecholamines ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Catecholamines (const Catecholamines_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Catecholamines (::std::unique_ptr< Catecholamines_type > p);

          //@}

          /**
           * @name InflammationTime
           *
           * @brief Accessor and modifier functions for the %InflammationTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData InflammationTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InflammationTime_type, char > InflammationTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InflammationTime_type&
          InflammationTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InflammationTime_type&
          InflammationTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InflammationTime (const InflammationTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          InflammationTime (::std::unique_ptr< InflammationTime_type > p);

          //@}

          /**
           * @name Source
           *
           * @brief Accessor and modifier functions for the %Source
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumInflammationSource Source_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Source_type > Source_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef Source_sequence::iterator Source_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Source_sequence::const_iterator Source_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Source_type, char > Source_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Source_sequence&
          Source () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Source_sequence&
          Source ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          Source (const Source_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          InflammatoryResponseData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          InflammatoryResponseData (const LocalPathogen_type&,
                                    const LocalMacrophage_type&,
                                    const LocalNeutrophil_type&,
                                    const LocalBarrier_type&,
                                    const ActiveTLR_type&,
                                    const AutonomicResponseLevel_type&,
                                    const BloodPathogen_type&,
                                    const Trauma_type&,
                                    const MacrophageResting_type&,
                                    const MacrophageActive_type&,
                                    const NeutrophilResting_type&,
                                    const NeutrophilActive_type&,
                                    const TumorNecrosisFactor_type&,
                                    const Interleukin6_type&,
                                    const Interleukin10_type&,
                                    const Interleukin12_type&,
                                    const InducibleNOSPre_type&,
                                    const InducibleNOS_type&,
                                    const ConstitutiveNOS_type&,
                                    const Nitrate_type&,
                                    const NitricOxide_type&,
                                    const TissueIntegrity_type&,
                                    const Catecholamines_type&,
                                    const InflammationTime_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          InflammatoryResponseData (::std::unique_ptr< LocalPathogen_type >,
                                    ::std::unique_ptr< LocalMacrophage_type >,
                                    ::std::unique_ptr< LocalNeutrophil_type >,
                                    ::std::unique_ptr< LocalBarrier_type >,
                                    const ActiveTLR_type&,
                                    ::std::unique_ptr< AutonomicResponseLevel_type >,
                                    ::std::unique_ptr< BloodPathogen_type >,
                                    ::std::unique_ptr< Trauma_type >,
                                    ::std::unique_ptr< MacrophageResting_type >,
                                    ::std::unique_ptr< MacrophageActive_type >,
                                    ::std::unique_ptr< NeutrophilResting_type >,
                                    ::std::unique_ptr< NeutrophilActive_type >,
                                    ::std::unique_ptr< TumorNecrosisFactor_type >,
                                    ::std::unique_ptr< Interleukin6_type >,
                                    ::std::unique_ptr< Interleukin10_type >,
                                    ::std::unique_ptr< Interleukin12_type >,
                                    ::std::unique_ptr< InducibleNOSPre_type >,
                                    ::std::unique_ptr< InducibleNOS_type >,
                                    ::std::unique_ptr< ConstitutiveNOS_type >,
                                    ::std::unique_ptr< Nitrate_type >,
                                    ::std::unique_ptr< NitricOxide_type >,
                                    ::std::unique_ptr< TissueIntegrity_type >,
                                    ::std::unique_ptr< Catecholamines_type >,
                                    ::std::unique_ptr< InflammationTime_type >);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          InflammatoryResponseData (::std::unique_ptr< LocalPathogen_type >,
                                    ::std::unique_ptr< LocalMacrophage_type >,
                                    ::std::unique_ptr< LocalNeutrophil_type >,
                                    ::std::unique_ptr< LocalBarrier_type >,
                                    ::std::unique_ptr< ActiveTLR_type >,
                                    ::std::unique_ptr< AutonomicResponseLevel_type >,
                                    ::std::unique_ptr< BloodPathogen_type >,
                                    ::std::unique_ptr< Trauma_type >,
                                    ::std::unique_ptr< MacrophageResting_type >,
                                    ::std::unique_ptr< MacrophageActive_type >,
                                    ::std::unique_ptr< NeutrophilResting_type >,
                                    ::std::unique_ptr< NeutrophilActive_type >,
                                    ::std::unique_ptr< TumorNecrosisFactor_type >,
                                    ::std::unique_ptr< Interleukin6_type >,
                                    ::std::unique_ptr< Interleukin10_type >,
                                    ::std::unique_ptr< Interleukin12_type >,
                                    ::std::unique_ptr< InducibleNOSPre_type >,
                                    ::std::unique_ptr< InducibleNOS_type >,
                                    ::std::unique_ptr< ConstitutiveNOS_type >,
                                    ::std::unique_ptr< Nitrate_type >,
                                    ::std::unique_ptr< NitricOxide_type >,
                                    ::std::unique_ptr< TissueIntegrity_type >,
                                    ::std::unique_ptr< Catecholamines_type >,
                                    ::std::unique_ptr< InflammationTime_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          InflammatoryResponseData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          InflammatoryResponseData (const InflammatoryResponseData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual InflammatoryResponseData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          InflammatoryResponseData&
          operator= (const InflammatoryResponseData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~InflammatoryResponseData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< LocalPathogen_type > LocalPathogen_;
          ::xsd::cxx::tree::one< LocalMacrophage_type > LocalMacrophage_;
          ::xsd::cxx::tree::one< LocalNeutrophil_type > LocalNeutrophil_;
          ::xsd::cxx::tree::one< LocalBarrier_type > LocalBarrier_;
          ::xsd::cxx::tree::one< ActiveTLR_type > ActiveTLR_;
          ::xsd::cxx::tree::one< AutonomicResponseLevel_type > AutonomicResponseLevel_;
          ::xsd::cxx::tree::one< BloodPathogen_type > BloodPathogen_;
          ::xsd::cxx::tree::one< Trauma_type > Trauma_;
          ::xsd::cxx::tree::one< MacrophageResting_type > MacrophageResting_;
          ::xsd::cxx::tree::one< MacrophageActive_type > MacrophageActive_;
          ::xsd::cxx::tree::one< NeutrophilResting_type > NeutrophilResting_;
          ::xsd::cxx::tree::one< NeutrophilActive_type > NeutrophilActive_;
          ::xsd::cxx::tree::one< TumorNecrosisFactor_type > TumorNecrosisFactor_;
          ::xsd::cxx::tree::one< Interleukin6_type > Interleukin6_;
          ::xsd::cxx::tree::one< Interleukin10_type > Interleukin10_;
          ::xsd::cxx::tree::one< Interleukin12_type > Interleukin12_;
          ::xsd::cxx::tree::one< InducibleNOSPre_type > InducibleNOSPre_;
          ::xsd::cxx::tree::one< InducibleNOS_type > InducibleNOS_;
          ::xsd::cxx::tree::one< ConstitutiveNOS_type > ConstitutiveNOS_;
          ::xsd::cxx::tree::one< Nitrate_type > Nitrate_;
          ::xsd::cxx::tree::one< NitricOxide_type > NitricOxide_;
          ::xsd::cxx::tree::one< TissueIntegrity_type > TissueIntegrity_;
          ::xsd::cxx::tree::one< Catecholamines_type > Catecholamines_;
          ::xsd::cxx::tree::one< InflammationTime_type > InflammationTime_;
          Source_sequence Source_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BloodChemistrySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BloodChemistrySystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name BloodDensity
           *
           * @brief Accessor and modifier functions for the %BloodDensity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BloodDensity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodDensity_type > BloodDensity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodDensity_type, char > BloodDensity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodDensity_optional&
          BloodDensity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodDensity_optional&
          BloodDensity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodDensity (const BloodDensity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodDensity (const BloodDensity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodDensity (::std::unique_ptr< BloodDensity_type > p);

          //@}

          /**
           * @name ArterialBloodPH
           *
           * @brief Accessor and modifier functions for the %ArterialBloodPH
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ArterialBloodPH_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialBloodPH_type > ArterialBloodPH_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialBloodPH_type, char > ArterialBloodPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialBloodPH_optional&
          ArterialBloodPH () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialBloodPH_optional&
          ArterialBloodPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialBloodPH (const ArterialBloodPH_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialBloodPH (const ArterialBloodPH_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialBloodPH (::std::unique_ptr< ArterialBloodPH_type > p);

          //@}

          /**
           * @name ArterialBloodPHBaseline
           *
           * @brief Accessor and modifier functions for the %ArterialBloodPHBaseline
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ArterialBloodPHBaseline_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialBloodPHBaseline_type > ArterialBloodPHBaseline_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialBloodPHBaseline_type, char > ArterialBloodPHBaseline_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialBloodPHBaseline_optional&
          ArterialBloodPHBaseline () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialBloodPHBaseline_optional&
          ArterialBloodPHBaseline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialBloodPHBaseline (const ArterialBloodPHBaseline_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialBloodPHBaseline (const ArterialBloodPHBaseline_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialBloodPHBaseline (::std::unique_ptr< ArterialBloodPHBaseline_type > p);

          //@}

          /**
           * @name VenousBloodPH
           *
           * @brief Accessor and modifier functions for the %VenousBloodPH
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData VenousBloodPH_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousBloodPH_type > VenousBloodPH_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousBloodPH_type, char > VenousBloodPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousBloodPH_optional&
          VenousBloodPH () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousBloodPH_optional&
          VenousBloodPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousBloodPH (const VenousBloodPH_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousBloodPH (const VenousBloodPH_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousBloodPH (::std::unique_ptr< VenousBloodPH_type > p);

          //@}

          /**
           * @name BloodSpecificHeat
           *
           * @brief Accessor and modifier functions for the %BloodSpecificHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerMassData BloodSpecificHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodSpecificHeat_type > BloodSpecificHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodSpecificHeat_type, char > BloodSpecificHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodSpecificHeat_optional&
          BloodSpecificHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodSpecificHeat_optional&
          BloodSpecificHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodSpecificHeat (const BloodSpecificHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodSpecificHeat (const BloodSpecificHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodSpecificHeat (::std::unique_ptr< BloodSpecificHeat_type > p);

          //@}

          /**
           * @name BloodUreaNitrogenConcentration
           *
           * @brief Accessor and modifier functions for the %BloodUreaNitrogenConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BloodUreaNitrogenConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodUreaNitrogenConcentration_type > BloodUreaNitrogenConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodUreaNitrogenConcentration_type, char > BloodUreaNitrogenConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodUreaNitrogenConcentration_optional&
          BloodUreaNitrogenConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodUreaNitrogenConcentration_optional&
          BloodUreaNitrogenConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodUreaNitrogenConcentration (::std::unique_ptr< BloodUreaNitrogenConcentration_type > p);

          //@}

          /**
           * @name CarbonDioxideSaturation
           *
           * @brief Accessor and modifier functions for the %CarbonDioxideSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonDioxideSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonDioxideSaturation_type > CarbonDioxideSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonDioxideSaturation_type, char > CarbonDioxideSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonDioxideSaturation_optional&
          CarbonDioxideSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonDioxideSaturation_optional&
          CarbonDioxideSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonDioxideSaturation (const CarbonDioxideSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonDioxideSaturation (const CarbonDioxideSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonDioxideSaturation (::std::unique_ptr< CarbonDioxideSaturation_type > p);

          //@}

          /**
           * @name CarbonMonoxideSaturation
           *
           * @brief Accessor and modifier functions for the %CarbonMonoxideSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonMonoxideSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonMonoxideSaturation_type > CarbonMonoxideSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonMonoxideSaturation_type, char > CarbonMonoxideSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonMonoxideSaturation_optional&
          CarbonMonoxideSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonMonoxideSaturation_optional&
          CarbonMonoxideSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonMonoxideSaturation (const CarbonMonoxideSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonMonoxideSaturation (const CarbonMonoxideSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonMonoxideSaturation (::std::unique_ptr< CarbonMonoxideSaturation_type > p);

          //@}

          /**
           * @name Hematocrit
           *
           * @brief Accessor and modifier functions for the %Hematocrit
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData Hematocrit_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Hematocrit_type > Hematocrit_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Hematocrit_type, char > Hematocrit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Hematocrit_optional&
          Hematocrit () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Hematocrit_optional&
          Hematocrit ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Hematocrit (const Hematocrit_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Hematocrit (const Hematocrit_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Hematocrit (::std::unique_ptr< Hematocrit_type > p);

          //@}

          /**
           * @name HemoglobinContent
           *
           * @brief Accessor and modifier functions for the %HemoglobinContent
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData HemoglobinContent_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HemoglobinContent_type > HemoglobinContent_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HemoglobinContent_type, char > HemoglobinContent_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HemoglobinContent_optional&
          HemoglobinContent () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HemoglobinContent_optional&
          HemoglobinContent ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HemoglobinContent (const HemoglobinContent_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HemoglobinContent (const HemoglobinContent_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HemoglobinContent (::std::unique_ptr< HemoglobinContent_type > p);

          //@}

          /**
           * @name HemoglobinLostToUrine
           *
           * @brief Accessor and modifier functions for the %HemoglobinLostToUrine
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData HemoglobinLostToUrine_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HemoglobinLostToUrine_type > HemoglobinLostToUrine_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HemoglobinLostToUrine_type, char > HemoglobinLostToUrine_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HemoglobinLostToUrine_optional&
          HemoglobinLostToUrine () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HemoglobinLostToUrine_optional&
          HemoglobinLostToUrine ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HemoglobinLostToUrine (const HemoglobinLostToUrine_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HemoglobinLostToUrine (const HemoglobinLostToUrine_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HemoglobinLostToUrine (::std::unique_ptr< HemoglobinLostToUrine_type > p);

          //@}

          /**
           * @name OxygenSaturation
           *
           * @brief Accessor and modifier functions for the %OxygenSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData OxygenSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenSaturation_type > OxygenSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenSaturation_type, char > OxygenSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenSaturation_optional&
          OxygenSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenSaturation_optional&
          OxygenSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenSaturation (const OxygenSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenSaturation (const OxygenSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenSaturation (::std::unique_ptr< OxygenSaturation_type > p);

          //@}

          /**
           * @name OxygenVenousSaturation
           *
           * @brief Accessor and modifier functions for the %OxygenVenousSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData OxygenVenousSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenVenousSaturation_type > OxygenVenousSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenVenousSaturation_type, char > OxygenVenousSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenVenousSaturation_optional&
          OxygenVenousSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenVenousSaturation_optional&
          OxygenVenousSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenVenousSaturation (const OxygenVenousSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenVenousSaturation (const OxygenVenousSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenVenousSaturation (::std::unique_ptr< OxygenVenousSaturation_type > p);

          //@}

          /**
           * @name Phosphate
           *
           * @brief Accessor and modifier functions for the %Phosphate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData Phosphate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Phosphate_type > Phosphate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Phosphate_type, char > Phosphate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Phosphate_optional&
          Phosphate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Phosphate_optional&
          Phosphate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Phosphate (const Phosphate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Phosphate (const Phosphate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Phosphate (::std::unique_ptr< Phosphate_type > p);

          //@}

          /**
           * @name PlasmaVolume
           *
           * @brief Accessor and modifier functions for the %PlasmaVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData PlasmaVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlasmaVolume_type > PlasmaVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlasmaVolume_type, char > PlasmaVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlasmaVolume_optional&
          PlasmaVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlasmaVolume_optional&
          PlasmaVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlasmaVolume (const PlasmaVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlasmaVolume (const PlasmaVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlasmaVolume (::std::unique_ptr< PlasmaVolume_type > p);

          //@}

          /**
           * @name PulseOximetry
           *
           * @brief Accessor and modifier functions for the %PulseOximetry
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData PulseOximetry_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulseOximetry_type > PulseOximetry_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulseOximetry_type, char > PulseOximetry_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulseOximetry_optional&
          PulseOximetry () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulseOximetry_optional&
          PulseOximetry ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulseOximetry (const PulseOximetry_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulseOximetry (const PulseOximetry_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulseOximetry (::std::unique_ptr< PulseOximetry_type > p);

          //@}

          /**
           * @name RedBloodCellCount
           *
           * @brief Accessor and modifier functions for the %RedBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData RedBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCellCount_type > RedBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCellCount_type, char > RedBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCellCount_optional&
          RedBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCellCount_optional&
          RedBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > p);

          //@}

          /**
           * @name RhTransfusionReactionVolume
           *
           * @brief Accessor and modifier functions for the %RhTransfusionReactionVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData RhTransfusionReactionVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RhTransfusionReactionVolume_type > RhTransfusionReactionVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RhTransfusionReactionVolume_type, char > RhTransfusionReactionVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RhTransfusionReactionVolume_optional&
          RhTransfusionReactionVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RhTransfusionReactionVolume_optional&
          RhTransfusionReactionVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RhTransfusionReactionVolume (const RhTransfusionReactionVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RhTransfusionReactionVolume (const RhTransfusionReactionVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RhTransfusionReactionVolume (::std::unique_ptr< RhTransfusionReactionVolume_type > p);

          //@}

          /**
           * @name ShuntFraction
           *
           * @brief Accessor and modifier functions for the %ShuntFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData ShuntFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ShuntFraction_type > ShuntFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ShuntFraction_type, char > ShuntFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ShuntFraction_optional&
          ShuntFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ShuntFraction_optional&
          ShuntFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ShuntFraction (const ShuntFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ShuntFraction (const ShuntFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ShuntFraction (::std::unique_ptr< ShuntFraction_type > p);

          //@}

          /**
           * @name StrongIonDifference
           *
           * @brief Accessor and modifier functions for the %StrongIonDifference
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData StrongIonDifference_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StrongIonDifference_type > StrongIonDifference_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StrongIonDifference_type, char > StrongIonDifference_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StrongIonDifference_optional&
          StrongIonDifference () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StrongIonDifference_optional&
          StrongIonDifference ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StrongIonDifference (const StrongIonDifference_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StrongIonDifference (const StrongIonDifference_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StrongIonDifference (::std::unique_ptr< StrongIonDifference_type > p);

          //@}

          /**
           * @name TotalProteinConcentration
           *
           * @brief Accessor and modifier functions for the %TotalProteinConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalProteinConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalProteinConcentration_type > TotalProteinConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalProteinConcentration_type, char > TotalProteinConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalProteinConcentration_optional&
          TotalProteinConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalProteinConcentration_optional&
          TotalProteinConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalProteinConcentration (const TotalProteinConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalProteinConcentration (const TotalProteinConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalProteinConcentration (::std::unique_ptr< TotalProteinConcentration_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralLipidInPlasma
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralLipidInPlasma
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralLipidInPlasma_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralLipidInPlasma_type > VolumeFractionNeutralLipidInPlasma_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralLipidInPlasma_type, char > VolumeFractionNeutralLipidInPlasma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralLipidInPlasma_optional&
          VolumeFractionNeutralLipidInPlasma () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralLipidInPlasma_optional&
          VolumeFractionNeutralLipidInPlasma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralLipidInPlasma (::std::unique_ptr< VolumeFractionNeutralLipidInPlasma_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralPhospholipidInPlasma
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralPhospholipidInPlasma
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralPhospholipidInPlasma_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralPhospholipidInPlasma_type > VolumeFractionNeutralPhospholipidInPlasma_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralPhospholipidInPlasma_type, char > VolumeFractionNeutralPhospholipidInPlasma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralPhospholipidInPlasma_optional&
          VolumeFractionNeutralPhospholipidInPlasma () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralPhospholipidInPlasma_optional&
          VolumeFractionNeutralPhospholipidInPlasma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (::std::unique_ptr< VolumeFractionNeutralPhospholipidInPlasma_type > p);

          //@}

          /**
           * @name WhiteBloodCellCount
           *
           * @brief Accessor and modifier functions for the %WhiteBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData WhiteBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WhiteBloodCellCount_type > WhiteBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WhiteBloodCellCount_type, char > WhiteBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WhiteBloodCellCount_optional&
          WhiteBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WhiteBloodCellCount_optional&
          WhiteBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > p);

          //@}

          /**
           * @name RedBloodCellAcetylcholinesterase
           *
           * @brief Accessor and modifier functions for the %RedBloodCellAcetylcholinesterase
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData RedBloodCellAcetylcholinesterase_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCellAcetylcholinesterase_type > RedBloodCellAcetylcholinesterase_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCellAcetylcholinesterase_type, char > RedBloodCellAcetylcholinesterase_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCellAcetylcholinesterase_optional&
          RedBloodCellAcetylcholinesterase () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCellAcetylcholinesterase_optional&
          RedBloodCellAcetylcholinesterase ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCellAcetylcholinesterase (::std::unique_ptr< RedBloodCellAcetylcholinesterase_type > p);

          //@}

          /**
           * @name TotalBilirubin
           *
           * @brief Accessor and modifier functions for the %TotalBilirubin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalBilirubin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalBilirubin_type > TotalBilirubin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBilirubin_type, char > TotalBilirubin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalBilirubin_optional&
          TotalBilirubin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalBilirubin_optional&
          TotalBilirubin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBilirubin (const TotalBilirubin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalBilirubin (const TotalBilirubin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > p);

          //@}

          /**
           * @name InflammatoryResponse
           *
           * @brief Accessor and modifier functions for the %InflammatoryResponse
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::InflammatoryResponseData InflammatoryResponse_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InflammatoryResponse_type > InflammatoryResponse_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InflammatoryResponse_type, char > InflammatoryResponse_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InflammatoryResponse_optional&
          InflammatoryResponse () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InflammatoryResponse_optional&
          InflammatoryResponse ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InflammatoryResponse (const InflammatoryResponse_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InflammatoryResponse (const InflammatoryResponse_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InflammatoryResponse (::std::unique_ptr< InflammatoryResponse_type > p);

          //@}

          /**
           * @name ArterialCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ArterialCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialCarbonDioxidePressure_type > ArterialCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxidePressure_type, char > ArterialCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialCarbonDioxidePressure_optional&
          ArterialCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialCarbonDioxidePressure_optional&
          ArterialCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialCarbonDioxidePressure (::std::unique_ptr< ArterialCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name ArterialOxygenPressure
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ArterialOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialOxygenPressure_type > ArterialOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenPressure_type, char > ArterialOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialOxygenPressure_optional&
          ArterialOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialOxygenPressure_optional&
          ArterialOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenPressure (const ArterialOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialOxygenPressure (const ArterialOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialOxygenPressure (::std::unique_ptr< ArterialOxygenPressure_type > p);

          //@}

          /**
           * @name PulmonaryArterialCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryArterialCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryArterialCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryArterialCarbonDioxidePressure_type > PulmonaryArterialCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryArterialCarbonDioxidePressure_type, char > PulmonaryArterialCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryArterialCarbonDioxidePressure_optional&
          PulmonaryArterialCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryArterialCarbonDioxidePressure_optional&
          PulmonaryArterialCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (::std::unique_ptr< PulmonaryArterialCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name PulmonaryArterialOxygenPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryArterialOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryArterialOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryArterialOxygenPressure_type > PulmonaryArterialOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryArterialOxygenPressure_type, char > PulmonaryArterialOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryArterialOxygenPressure_optional&
          PulmonaryArterialOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryArterialOxygenPressure_optional&
          PulmonaryArterialOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryArterialOxygenPressure (::std::unique_ptr< PulmonaryArterialOxygenPressure_type > p);

          //@}

          /**
           * @name PulmonaryVenousCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryVenousCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryVenousCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVenousCarbonDioxidePressure_type > PulmonaryVenousCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVenousCarbonDioxidePressure_type, char > PulmonaryVenousCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVenousCarbonDioxidePressure_optional&
          PulmonaryVenousCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVenousCarbonDioxidePressure_optional&
          PulmonaryVenousCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (::std::unique_ptr< PulmonaryVenousCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name PulmonaryVenousOxygenPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryVenousOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryVenousOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVenousOxygenPressure_type > PulmonaryVenousOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVenousOxygenPressure_type, char > PulmonaryVenousOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVenousOxygenPressure_optional&
          PulmonaryVenousOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVenousOxygenPressure_optional&
          PulmonaryVenousOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVenousOxygenPressure (::std::unique_ptr< PulmonaryVenousOxygenPressure_type > p);

          //@}

          /**
           * @name VenousCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %VenousCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VenousCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousCarbonDioxidePressure_type > VenousCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousCarbonDioxidePressure_type, char > VenousCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousCarbonDioxidePressure_optional&
          VenousCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousCarbonDioxidePressure_optional&
          VenousCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousCarbonDioxidePressure (::std::unique_ptr< VenousCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name VenousOxygenPressure
           *
           * @brief Accessor and modifier functions for the %VenousOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VenousOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousOxygenPressure_type > VenousOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousOxygenPressure_type, char > VenousOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousOxygenPressure_optional&
          VenousOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousOxygenPressure_optional&
          VenousOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousOxygenPressure (const VenousOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousOxygenPressure (const VenousOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousOxygenPressure (::std::unique_ptr< VenousOxygenPressure_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BloodChemistrySystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BloodChemistrySystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistrySystemData (const BloodChemistrySystemData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BloodChemistrySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistrySystemData&
          operator= (const BloodChemistrySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BloodChemistrySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          BloodDensity_optional BloodDensity_;
          ArterialBloodPH_optional ArterialBloodPH_;
          ArterialBloodPHBaseline_optional ArterialBloodPHBaseline_;
          VenousBloodPH_optional VenousBloodPH_;
          BloodSpecificHeat_optional BloodSpecificHeat_;
          BloodUreaNitrogenConcentration_optional BloodUreaNitrogenConcentration_;
          CarbonDioxideSaturation_optional CarbonDioxideSaturation_;
          CarbonMonoxideSaturation_optional CarbonMonoxideSaturation_;
          Hematocrit_optional Hematocrit_;
          HemoglobinContent_optional HemoglobinContent_;
          HemoglobinLostToUrine_optional HemoglobinLostToUrine_;
          OxygenSaturation_optional OxygenSaturation_;
          OxygenVenousSaturation_optional OxygenVenousSaturation_;
          Phosphate_optional Phosphate_;
          PlasmaVolume_optional PlasmaVolume_;
          PulseOximetry_optional PulseOximetry_;
          RedBloodCellCount_optional RedBloodCellCount_;
          RhTransfusionReactionVolume_optional RhTransfusionReactionVolume_;
          ShuntFraction_optional ShuntFraction_;
          StrongIonDifference_optional StrongIonDifference_;
          TotalProteinConcentration_optional TotalProteinConcentration_;
          VolumeFractionNeutralLipidInPlasma_optional VolumeFractionNeutralLipidInPlasma_;
          VolumeFractionNeutralPhospholipidInPlasma_optional VolumeFractionNeutralPhospholipidInPlasma_;
          WhiteBloodCellCount_optional WhiteBloodCellCount_;
          RedBloodCellAcetylcholinesterase_optional RedBloodCellAcetylcholinesterase_;
          TotalBilirubin_optional TotalBilirubin_;
          InflammatoryResponse_optional InflammatoryResponse_;
          ArterialCarbonDioxidePressure_optional ArterialCarbonDioxidePressure_;
          ArterialOxygenPressure_optional ArterialOxygenPressure_;
          PulmonaryArterialCarbonDioxidePressure_optional PulmonaryArterialCarbonDioxidePressure_;
          PulmonaryArterialOxygenPressure_optional PulmonaryArterialOxygenPressure_;
          PulmonaryVenousCarbonDioxidePressure_optional PulmonaryVenousCarbonDioxidePressure_;
          PulmonaryVenousOxygenPressure_optional PulmonaryVenousOxygenPressure_;
          VenousCarbonDioxidePressure_optional VenousCarbonDioxidePressure_;
          VenousOxygenPressure_optional VenousOxygenPressure_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumHeartRhythm
         * schema type.
         */
        class BIOGEARS_CDM_API enumHeartRhythm: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Asystole,
            NormalSinus
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumHeartRhythm ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumHeartRhythm (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumHeartRhythm (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumHeartRhythm (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumHeartRhythm (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumHeartRhythm (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumHeartRhythm (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumHeartRhythm (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumHeartRhythm (const enumHeartRhythm& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumHeartRhythm*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumHeartRhythm&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumHeartRhythm_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumHeartRhythm_convert () const;

          public:
          static const char* const _xsd_enumHeartRhythm_literals_[2];
          static const value _xsd_enumHeartRhythm_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CardiovascularSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CardiovascularSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name ArterialPressure
           *
           * @brief Accessor and modifier functions for the %ArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialPressure_type > ArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialPressure_type, char > ArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialPressure_optional&
          ArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialPressure_optional&
          ArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialPressure (const ArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialPressure (const ArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialPressure (::std::unique_ptr< ArterialPressure_type > p);

          //@}

          /**
           * @name BloodVolume
           *
           * @brief Accessor and modifier functions for the %BloodVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData BloodVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodVolume_type > BloodVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodVolume_type, char > BloodVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodVolume_optional&
          BloodVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodVolume_optional&
          BloodVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodVolume (const BloodVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodVolume (const BloodVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodVolume (::std::unique_ptr< BloodVolume_type > p);

          //@}

          /**
           * @name CardiacIndex
           *
           * @brief Accessor and modifier functions for the %CardiacIndex
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeAreaData CardiacIndex_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CardiacIndex_type > CardiacIndex_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacIndex_type, char > CardiacIndex_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CardiacIndex_optional&
          CardiacIndex () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CardiacIndex_optional&
          CardiacIndex ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacIndex (const CardiacIndex_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CardiacIndex (const CardiacIndex_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CardiacIndex (::std::unique_ptr< CardiacIndex_type > p);

          //@}

          /**
           * @name CardiacOutput
           *
           * @brief Accessor and modifier functions for the %CardiacOutput
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData CardiacOutput_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CardiacOutput_type > CardiacOutput_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacOutput_type, char > CardiacOutput_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CardiacOutput_optional&
          CardiacOutput () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CardiacOutput_optional&
          CardiacOutput ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacOutput (const CardiacOutput_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CardiacOutput (const CardiacOutput_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CardiacOutput (::std::unique_ptr< CardiacOutput_type > p);

          //@}

          /**
           * @name CentralVenousPressure
           *
           * @brief Accessor and modifier functions for the %CentralVenousPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData CentralVenousPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CentralVenousPressure_type > CentralVenousPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CentralVenousPressure_type, char > CentralVenousPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CentralVenousPressure_optional&
          CentralVenousPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CentralVenousPressure_optional&
          CentralVenousPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CentralVenousPressure (const CentralVenousPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CentralVenousPressure (const CentralVenousPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CentralVenousPressure (::std::unique_ptr< CentralVenousPressure_type > p);

          //@}

          /**
           * @name CerebralBloodFlow
           *
           * @brief Accessor and modifier functions for the %CerebralBloodFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData CerebralBloodFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CerebralBloodFlow_type > CerebralBloodFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralBloodFlow_type, char > CerebralBloodFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CerebralBloodFlow_optional&
          CerebralBloodFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CerebralBloodFlow_optional&
          CerebralBloodFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralBloodFlow (const CerebralBloodFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CerebralBloodFlow (const CerebralBloodFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CerebralBloodFlow (::std::unique_ptr< CerebralBloodFlow_type > p);

          //@}

          /**
           * @name CerebralPerfusionPressure
           *
           * @brief Accessor and modifier functions for the %CerebralPerfusionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData CerebralPerfusionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CerebralPerfusionPressure_type > CerebralPerfusionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CerebralPerfusionPressure_type, char > CerebralPerfusionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CerebralPerfusionPressure_optional&
          CerebralPerfusionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CerebralPerfusionPressure_optional&
          CerebralPerfusionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CerebralPerfusionPressure (const CerebralPerfusionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CerebralPerfusionPressure (const CerebralPerfusionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CerebralPerfusionPressure (::std::unique_ptr< CerebralPerfusionPressure_type > p);

          //@}

          /**
           * @name DiastolicArterialPressure
           *
           * @brief Accessor and modifier functions for the %DiastolicArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData DiastolicArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DiastolicArterialPressure_type > DiastolicArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DiastolicArterialPressure_type, char > DiastolicArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DiastolicArterialPressure_optional&
          DiastolicArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DiastolicArterialPressure_optional&
          DiastolicArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DiastolicArterialPressure (const DiastolicArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DiastolicArterialPressure (const DiastolicArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DiastolicArterialPressure (::std::unique_ptr< DiastolicArterialPressure_type > p);

          //@}

          /**
           * @name HeartEjectionFraction
           *
           * @brief Accessor and modifier functions for the %HeartEjectionFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData HeartEjectionFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartEjectionFraction_type > HeartEjectionFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartEjectionFraction_type, char > HeartEjectionFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartEjectionFraction_optional&
          HeartEjectionFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartEjectionFraction_optional&
          HeartEjectionFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartEjectionFraction (const HeartEjectionFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartEjectionFraction (const HeartEjectionFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartEjectionFraction (::std::unique_ptr< HeartEjectionFraction_type > p);

          //@}

          /**
           * @name HeartRate
           *
           * @brief Accessor and modifier functions for the %HeartRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData HeartRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRate_type > HeartRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRate_type, char > HeartRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRate_optional&
          HeartRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRate_optional&
          HeartRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRate (const HeartRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRate (const HeartRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRate (::std::unique_ptr< HeartRate_type > p);

          //@}

          /**
           * @name HeartRhythm
           *
           * @brief Accessor and modifier functions for the %HeartRhythm
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumHeartRhythm HeartRhythm_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRhythm_type > HeartRhythm_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRhythm_type, char > HeartRhythm_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRhythm_optional&
          HeartRhythm () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRhythm_optional&
          HeartRhythm ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRhythm (const HeartRhythm_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRhythm (const HeartRhythm_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRhythm (::std::unique_ptr< HeartRhythm_type > p);

          //@}

          /**
           * @name HeartStrokeVolume
           *
           * @brief Accessor and modifier functions for the %HeartStrokeVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData HeartStrokeVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartStrokeVolume_type > HeartStrokeVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartStrokeVolume_type, char > HeartStrokeVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartStrokeVolume_optional&
          HeartStrokeVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartStrokeVolume_optional&
          HeartStrokeVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartStrokeVolume (const HeartStrokeVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartStrokeVolume (const HeartStrokeVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartStrokeVolume (::std::unique_ptr< HeartStrokeVolume_type > p);

          //@}

          /**
           * @name IntracranialPressure
           *
           * @brief Accessor and modifier functions for the %IntracranialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData IntracranialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< IntracranialPressure_type > IntracranialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IntracranialPressure_type, char > IntracranialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const IntracranialPressure_optional&
          IntracranialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          IntracranialPressure_optional&
          IntracranialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IntracranialPressure (const IntracranialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          IntracranialPressure (const IntracranialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          IntracranialPressure (::std::unique_ptr< IntracranialPressure_type > p);

          //@}

          /**
           * @name MeanArterialPressure
           *
           * @brief Accessor and modifier functions for the %MeanArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanArterialPressure_type > MeanArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanArterialPressure_type, char > MeanArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanArterialPressure_optional&
          MeanArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanArterialPressure_optional&
          MeanArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanArterialPressure (const MeanArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanArterialPressure (const MeanArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanArterialPressure (::std::unique_ptr< MeanArterialPressure_type > p);

          //@}

          /**
           * @name MeanArterialCarbonDioxidePartialPressure
           *
           * @brief Accessor and modifier functions for the %MeanArterialCarbonDioxidePartialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanArterialCarbonDioxidePartialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanArterialCarbonDioxidePartialPressure_type > MeanArterialCarbonDioxidePartialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanArterialCarbonDioxidePartialPressure_type, char > MeanArterialCarbonDioxidePartialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanArterialCarbonDioxidePartialPressure_optional&
          MeanArterialCarbonDioxidePartialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanArterialCarbonDioxidePartialPressure_optional&
          MeanArterialCarbonDioxidePartialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanArterialCarbonDioxidePartialPressure (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressure_type > p);

          //@}

          /**
           * @name MeanArterialCarbonDioxidePartialPressureDelta
           *
           * @brief Accessor and modifier functions for the %MeanArterialCarbonDioxidePartialPressureDelta
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanArterialCarbonDioxidePartialPressureDelta_type > MeanArterialCarbonDioxidePartialPressureDelta_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanArterialCarbonDioxidePartialPressureDelta_type, char > MeanArterialCarbonDioxidePartialPressureDelta_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanArterialCarbonDioxidePartialPressureDelta_optional&
          MeanArterialCarbonDioxidePartialPressureDelta () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanArterialCarbonDioxidePartialPressureDelta_optional&
          MeanArterialCarbonDioxidePartialPressureDelta ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanArterialCarbonDioxidePartialPressureDelta (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressureDelta_type > p);

          //@}

          /**
           * @name MeanCentralVenousPressure
           *
           * @brief Accessor and modifier functions for the %MeanCentralVenousPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanCentralVenousPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanCentralVenousPressure_type > MeanCentralVenousPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanCentralVenousPressure_type, char > MeanCentralVenousPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanCentralVenousPressure_optional&
          MeanCentralVenousPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanCentralVenousPressure_optional&
          MeanCentralVenousPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanCentralVenousPressure (const MeanCentralVenousPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanCentralVenousPressure (const MeanCentralVenousPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanCentralVenousPressure (::std::unique_ptr< MeanCentralVenousPressure_type > p);

          //@}

          /**
           * @name MeanSkinFlow
           *
           * @brief Accessor and modifier functions for the %MeanSkinFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData MeanSkinFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanSkinFlow_type > MeanSkinFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanSkinFlow_type, char > MeanSkinFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanSkinFlow_optional&
          MeanSkinFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanSkinFlow_optional&
          MeanSkinFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanSkinFlow (const MeanSkinFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanSkinFlow (const MeanSkinFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanSkinFlow (::std::unique_ptr< MeanSkinFlow_type > p);

          //@}

          /**
           * @name PulmonaryArterialPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryArterialPressure_type > PulmonaryArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryArterialPressure_type, char > PulmonaryArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryArterialPressure_optional&
          PulmonaryArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryArterialPressure_optional&
          PulmonaryArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryArterialPressure (const PulmonaryArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryArterialPressure (const PulmonaryArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryArterialPressure (::std::unique_ptr< PulmonaryArterialPressure_type > p);

          //@}

          /**
           * @name PulmonaryCapillariesWedgePressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryCapillariesWedgePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryCapillariesWedgePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryCapillariesWedgePressure_type > PulmonaryCapillariesWedgePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryCapillariesWedgePressure_type, char > PulmonaryCapillariesWedgePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryCapillariesWedgePressure_optional&
          PulmonaryCapillariesWedgePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryCapillariesWedgePressure_optional&
          PulmonaryCapillariesWedgePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryCapillariesWedgePressure (::std::unique_ptr< PulmonaryCapillariesWedgePressure_type > p);

          //@}

          /**
           * @name PulmonaryDiastolicArterialPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryDiastolicArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryDiastolicArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryDiastolicArterialPressure_type > PulmonaryDiastolicArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryDiastolicArterialPressure_type, char > PulmonaryDiastolicArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryDiastolicArterialPressure_optional&
          PulmonaryDiastolicArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryDiastolicArterialPressure_optional&
          PulmonaryDiastolicArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryDiastolicArterialPressure (::std::unique_ptr< PulmonaryDiastolicArterialPressure_type > p);

          //@}

          /**
           * @name PulmonaryMeanArterialPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryMeanArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryMeanArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryMeanArterialPressure_type > PulmonaryMeanArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryMeanArterialPressure_type, char > PulmonaryMeanArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryMeanArterialPressure_optional&
          PulmonaryMeanArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryMeanArterialPressure_optional&
          PulmonaryMeanArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryMeanArterialPressure (::std::unique_ptr< PulmonaryMeanArterialPressure_type > p);

          //@}

          /**
           * @name PulmonaryMeanCapillaryFlow
           *
           * @brief Accessor and modifier functions for the %PulmonaryMeanCapillaryFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryMeanCapillaryFlow_type > PulmonaryMeanCapillaryFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryMeanCapillaryFlow_type, char > PulmonaryMeanCapillaryFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryMeanCapillaryFlow_optional&
          PulmonaryMeanCapillaryFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryMeanCapillaryFlow_optional&
          PulmonaryMeanCapillaryFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryMeanCapillaryFlow (::std::unique_ptr< PulmonaryMeanCapillaryFlow_type > p);

          //@}

          /**
           * @name PulmonaryMeanShuntFlow
           *
           * @brief Accessor and modifier functions for the %PulmonaryMeanShuntFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData PulmonaryMeanShuntFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryMeanShuntFlow_type > PulmonaryMeanShuntFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryMeanShuntFlow_type, char > PulmonaryMeanShuntFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryMeanShuntFlow_optional&
          PulmonaryMeanShuntFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryMeanShuntFlow_optional&
          PulmonaryMeanShuntFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryMeanShuntFlow (::std::unique_ptr< PulmonaryMeanShuntFlow_type > p);

          //@}

          /**
           * @name PulmonarySystolicArterialPressure
           *
           * @brief Accessor and modifier functions for the %PulmonarySystolicArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonarySystolicArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonarySystolicArterialPressure_type > PulmonarySystolicArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonarySystolicArterialPressure_type, char > PulmonarySystolicArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonarySystolicArterialPressure_optional&
          PulmonarySystolicArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonarySystolicArterialPressure_optional&
          PulmonarySystolicArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonarySystolicArterialPressure (::std::unique_ptr< PulmonarySystolicArterialPressure_type > p);

          //@}

          /**
           * @name PulmonaryVascularResistance
           *
           * @brief Accessor and modifier functions for the %PulmonaryVascularResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData PulmonaryVascularResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVascularResistance_type > PulmonaryVascularResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVascularResistance_type, char > PulmonaryVascularResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVascularResistance_optional&
          PulmonaryVascularResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVascularResistance_optional&
          PulmonaryVascularResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVascularResistance (const PulmonaryVascularResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVascularResistance (const PulmonaryVascularResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVascularResistance (::std::unique_ptr< PulmonaryVascularResistance_type > p);

          //@}

          /**
           * @name PulmonaryVascularResistanceIndex
           *
           * @brief Accessor and modifier functions for the %PulmonaryVascularResistanceIndex
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVascularResistanceIndex_type > PulmonaryVascularResistanceIndex_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVascularResistanceIndex_type, char > PulmonaryVascularResistanceIndex_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVascularResistanceIndex_optional&
          PulmonaryVascularResistanceIndex () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVascularResistanceIndex_optional&
          PulmonaryVascularResistanceIndex ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVascularResistanceIndex (::std::unique_ptr< PulmonaryVascularResistanceIndex_type > p);

          //@}

          /**
           * @name PulsePressure
           *
           * @brief Accessor and modifier functions for the %PulsePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulsePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulsePressure_type > PulsePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulsePressure_type, char > PulsePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulsePressure_optional&
          PulsePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulsePressure_optional&
          PulsePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulsePressure (const PulsePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulsePressure (const PulsePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulsePressure (::std::unique_ptr< PulsePressure_type > p);

          //@}

          /**
           * @name SystemicVascularResistance
           *
           * @brief Accessor and modifier functions for the %SystemicVascularResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData SystemicVascularResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SystemicVascularResistance_type > SystemicVascularResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystemicVascularResistance_type, char > SystemicVascularResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SystemicVascularResistance_optional&
          SystemicVascularResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SystemicVascularResistance_optional&
          SystemicVascularResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystemicVascularResistance (const SystemicVascularResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SystemicVascularResistance (const SystemicVascularResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SystemicVascularResistance (::std::unique_ptr< SystemicVascularResistance_type > p);

          //@}

          /**
           * @name SystolicArterialPressure
           *
           * @brief Accessor and modifier functions for the %SystolicArterialPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData SystolicArterialPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SystolicArterialPressure_type > SystolicArterialPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystolicArterialPressure_type, char > SystolicArterialPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SystolicArterialPressure_optional&
          SystolicArterialPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SystolicArterialPressure_optional&
          SystolicArterialPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystolicArterialPressure (const SystolicArterialPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SystolicArterialPressure (const SystolicArterialPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SystolicArterialPressure (::std::unique_ptr< SystolicArterialPressure_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CardiovascularSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardiovascularSystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiovascularSystemData (const CardiovascularSystemData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CardiovascularSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardiovascularSystemData&
          operator= (const CardiovascularSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CardiovascularSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ArterialPressure_optional ArterialPressure_;
          BloodVolume_optional BloodVolume_;
          CardiacIndex_optional CardiacIndex_;
          CardiacOutput_optional CardiacOutput_;
          CentralVenousPressure_optional CentralVenousPressure_;
          CerebralBloodFlow_optional CerebralBloodFlow_;
          CerebralPerfusionPressure_optional CerebralPerfusionPressure_;
          DiastolicArterialPressure_optional DiastolicArterialPressure_;
          HeartEjectionFraction_optional HeartEjectionFraction_;
          HeartRate_optional HeartRate_;
          HeartRhythm_optional HeartRhythm_;
          HeartStrokeVolume_optional HeartStrokeVolume_;
          IntracranialPressure_optional IntracranialPressure_;
          MeanArterialPressure_optional MeanArterialPressure_;
          MeanArterialCarbonDioxidePartialPressure_optional MeanArterialCarbonDioxidePartialPressure_;
          MeanArterialCarbonDioxidePartialPressureDelta_optional MeanArterialCarbonDioxidePartialPressureDelta_;
          MeanCentralVenousPressure_optional MeanCentralVenousPressure_;
          MeanSkinFlow_optional MeanSkinFlow_;
          PulmonaryArterialPressure_optional PulmonaryArterialPressure_;
          PulmonaryCapillariesWedgePressure_optional PulmonaryCapillariesWedgePressure_;
          PulmonaryDiastolicArterialPressure_optional PulmonaryDiastolicArterialPressure_;
          PulmonaryMeanArterialPressure_optional PulmonaryMeanArterialPressure_;
          PulmonaryMeanCapillaryFlow_optional PulmonaryMeanCapillaryFlow_;
          PulmonaryMeanShuntFlow_optional PulmonaryMeanShuntFlow_;
          PulmonarySystolicArterialPressure_optional PulmonarySystolicArterialPressure_;
          PulmonaryVascularResistance_optional PulmonaryVascularResistance_;
          PulmonaryVascularResistanceIndex_optional PulmonaryVascularResistanceIndex_;
          PulsePressure_optional PulsePressure_;
          SystemicVascularResistance_optional SystemicVascularResistance_;
          SystolicArterialPressure_optional SystolicArterialPressure_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %DrugSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API DrugSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name AntibioticActivity
           *
           * @brief Accessor and modifier functions for the %AntibioticActivity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData AntibioticActivity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AntibioticActivity_type > AntibioticActivity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AntibioticActivity_type, char > AntibioticActivity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AntibioticActivity_optional&
          AntibioticActivity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AntibioticActivity_optional&
          AntibioticActivity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AntibioticActivity (const AntibioticActivity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AntibioticActivity (const AntibioticActivity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AntibioticActivity (::std::unique_ptr< AntibioticActivity_type > p);

          //@}

          /**
           * @name BronchodilationLevel
           *
           * @brief Accessor and modifier functions for the %BronchodilationLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData BronchodilationLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BronchodilationLevel_type > BronchodilationLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BronchodilationLevel_type, char > BronchodilationLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BronchodilationLevel_optional&
          BronchodilationLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BronchodilationLevel_optional&
          BronchodilationLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BronchodilationLevel (const BronchodilationLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BronchodilationLevel (const BronchodilationLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BronchodilationLevel (::std::unique_ptr< BronchodilationLevel_type > p);

          //@}

          /**
           * @name FeverChange
           *
           * @brief Accessor and modifier functions for the %FeverChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData FeverChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FeverChange_type > FeverChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FeverChange_type, char > FeverChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FeverChange_optional&
          FeverChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FeverChange_optional&
          FeverChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FeverChange (const FeverChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FeverChange (const FeverChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FeverChange (::std::unique_ptr< FeverChange_type > p);

          //@}

          /**
           * @name HeartRateChange
           *
           * @brief Accessor and modifier functions for the %HeartRateChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData HeartRateChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRateChange_type > HeartRateChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateChange_type, char > HeartRateChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRateChange_optional&
          HeartRateChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRateChange_optional&
          HeartRateChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateChange (const HeartRateChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRateChange (const HeartRateChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRateChange (::std::unique_ptr< HeartRateChange_type > p);

          //@}

          /**
           * @name HemorrhageChange
           *
           * @brief Accessor and modifier functions for the %HemorrhageChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData HemorrhageChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HemorrhageChange_type > HemorrhageChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HemorrhageChange_type, char > HemorrhageChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HemorrhageChange_optional&
          HemorrhageChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HemorrhageChange_optional&
          HemorrhageChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HemorrhageChange (const HemorrhageChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HemorrhageChange (const HemorrhageChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HemorrhageChange (::std::unique_ptr< HemorrhageChange_type > p);

          //@}

          /**
           * @name MeanBloodPressureChange
           *
           * @brief Accessor and modifier functions for the %MeanBloodPressureChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanBloodPressureChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanBloodPressureChange_type > MeanBloodPressureChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanBloodPressureChange_type, char > MeanBloodPressureChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanBloodPressureChange_optional&
          MeanBloodPressureChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanBloodPressureChange_optional&
          MeanBloodPressureChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanBloodPressureChange (const MeanBloodPressureChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanBloodPressureChange (const MeanBloodPressureChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanBloodPressureChange (::std::unique_ptr< MeanBloodPressureChange_type > p);

          //@}

          /**
           * @name NeuromuscularBlockLevel
           *
           * @brief Accessor and modifier functions for the %NeuromuscularBlockLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData NeuromuscularBlockLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NeuromuscularBlockLevel_type > NeuromuscularBlockLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeuromuscularBlockLevel_type, char > NeuromuscularBlockLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NeuromuscularBlockLevel_optional&
          NeuromuscularBlockLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NeuromuscularBlockLevel_optional&
          NeuromuscularBlockLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeuromuscularBlockLevel (const NeuromuscularBlockLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NeuromuscularBlockLevel (const NeuromuscularBlockLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NeuromuscularBlockLevel (::std::unique_ptr< NeuromuscularBlockLevel_type > p);

          //@}

          /**
           * @name PainToleranceChange
           *
           * @brief Accessor and modifier functions for the %PainToleranceChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData PainToleranceChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PainToleranceChange_type > PainToleranceChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PainToleranceChange_type, char > PainToleranceChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PainToleranceChange_optional&
          PainToleranceChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PainToleranceChange_optional&
          PainToleranceChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PainToleranceChange (const PainToleranceChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PainToleranceChange (const PainToleranceChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PainToleranceChange (::std::unique_ptr< PainToleranceChange_type > p);

          //@}

          /**
           * @name PulsePressureChange
           *
           * @brief Accessor and modifier functions for the %PulsePressureChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulsePressureChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulsePressureChange_type > PulsePressureChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulsePressureChange_type, char > PulsePressureChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulsePressureChange_optional&
          PulsePressureChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulsePressureChange_optional&
          PulsePressureChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulsePressureChange (const PulsePressureChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulsePressureChange (const PulsePressureChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulsePressureChange (::std::unique_ptr< PulsePressureChange_type > p);

          //@}

          /**
           * @name RespirationRateChange
           *
           * @brief Accessor and modifier functions for the %RespirationRateChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData RespirationRateChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationRateChange_type > RespirationRateChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationRateChange_type, char > RespirationRateChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationRateChange_optional&
          RespirationRateChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationRateChange_optional&
          RespirationRateChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationRateChange (const RespirationRateChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationRateChange (const RespirationRateChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationRateChange (::std::unique_ptr< RespirationRateChange_type > p);

          //@}

          /**
           * @name SedationLevel
           *
           * @brief Accessor and modifier functions for the %SedationLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData SedationLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SedationLevel_type > SedationLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SedationLevel_type, char > SedationLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SedationLevel_optional&
          SedationLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SedationLevel_optional&
          SedationLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SedationLevel (const SedationLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SedationLevel (const SedationLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SedationLevel (::std::unique_ptr< SedationLevel_type > p);

          //@}

          /**
           * @name TidalVolumeChange
           *
           * @brief Accessor and modifier functions for the %TidalVolumeChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TidalVolumeChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TidalVolumeChange_type > TidalVolumeChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TidalVolumeChange_type, char > TidalVolumeChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TidalVolumeChange_optional&
          TidalVolumeChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TidalVolumeChange_optional&
          TidalVolumeChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TidalVolumeChange (const TidalVolumeChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TidalVolumeChange (const TidalVolumeChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TidalVolumeChange (::std::unique_ptr< TidalVolumeChange_type > p);

          //@}

          /**
           * @name TubularPermeabilityChange
           *
           * @brief Accessor and modifier functions for the %TubularPermeabilityChange
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData TubularPermeabilityChange_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TubularPermeabilityChange_type > TubularPermeabilityChange_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TubularPermeabilityChange_type, char > TubularPermeabilityChange_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TubularPermeabilityChange_optional&
          TubularPermeabilityChange () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TubularPermeabilityChange_optional&
          TubularPermeabilityChange ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TubularPermeabilityChange (const TubularPermeabilityChange_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TubularPermeabilityChange (const TubularPermeabilityChange_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TubularPermeabilityChange (::std::unique_ptr< TubularPermeabilityChange_type > p);

          //@}

          /**
           * @name CentralNervousResponse
           *
           * @brief Accessor and modifier functions for the %CentralNervousResponse
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CentralNervousResponse_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CentralNervousResponse_type > CentralNervousResponse_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CentralNervousResponse_type, char > CentralNervousResponse_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CentralNervousResponse_optional&
          CentralNervousResponse () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CentralNervousResponse_optional&
          CentralNervousResponse ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CentralNervousResponse (const CentralNervousResponse_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CentralNervousResponse (const CentralNervousResponse_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CentralNervousResponse (::std::unique_ptr< CentralNervousResponse_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          DrugSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DrugSystemData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugSystemData (const DrugSystemData& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual DrugSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugSystemData&
          operator= (const DrugSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~DrugSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          AntibioticActivity_optional AntibioticActivity_;
          BronchodilationLevel_optional BronchodilationLevel_;
          FeverChange_optional FeverChange_;
          HeartRateChange_optional HeartRateChange_;
          HemorrhageChange_optional HemorrhageChange_;
          MeanBloodPressureChange_optional MeanBloodPressureChange_;
          NeuromuscularBlockLevel_optional NeuromuscularBlockLevel_;
          PainToleranceChange_optional PainToleranceChange_;
          PulsePressureChange_optional PulsePressureChange_;
          RespirationRateChange_optional RespirationRateChange_;
          SedationLevel_optional SedationLevel_;
          TidalVolumeChange_optional TidalVolumeChange_;
          TubularPermeabilityChange_optional TubularPermeabilityChange_;
          CentralNervousResponse_optional CentralNervousResponse_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %EndocrineSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API EndocrineSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name InsulinSynthesisRate
           *
           * @brief Accessor and modifier functions for the %InsulinSynthesisRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData InsulinSynthesisRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InsulinSynthesisRate_type > InsulinSynthesisRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InsulinSynthesisRate_type, char > InsulinSynthesisRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InsulinSynthesisRate_optional&
          InsulinSynthesisRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InsulinSynthesisRate_optional&
          InsulinSynthesisRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InsulinSynthesisRate (const InsulinSynthesisRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InsulinSynthesisRate (const InsulinSynthesisRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InsulinSynthesisRate (::std::unique_ptr< InsulinSynthesisRate_type > p);

          //@}

          /**
           * @name GlucagonSynthesisRate
           *
           * @brief Accessor and modifier functions for the %GlucagonSynthesisRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData GlucagonSynthesisRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlucagonSynthesisRate_type > GlucagonSynthesisRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlucagonSynthesisRate_type, char > GlucagonSynthesisRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlucagonSynthesisRate_optional&
          GlucagonSynthesisRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlucagonSynthesisRate_optional&
          GlucagonSynthesisRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlucagonSynthesisRate (const GlucagonSynthesisRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlucagonSynthesisRate (const GlucagonSynthesisRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlucagonSynthesisRate (::std::unique_ptr< GlucagonSynthesisRate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          EndocrineSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          EndocrineSystemData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EndocrineSystemData (const EndocrineSystemData& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual EndocrineSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EndocrineSystemData&
          operator= (const EndocrineSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~EndocrineSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          InsulinSynthesisRate_optional InsulinSynthesisRate_;
          GlucagonSynthesisRate_optional GlucagonSynthesisRate_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %EnergySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API EnergySystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name AchievedExerciseLevel
           *
           * @brief Accessor and modifier functions for the %AchievedExerciseLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData AchievedExerciseLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AchievedExerciseLevel_type > AchievedExerciseLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AchievedExerciseLevel_type, char > AchievedExerciseLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AchievedExerciseLevel_optional&
          AchievedExerciseLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AchievedExerciseLevel_optional&
          AchievedExerciseLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AchievedExerciseLevel (const AchievedExerciseLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AchievedExerciseLevel (const AchievedExerciseLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AchievedExerciseLevel (::std::unique_ptr< AchievedExerciseLevel_type > p);

          //@}

          /**
           * @name CoreTemperature
           *
           * @brief Accessor and modifier functions for the %CoreTemperature
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData CoreTemperature_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CoreTemperature_type > CoreTemperature_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CoreTemperature_type, char > CoreTemperature_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CoreTemperature_optional&
          CoreTemperature () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CoreTemperature_optional&
          CoreTemperature ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CoreTemperature (const CoreTemperature_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CoreTemperature (const CoreTemperature_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CoreTemperature (::std::unique_ptr< CoreTemperature_type > p);

          //@}

          /**
           * @name CreatinineProductionRate
           *
           * @brief Accessor and modifier functions for the %CreatinineProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData CreatinineProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CreatinineProductionRate_type > CreatinineProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CreatinineProductionRate_type, char > CreatinineProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CreatinineProductionRate_optional&
          CreatinineProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CreatinineProductionRate_optional&
          CreatinineProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CreatinineProductionRate (const CreatinineProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CreatinineProductionRate (const CreatinineProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CreatinineProductionRate (::std::unique_ptr< CreatinineProductionRate_type > p);

          //@}

          /**
           * @name ExerciseEnergyDemand
           *
           * @brief Accessor and modifier functions for the %ExerciseEnergyDemand
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData ExerciseEnergyDemand_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExerciseEnergyDemand_type > ExerciseEnergyDemand_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExerciseEnergyDemand_type, char > ExerciseEnergyDemand_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExerciseEnergyDemand_optional&
          ExerciseEnergyDemand () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExerciseEnergyDemand_optional&
          ExerciseEnergyDemand ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExerciseEnergyDemand (const ExerciseEnergyDemand_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExerciseEnergyDemand (const ExerciseEnergyDemand_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExerciseEnergyDemand (::std::unique_ptr< ExerciseEnergyDemand_type > p);

          //@}

          /**
           * @name ExerciseMeanArterialPressureDelta
           *
           * @brief Accessor and modifier functions for the %ExerciseMeanArterialPressureDelta
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ExerciseMeanArterialPressureDelta_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExerciseMeanArterialPressureDelta_type > ExerciseMeanArterialPressureDelta_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExerciseMeanArterialPressureDelta_type, char > ExerciseMeanArterialPressureDelta_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExerciseMeanArterialPressureDelta_optional&
          ExerciseMeanArterialPressureDelta () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExerciseMeanArterialPressureDelta_optional&
          ExerciseMeanArterialPressureDelta ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExerciseMeanArterialPressureDelta (::std::unique_ptr< ExerciseMeanArterialPressureDelta_type > p);

          //@}

          /**
           * @name FatigueLevel
           *
           * @brief Accessor and modifier functions for the %FatigueLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FatigueLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FatigueLevel_type > FatigueLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatigueLevel_type, char > FatigueLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FatigueLevel_optional&
          FatigueLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FatigueLevel_optional&
          FatigueLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatigueLevel (const FatigueLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FatigueLevel (const FatigueLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FatigueLevel (::std::unique_ptr< FatigueLevel_type > p);

          //@}

          /**
           * @name LactateProductionRate
           *
           * @brief Accessor and modifier functions for the %LactateProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData LactateProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LactateProductionRate_type > LactateProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LactateProductionRate_type, char > LactateProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LactateProductionRate_optional&
          LactateProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LactateProductionRate_optional&
          LactateProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LactateProductionRate (const LactateProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LactateProductionRate (const LactateProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LactateProductionRate (::std::unique_ptr< LactateProductionRate_type > p);

          //@}

          /**
           * @name SkinTemperature
           *
           * @brief Accessor and modifier functions for the %SkinTemperature
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTemperatureData SkinTemperature_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SkinTemperature_type > SkinTemperature_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SkinTemperature_type, char > SkinTemperature_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SkinTemperature_optional&
          SkinTemperature () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SkinTemperature_optional&
          SkinTemperature ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SkinTemperature (const SkinTemperature_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SkinTemperature (const SkinTemperature_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SkinTemperature (::std::unique_ptr< SkinTemperature_type > p);

          //@}

          /**
           * @name SweatRate
           *
           * @brief Accessor and modifier functions for the %SweatRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerTimeData SweatRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SweatRate_type > SweatRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SweatRate_type, char > SweatRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SweatRate_optional&
          SweatRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SweatRate_optional&
          SweatRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SweatRate (const SweatRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SweatRate (const SweatRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SweatRate (::std::unique_ptr< SweatRate_type > p);

          //@}

          /**
           * @name TotalMetabolicRate
           *
           * @brief Accessor and modifier functions for the %TotalMetabolicRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData TotalMetabolicRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalMetabolicRate_type > TotalMetabolicRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalMetabolicRate_type, char > TotalMetabolicRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalMetabolicRate_optional&
          TotalMetabolicRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalMetabolicRate_optional&
          TotalMetabolicRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalMetabolicRate (const TotalMetabolicRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalMetabolicRate (const TotalMetabolicRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalMetabolicRate (::std::unique_ptr< TotalMetabolicRate_type > p);

          //@}

          /**
           * @name TotalWorkRateLevel
           *
           * @brief Accessor and modifier functions for the %TotalWorkRateLevel
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData TotalWorkRateLevel_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalWorkRateLevel_type > TotalWorkRateLevel_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalWorkRateLevel_type, char > TotalWorkRateLevel_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalWorkRateLevel_optional&
          TotalWorkRateLevel () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalWorkRateLevel_optional&
          TotalWorkRateLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalWorkRateLevel (const TotalWorkRateLevel_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalWorkRateLevel (const TotalWorkRateLevel_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalWorkRateLevel (::std::unique_ptr< TotalWorkRateLevel_type > p);

          //@}

          /**
           * @name SodiumLostToSweat
           *
           * @brief Accessor and modifier functions for the %SodiumLostToSweat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData SodiumLostToSweat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SodiumLostToSweat_type > SodiumLostToSweat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SodiumLostToSweat_type, char > SodiumLostToSweat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SodiumLostToSweat_optional&
          SodiumLostToSweat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SodiumLostToSweat_optional&
          SodiumLostToSweat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SodiumLostToSweat (const SodiumLostToSweat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SodiumLostToSweat (const SodiumLostToSweat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SodiumLostToSweat (::std::unique_ptr< SodiumLostToSweat_type > p);

          //@}

          /**
           * @name PotassiumLostToSweat
           *
           * @brief Accessor and modifier functions for the %PotassiumLostToSweat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData PotassiumLostToSweat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PotassiumLostToSweat_type > PotassiumLostToSweat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PotassiumLostToSweat_type, char > PotassiumLostToSweat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PotassiumLostToSweat_optional&
          PotassiumLostToSweat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PotassiumLostToSweat_optional&
          PotassiumLostToSweat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PotassiumLostToSweat (const PotassiumLostToSweat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PotassiumLostToSweat (const PotassiumLostToSweat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PotassiumLostToSweat (::std::unique_ptr< PotassiumLostToSweat_type > p);

          //@}

          /**
           * @name ChlorideLostToSweat
           *
           * @brief Accessor and modifier functions for the %ChlorideLostToSweat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData ChlorideLostToSweat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ChlorideLostToSweat_type > ChlorideLostToSweat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ChlorideLostToSweat_type, char > ChlorideLostToSweat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ChlorideLostToSweat_optional&
          ChlorideLostToSweat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ChlorideLostToSweat_optional&
          ChlorideLostToSweat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ChlorideLostToSweat (const ChlorideLostToSweat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ChlorideLostToSweat (const ChlorideLostToSweat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ChlorideLostToSweat (::std::unique_ptr< ChlorideLostToSweat_type > p);

          //@}

          /**
           * @name EnergyDeficit
           *
           * @brief Accessor and modifier functions for the %EnergyDeficit
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPowerData EnergyDeficit_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EnergyDeficit_type > EnergyDeficit_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnergyDeficit_type, char > EnergyDeficit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EnergyDeficit_optional&
          EnergyDeficit () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EnergyDeficit_optional&
          EnergyDeficit ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnergyDeficit (const EnergyDeficit_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EnergyDeficit (const EnergyDeficit_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EnergyDeficit (::std::unique_ptr< EnergyDeficit_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          EnergySystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          EnergySystemData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnergySystemData (const EnergySystemData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual EnergySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnergySystemData&
          operator= (const EnergySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~EnergySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          AchievedExerciseLevel_optional AchievedExerciseLevel_;
          CoreTemperature_optional CoreTemperature_;
          CreatinineProductionRate_optional CreatinineProductionRate_;
          ExerciseEnergyDemand_optional ExerciseEnergyDemand_;
          ExerciseMeanArterialPressureDelta_optional ExerciseMeanArterialPressureDelta_;
          FatigueLevel_optional FatigueLevel_;
          LactateProductionRate_optional LactateProductionRate_;
          SkinTemperature_optional SkinTemperature_;
          SweatRate_optional SweatRate_;
          TotalMetabolicRate_optional TotalMetabolicRate_;
          TotalWorkRateLevel_optional TotalWorkRateLevel_;
          SodiumLostToSweat_optional SodiumLostToSweat_;
          PotassiumLostToSweat_optional PotassiumLostToSweat_;
          ChlorideLostToSweat_optional ChlorideLostToSweat_;
          EnergyDeficit_optional EnergyDeficit_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %DrugTransitStateData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API DrugTransitStateData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name LumenSolidMasses
           *
           * @brief Accessor and modifier functions for the %LumenSolidMasses
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData LumenSolidMasses_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< LumenSolidMasses_type > LumenSolidMasses_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef LumenSolidMasses_sequence::iterator LumenSolidMasses_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef LumenSolidMasses_sequence::const_iterator LumenSolidMasses_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LumenSolidMasses_type, char > LumenSolidMasses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const LumenSolidMasses_sequence&
          LumenSolidMasses () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          LumenSolidMasses_sequence&
          LumenSolidMasses ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          LumenSolidMasses (const LumenSolidMasses_sequence& s);

          //@}

          /**
           * @name LumenDissolvedMasses
           *
           * @brief Accessor and modifier functions for the %LumenDissolvedMasses
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData LumenDissolvedMasses_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< LumenDissolvedMasses_type > LumenDissolvedMasses_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef LumenDissolvedMasses_sequence::iterator LumenDissolvedMasses_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef LumenDissolvedMasses_sequence::const_iterator LumenDissolvedMasses_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LumenDissolvedMasses_type, char > LumenDissolvedMasses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const LumenDissolvedMasses_sequence&
          LumenDissolvedMasses () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          LumenDissolvedMasses_sequence&
          LumenDissolvedMasses ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          LumenDissolvedMasses (const LumenDissolvedMasses_sequence& s);

          //@}

          /**
           * @name EnterocyteMasses
           *
           * @brief Accessor and modifier functions for the %EnterocyteMasses
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData EnterocyteMasses_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< EnterocyteMasses_type > EnterocyteMasses_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef EnterocyteMasses_sequence::iterator EnterocyteMasses_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef EnterocyteMasses_sequence::const_iterator EnterocyteMasses_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnterocyteMasses_type, char > EnterocyteMasses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const EnterocyteMasses_sequence&
          EnterocyteMasses () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          EnterocyteMasses_sequence&
          EnterocyteMasses ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          EnterocyteMasses (const EnterocyteMasses_sequence& s);

          //@}

          /**
           * @name MassMetabolized
           *
           * @brief Accessor and modifier functions for the %MassMetabolized
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MassMetabolized_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MassMetabolized_type, char > MassMetabolized_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MassMetabolized_type&
          MassMetabolized () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MassMetabolized_type&
          MassMetabolized ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MassMetabolized (const MassMetabolized_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MassMetabolized (::std::unique_ptr< MassMetabolized_type > p);

          //@}

          /**
           * @name MassExcreted
           *
           * @brief Accessor and modifier functions for the %MassExcreted
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MassExcreted_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MassExcreted_type, char > MassExcreted_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MassExcreted_type&
          MassExcreted () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MassExcreted_type&
          MassExcreted ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MassExcreted (const MassExcreted_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MassExcreted (::std::unique_ptr< MassExcreted_type > p);

          //@}

          /**
           * @name Substance
           *
           * @brief Accessor and modifier functions for the %Substance
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Substance_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Substance_type, char > Substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Substance_type&
          Substance () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Substance_type&
          Substance ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Substance (const Substance_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Substance (::std::unique_ptr< Substance_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          DrugTransitStateData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          DrugTransitStateData (const MassMetabolized_type&,
                                const MassExcreted_type&,
                                const Substance_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          DrugTransitStateData (::std::unique_ptr< MassMetabolized_type >,
                                ::std::unique_ptr< MassExcreted_type >,
                                const Substance_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DrugTransitStateData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugTransitStateData (const DrugTransitStateData& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual DrugTransitStateData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DrugTransitStateData&
          operator= (const DrugTransitStateData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~DrugTransitStateData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          LumenSolidMasses_sequence LumenSolidMasses_;
          LumenDissolvedMasses_sequence LumenDissolvedMasses_;
          EnterocyteMasses_sequence EnterocyteMasses_;
          ::xsd::cxx::tree::one< MassMetabolized_type > MassMetabolized_;
          ::xsd::cxx::tree::one< MassExcreted_type > MassExcreted_;
          ::xsd::cxx::tree::one< Substance_type > Substance_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %GastrointestinalSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API GastrointestinalSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name ChymeAbsorptionRate
           *
           * @brief Accessor and modifier functions for the %ChymeAbsorptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData ChymeAbsorptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ChymeAbsorptionRate_type > ChymeAbsorptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ChymeAbsorptionRate_type, char > ChymeAbsorptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ChymeAbsorptionRate_optional&
          ChymeAbsorptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ChymeAbsorptionRate_optional&
          ChymeAbsorptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ChymeAbsorptionRate (const ChymeAbsorptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ChymeAbsorptionRate (const ChymeAbsorptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ChymeAbsorptionRate (::std::unique_ptr< ChymeAbsorptionRate_type > p);

          //@}

          /**
           * @name StomachContents
           *
           * @brief Accessor and modifier functions for the %StomachContents
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::NutritionData StomachContents_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StomachContents_type > StomachContents_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StomachContents_type, char > StomachContents_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StomachContents_optional&
          StomachContents () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StomachContents_optional&
          StomachContents ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StomachContents (const StomachContents_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StomachContents (const StomachContents_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StomachContents (::std::unique_ptr< StomachContents_type > p);

          //@}

          /**
           * @name DrugTransitStates
           *
           * @brief Accessor and modifier functions for the %DrugTransitStates
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::DrugTransitStateData DrugTransitStates_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< DrugTransitStates_type > DrugTransitStates_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef DrugTransitStates_sequence::iterator DrugTransitStates_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef DrugTransitStates_sequence::const_iterator DrugTransitStates_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DrugTransitStates_type, char > DrugTransitStates_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const DrugTransitStates_sequence&
          DrugTransitStates () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          DrugTransitStates_sequence&
          DrugTransitStates ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          DrugTransitStates (const DrugTransitStates_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          GastrointestinalSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GastrointestinalSystemData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GastrointestinalSystemData (const GastrointestinalSystemData& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual GastrointestinalSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GastrointestinalSystemData&
          operator= (const GastrointestinalSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~GastrointestinalSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ChymeAbsorptionRate_optional ChymeAbsorptionRate_;
          StomachContents_optional StomachContents_;
          DrugTransitStates_sequence DrugTransitStates_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %HepaticSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API HepaticSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name KetoneProductionRate
           *
           * @brief Accessor and modifier functions for the %KetoneProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerTimeData KetoneProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< KetoneProductionRate_type > KetoneProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< KetoneProductionRate_type, char > KetoneProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const KetoneProductionRate_optional&
          KetoneProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          KetoneProductionRate_optional&
          KetoneProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          KetoneProductionRate (const KetoneProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          KetoneProductionRate (const KetoneProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          KetoneProductionRate (::std::unique_ptr< KetoneProductionRate_type > p);

          //@}

          /**
           * @name HepaticGluconeogenesisRate
           *
           * @brief Accessor and modifier functions for the %HepaticGluconeogenesisRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerTimeData HepaticGluconeogenesisRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HepaticGluconeogenesisRate_type > HepaticGluconeogenesisRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HepaticGluconeogenesisRate_type, char > HepaticGluconeogenesisRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HepaticGluconeogenesisRate_optional&
          HepaticGluconeogenesisRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HepaticGluconeogenesisRate_optional&
          HepaticGluconeogenesisRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HepaticGluconeogenesisRate (const HepaticGluconeogenesisRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HepaticGluconeogenesisRate (const HepaticGluconeogenesisRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HepaticGluconeogenesisRate (::std::unique_ptr< HepaticGluconeogenesisRate_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          HepaticSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          HepaticSystemData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          HepaticSystemData (const HepaticSystemData& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual HepaticSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          HepaticSystemData&
          operator= (const HepaticSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~HepaticSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          KetoneProductionRate_optional KetoneProductionRate_;
          HepaticGluconeogenesisRate_optional HepaticGluconeogenesisRate_;

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %enumSleepState
         * schema type.
         */
        class BIOGEARS_CDM_API enumSleepState: public ::xml_schema::string
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum value
          {
            Awake,
            Asleep
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          enumSleepState ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          enumSleepState (value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          enumSleepState (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          enumSleepState (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          enumSleepState (const ::xml_schema::string& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumSleepState (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumSleepState (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          enumSleepState (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          enumSleepState (const enumSleepState& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual enumSleepState*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          enumSleepState&
          operator= (value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator value () const
          {
            return _xsd_enumSleepState_convert ();
          }

          //@cond

          protected:
          value
          _xsd_enumSleepState_convert () const;

          public:
          static const char* const _xsd_enumSleepState_literals_[2];
          static const value _xsd_enumSleepState_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %NervousSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API NervousSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name HeartRateScale
           *
           * @brief Accessor and modifier functions for the %HeartRateScale
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData HeartRateScale_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartRateScale_type > HeartRateScale_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartRateScale_type, char > HeartRateScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartRateScale_optional&
          HeartRateScale () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartRateScale_optional&
          HeartRateScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartRateScale (const HeartRateScale_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartRateScale (const HeartRateScale_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartRateScale (::std::unique_ptr< HeartRateScale_type > p);

          //@}

          /**
           * @name HeartElastanceScale
           *
           * @brief Accessor and modifier functions for the %HeartElastanceScale
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData HeartElastanceScale_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HeartElastanceScale_type > HeartElastanceScale_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartElastanceScale_type, char > HeartElastanceScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HeartElastanceScale_optional&
          HeartElastanceScale () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HeartElastanceScale_optional&
          HeartElastanceScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartElastanceScale (const HeartElastanceScale_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HeartElastanceScale (const HeartElastanceScale_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HeartElastanceScale (::std::unique_ptr< HeartElastanceScale_type > p);

          //@}

          /**
           * @name ResistanceScaleExtrasplanchnic
           *
           * @brief Accessor and modifier functions for the %ResistanceScaleExtrasplanchnic
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResistanceScaleExtrasplanchnic_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResistanceScaleExtrasplanchnic_type > ResistanceScaleExtrasplanchnic_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceScaleExtrasplanchnic_type, char > ResistanceScaleExtrasplanchnic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResistanceScaleExtrasplanchnic_optional&
          ResistanceScaleExtrasplanchnic () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResistanceScaleExtrasplanchnic_optional&
          ResistanceScaleExtrasplanchnic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceScaleExtrasplanchnic (const ResistanceScaleExtrasplanchnic_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResistanceScaleExtrasplanchnic (const ResistanceScaleExtrasplanchnic_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResistanceScaleExtrasplanchnic (::std::unique_ptr< ResistanceScaleExtrasplanchnic_type > p);

          //@}

          /**
           * @name ResistanceScaleMuscle
           *
           * @brief Accessor and modifier functions for the %ResistanceScaleMuscle
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResistanceScaleMuscle_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResistanceScaleMuscle_type > ResistanceScaleMuscle_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceScaleMuscle_type, char > ResistanceScaleMuscle_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResistanceScaleMuscle_optional&
          ResistanceScaleMuscle () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResistanceScaleMuscle_optional&
          ResistanceScaleMuscle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceScaleMuscle (const ResistanceScaleMuscle_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResistanceScaleMuscle (const ResistanceScaleMuscle_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResistanceScaleMuscle (::std::unique_ptr< ResistanceScaleMuscle_type > p);

          //@}

          /**
           * @name ResistanceScaleMyocardium
           *
           * @brief Accessor and modifier functions for the %ResistanceScaleMyocardium
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResistanceScaleMyocardium_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResistanceScaleMyocardium_type > ResistanceScaleMyocardium_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceScaleMyocardium_type, char > ResistanceScaleMyocardium_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResistanceScaleMyocardium_optional&
          ResistanceScaleMyocardium () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResistanceScaleMyocardium_optional&
          ResistanceScaleMyocardium ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceScaleMyocardium (const ResistanceScaleMyocardium_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResistanceScaleMyocardium (const ResistanceScaleMyocardium_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResistanceScaleMyocardium (::std::unique_ptr< ResistanceScaleMyocardium_type > p);

          //@}

          /**
           * @name ResistanceScaleSplanchnic
           *
           * @brief Accessor and modifier functions for the %ResistanceScaleSplanchnic
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ResistanceScaleSplanchnic_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ResistanceScaleSplanchnic_type > ResistanceScaleSplanchnic_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResistanceScaleSplanchnic_type, char > ResistanceScaleSplanchnic_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ResistanceScaleSplanchnic_optional&
          ResistanceScaleSplanchnic () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ResistanceScaleSplanchnic_optional&
          ResistanceScaleSplanchnic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ResistanceScaleSplanchnic (const ResistanceScaleSplanchnic_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ResistanceScaleSplanchnic (const ResistanceScaleSplanchnic_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ResistanceScaleSplanchnic (::std::unique_ptr< ResistanceScaleSplanchnic_type > p);

          //@}

          /**
           * @name ComplianceScale
           *
           * @brief Accessor and modifier functions for the %ComplianceScale
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData ComplianceScale_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ComplianceScale_type > ComplianceScale_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ComplianceScale_type, char > ComplianceScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ComplianceScale_optional&
          ComplianceScale () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ComplianceScale_optional&
          ComplianceScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ComplianceScale (const ComplianceScale_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ComplianceScale (const ComplianceScale_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ComplianceScale (::std::unique_ptr< ComplianceScale_type > p);

          //@}

          /**
           * @name LeftEyePupillaryResponse
           *
           * @brief Accessor and modifier functions for the %LeftEyePupillaryResponse
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PupillaryResponseData LeftEyePupillaryResponse_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftEyePupillaryResponse_type > LeftEyePupillaryResponse_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftEyePupillaryResponse_type, char > LeftEyePupillaryResponse_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftEyePupillaryResponse_optional&
          LeftEyePupillaryResponse () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftEyePupillaryResponse_optional&
          LeftEyePupillaryResponse ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftEyePupillaryResponse (const LeftEyePupillaryResponse_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftEyePupillaryResponse (const LeftEyePupillaryResponse_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftEyePupillaryResponse (::std::unique_ptr< LeftEyePupillaryResponse_type > p);

          //@}

          /**
           * @name PainVisualAnalogueScale
           *
           * @brief Accessor and modifier functions for the %PainVisualAnalogueScale
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData PainVisualAnalogueScale_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PainVisualAnalogueScale_type > PainVisualAnalogueScale_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PainVisualAnalogueScale_type, char > PainVisualAnalogueScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PainVisualAnalogueScale_optional&
          PainVisualAnalogueScale () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PainVisualAnalogueScale_optional&
          PainVisualAnalogueScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PainVisualAnalogueScale (const PainVisualAnalogueScale_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PainVisualAnalogueScale (const PainVisualAnalogueScale_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PainVisualAnalogueScale (::std::unique_ptr< PainVisualAnalogueScale_type > p);

          //@}

          /**
           * @name RichmondAgitationSedationScale
           *
           * @brief Accessor and modifier functions for the %RichmondAgitationSedationScale
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RichmondAgitationSedationScale_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RichmondAgitationSedationScale_type > RichmondAgitationSedationScale_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RichmondAgitationSedationScale_type, char > RichmondAgitationSedationScale_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RichmondAgitationSedationScale_optional&
          RichmondAgitationSedationScale () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RichmondAgitationSedationScale_optional&
          RichmondAgitationSedationScale ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RichmondAgitationSedationScale (const RichmondAgitationSedationScale_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RichmondAgitationSedationScale (const RichmondAgitationSedationScale_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RichmondAgitationSedationScale (::std::unique_ptr< RichmondAgitationSedationScale_type > p);

          //@}

          /**
           * @name RightEyePupillaryResponse
           *
           * @brief Accessor and modifier functions for the %RightEyePupillaryResponse
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PupillaryResponseData RightEyePupillaryResponse_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightEyePupillaryResponse_type > RightEyePupillaryResponse_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightEyePupillaryResponse_type, char > RightEyePupillaryResponse_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightEyePupillaryResponse_optional&
          RightEyePupillaryResponse () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightEyePupillaryResponse_optional&
          RightEyePupillaryResponse ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightEyePupillaryResponse (const RightEyePupillaryResponse_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightEyePupillaryResponse (const RightEyePupillaryResponse_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightEyePupillaryResponse (::std::unique_ptr< RightEyePupillaryResponse_type > p);

          //@}

          /**
           * @name SleepTime
           *
           * @brief Accessor and modifier functions for the %SleepTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData SleepTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SleepTime_type > SleepTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SleepTime_type, char > SleepTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SleepTime_optional&
          SleepTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SleepTime_optional&
          SleepTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SleepTime (const SleepTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SleepTime (const SleepTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SleepTime (::std::unique_ptr< SleepTime_type > p);

          //@}

          /**
           * @name SleepState
           *
           * @brief Accessor and modifier functions for the %SleepState
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSleepState SleepState_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SleepState_type > SleepState_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SleepState_type, char > SleepState_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SleepState_optional&
          SleepState () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SleepState_optional&
          SleepState ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SleepState (const SleepState_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SleepState (const SleepState_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SleepState (::std::unique_ptr< SleepState_type > p);

          //@}

          /**
           * @name WakeTime
           *
           * @brief Accessor and modifier functions for the %WakeTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData WakeTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WakeTime_type > WakeTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WakeTime_type, char > WakeTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WakeTime_optional&
          WakeTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WakeTime_optional&
          WakeTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WakeTime (const WakeTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WakeTime (const WakeTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WakeTime (::std::unique_ptr< WakeTime_type > p);

          //@}

          /**
           * @name BiologicalDebt
           *
           * @brief Accessor and modifier functions for the %BiologicalDebt
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData BiologicalDebt_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BiologicalDebt_type > BiologicalDebt_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BiologicalDebt_type, char > BiologicalDebt_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BiologicalDebt_optional&
          BiologicalDebt () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BiologicalDebt_optional&
          BiologicalDebt ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BiologicalDebt (const BiologicalDebt_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BiologicalDebt (const BiologicalDebt_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BiologicalDebt (::std::unique_ptr< BiologicalDebt_type > p);

          //@}

          /**
           * @name ReactionTime
           *
           * @brief Accessor and modifier functions for the %ReactionTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ReactionTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ReactionTime_type > ReactionTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReactionTime_type, char > ReactionTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ReactionTime_optional&
          ReactionTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ReactionTime_optional&
          ReactionTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ReactionTime (const ReactionTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ReactionTime (const ReactionTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ReactionTime (::std::unique_ptr< ReactionTime_type > p);

          //@}

          /**
           * @name AttentionLapses
           *
           * @brief Accessor and modifier functions for the %AttentionLapses
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData AttentionLapses_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AttentionLapses_type > AttentionLapses_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AttentionLapses_type, char > AttentionLapses_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AttentionLapses_optional&
          AttentionLapses () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AttentionLapses_optional&
          AttentionLapses ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AttentionLapses (const AttentionLapses_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AttentionLapses (const AttentionLapses_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AttentionLapses (::std::unique_ptr< AttentionLapses_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          NervousSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NervousSystemData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NervousSystemData (const NervousSystemData& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual NervousSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NervousSystemData&
          operator= (const NervousSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~NervousSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          HeartRateScale_optional HeartRateScale_;
          HeartElastanceScale_optional HeartElastanceScale_;
          ResistanceScaleExtrasplanchnic_optional ResistanceScaleExtrasplanchnic_;
          ResistanceScaleMuscle_optional ResistanceScaleMuscle_;
          ResistanceScaleMyocardium_optional ResistanceScaleMyocardium_;
          ResistanceScaleSplanchnic_optional ResistanceScaleSplanchnic_;
          ComplianceScale_optional ComplianceScale_;
          LeftEyePupillaryResponse_optional LeftEyePupillaryResponse_;
          PainVisualAnalogueScale_optional PainVisualAnalogueScale_;
          RichmondAgitationSedationScale_optional RichmondAgitationSedationScale_;
          RightEyePupillaryResponse_optional RightEyePupillaryResponse_;
          SleepTime_optional SleepTime_;
          SleepState_optional SleepState_;
          WakeTime_optional WakeTime_;
          BiologicalDebt_optional BiologicalDebt_;
          ReactionTime_optional ReactionTime_;
          AttentionLapses_optional AttentionLapses_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RenalSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API RenalSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name FiltrationFraction
           *
           * @brief Accessor and modifier functions for the %FiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData FiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FiltrationFraction_type > FiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FiltrationFraction_type, char > FiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FiltrationFraction_optional&
          FiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FiltrationFraction_optional&
          FiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FiltrationFraction (const FiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FiltrationFraction (const FiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FiltrationFraction (::std::unique_ptr< FiltrationFraction_type > p);

          //@}

          /**
           * @name GlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %GlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData GlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GlomerularFiltrationRate_type > GlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlomerularFiltrationRate_type, char > GlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GlomerularFiltrationRate_optional&
          GlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GlomerularFiltrationRate_optional&
          GlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          GlomerularFiltrationRate (const GlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          GlomerularFiltrationRate (const GlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          GlomerularFiltrationRate (::std::unique_ptr< GlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name LeftAfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %LeftAfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData LeftAfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftAfferentArterioleResistance_type > LeftAfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftAfferentArterioleResistance_type, char > LeftAfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftAfferentArterioleResistance_optional&
          LeftAfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftAfferentArterioleResistance_optional&
          LeftAfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftAfferentArterioleResistance (::std::unique_ptr< LeftAfferentArterioleResistance_type > p);

          //@}

          /**
           * @name LeftBowmansCapsulesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftBowmansCapsulesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftBowmansCapsulesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftBowmansCapsulesHydrostaticPressure_type > LeftBowmansCapsulesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftBowmansCapsulesHydrostaticPressure_type, char > LeftBowmansCapsulesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftBowmansCapsulesHydrostaticPressure_optional&
          LeftBowmansCapsulesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftBowmansCapsulesHydrostaticPressure_optional&
          LeftBowmansCapsulesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftBowmansCapsulesHydrostaticPressure (::std::unique_ptr< LeftBowmansCapsulesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftBowmansCapsulesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftBowmansCapsulesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftBowmansCapsulesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftBowmansCapsulesOsmoticPressure_type > LeftBowmansCapsulesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftBowmansCapsulesOsmoticPressure_type, char > LeftBowmansCapsulesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftBowmansCapsulesOsmoticPressure_optional&
          LeftBowmansCapsulesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftBowmansCapsulesOsmoticPressure_optional&
          LeftBowmansCapsulesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftBowmansCapsulesOsmoticPressure (::std::unique_ptr< LeftBowmansCapsulesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftEfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %LeftEfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData LeftEfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftEfferentArterioleResistance_type > LeftEfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftEfferentArterioleResistance_type, char > LeftEfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftEfferentArterioleResistance_optional&
          LeftEfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftEfferentArterioleResistance_optional&
          LeftEfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftEfferentArterioleResistance (::std::unique_ptr< LeftEfferentArterioleResistance_type > p);

          //@}

          /**
           * @name LeftGlomerularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularCapillariesHydrostaticPressure_type > LeftGlomerularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularCapillariesHydrostaticPressure_type, char > LeftGlomerularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularCapillariesHydrostaticPressure_optional&
          LeftGlomerularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularCapillariesHydrostaticPressure_optional&
          LeftGlomerularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< LeftGlomerularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftGlomerularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftGlomerularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularCapillariesOsmoticPressure_type > LeftGlomerularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularCapillariesOsmoticPressure_type, char > LeftGlomerularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularCapillariesOsmoticPressure_optional&
          LeftGlomerularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularCapillariesOsmoticPressure_optional&
          LeftGlomerularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularCapillariesOsmoticPressure (::std::unique_ptr< LeftGlomerularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationCoefficient_type > LeftGlomerularFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationCoefficient_type, char > LeftGlomerularFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationCoefficient_optional&
          LeftGlomerularFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationCoefficient_optional&
          LeftGlomerularFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationCoefficient (::std::unique_ptr< LeftGlomerularFiltrationCoefficient_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftGlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationRate_type > LeftGlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationRate_type, char > LeftGlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationRate_optional&
          LeftGlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationRate_optional&
          LeftGlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationRate (::std::unique_ptr< LeftGlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name LeftGlomerularFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftGlomerularFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFiltrationSurfaceArea_type > LeftGlomerularFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFiltrationSurfaceArea_type, char > LeftGlomerularFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFiltrationSurfaceArea_optional&
          LeftGlomerularFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFiltrationSurfaceArea_optional&
          LeftGlomerularFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFiltrationSurfaceArea (::std::unique_ptr< LeftGlomerularFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name LeftGlomerularFluidPermeability
           *
           * @brief Accessor and modifier functions for the %LeftGlomerularFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftGlomerularFluidPermeability_type > LeftGlomerularFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftGlomerularFluidPermeability_type, char > LeftGlomerularFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftGlomerularFluidPermeability_optional&
          LeftGlomerularFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftGlomerularFluidPermeability_optional&
          LeftGlomerularFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftGlomerularFluidPermeability (::std::unique_ptr< LeftGlomerularFluidPermeability_type > p);

          //@}

          /**
           * @name LeftFiltrationFraction
           *
           * @brief Accessor and modifier functions for the %LeftFiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData LeftFiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftFiltrationFraction_type > LeftFiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftFiltrationFraction_type, char > LeftFiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftFiltrationFraction_optional&
          LeftFiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftFiltrationFraction_optional&
          LeftFiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftFiltrationFraction (const LeftFiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftFiltrationFraction (const LeftFiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftFiltrationFraction (::std::unique_ptr< LeftFiltrationFraction_type > p);

          //@}

          /**
           * @name LeftNetFiltrationPressure
           *
           * @brief Accessor and modifier functions for the %LeftNetFiltrationPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftNetFiltrationPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftNetFiltrationPressure_type > LeftNetFiltrationPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftNetFiltrationPressure_type, char > LeftNetFiltrationPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftNetFiltrationPressure_optional&
          LeftNetFiltrationPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftNetFiltrationPressure_optional&
          LeftNetFiltrationPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftNetFiltrationPressure (const LeftNetFiltrationPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftNetFiltrationPressure (const LeftNetFiltrationPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftNetFiltrationPressure (::std::unique_ptr< LeftNetFiltrationPressure_type > p);

          //@}

          /**
           * @name LeftNetReabsorptionPressure
           *
           * @brief Accessor and modifier functions for the %LeftNetReabsorptionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftNetReabsorptionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftNetReabsorptionPressure_type > LeftNetReabsorptionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftNetReabsorptionPressure_type, char > LeftNetReabsorptionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftNetReabsorptionPressure_optional&
          LeftNetReabsorptionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftNetReabsorptionPressure_optional&
          LeftNetReabsorptionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftNetReabsorptionPressure (::std::unique_ptr< LeftNetReabsorptionPressure_type > p);

          //@}

          /**
           * @name LeftPeritubularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftPeritubularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftPeritubularCapillariesHydrostaticPressure_type > LeftPeritubularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftPeritubularCapillariesHydrostaticPressure_type, char > LeftPeritubularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftPeritubularCapillariesHydrostaticPressure_optional&
          LeftPeritubularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftPeritubularCapillariesHydrostaticPressure_optional&
          LeftPeritubularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< LeftPeritubularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftPeritubularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftPeritubularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftPeritubularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftPeritubularCapillariesOsmoticPressure_type > LeftPeritubularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftPeritubularCapillariesOsmoticPressure_type, char > LeftPeritubularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftPeritubularCapillariesOsmoticPressure_optional&
          LeftPeritubularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftPeritubularCapillariesOsmoticPressure_optional&
          LeftPeritubularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftPeritubularCapillariesOsmoticPressure (::std::unique_ptr< LeftPeritubularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftReabsorptionFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %LeftReabsorptionFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftReabsorptionFiltrationCoefficient_type > LeftReabsorptionFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftReabsorptionFiltrationCoefficient_type, char > LeftReabsorptionFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftReabsorptionFiltrationCoefficient_optional&
          LeftReabsorptionFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftReabsorptionFiltrationCoefficient_optional&
          LeftReabsorptionFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftReabsorptionFiltrationCoefficient (::std::unique_ptr< LeftReabsorptionFiltrationCoefficient_type > p);

          //@}

          /**
           * @name LeftReabsorptionRate
           *
           * @brief Accessor and modifier functions for the %LeftReabsorptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData LeftReabsorptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftReabsorptionRate_type > LeftReabsorptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftReabsorptionRate_type, char > LeftReabsorptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftReabsorptionRate_optional&
          LeftReabsorptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftReabsorptionRate_optional&
          LeftReabsorptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftReabsorptionRate (const LeftReabsorptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftReabsorptionRate (const LeftReabsorptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftReabsorptionRate (::std::unique_ptr< LeftReabsorptionRate_type > p);

          //@}

          /**
           * @name LeftTubularOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %LeftTubularOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftTubularOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularOsmoticPressure_type > LeftTubularOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularOsmoticPressure_type, char > LeftTubularOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularOsmoticPressure_optional&
          LeftTubularOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularOsmoticPressure_optional&
          LeftTubularOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularOsmoticPressure (::std::unique_ptr< LeftTubularOsmoticPressure_type > p);

          //@}

          /**
           * @name LeftTubularHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %LeftTubularHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData LeftTubularHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularHydrostaticPressure_type > LeftTubularHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularHydrostaticPressure_type, char > LeftTubularHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularHydrostaticPressure_optional&
          LeftTubularHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularHydrostaticPressure_optional&
          LeftTubularHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularHydrostaticPressure (::std::unique_ptr< LeftTubularHydrostaticPressure_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFiltrationSurfaceArea_type > LeftTubularReabsorptionFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFiltrationSurfaceArea_type, char > LeftTubularReabsorptionFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFiltrationSurfaceArea_optional&
          LeftTubularReabsorptionFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFiltrationSurfaceArea_optional&
          LeftTubularReabsorptionFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< LeftTubularReabsorptionFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name LeftTubularReabsorptionFluidPermeability
           *
           * @brief Accessor and modifier functions for the %LeftTubularReabsorptionFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LeftTubularReabsorptionFluidPermeability_type > LeftTubularReabsorptionFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftTubularReabsorptionFluidPermeability_type, char > LeftTubularReabsorptionFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LeftTubularReabsorptionFluidPermeability_optional&
          LeftTubularReabsorptionFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LeftTubularReabsorptionFluidPermeability_optional&
          LeftTubularReabsorptionFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LeftTubularReabsorptionFluidPermeability (::std::unique_ptr< LeftTubularReabsorptionFluidPermeability_type > p);

          //@}

          /**
           * @name RenalBloodFlow
           *
           * @brief Accessor and modifier functions for the %RenalBloodFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalBloodFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalBloodFlow_type > RenalBloodFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalBloodFlow_type, char > RenalBloodFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalBloodFlow_optional&
          RenalBloodFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalBloodFlow_optional&
          RenalBloodFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalBloodFlow (const RenalBloodFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalBloodFlow (const RenalBloodFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalBloodFlow (::std::unique_ptr< RenalBloodFlow_type > p);

          //@}

          /**
           * @name RenalPlasmaFlow
           *
           * @brief Accessor and modifier functions for the %RenalPlasmaFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RenalPlasmaFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalPlasmaFlow_type > RenalPlasmaFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalPlasmaFlow_type, char > RenalPlasmaFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalPlasmaFlow_optional&
          RenalPlasmaFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalPlasmaFlow_optional&
          RenalPlasmaFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalPlasmaFlow (const RenalPlasmaFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalPlasmaFlow (const RenalPlasmaFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalPlasmaFlow (::std::unique_ptr< RenalPlasmaFlow_type > p);

          //@}

          /**
           * @name RenalVascularResistance
           *
           * @brief Accessor and modifier functions for the %RenalVascularResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RenalVascularResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RenalVascularResistance_type > RenalVascularResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RenalVascularResistance_type, char > RenalVascularResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RenalVascularResistance_optional&
          RenalVascularResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RenalVascularResistance_optional&
          RenalVascularResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RenalVascularResistance (const RenalVascularResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RenalVascularResistance (const RenalVascularResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RenalVascularResistance (::std::unique_ptr< RenalVascularResistance_type > p);

          //@}

          /**
           * @name RightAfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %RightAfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RightAfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightAfferentArterioleResistance_type > RightAfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightAfferentArterioleResistance_type, char > RightAfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightAfferentArterioleResistance_optional&
          RightAfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightAfferentArterioleResistance_optional&
          RightAfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightAfferentArterioleResistance (const RightAfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightAfferentArterioleResistance (const RightAfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightAfferentArterioleResistance (::std::unique_ptr< RightAfferentArterioleResistance_type > p);

          //@}

          /**
           * @name RightBowmansCapsulesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightBowmansCapsulesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightBowmansCapsulesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightBowmansCapsulesHydrostaticPressure_type > RightBowmansCapsulesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightBowmansCapsulesHydrostaticPressure_type, char > RightBowmansCapsulesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightBowmansCapsulesHydrostaticPressure_optional&
          RightBowmansCapsulesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightBowmansCapsulesHydrostaticPressure_optional&
          RightBowmansCapsulesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightBowmansCapsulesHydrostaticPressure (::std::unique_ptr< RightBowmansCapsulesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightBowmansCapsulesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightBowmansCapsulesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightBowmansCapsulesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightBowmansCapsulesOsmoticPressure_type > RightBowmansCapsulesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightBowmansCapsulesOsmoticPressure_type, char > RightBowmansCapsulesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightBowmansCapsulesOsmoticPressure_optional&
          RightBowmansCapsulesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightBowmansCapsulesOsmoticPressure_optional&
          RightBowmansCapsulesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightBowmansCapsulesOsmoticPressure (::std::unique_ptr< RightBowmansCapsulesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightEfferentArterioleResistance
           *
           * @brief Accessor and modifier functions for the %RightEfferentArterioleResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData RightEfferentArterioleResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightEfferentArterioleResistance_type > RightEfferentArterioleResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightEfferentArterioleResistance_type, char > RightEfferentArterioleResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightEfferentArterioleResistance_optional&
          RightEfferentArterioleResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightEfferentArterioleResistance_optional&
          RightEfferentArterioleResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightEfferentArterioleResistance (const RightEfferentArterioleResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightEfferentArterioleResistance (const RightEfferentArterioleResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightEfferentArterioleResistance (::std::unique_ptr< RightEfferentArterioleResistance_type > p);

          //@}

          /**
           * @name RightGlomerularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightGlomerularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightGlomerularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularCapillariesHydrostaticPressure_type > RightGlomerularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularCapillariesHydrostaticPressure_type, char > RightGlomerularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularCapillariesHydrostaticPressure_optional&
          RightGlomerularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularCapillariesHydrostaticPressure_optional&
          RightGlomerularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< RightGlomerularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightGlomerularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightGlomerularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightGlomerularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularCapillariesOsmoticPressure_type > RightGlomerularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularCapillariesOsmoticPressure_type, char > RightGlomerularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularCapillariesOsmoticPressure_optional&
          RightGlomerularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularCapillariesOsmoticPressure_optional&
          RightGlomerularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularCapillariesOsmoticPressure (::std::unique_ptr< RightGlomerularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationCoefficient_type > RightGlomerularFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationCoefficient_type, char > RightGlomerularFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationCoefficient_optional&
          RightGlomerularFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationCoefficient_optional&
          RightGlomerularFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationCoefficient (::std::unique_ptr< RightGlomerularFiltrationCoefficient_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationRate
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightGlomerularFiltrationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationRate_type > RightGlomerularFiltrationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationRate_type, char > RightGlomerularFiltrationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationRate_optional&
          RightGlomerularFiltrationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationRate_optional&
          RightGlomerularFiltrationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationRate (::std::unique_ptr< RightGlomerularFiltrationRate_type > p);

          //@}

          /**
           * @name RightGlomerularFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightGlomerularFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFiltrationSurfaceArea_type > RightGlomerularFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFiltrationSurfaceArea_type, char > RightGlomerularFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFiltrationSurfaceArea_optional&
          RightGlomerularFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFiltrationSurfaceArea_optional&
          RightGlomerularFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFiltrationSurfaceArea (::std::unique_ptr< RightGlomerularFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name RightGlomerularFluidPermeability
           *
           * @brief Accessor and modifier functions for the %RightGlomerularFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightGlomerularFluidPermeability_type > RightGlomerularFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightGlomerularFluidPermeability_type, char > RightGlomerularFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightGlomerularFluidPermeability_optional&
          RightGlomerularFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightGlomerularFluidPermeability_optional&
          RightGlomerularFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightGlomerularFluidPermeability (::std::unique_ptr< RightGlomerularFluidPermeability_type > p);

          //@}

          /**
           * @name RightFiltrationFraction
           *
           * @brief Accessor and modifier functions for the %RightFiltrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData RightFiltrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightFiltrationFraction_type > RightFiltrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightFiltrationFraction_type, char > RightFiltrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightFiltrationFraction_optional&
          RightFiltrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightFiltrationFraction_optional&
          RightFiltrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightFiltrationFraction (const RightFiltrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightFiltrationFraction (const RightFiltrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightFiltrationFraction (::std::unique_ptr< RightFiltrationFraction_type > p);

          //@}

          /**
           * @name RightNetFiltrationPressure
           *
           * @brief Accessor and modifier functions for the %RightNetFiltrationPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightNetFiltrationPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightNetFiltrationPressure_type > RightNetFiltrationPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightNetFiltrationPressure_type, char > RightNetFiltrationPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightNetFiltrationPressure_optional&
          RightNetFiltrationPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightNetFiltrationPressure_optional&
          RightNetFiltrationPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightNetFiltrationPressure (const RightNetFiltrationPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightNetFiltrationPressure (const RightNetFiltrationPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightNetFiltrationPressure (::std::unique_ptr< RightNetFiltrationPressure_type > p);

          //@}

          /**
           * @name RightNetReabsorptionPressure
           *
           * @brief Accessor and modifier functions for the %RightNetReabsorptionPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightNetReabsorptionPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightNetReabsorptionPressure_type > RightNetReabsorptionPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightNetReabsorptionPressure_type, char > RightNetReabsorptionPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightNetReabsorptionPressure_optional&
          RightNetReabsorptionPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightNetReabsorptionPressure_optional&
          RightNetReabsorptionPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightNetReabsorptionPressure (const RightNetReabsorptionPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightNetReabsorptionPressure (const RightNetReabsorptionPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightNetReabsorptionPressure (::std::unique_ptr< RightNetReabsorptionPressure_type > p);

          //@}

          /**
           * @name RightPeritubularCapillariesHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightPeritubularCapillariesHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightPeritubularCapillariesHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightPeritubularCapillariesHydrostaticPressure_type > RightPeritubularCapillariesHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightPeritubularCapillariesHydrostaticPressure_type, char > RightPeritubularCapillariesHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightPeritubularCapillariesHydrostaticPressure_optional&
          RightPeritubularCapillariesHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightPeritubularCapillariesHydrostaticPressure_optional&
          RightPeritubularCapillariesHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< RightPeritubularCapillariesHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightPeritubularCapillariesOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightPeritubularCapillariesOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightPeritubularCapillariesOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightPeritubularCapillariesOsmoticPressure_type > RightPeritubularCapillariesOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightPeritubularCapillariesOsmoticPressure_type, char > RightPeritubularCapillariesOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightPeritubularCapillariesOsmoticPressure_optional&
          RightPeritubularCapillariesOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightPeritubularCapillariesOsmoticPressure_optional&
          RightPeritubularCapillariesOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightPeritubularCapillariesOsmoticPressure (::std::unique_ptr< RightPeritubularCapillariesOsmoticPressure_type > p);

          //@}

          /**
           * @name RightReabsorptionFiltrationCoefficient
           *
           * @brief Accessor and modifier functions for the %RightReabsorptionFiltrationCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightReabsorptionFiltrationCoefficient_type > RightReabsorptionFiltrationCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightReabsorptionFiltrationCoefficient_type, char > RightReabsorptionFiltrationCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightReabsorptionFiltrationCoefficient_optional&
          RightReabsorptionFiltrationCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightReabsorptionFiltrationCoefficient_optional&
          RightReabsorptionFiltrationCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightReabsorptionFiltrationCoefficient (::std::unique_ptr< RightReabsorptionFiltrationCoefficient_type > p);

          //@}

          /**
           * @name RightReabsorptionRate
           *
           * @brief Accessor and modifier functions for the %RightReabsorptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData RightReabsorptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightReabsorptionRate_type > RightReabsorptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightReabsorptionRate_type, char > RightReabsorptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightReabsorptionRate_optional&
          RightReabsorptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightReabsorptionRate_optional&
          RightReabsorptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightReabsorptionRate (const RightReabsorptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightReabsorptionRate (const RightReabsorptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightReabsorptionRate (::std::unique_ptr< RightReabsorptionRate_type > p);

          //@}

          /**
           * @name RightTubularOsmoticPressure
           *
           * @brief Accessor and modifier functions for the %RightTubularOsmoticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightTubularOsmoticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularOsmoticPressure_type > RightTubularOsmoticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularOsmoticPressure_type, char > RightTubularOsmoticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularOsmoticPressure_optional&
          RightTubularOsmoticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularOsmoticPressure_optional&
          RightTubularOsmoticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularOsmoticPressure (const RightTubularOsmoticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularOsmoticPressure (const RightTubularOsmoticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularOsmoticPressure (::std::unique_ptr< RightTubularOsmoticPressure_type > p);

          //@}

          /**
           * @name RightTubularHydrostaticPressure
           *
           * @brief Accessor and modifier functions for the %RightTubularHydrostaticPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RightTubularHydrostaticPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularHydrostaticPressure_type > RightTubularHydrostaticPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularHydrostaticPressure_type, char > RightTubularHydrostaticPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularHydrostaticPressure_optional&
          RightTubularHydrostaticPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularHydrostaticPressure_optional&
          RightTubularHydrostaticPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularHydrostaticPressure (::std::unique_ptr< RightTubularHydrostaticPressure_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFiltrationSurfaceArea
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFiltrationSurfaceArea
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFiltrationSurfaceArea_type > RightTubularReabsorptionFiltrationSurfaceArea_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFiltrationSurfaceArea_type, char > RightTubularReabsorptionFiltrationSurfaceArea_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFiltrationSurfaceArea_optional&
          RightTubularReabsorptionFiltrationSurfaceArea () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFiltrationSurfaceArea_optional&
          RightTubularReabsorptionFiltrationSurfaceArea ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< RightTubularReabsorptionFiltrationSurfaceArea_type > p);

          //@}

          /**
           * @name RightTubularReabsorptionFluidPermeability
           *
           * @brief Accessor and modifier functions for the %RightTubularReabsorptionFluidPermeability
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RightTubularReabsorptionFluidPermeability_type > RightTubularReabsorptionFluidPermeability_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightTubularReabsorptionFluidPermeability_type, char > RightTubularReabsorptionFluidPermeability_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RightTubularReabsorptionFluidPermeability_optional&
          RightTubularReabsorptionFluidPermeability () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RightTubularReabsorptionFluidPermeability_optional&
          RightTubularReabsorptionFluidPermeability ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RightTubularReabsorptionFluidPermeability (::std::unique_ptr< RightTubularReabsorptionFluidPermeability_type > p);

          //@}

          /**
           * @name UrinationRate
           *
           * @brief Accessor and modifier functions for the %UrinationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrinationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrinationRate_type > UrinationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrinationRate_type, char > UrinationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrinationRate_optional&
          UrinationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrinationRate_optional&
          UrinationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrinationRate (const UrinationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrinationRate (const UrinationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrinationRate (::std::unique_ptr< UrinationRate_type > p);

          //@}

          /**
           * @name UrineOsmolality
           *
           * @brief Accessor and modifier functions for the %UrineOsmolality
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarOsmolalityData UrineOsmolality_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineOsmolality_type > UrineOsmolality_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolality_type, char > UrineOsmolality_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineOsmolality_optional&
          UrineOsmolality () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineOsmolality_optional&
          UrineOsmolality ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolality (const UrineOsmolality_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineOsmolality (const UrineOsmolality_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineOsmolality (::std::unique_ptr< UrineOsmolality_type > p);

          //@}

          /**
           * @name UrineOsmolarity
           *
           * @brief Accessor and modifier functions for the %UrineOsmolarity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarOsmolarityData UrineOsmolarity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineOsmolarity_type > UrineOsmolarity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineOsmolarity_type, char > UrineOsmolarity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineOsmolarity_optional&
          UrineOsmolarity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineOsmolarity_optional&
          UrineOsmolarity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineOsmolarity (const UrineOsmolarity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineOsmolarity (const UrineOsmolarity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineOsmolarity (::std::unique_ptr< UrineOsmolarity_type > p);

          //@}

          /**
           * @name UrineProductionRate
           *
           * @brief Accessor and modifier functions for the %UrineProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData UrineProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineProductionRate_type > UrineProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineProductionRate_type, char > UrineProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineProductionRate_optional&
          UrineProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineProductionRate_optional&
          UrineProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineProductionRate (const UrineProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineProductionRate (const UrineProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineProductionRate (::std::unique_ptr< UrineProductionRate_type > p);

          //@}

          /**
           * @name MeanUrineOutput
           *
           * @brief Accessor and modifier functions for the %MeanUrineOutput
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData MeanUrineOutput_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanUrineOutput_type > MeanUrineOutput_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanUrineOutput_type, char > MeanUrineOutput_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanUrineOutput_optional&
          MeanUrineOutput () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanUrineOutput_optional&
          MeanUrineOutput ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanUrineOutput (const MeanUrineOutput_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanUrineOutput (const MeanUrineOutput_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanUrineOutput (::std::unique_ptr< MeanUrineOutput_type > p);

          //@}

          /**
           * @name UrineSpecificGravity
           *
           * @brief Accessor and modifier functions for the %UrineSpecificGravity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData UrineSpecificGravity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineSpecificGravity_type > UrineSpecificGravity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineSpecificGravity_type, char > UrineSpecificGravity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineSpecificGravity_optional&
          UrineSpecificGravity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineSpecificGravity_optional&
          UrineSpecificGravity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineSpecificGravity (const UrineSpecificGravity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineSpecificGravity (const UrineSpecificGravity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineSpecificGravity (::std::unique_ptr< UrineSpecificGravity_type > p);

          //@}

          /**
           * @name UrineVolume
           *
           * @brief Accessor and modifier functions for the %UrineVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData UrineVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineVolume_type > UrineVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineVolume_type, char > UrineVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineVolume_optional&
          UrineVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineVolume_optional&
          UrineVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineVolume (const UrineVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineVolume (const UrineVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineVolume (::std::unique_ptr< UrineVolume_type > p);

          //@}

          /**
           * @name UrineUreaNitrogenConcentration
           *
           * @brief Accessor and modifier functions for the %UrineUreaNitrogenConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData UrineUreaNitrogenConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< UrineUreaNitrogenConcentration_type > UrineUreaNitrogenConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UrineUreaNitrogenConcentration_type, char > UrineUreaNitrogenConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const UrineUreaNitrogenConcentration_optional&
          UrineUreaNitrogenConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          UrineUreaNitrogenConcentration_optional&
          UrineUreaNitrogenConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          UrineUreaNitrogenConcentration (::std::unique_ptr< UrineUreaNitrogenConcentration_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RenalSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RenalSystemData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalSystemData (const RenalSystemData& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RenalSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RenalSystemData&
          operator= (const RenalSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RenalSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          FiltrationFraction_optional FiltrationFraction_;
          GlomerularFiltrationRate_optional GlomerularFiltrationRate_;
          LeftAfferentArterioleResistance_optional LeftAfferentArterioleResistance_;
          LeftBowmansCapsulesHydrostaticPressure_optional LeftBowmansCapsulesHydrostaticPressure_;
          LeftBowmansCapsulesOsmoticPressure_optional LeftBowmansCapsulesOsmoticPressure_;
          LeftEfferentArterioleResistance_optional LeftEfferentArterioleResistance_;
          LeftGlomerularCapillariesHydrostaticPressure_optional LeftGlomerularCapillariesHydrostaticPressure_;
          LeftGlomerularCapillariesOsmoticPressure_optional LeftGlomerularCapillariesOsmoticPressure_;
          LeftGlomerularFiltrationCoefficient_optional LeftGlomerularFiltrationCoefficient_;
          LeftGlomerularFiltrationRate_optional LeftGlomerularFiltrationRate_;
          LeftGlomerularFiltrationSurfaceArea_optional LeftGlomerularFiltrationSurfaceArea_;
          LeftGlomerularFluidPermeability_optional LeftGlomerularFluidPermeability_;
          LeftFiltrationFraction_optional LeftFiltrationFraction_;
          LeftNetFiltrationPressure_optional LeftNetFiltrationPressure_;
          LeftNetReabsorptionPressure_optional LeftNetReabsorptionPressure_;
          LeftPeritubularCapillariesHydrostaticPressure_optional LeftPeritubularCapillariesHydrostaticPressure_;
          LeftPeritubularCapillariesOsmoticPressure_optional LeftPeritubularCapillariesOsmoticPressure_;
          LeftReabsorptionFiltrationCoefficient_optional LeftReabsorptionFiltrationCoefficient_;
          LeftReabsorptionRate_optional LeftReabsorptionRate_;
          LeftTubularOsmoticPressure_optional LeftTubularOsmoticPressure_;
          LeftTubularHydrostaticPressure_optional LeftTubularHydrostaticPressure_;
          LeftTubularReabsorptionFiltrationSurfaceArea_optional LeftTubularReabsorptionFiltrationSurfaceArea_;
          LeftTubularReabsorptionFluidPermeability_optional LeftTubularReabsorptionFluidPermeability_;
          RenalBloodFlow_optional RenalBloodFlow_;
          RenalPlasmaFlow_optional RenalPlasmaFlow_;
          RenalVascularResistance_optional RenalVascularResistance_;
          RightAfferentArterioleResistance_optional RightAfferentArterioleResistance_;
          RightBowmansCapsulesHydrostaticPressure_optional RightBowmansCapsulesHydrostaticPressure_;
          RightBowmansCapsulesOsmoticPressure_optional RightBowmansCapsulesOsmoticPressure_;
          RightEfferentArterioleResistance_optional RightEfferentArterioleResistance_;
          RightGlomerularCapillariesHydrostaticPressure_optional RightGlomerularCapillariesHydrostaticPressure_;
          RightGlomerularCapillariesOsmoticPressure_optional RightGlomerularCapillariesOsmoticPressure_;
          RightGlomerularFiltrationCoefficient_optional RightGlomerularFiltrationCoefficient_;
          RightGlomerularFiltrationRate_optional RightGlomerularFiltrationRate_;
          RightGlomerularFiltrationSurfaceArea_optional RightGlomerularFiltrationSurfaceArea_;
          RightGlomerularFluidPermeability_optional RightGlomerularFluidPermeability_;
          RightFiltrationFraction_optional RightFiltrationFraction_;
          RightNetFiltrationPressure_optional RightNetFiltrationPressure_;
          RightNetReabsorptionPressure_optional RightNetReabsorptionPressure_;
          RightPeritubularCapillariesHydrostaticPressure_optional RightPeritubularCapillariesHydrostaticPressure_;
          RightPeritubularCapillariesOsmoticPressure_optional RightPeritubularCapillariesOsmoticPressure_;
          RightReabsorptionFiltrationCoefficient_optional RightReabsorptionFiltrationCoefficient_;
          RightReabsorptionRate_optional RightReabsorptionRate_;
          RightTubularOsmoticPressure_optional RightTubularOsmoticPressure_;
          RightTubularHydrostaticPressure_optional RightTubularHydrostaticPressure_;
          RightTubularReabsorptionFiltrationSurfaceArea_optional RightTubularReabsorptionFiltrationSurfaceArea_;
          RightTubularReabsorptionFluidPermeability_optional RightTubularReabsorptionFluidPermeability_;
          UrinationRate_optional UrinationRate_;
          UrineOsmolality_optional UrineOsmolality_;
          UrineOsmolarity_optional UrineOsmolarity_;
          UrineProductionRate_optional UrineProductionRate_;
          MeanUrineOutput_optional MeanUrineOutput_;
          UrineSpecificGravity_optional UrineSpecificGravity_;
          UrineVolume_optional UrineVolume_;
          UrineUreaNitrogenConcentration_optional UrineUreaNitrogenConcentration_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RespiratorySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API RespiratorySystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name AlveolarArterialGradient
           *
           * @brief Accessor and modifier functions for the %AlveolarArterialGradient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData AlveolarArterialGradient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AlveolarArterialGradient_type > AlveolarArterialGradient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlveolarArterialGradient_type, char > AlveolarArterialGradient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AlveolarArterialGradient_optional&
          AlveolarArterialGradient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AlveolarArterialGradient_optional&
          AlveolarArterialGradient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AlveolarArterialGradient (const AlveolarArterialGradient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AlveolarArterialGradient (const AlveolarArterialGradient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AlveolarArterialGradient (::std::unique_ptr< AlveolarArterialGradient_type > p);

          //@}

          /**
           * @name CarricoIndex
           *
           * @brief Accessor and modifier functions for the %CarricoIndex
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData CarricoIndex_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarricoIndex_type > CarricoIndex_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarricoIndex_type, char > CarricoIndex_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarricoIndex_optional&
          CarricoIndex () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarricoIndex_optional&
          CarricoIndex ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarricoIndex (const CarricoIndex_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarricoIndex (const CarricoIndex_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarricoIndex (::std::unique_ptr< CarricoIndex_type > p);

          //@}

          /**
           * @name EndTidalCarbonDioxideFraction
           *
           * @brief Accessor and modifier functions for the %EndTidalCarbonDioxideFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData EndTidalCarbonDioxideFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EndTidalCarbonDioxideFraction_type > EndTidalCarbonDioxideFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EndTidalCarbonDioxideFraction_type, char > EndTidalCarbonDioxideFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EndTidalCarbonDioxideFraction_optional&
          EndTidalCarbonDioxideFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EndTidalCarbonDioxideFraction_optional&
          EndTidalCarbonDioxideFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EndTidalCarbonDioxideFraction (::std::unique_ptr< EndTidalCarbonDioxideFraction_type > p);

          //@}

          /**
           * @name EndTidalCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %EndTidalCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData EndTidalCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EndTidalCarbonDioxidePressure_type > EndTidalCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EndTidalCarbonDioxidePressure_type, char > EndTidalCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EndTidalCarbonDioxidePressure_optional&
          EndTidalCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EndTidalCarbonDioxidePressure_optional&
          EndTidalCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EndTidalCarbonDioxidePressure (::std::unique_ptr< EndTidalCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name ExpiratoryFlow
           *
           * @brief Accessor and modifier functions for the %ExpiratoryFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData ExpiratoryFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExpiratoryFlow_type > ExpiratoryFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryFlow_type, char > ExpiratoryFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExpiratoryFlow_optional&
          ExpiratoryFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExpiratoryFlow_optional&
          ExpiratoryFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryFlow (const ExpiratoryFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExpiratoryFlow (const ExpiratoryFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExpiratoryFlow (::std::unique_ptr< ExpiratoryFlow_type > p);

          //@}

          /**
           * @name InspiratoryExpiratoryRatio
           *
           * @brief Accessor and modifier functions for the %InspiratoryExpiratoryRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData InspiratoryExpiratoryRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryExpiratoryRatio_type > InspiratoryExpiratoryRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryExpiratoryRatio_type, char > InspiratoryExpiratoryRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryExpiratoryRatio_optional&
          InspiratoryExpiratoryRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryExpiratoryRatio_optional&
          InspiratoryExpiratoryRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryExpiratoryRatio (::std::unique_ptr< InspiratoryExpiratoryRatio_type > p);

          //@}

          /**
           * @name InspiratoryFlow
           *
           * @brief Accessor and modifier functions for the %InspiratoryFlow
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData InspiratoryFlow_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< InspiratoryFlow_type > InspiratoryFlow_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryFlow_type, char > InspiratoryFlow_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const InspiratoryFlow_optional&
          InspiratoryFlow () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          InspiratoryFlow_optional&
          InspiratoryFlow ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryFlow (const InspiratoryFlow_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          InspiratoryFlow (const InspiratoryFlow_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          InspiratoryFlow (::std::unique_ptr< InspiratoryFlow_type > p);

          //@}

          /**
           * @name MeanPleuralPressure
           *
           * @brief Accessor and modifier functions for the %MeanPleuralPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData MeanPleuralPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MeanPleuralPressure_type > MeanPleuralPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MeanPleuralPressure_type, char > MeanPleuralPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MeanPleuralPressure_optional&
          MeanPleuralPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MeanPleuralPressure_optional&
          MeanPleuralPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MeanPleuralPressure (const MeanPleuralPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MeanPleuralPressure (const MeanPleuralPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MeanPleuralPressure (::std::unique_ptr< MeanPleuralPressure_type > p);

          //@}

          /**
           * @name PulmonaryCompliance
           *
           * @brief Accessor and modifier functions for the %PulmonaryCompliance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowComplianceData PulmonaryCompliance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryCompliance_type > PulmonaryCompliance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryCompliance_type, char > PulmonaryCompliance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryCompliance_optional&
          PulmonaryCompliance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryCompliance_optional&
          PulmonaryCompliance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryCompliance (const PulmonaryCompliance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryCompliance (const PulmonaryCompliance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryCompliance (::std::unique_ptr< PulmonaryCompliance_type > p);

          //@}

          /**
           * @name PulmonaryResistance
           *
           * @brief Accessor and modifier functions for the %PulmonaryResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFlowResistanceData PulmonaryResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryResistance_type > PulmonaryResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryResistance_type, char > PulmonaryResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryResistance_optional&
          PulmonaryResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryResistance_optional&
          PulmonaryResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryResistance (const PulmonaryResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryResistance (const PulmonaryResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryResistance (::std::unique_ptr< PulmonaryResistance_type > p);

          //@}

          /**
           * @name RespirationDriverFrequency
           *
           * @brief Accessor and modifier functions for the %RespirationDriverFrequency
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData RespirationDriverFrequency_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationDriverFrequency_type > RespirationDriverFrequency_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationDriverFrequency_type, char > RespirationDriverFrequency_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationDriverFrequency_optional&
          RespirationDriverFrequency () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationDriverFrequency_optional&
          RespirationDriverFrequency ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationDriverFrequency (const RespirationDriverFrequency_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationDriverFrequency (const RespirationDriverFrequency_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationDriverFrequency (::std::unique_ptr< RespirationDriverFrequency_type > p);

          //@}

          /**
           * @name RespirationDriverPressure
           *
           * @brief Accessor and modifier functions for the %RespirationDriverPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RespirationDriverPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationDriverPressure_type > RespirationDriverPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationDriverPressure_type, char > RespirationDriverPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationDriverPressure_optional&
          RespirationDriverPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationDriverPressure_optional&
          RespirationDriverPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationDriverPressure (const RespirationDriverPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationDriverPressure (const RespirationDriverPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationDriverPressure (::std::unique_ptr< RespirationDriverPressure_type > p);

          //@}

          /**
           * @name RespirationMusclePressure
           *
           * @brief Accessor and modifier functions for the %RespirationMusclePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData RespirationMusclePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationMusclePressure_type > RespirationMusclePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationMusclePressure_type, char > RespirationMusclePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationMusclePressure_optional&
          RespirationMusclePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationMusclePressure_optional&
          RespirationMusclePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationMusclePressure (const RespirationMusclePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationMusclePressure (const RespirationMusclePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationMusclePressure (::std::unique_ptr< RespirationMusclePressure_type > p);

          //@}

          /**
           * @name RespirationRate
           *
           * @brief Accessor and modifier functions for the %RespirationRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFrequencyData RespirationRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespirationRate_type > RespirationRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespirationRate_type, char > RespirationRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespirationRate_optional&
          RespirationRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespirationRate_optional&
          RespirationRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespirationRate (const RespirationRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespirationRate (const RespirationRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespirationRate (::std::unique_ptr< RespirationRate_type > p);

          //@}

          /**
           * @name SpecificVentilation
           *
           * @brief Accessor and modifier functions for the %SpecificVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData SpecificVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SpecificVentilation_type > SpecificVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SpecificVentilation_type, char > SpecificVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SpecificVentilation_optional&
          SpecificVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SpecificVentilation_optional&
          SpecificVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SpecificVentilation (const SpecificVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SpecificVentilation (const SpecificVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SpecificVentilation (::std::unique_ptr< SpecificVentilation_type > p);

          //@}

          /**
           * @name TidalVolume
           *
           * @brief Accessor and modifier functions for the %TidalVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TidalVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TidalVolume_type > TidalVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TidalVolume_type, char > TidalVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TidalVolume_optional&
          TidalVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TidalVolume_optional&
          TidalVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TidalVolume (const TidalVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TidalVolume (const TidalVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TidalVolume (::std::unique_ptr< TidalVolume_type > p);

          //@}

          /**
           * @name TargetPulmonaryVentilation
           *
           * @brief Accessor and modifier functions for the %TargetPulmonaryVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TargetPulmonaryVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TargetPulmonaryVentilation_type > TargetPulmonaryVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TargetPulmonaryVentilation_type, char > TargetPulmonaryVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TargetPulmonaryVentilation_optional&
          TargetPulmonaryVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TargetPulmonaryVentilation_optional&
          TargetPulmonaryVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TargetPulmonaryVentilation (const TargetPulmonaryVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TargetPulmonaryVentilation (const TargetPulmonaryVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TargetPulmonaryVentilation (::std::unique_ptr< TargetPulmonaryVentilation_type > p);

          //@}

          /**
           * @name TotalAlveolarVentilation
           *
           * @brief Accessor and modifier functions for the %TotalAlveolarVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TotalAlveolarVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalAlveolarVentilation_type > TotalAlveolarVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalAlveolarVentilation_type, char > TotalAlveolarVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalAlveolarVentilation_optional&
          TotalAlveolarVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalAlveolarVentilation_optional&
          TotalAlveolarVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalAlveolarVentilation (const TotalAlveolarVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalAlveolarVentilation (const TotalAlveolarVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalAlveolarVentilation (::std::unique_ptr< TotalAlveolarVentilation_type > p);

          //@}

          /**
           * @name TotalDeadSpaceVentilation
           *
           * @brief Accessor and modifier functions for the %TotalDeadSpaceVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TotalDeadSpaceVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalDeadSpaceVentilation_type > TotalDeadSpaceVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalDeadSpaceVentilation_type, char > TotalDeadSpaceVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalDeadSpaceVentilation_optional&
          TotalDeadSpaceVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalDeadSpaceVentilation_optional&
          TotalDeadSpaceVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalDeadSpaceVentilation (::std::unique_ptr< TotalDeadSpaceVentilation_type > p);

          //@}

          /**
           * @name TotalLungVolume
           *
           * @brief Accessor and modifier functions for the %TotalLungVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TotalLungVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalLungVolume_type > TotalLungVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalLungVolume_type, char > TotalLungVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalLungVolume_optional&
          TotalLungVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalLungVolume_optional&
          TotalLungVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalLungVolume (const TotalLungVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalLungVolume (const TotalLungVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalLungVolume (::std::unique_ptr< TotalLungVolume_type > p);

          //@}

          /**
           * @name TotalPulmonaryVentilation
           *
           * @brief Accessor and modifier functions for the %TotalPulmonaryVentilation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData TotalPulmonaryVentilation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalPulmonaryVentilation_type > TotalPulmonaryVentilation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalPulmonaryVentilation_type, char > TotalPulmonaryVentilation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalPulmonaryVentilation_optional&
          TotalPulmonaryVentilation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalPulmonaryVentilation_optional&
          TotalPulmonaryVentilation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalPulmonaryVentilation (const TotalPulmonaryVentilation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalPulmonaryVentilation (const TotalPulmonaryVentilation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalPulmonaryVentilation (::std::unique_ptr< TotalPulmonaryVentilation_type > p);

          //@}

          /**
           * @name TranspulmonaryPressure
           *
           * @brief Accessor and modifier functions for the %TranspulmonaryPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData TranspulmonaryPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TranspulmonaryPressure_type > TranspulmonaryPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TranspulmonaryPressure_type, char > TranspulmonaryPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TranspulmonaryPressure_optional&
          TranspulmonaryPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TranspulmonaryPressure_optional&
          TranspulmonaryPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TranspulmonaryPressure (const TranspulmonaryPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TranspulmonaryPressure (const TranspulmonaryPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TranspulmonaryPressure (::std::unique_ptr< TranspulmonaryPressure_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RespiratorySystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RespiratorySystemData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RespiratorySystemData (const RespiratorySystemData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RespiratorySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RespiratorySystemData&
          operator= (const RespiratorySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RespiratorySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          AlveolarArterialGradient_optional AlveolarArterialGradient_;
          CarricoIndex_optional CarricoIndex_;
          EndTidalCarbonDioxideFraction_optional EndTidalCarbonDioxideFraction_;
          EndTidalCarbonDioxidePressure_optional EndTidalCarbonDioxidePressure_;
          ExpiratoryFlow_optional ExpiratoryFlow_;
          InspiratoryExpiratoryRatio_optional InspiratoryExpiratoryRatio_;
          InspiratoryFlow_optional InspiratoryFlow_;
          MeanPleuralPressure_optional MeanPleuralPressure_;
          PulmonaryCompliance_optional PulmonaryCompliance_;
          PulmonaryResistance_optional PulmonaryResistance_;
          RespirationDriverFrequency_optional RespirationDriverFrequency_;
          RespirationDriverPressure_optional RespirationDriverPressure_;
          RespirationMusclePressure_optional RespirationMusclePressure_;
          RespirationRate_optional RespirationRate_;
          SpecificVentilation_optional SpecificVentilation_;
          TidalVolume_optional TidalVolume_;
          TargetPulmonaryVentilation_optional TargetPulmonaryVentilation_;
          TotalAlveolarVentilation_optional TotalAlveolarVentilation_;
          TotalDeadSpaceVentilation_optional TotalDeadSpaceVentilation_;
          TotalLungVolume_optional TotalLungVolume_;
          TotalPulmonaryVentilation_optional TotalPulmonaryVentilation_;
          TranspulmonaryPressure_optional TranspulmonaryPressure_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TissueSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TissueSystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name CarbonDioxideProductionRate
           *
           * @brief Accessor and modifier functions for the %CarbonDioxideProductionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData CarbonDioxideProductionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonDioxideProductionRate_type > CarbonDioxideProductionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonDioxideProductionRate_type, char > CarbonDioxideProductionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonDioxideProductionRate_optional&
          CarbonDioxideProductionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonDioxideProductionRate_optional&
          CarbonDioxideProductionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonDioxideProductionRate (const CarbonDioxideProductionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonDioxideProductionRate (const CarbonDioxideProductionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonDioxideProductionRate (::std::unique_ptr< CarbonDioxideProductionRate_type > p);

          //@}

          /**
           * @name DehydrationFraction
           *
           * @brief Accessor and modifier functions for the %DehydrationFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data DehydrationFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DehydrationFraction_type > DehydrationFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DehydrationFraction_type, char > DehydrationFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DehydrationFraction_optional&
          DehydrationFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DehydrationFraction_optional&
          DehydrationFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DehydrationFraction (const DehydrationFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DehydrationFraction (const DehydrationFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DehydrationFraction (::std::unique_ptr< DehydrationFraction_type > p);

          //@}

          /**
           * @name ExtracellularFluidVolume
           *
           * @brief Accessor and modifier functions for the %ExtracellularFluidVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ExtracellularFluidVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExtracellularFluidVolume_type > ExtracellularFluidVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExtracellularFluidVolume_type, char > ExtracellularFluidVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExtracellularFluidVolume_optional&
          ExtracellularFluidVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExtracellularFluidVolume_optional&
          ExtracellularFluidVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExtracellularFluidVolume (const ExtracellularFluidVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExtracellularFluidVolume (const ExtracellularFluidVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExtracellularFluidVolume (::std::unique_ptr< ExtracellularFluidVolume_type > p);

          //@}

          /**
           * @name ExtravascularFluidVolume
           *
           * @brief Accessor and modifier functions for the %ExtravascularFluidVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData ExtravascularFluidVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ExtravascularFluidVolume_type > ExtravascularFluidVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExtravascularFluidVolume_type, char > ExtravascularFluidVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ExtravascularFluidVolume_optional&
          ExtravascularFluidVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ExtravascularFluidVolume_optional&
          ExtravascularFluidVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExtravascularFluidVolume (const ExtravascularFluidVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ExtravascularFluidVolume (const ExtravascularFluidVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ExtravascularFluidVolume (::std::unique_ptr< ExtravascularFluidVolume_type > p);

          //@}

          /**
           * @name IntracellularFluidPH
           *
           * @brief Accessor and modifier functions for the %IntracellularFluidPH
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData IntracellularFluidPH_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< IntracellularFluidPH_type > IntracellularFluidPH_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IntracellularFluidPH_type, char > IntracellularFluidPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const IntracellularFluidPH_optional&
          IntracellularFluidPH () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          IntracellularFluidPH_optional&
          IntracellularFluidPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IntracellularFluidPH (const IntracellularFluidPH_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          IntracellularFluidPH (const IntracellularFluidPH_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          IntracellularFluidPH (::std::unique_ptr< IntracellularFluidPH_type > p);

          //@}

          /**
           * @name IntracellularFluidVolume
           *
           * @brief Accessor and modifier functions for the %IntracellularFluidVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData IntracellularFluidVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< IntracellularFluidVolume_type > IntracellularFluidVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IntracellularFluidVolume_type, char > IntracellularFluidVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const IntracellularFluidVolume_optional&
          IntracellularFluidVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          IntracellularFluidVolume_optional&
          IntracellularFluidVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IntracellularFluidVolume (const IntracellularFluidVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          IntracellularFluidVolume (const IntracellularFluidVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          IntracellularFluidVolume (::std::unique_ptr< IntracellularFluidVolume_type > p);

          //@}

          /**
           * @name TotalBodyFluidVolume
           *
           * @brief Accessor and modifier functions for the %TotalBodyFluidVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData TotalBodyFluidVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalBodyFluidVolume_type > TotalBodyFluidVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBodyFluidVolume_type, char > TotalBodyFluidVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalBodyFluidVolume_optional&
          TotalBodyFluidVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalBodyFluidVolume_optional&
          TotalBodyFluidVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBodyFluidVolume (const TotalBodyFluidVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalBodyFluidVolume (const TotalBodyFluidVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalBodyFluidVolume (::std::unique_ptr< TotalBodyFluidVolume_type > p);

          //@}

          /**
           * @name OxygenConsumptionRate
           *
           * @brief Accessor and modifier functions for the %OxygenConsumptionRate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData OxygenConsumptionRate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenConsumptionRate_type > OxygenConsumptionRate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenConsumptionRate_type, char > OxygenConsumptionRate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenConsumptionRate_optional&
          OxygenConsumptionRate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenConsumptionRate_optional&
          OxygenConsumptionRate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenConsumptionRate (const OxygenConsumptionRate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenConsumptionRate (const OxygenConsumptionRate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenConsumptionRate (::std::unique_ptr< OxygenConsumptionRate_type > p);

          //@}

          /**
           * @name RespiratoryExchangeRatio
           *
           * @brief Accessor and modifier functions for the %RespiratoryExchangeRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RespiratoryExchangeRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RespiratoryExchangeRatio_type > RespiratoryExchangeRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RespiratoryExchangeRatio_type, char > RespiratoryExchangeRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RespiratoryExchangeRatio_optional&
          RespiratoryExchangeRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RespiratoryExchangeRatio_optional&
          RespiratoryExchangeRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RespiratoryExchangeRatio (const RespiratoryExchangeRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RespiratoryExchangeRatio (const RespiratoryExchangeRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RespiratoryExchangeRatio (::std::unique_ptr< RespiratoryExchangeRatio_type > p);

          //@}

          /**
           * @name LiverInsulinSetPoint
           *
           * @brief Accessor and modifier functions for the %LiverInsulinSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData LiverInsulinSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LiverInsulinSetPoint_type > LiverInsulinSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiverInsulinSetPoint_type, char > LiverInsulinSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LiverInsulinSetPoint_optional&
          LiverInsulinSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LiverInsulinSetPoint_optional&
          LiverInsulinSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LiverInsulinSetPoint (const LiverInsulinSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LiverInsulinSetPoint (const LiverInsulinSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LiverInsulinSetPoint (::std::unique_ptr< LiverInsulinSetPoint_type > p);

          //@}

          /**
           * @name LiverGlucagonSetPoint
           *
           * @brief Accessor and modifier functions for the %LiverGlucagonSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData LiverGlucagonSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LiverGlucagonSetPoint_type > LiverGlucagonSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiverGlucagonSetPoint_type, char > LiverGlucagonSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LiverGlucagonSetPoint_optional&
          LiverGlucagonSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LiverGlucagonSetPoint_optional&
          LiverGlucagonSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LiverGlucagonSetPoint (const LiverGlucagonSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LiverGlucagonSetPoint (const LiverGlucagonSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LiverGlucagonSetPoint (::std::unique_ptr< LiverGlucagonSetPoint_type > p);

          //@}

          /**
           * @name MuscleInsulinSetPoint
           *
           * @brief Accessor and modifier functions for the %MuscleInsulinSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData MuscleInsulinSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MuscleInsulinSetPoint_type > MuscleInsulinSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MuscleInsulinSetPoint_type, char > MuscleInsulinSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MuscleInsulinSetPoint_optional&
          MuscleInsulinSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MuscleInsulinSetPoint_optional&
          MuscleInsulinSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MuscleInsulinSetPoint (const MuscleInsulinSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MuscleInsulinSetPoint (const MuscleInsulinSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MuscleInsulinSetPoint (::std::unique_ptr< MuscleInsulinSetPoint_type > p);

          //@}

          /**
           * @name MuscleGlucagonSetPoint
           *
           * @brief Accessor and modifier functions for the %MuscleGlucagonSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData MuscleGlucagonSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MuscleGlucagonSetPoint_type > MuscleGlucagonSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MuscleGlucagonSetPoint_type, char > MuscleGlucagonSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MuscleGlucagonSetPoint_optional&
          MuscleGlucagonSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MuscleGlucagonSetPoint_optional&
          MuscleGlucagonSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MuscleGlucagonSetPoint (const MuscleGlucagonSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MuscleGlucagonSetPoint (const MuscleGlucagonSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MuscleGlucagonSetPoint (::std::unique_ptr< MuscleGlucagonSetPoint_type > p);

          //@}

          /**
           * @name FatInsulinSetPoint
           *
           * @brief Accessor and modifier functions for the %FatInsulinSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData FatInsulinSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FatInsulinSetPoint_type > FatInsulinSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatInsulinSetPoint_type, char > FatInsulinSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FatInsulinSetPoint_optional&
          FatInsulinSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FatInsulinSetPoint_optional&
          FatInsulinSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatInsulinSetPoint (const FatInsulinSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FatInsulinSetPoint (const FatInsulinSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FatInsulinSetPoint (::std::unique_ptr< FatInsulinSetPoint_type > p);

          //@}

          /**
           * @name FatGlucagonSetPoint
           *
           * @brief Accessor and modifier functions for the %FatGlucagonSetPoint
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData FatGlucagonSetPoint_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FatGlucagonSetPoint_type > FatGlucagonSetPoint_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatGlucagonSetPoint_type, char > FatGlucagonSetPoint_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FatGlucagonSetPoint_optional&
          FatGlucagonSetPoint () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FatGlucagonSetPoint_optional&
          FatGlucagonSetPoint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FatGlucagonSetPoint (const FatGlucagonSetPoint_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FatGlucagonSetPoint (const FatGlucagonSetPoint_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FatGlucagonSetPoint (::std::unique_ptr< FatGlucagonSetPoint_type > p);

          //@}

          /**
           * @name LiverGlycogen
           *
           * @brief Accessor and modifier functions for the %LiverGlycogen
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData LiverGlycogen_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LiverGlycogen_type > LiverGlycogen_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiverGlycogen_type, char > LiverGlycogen_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LiverGlycogen_optional&
          LiverGlycogen () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LiverGlycogen_optional&
          LiverGlycogen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LiverGlycogen (const LiverGlycogen_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          LiverGlycogen (const LiverGlycogen_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          LiverGlycogen (::std::unique_ptr< LiverGlycogen_type > p);

          //@}

          /**
           * @name MuscleGlycogen
           *
           * @brief Accessor and modifier functions for the %MuscleGlycogen
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MuscleGlycogen_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MuscleGlycogen_type > MuscleGlycogen_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MuscleGlycogen_type, char > MuscleGlycogen_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MuscleGlycogen_optional&
          MuscleGlycogen () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MuscleGlycogen_optional&
          MuscleGlycogen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MuscleGlycogen (const MuscleGlycogen_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MuscleGlycogen (const MuscleGlycogen_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MuscleGlycogen (::std::unique_ptr< MuscleGlycogen_type > p);

          //@}

          /**
           * @name StoredProtein
           *
           * @brief Accessor and modifier functions for the %StoredProtein
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData StoredProtein_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StoredProtein_type > StoredProtein_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StoredProtein_type, char > StoredProtein_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StoredProtein_optional&
          StoredProtein () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StoredProtein_optional&
          StoredProtein ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StoredProtein (const StoredProtein_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StoredProtein (const StoredProtein_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StoredProtein (::std::unique_ptr< StoredProtein_type > p);

          //@}

          /**
           * @name StoredFat
           *
           * @brief Accessor and modifier functions for the %StoredFat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData StoredFat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StoredFat_type > StoredFat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StoredFat_type, char > StoredFat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StoredFat_optional&
          StoredFat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StoredFat_optional&
          StoredFat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StoredFat (const StoredFat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StoredFat (const StoredFat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StoredFat (::std::unique_ptr< StoredFat_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TissueSystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TissueSystemData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueSystemData (const TissueSystemData& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TissueSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueSystemData&
          operator= (const TissueSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TissueSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          CarbonDioxideProductionRate_optional CarbonDioxideProductionRate_;
          DehydrationFraction_optional DehydrationFraction_;
          ExtracellularFluidVolume_optional ExtracellularFluidVolume_;
          ExtravascularFluidVolume_optional ExtravascularFluidVolume_;
          IntracellularFluidPH_optional IntracellularFluidPH_;
          IntracellularFluidVolume_optional IntracellularFluidVolume_;
          TotalBodyFluidVolume_optional TotalBodyFluidVolume_;
          OxygenConsumptionRate_optional OxygenConsumptionRate_;
          RespiratoryExchangeRatio_optional RespiratoryExchangeRatio_;
          LiverInsulinSetPoint_optional LiverInsulinSetPoint_;
          LiverGlucagonSetPoint_optional LiverGlucagonSetPoint_;
          MuscleInsulinSetPoint_optional MuscleInsulinSetPoint_;
          MuscleGlucagonSetPoint_optional MuscleGlucagonSetPoint_;
          FatInsulinSetPoint_optional FatInsulinSetPoint_;
          FatGlucagonSetPoint_optional FatGlucagonSetPoint_;
          LiverGlycogen_optional LiverGlycogen_;
          MuscleGlycogen_optional MuscleGlycogen_;
          StoredProtein_optional StoredProtein_;
          StoredFat_optional StoredFat_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PupillaryResponseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumInflammationSource::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumInflammationSource&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const InflammatoryResponseData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BloodChemistrySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumHeartRhythm::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumHeartRhythm&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CardiovascularSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const DrugSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const EndocrineSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const EnergySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const DrugTransitStateData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const GastrointestinalSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const HepaticSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, enumSleepState::value);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const enumSleepState&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const NervousSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const RenalSystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const RespiratorySystemData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TissueSystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        /**
         * @name Parsing functions for the %BloodChemistrySystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %CardiovascularSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %DrugSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %EndocrineSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %EnergySystemData document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %GastrointestinalSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %HepaticSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %NervousSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %RenalSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %RespiratorySystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %TissueSystem document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PupillaryResponseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumInflammationSource&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumInflammationSource&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumInflammationSource&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const InflammatoryResponseData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BloodChemistrySystemData&);

        /**
         * @name Serialization functions for the %BloodChemistrySystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        BloodChemistrySystem (::xercesc::DOMDocument& d,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x,
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        BloodChemistrySystem (const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumHeartRhythm&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumHeartRhythm&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumHeartRhythm&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CardiovascularSystemData&);

        /**
         * @name Serialization functions for the %CardiovascularSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::std::ostream& os,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& ft,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        CardiovascularSystem (::xercesc::DOMDocument& d,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x,
                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        CardiovascularSystem (const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const DrugSystemData&);

        /**
         * @name Serialization functions for the %DrugSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::std::ostream& os,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::xercesc::XMLFormatTarget& ft,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        DrugSystem (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& x,
                    ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        DrugSystem (const ::mil::tatrc::physiology::datamodel::DrugSystemData& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const EndocrineSystemData&);

        /**
         * @name Serialization functions for the %EndocrineSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::std::ostream& os,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::std::ostream& os,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::std::ostream& os,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::xercesc::XMLFormatTarget& ft,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::xercesc::XMLFormatTarget& ft,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::xercesc::XMLFormatTarget& ft,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        EndocrineSystem (::xercesc::DOMDocument& d,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x,
                         ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        EndocrineSystem (const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const EnergySystemData&);

        /**
         * @name Serialization functions for the %EnergySystemData document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        EnergySystemData_ (::xercesc::DOMDocument& d,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& x,
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        EnergySystemData_ (const ::mil::tatrc::physiology::datamodel::EnergySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const DrugTransitStateData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const GastrointestinalSystemData&);

        /**
         * @name Serialization functions for the %GastrointestinalSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::std::ostream& os,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::std::ostream& os,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::std::ostream& os,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& ft,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& ft,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& ft,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        GastrointestinalSystem (::xercesc::DOMDocument& d,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x,
                                ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        GastrointestinalSystem (const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const HepaticSystemData&);

        /**
         * @name Serialization functions for the %HepaticSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        HepaticSystem (::xercesc::DOMDocument& d,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x,
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        HepaticSystem (const ::mil::tatrc::physiology::datamodel::HepaticSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const enumSleepState&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMAttr&, const enumSleepState&);

        BIOGEARS_CDM_API
        void
        operator<< (::xml_schema::list_stream&,
                    const enumSleepState&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const NervousSystemData&);

        /**
         * @name Serialization functions for the %NervousSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::std::ostream& os,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::xercesc::XMLFormatTarget& ft,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        NervousSystem (::xercesc::DOMDocument& d,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& x,
                       ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        NervousSystem (const ::mil::tatrc::physiology::datamodel::NervousSystemData& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const RenalSystemData&);

        /**
         * @name Serialization functions for the %RenalSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::std::ostream& os,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::std::ostream& os,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::std::ostream& os,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::xercesc::XMLFormatTarget& ft,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::xercesc::XMLFormatTarget& ft,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::xercesc::XMLFormatTarget& ft,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        RenalSystem (::xercesc::DOMDocument& d,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& x,
                     ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        RenalSystem (const ::mil::tatrc::physiology::datamodel::RenalSystemData& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const RespiratorySystemData&);

        /**
         * @name Serialization functions for the %RespiratorySystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::std::ostream& os,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::xercesc::XMLFormatTarget& ft,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        RespiratorySystem (::xercesc::DOMDocument& d,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x,
                           ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        RespiratorySystem (const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TissueSystemData&);

        /**
         * @name Serialization functions for the %TissueSystem document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::std::ostream& os,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::std::ostream& os,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::std::ostream& os,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::xercesc::XMLFormatTarget& ft,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::xercesc::XMLFormatTarget& ft,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::xercesc::XMLFormatTarget& ft,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        TissueSystem (::xercesc::DOMDocument& d,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& x,
                      ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        TissueSystem (const ::mil::tatrc::physiology::datamodel::TissueSystemData& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

        //@}
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_PHYSIOLOGY_HXX
