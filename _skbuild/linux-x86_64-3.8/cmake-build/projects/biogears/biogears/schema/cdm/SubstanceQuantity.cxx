// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SubstanceQuantity.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstanceQuantityData
        // 

        const SubstanceQuantityData::Substance_type& SubstanceQuantityData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceQuantityData::Substance_type& SubstanceQuantityData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceQuantityData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceQuantityData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // GasSubstanceQuantityData
        // 

        const GasSubstanceQuantityData::PartialPressure_optional& GasSubstanceQuantityData::
        PartialPressure () const
        {
          return this->PartialPressure_;
        }

        GasSubstanceQuantityData::PartialPressure_optional& GasSubstanceQuantityData::
        PartialPressure ()
        {
          return this->PartialPressure_;
        }

        void GasSubstanceQuantityData::
        PartialPressure (const PartialPressure_type& x)
        {
          this->PartialPressure_.set (x);
        }

        void GasSubstanceQuantityData::
        PartialPressure (const PartialPressure_optional& x)
        {
          this->PartialPressure_ = x;
        }

        void GasSubstanceQuantityData::
        PartialPressure (::std::unique_ptr< PartialPressure_type > x)
        {
          this->PartialPressure_.set (std::move (x));
        }

        const GasSubstanceQuantityData::Volume_optional& GasSubstanceQuantityData::
        Volume () const
        {
          return this->Volume_;
        }

        GasSubstanceQuantityData::Volume_optional& GasSubstanceQuantityData::
        Volume ()
        {
          return this->Volume_;
        }

        void GasSubstanceQuantityData::
        Volume (const Volume_type& x)
        {
          this->Volume_.set (x);
        }

        void GasSubstanceQuantityData::
        Volume (const Volume_optional& x)
        {
          this->Volume_ = x;
        }

        void GasSubstanceQuantityData::
        Volume (::std::unique_ptr< Volume_type > x)
        {
          this->Volume_.set (std::move (x));
        }

        const GasSubstanceQuantityData::VolumeFraction_optional& GasSubstanceQuantityData::
        VolumeFraction () const
        {
          return this->VolumeFraction_;
        }

        GasSubstanceQuantityData::VolumeFraction_optional& GasSubstanceQuantityData::
        VolumeFraction ()
        {
          return this->VolumeFraction_;
        }

        void GasSubstanceQuantityData::
        VolumeFraction (const VolumeFraction_type& x)
        {
          this->VolumeFraction_.set (x);
        }

        void GasSubstanceQuantityData::
        VolumeFraction (const VolumeFraction_optional& x)
        {
          this->VolumeFraction_ = x;
        }

        void GasSubstanceQuantityData::
        VolumeFraction (::std::unique_ptr< VolumeFraction_type > x)
        {
          this->VolumeFraction_.set (std::move (x));
        }


        // LiquidSubstanceQuantityData
        // 

        const LiquidSubstanceQuantityData::Concentration_optional& LiquidSubstanceQuantityData::
        Concentration () const
        {
          return this->Concentration_;
        }

        LiquidSubstanceQuantityData::Concentration_optional& LiquidSubstanceQuantityData::
        Concentration ()
        {
          return this->Concentration_;
        }

        void LiquidSubstanceQuantityData::
        Concentration (const Concentration_type& x)
        {
          this->Concentration_.set (x);
        }

        void LiquidSubstanceQuantityData::
        Concentration (const Concentration_optional& x)
        {
          this->Concentration_ = x;
        }

        void LiquidSubstanceQuantityData::
        Concentration (::std::unique_ptr< Concentration_type > x)
        {
          this->Concentration_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::Mass_optional& LiquidSubstanceQuantityData::
        Mass () const
        {
          return this->Mass_;
        }

        LiquidSubstanceQuantityData::Mass_optional& LiquidSubstanceQuantityData::
        Mass ()
        {
          return this->Mass_;
        }

        void LiquidSubstanceQuantityData::
        Mass (const Mass_type& x)
        {
          this->Mass_.set (x);
        }

        void LiquidSubstanceQuantityData::
        Mass (const Mass_optional& x)
        {
          this->Mass_ = x;
        }

        void LiquidSubstanceQuantityData::
        Mass (::std::unique_ptr< Mass_type > x)
        {
          this->Mass_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::MassCleared_optional& LiquidSubstanceQuantityData::
        MassCleared () const
        {
          return this->MassCleared_;
        }

        LiquidSubstanceQuantityData::MassCleared_optional& LiquidSubstanceQuantityData::
        MassCleared ()
        {
          return this->MassCleared_;
        }

        void LiquidSubstanceQuantityData::
        MassCleared (const MassCleared_type& x)
        {
          this->MassCleared_.set (x);
        }

        void LiquidSubstanceQuantityData::
        MassCleared (const MassCleared_optional& x)
        {
          this->MassCleared_ = x;
        }

        void LiquidSubstanceQuantityData::
        MassCleared (::std::unique_ptr< MassCleared_type > x)
        {
          this->MassCleared_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::MassDeposited_optional& LiquidSubstanceQuantityData::
        MassDeposited () const
        {
          return this->MassDeposited_;
        }

        LiquidSubstanceQuantityData::MassDeposited_optional& LiquidSubstanceQuantityData::
        MassDeposited ()
        {
          return this->MassDeposited_;
        }

        void LiquidSubstanceQuantityData::
        MassDeposited (const MassDeposited_type& x)
        {
          this->MassDeposited_.set (x);
        }

        void LiquidSubstanceQuantityData::
        MassDeposited (const MassDeposited_optional& x)
        {
          this->MassDeposited_ = x;
        }

        void LiquidSubstanceQuantityData::
        MassDeposited (::std::unique_ptr< MassDeposited_type > x)
        {
          this->MassDeposited_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::MassExcreted_optional& LiquidSubstanceQuantityData::
        MassExcreted () const
        {
          return this->MassExcreted_;
        }

        LiquidSubstanceQuantityData::MassExcreted_optional& LiquidSubstanceQuantityData::
        MassExcreted ()
        {
          return this->MassExcreted_;
        }

        void LiquidSubstanceQuantityData::
        MassExcreted (const MassExcreted_type& x)
        {
          this->MassExcreted_.set (x);
        }

        void LiquidSubstanceQuantityData::
        MassExcreted (const MassExcreted_optional& x)
        {
          this->MassExcreted_ = x;
        }

        void LiquidSubstanceQuantityData::
        MassExcreted (::std::unique_ptr< MassExcreted_type > x)
        {
          this->MassExcreted_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::Molarity_optional& LiquidSubstanceQuantityData::
        Molarity () const
        {
          return this->Molarity_;
        }

        LiquidSubstanceQuantityData::Molarity_optional& LiquidSubstanceQuantityData::
        Molarity ()
        {
          return this->Molarity_;
        }

        void LiquidSubstanceQuantityData::
        Molarity (const Molarity_type& x)
        {
          this->Molarity_.set (x);
        }

        void LiquidSubstanceQuantityData::
        Molarity (const Molarity_optional& x)
        {
          this->Molarity_ = x;
        }

        void LiquidSubstanceQuantityData::
        Molarity (::std::unique_ptr< Molarity_type > x)
        {
          this->Molarity_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::PartialPressure_optional& LiquidSubstanceQuantityData::
        PartialPressure () const
        {
          return this->PartialPressure_;
        }

        LiquidSubstanceQuantityData::PartialPressure_optional& LiquidSubstanceQuantityData::
        PartialPressure ()
        {
          return this->PartialPressure_;
        }

        void LiquidSubstanceQuantityData::
        PartialPressure (const PartialPressure_type& x)
        {
          this->PartialPressure_.set (x);
        }

        void LiquidSubstanceQuantityData::
        PartialPressure (const PartialPressure_optional& x)
        {
          this->PartialPressure_ = x;
        }

        void LiquidSubstanceQuantityData::
        PartialPressure (::std::unique_ptr< PartialPressure_type > x)
        {
          this->PartialPressure_.set (std::move (x));
        }

        const LiquidSubstanceQuantityData::Saturation_optional& LiquidSubstanceQuantityData::
        Saturation () const
        {
          return this->Saturation_;
        }

        LiquidSubstanceQuantityData::Saturation_optional& LiquidSubstanceQuantityData::
        Saturation ()
        {
          return this->Saturation_;
        }

        void LiquidSubstanceQuantityData::
        Saturation (const Saturation_type& x)
        {
          this->Saturation_.set (x);
        }

        void LiquidSubstanceQuantityData::
        Saturation (const Saturation_optional& x)
        {
          this->Saturation_ = x;
        }

        void LiquidSubstanceQuantityData::
        Saturation (::std::unique_ptr< Saturation_type > x)
        {
          this->Saturation_.set (std::move (x));
        }


        // TissueSubstanceQuantityData
        // 

        const TissueSubstanceQuantityData::Mass_optional& TissueSubstanceQuantityData::
        Mass () const
        {
          return this->Mass_;
        }

        TissueSubstanceQuantityData::Mass_optional& TissueSubstanceQuantityData::
        Mass ()
        {
          return this->Mass_;
        }

        void TissueSubstanceQuantityData::
        Mass (const Mass_type& x)
        {
          this->Mass_.set (x);
        }

        void TissueSubstanceQuantityData::
        Mass (const Mass_optional& x)
        {
          this->Mass_ = x;
        }

        void TissueSubstanceQuantityData::
        Mass (::std::unique_ptr< Mass_type > x)
        {
          this->Mass_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::TissueConcentration_optional& TissueSubstanceQuantityData::
        TissueConcentration () const
        {
          return this->TissueConcentration_;
        }

        TissueSubstanceQuantityData::TissueConcentration_optional& TissueSubstanceQuantityData::
        TissueConcentration ()
        {
          return this->TissueConcentration_;
        }

        void TissueSubstanceQuantityData::
        TissueConcentration (const TissueConcentration_type& x)
        {
          this->TissueConcentration_.set (x);
        }

        void TissueSubstanceQuantityData::
        TissueConcentration (const TissueConcentration_optional& x)
        {
          this->TissueConcentration_ = x;
        }

        void TissueSubstanceQuantityData::
        TissueConcentration (::std::unique_ptr< TissueConcentration_type > x)
        {
          this->TissueConcentration_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::TissueMolarity_optional& TissueSubstanceQuantityData::
        TissueMolarity () const
        {
          return this->TissueMolarity_;
        }

        TissueSubstanceQuantityData::TissueMolarity_optional& TissueSubstanceQuantityData::
        TissueMolarity ()
        {
          return this->TissueMolarity_;
        }

        void TissueSubstanceQuantityData::
        TissueMolarity (const TissueMolarity_type& x)
        {
          this->TissueMolarity_.set (x);
        }

        void TissueSubstanceQuantityData::
        TissueMolarity (const TissueMolarity_optional& x)
        {
          this->TissueMolarity_ = x;
        }

        void TissueSubstanceQuantityData::
        TissueMolarity (::std::unique_ptr< TissueMolarity_type > x)
        {
          this->TissueMolarity_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::ExtravascularConcentration_optional& TissueSubstanceQuantityData::
        ExtravascularConcentration () const
        {
          return this->ExtravascularConcentration_;
        }

        TissueSubstanceQuantityData::ExtravascularConcentration_optional& TissueSubstanceQuantityData::
        ExtravascularConcentration ()
        {
          return this->ExtravascularConcentration_;
        }

        void TissueSubstanceQuantityData::
        ExtravascularConcentration (const ExtravascularConcentration_type& x)
        {
          this->ExtravascularConcentration_.set (x);
        }

        void TissueSubstanceQuantityData::
        ExtravascularConcentration (const ExtravascularConcentration_optional& x)
        {
          this->ExtravascularConcentration_ = x;
        }

        void TissueSubstanceQuantityData::
        ExtravascularConcentration (::std::unique_ptr< ExtravascularConcentration_type > x)
        {
          this->ExtravascularConcentration_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::ExtravascularMolarity_optional& TissueSubstanceQuantityData::
        ExtravascularMolarity () const
        {
          return this->ExtravascularMolarity_;
        }

        TissueSubstanceQuantityData::ExtravascularMolarity_optional& TissueSubstanceQuantityData::
        ExtravascularMolarity ()
        {
          return this->ExtravascularMolarity_;
        }

        void TissueSubstanceQuantityData::
        ExtravascularMolarity (const ExtravascularMolarity_type& x)
        {
          this->ExtravascularMolarity_.set (x);
        }

        void TissueSubstanceQuantityData::
        ExtravascularMolarity (const ExtravascularMolarity_optional& x)
        {
          this->ExtravascularMolarity_ = x;
        }

        void TissueSubstanceQuantityData::
        ExtravascularMolarity (::std::unique_ptr< ExtravascularMolarity_type > x)
        {
          this->ExtravascularMolarity_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::ExtravascularPartialPressure_optional& TissueSubstanceQuantityData::
        ExtravascularPartialPressure () const
        {
          return this->ExtravascularPartialPressure_;
        }

        TissueSubstanceQuantityData::ExtravascularPartialPressure_optional& TissueSubstanceQuantityData::
        ExtravascularPartialPressure ()
        {
          return this->ExtravascularPartialPressure_;
        }

        void TissueSubstanceQuantityData::
        ExtravascularPartialPressure (const ExtravascularPartialPressure_type& x)
        {
          this->ExtravascularPartialPressure_.set (x);
        }

        void TissueSubstanceQuantityData::
        ExtravascularPartialPressure (const ExtravascularPartialPressure_optional& x)
        {
          this->ExtravascularPartialPressure_ = x;
        }

        void TissueSubstanceQuantityData::
        ExtravascularPartialPressure (::std::unique_ptr< ExtravascularPartialPressure_type > x)
        {
          this->ExtravascularPartialPressure_.set (std::move (x));
        }

        const TissueSubstanceQuantityData::ExtravascularSaturation_optional& TissueSubstanceQuantityData::
        ExtravascularSaturation () const
        {
          return this->ExtravascularSaturation_;
        }

        TissueSubstanceQuantityData::ExtravascularSaturation_optional& TissueSubstanceQuantityData::
        ExtravascularSaturation ()
        {
          return this->ExtravascularSaturation_;
        }

        void TissueSubstanceQuantityData::
        ExtravascularSaturation (const ExtravascularSaturation_type& x)
        {
          this->ExtravascularSaturation_.set (x);
        }

        void TissueSubstanceQuantityData::
        ExtravascularSaturation (const ExtravascularSaturation_optional& x)
        {
          this->ExtravascularSaturation_ = x;
        }

        void TissueSubstanceQuantityData::
        ExtravascularSaturation (::std::unique_ptr< ExtravascularSaturation_type > x)
        {
          this->ExtravascularSaturation_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstanceQuantityData
        //

        SubstanceQuantityData::
        SubstanceQuantityData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Substance_ (this)
        {
        }

        SubstanceQuantityData::
        SubstanceQuantityData (const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Substance_ (Substance, this)
        {
        }

        SubstanceQuantityData::
        SubstanceQuantityData (::std::unique_ptr< Substance_type > Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Substance_ (std::move (Substance), this)
        {
        }

        SubstanceQuantityData::
        SubstanceQuantityData (const SubstanceQuantityData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Substance_ (x.Substance_, f, this)
        {
        }

        SubstanceQuantityData::
        SubstanceQuantityData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceQuantityData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Substance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Substance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Substance_.present ())
                {
                  ::std::unique_ptr< Substance_type > r (
                    dynamic_cast< Substance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Substance_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Substance",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstanceQuantityData* SubstanceQuantityData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceQuantityData (*this, f, c);
        }

        SubstanceQuantityData& SubstanceQuantityData::
        operator= (const SubstanceQuantityData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        SubstanceQuantityData::
        ~SubstanceQuantityData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceQuantityData >
        _xsd_SubstanceQuantityData_type_factory_init (
          "SubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GasSubstanceQuantityData
        //

        GasSubstanceQuantityData::
        GasSubstanceQuantityData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (),
          PartialPressure_ (this),
          Volume_ (this),
          VolumeFraction_ (this)
        {
        }

        GasSubstanceQuantityData::
        GasSubstanceQuantityData (const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (Substance),
          PartialPressure_ (this),
          Volume_ (this),
          VolumeFraction_ (this)
        {
        }

        GasSubstanceQuantityData::
        GasSubstanceQuantityData (::std::unique_ptr< Substance_type > Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (std::move (Substance)),
          PartialPressure_ (this),
          Volume_ (this),
          VolumeFraction_ (this)
        {
        }

        GasSubstanceQuantityData::
        GasSubstanceQuantityData (const GasSubstanceQuantityData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (x, f, c),
          PartialPressure_ (x.PartialPressure_, f, this),
          Volume_ (x.Volume_, f, this),
          VolumeFraction_ (x.VolumeFraction_, f, this)
        {
        }

        GasSubstanceQuantityData::
        GasSubstanceQuantityData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (e, f | ::xml_schema::flags::base, c),
          PartialPressure_ (this),
          Volume_ (this),
          VolumeFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void GasSubstanceQuantityData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceQuantityData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PartialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PartialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PartialPressure_)
                {
                  ::std::unique_ptr< PartialPressure_type > r (
                    dynamic_cast< PartialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PartialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Volume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Volume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Volume_)
                {
                  ::std::unique_ptr< Volume_type > r (
                    dynamic_cast< Volume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Volume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VolumeFraction_)
                {
                  ::std::unique_ptr< VolumeFraction_type > r (
                    dynamic_cast< VolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        GasSubstanceQuantityData* GasSubstanceQuantityData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GasSubstanceQuantityData (*this, f, c);
        }

        GasSubstanceQuantityData& GasSubstanceQuantityData::
        operator= (const GasSubstanceQuantityData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (*this) = x;
            this->PartialPressure_ = x.PartialPressure_;
            this->Volume_ = x.Volume_;
            this->VolumeFraction_ = x.VolumeFraction_;
          }

          return *this;
        }

        GasSubstanceQuantityData::
        ~GasSubstanceQuantityData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GasSubstanceQuantityData >
        _xsd_GasSubstanceQuantityData_type_factory_init (
          "GasSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LiquidSubstanceQuantityData
        //

        LiquidSubstanceQuantityData::
        LiquidSubstanceQuantityData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (),
          Concentration_ (this),
          Mass_ (this),
          MassCleared_ (this),
          MassDeposited_ (this),
          MassExcreted_ (this),
          Molarity_ (this),
          PartialPressure_ (this),
          Saturation_ (this)
        {
        }

        LiquidSubstanceQuantityData::
        LiquidSubstanceQuantityData (const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (Substance),
          Concentration_ (this),
          Mass_ (this),
          MassCleared_ (this),
          MassDeposited_ (this),
          MassExcreted_ (this),
          Molarity_ (this),
          PartialPressure_ (this),
          Saturation_ (this)
        {
        }

        LiquidSubstanceQuantityData::
        LiquidSubstanceQuantityData (::std::unique_ptr< Substance_type > Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (std::move (Substance)),
          Concentration_ (this),
          Mass_ (this),
          MassCleared_ (this),
          MassDeposited_ (this),
          MassExcreted_ (this),
          Molarity_ (this),
          PartialPressure_ (this),
          Saturation_ (this)
        {
        }

        LiquidSubstanceQuantityData::
        LiquidSubstanceQuantityData (const LiquidSubstanceQuantityData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (x, f, c),
          Concentration_ (x.Concentration_, f, this),
          Mass_ (x.Mass_, f, this),
          MassCleared_ (x.MassCleared_, f, this),
          MassDeposited_ (x.MassDeposited_, f, this),
          MassExcreted_ (x.MassExcreted_, f, this),
          Molarity_ (x.Molarity_, f, this),
          PartialPressure_ (x.PartialPressure_, f, this),
          Saturation_ (x.Saturation_, f, this)
        {
        }

        LiquidSubstanceQuantityData::
        LiquidSubstanceQuantityData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (e, f | ::xml_schema::flags::base, c),
          Concentration_ (this),
          Mass_ (this),
          MassCleared_ (this),
          MassDeposited_ (this),
          MassExcreted_ (this),
          Molarity_ (this),
          PartialPressure_ (this),
          Saturation_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void LiquidSubstanceQuantityData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceQuantityData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Concentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Concentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Concentration_)
                {
                  ::std::unique_ptr< Concentration_type > r (
                    dynamic_cast< Concentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Concentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Mass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Mass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Mass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Mass_)
                {
                  ::std::unique_ptr< Mass_type > r (
                    dynamic_cast< Mass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Mass_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassCleared
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassCleared",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassCleared_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassCleared_)
                {
                  ::std::unique_ptr< MassCleared_type > r (
                    dynamic_cast< MassCleared_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassCleared_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassDeposited
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassDeposited",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassDeposited_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassDeposited_)
                {
                  ::std::unique_ptr< MassDeposited_type > r (
                    dynamic_cast< MassDeposited_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassDeposited_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassExcreted
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassExcreted",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassExcreted_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassExcreted_)
                {
                  ::std::unique_ptr< MassExcreted_type > r (
                    dynamic_cast< MassExcreted_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassExcreted_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Molarity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Molarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Molarity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Molarity_)
                {
                  ::std::unique_ptr< Molarity_type > r (
                    dynamic_cast< Molarity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Molarity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PartialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PartialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PartialPressure_)
                {
                  ::std::unique_ptr< PartialPressure_type > r (
                    dynamic_cast< PartialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PartialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Saturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Saturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Saturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Saturation_)
                {
                  ::std::unique_ptr< Saturation_type > r (
                    dynamic_cast< Saturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Saturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        LiquidSubstanceQuantityData* LiquidSubstanceQuantityData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LiquidSubstanceQuantityData (*this, f, c);
        }

        LiquidSubstanceQuantityData& LiquidSubstanceQuantityData::
        operator= (const LiquidSubstanceQuantityData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (*this) = x;
            this->Concentration_ = x.Concentration_;
            this->Mass_ = x.Mass_;
            this->MassCleared_ = x.MassCleared_;
            this->MassDeposited_ = x.MassDeposited_;
            this->MassExcreted_ = x.MassExcreted_;
            this->Molarity_ = x.Molarity_;
            this->PartialPressure_ = x.PartialPressure_;
            this->Saturation_ = x.Saturation_;
          }

          return *this;
        }

        LiquidSubstanceQuantityData::
        ~LiquidSubstanceQuantityData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidSubstanceQuantityData >
        _xsd_LiquidSubstanceQuantityData_type_factory_init (
          "LiquidSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TissueSubstanceQuantityData
        //

        TissueSubstanceQuantityData::
        TissueSubstanceQuantityData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (),
          Mass_ (this),
          TissueConcentration_ (this),
          TissueMolarity_ (this),
          ExtravascularConcentration_ (this),
          ExtravascularMolarity_ (this),
          ExtravascularPartialPressure_ (this),
          ExtravascularSaturation_ (this)
        {
        }

        TissueSubstanceQuantityData::
        TissueSubstanceQuantityData (const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (Substance),
          Mass_ (this),
          TissueConcentration_ (this),
          TissueMolarity_ (this),
          ExtravascularConcentration_ (this),
          ExtravascularMolarity_ (this),
          ExtravascularPartialPressure_ (this),
          ExtravascularSaturation_ (this)
        {
        }

        TissueSubstanceQuantityData::
        TissueSubstanceQuantityData (::std::unique_ptr< Substance_type > Substance)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (std::move (Substance)),
          Mass_ (this),
          TissueConcentration_ (this),
          TissueMolarity_ (this),
          ExtravascularConcentration_ (this),
          ExtravascularMolarity_ (this),
          ExtravascularPartialPressure_ (this),
          ExtravascularSaturation_ (this)
        {
        }

        TissueSubstanceQuantityData::
        TissueSubstanceQuantityData (const TissueSubstanceQuantityData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (x, f, c),
          Mass_ (x.Mass_, f, this),
          TissueConcentration_ (x.TissueConcentration_, f, this),
          TissueMolarity_ (x.TissueMolarity_, f, this),
          ExtravascularConcentration_ (x.ExtravascularConcentration_, f, this),
          ExtravascularMolarity_ (x.ExtravascularMolarity_, f, this),
          ExtravascularPartialPressure_ (x.ExtravascularPartialPressure_, f, this),
          ExtravascularSaturation_ (x.ExtravascularSaturation_, f, this)
        {
        }

        TissueSubstanceQuantityData::
        TissueSubstanceQuantityData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceQuantityData (e, f | ::xml_schema::flags::base, c),
          Mass_ (this),
          TissueConcentration_ (this),
          TissueMolarity_ (this),
          ExtravascularConcentration_ (this),
          ExtravascularMolarity_ (this),
          ExtravascularPartialPressure_ (this),
          ExtravascularSaturation_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TissueSubstanceQuantityData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceQuantityData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Mass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Mass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Mass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Mass_)
                {
                  ::std::unique_ptr< Mass_type > r (
                    dynamic_cast< Mass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Mass_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueConcentration_)
                {
                  ::std::unique_ptr< TissueConcentration_type > r (
                    dynamic_cast< TissueConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueMolarity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueMolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueMolarity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueMolarity_)
                {
                  ::std::unique_ptr< TissueMolarity_type > r (
                    dynamic_cast< TissueMolarity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueMolarity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularConcentration_)
                {
                  ::std::unique_ptr< ExtravascularConcentration_type > r (
                    dynamic_cast< ExtravascularConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularMolarity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularMolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularMolarity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularMolarity_)
                {
                  ::std::unique_ptr< ExtravascularMolarity_type > r (
                    dynamic_cast< ExtravascularMolarity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularMolarity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularPartialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularPartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularPartialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularPartialPressure_)
                {
                  ::std::unique_ptr< ExtravascularPartialPressure_type > r (
                    dynamic_cast< ExtravascularPartialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularPartialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularSaturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularSaturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularSaturation_)
                {
                  ::std::unique_ptr< ExtravascularSaturation_type > r (
                    dynamic_cast< ExtravascularSaturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularSaturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        TissueSubstanceQuantityData* TissueSubstanceQuantityData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueSubstanceQuantityData (*this, f, c);
        }

        TissueSubstanceQuantityData& TissueSubstanceQuantityData::
        operator= (const TissueSubstanceQuantityData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (*this) = x;
            this->Mass_ = x.Mass_;
            this->TissueConcentration_ = x.TissueConcentration_;
            this->TissueMolarity_ = x.TissueMolarity_;
            this->ExtravascularConcentration_ = x.ExtravascularConcentration_;
            this->ExtravascularMolarity_ = x.ExtravascularMolarity_;
            this->ExtravascularPartialPressure_ = x.ExtravascularPartialPressure_;
            this->ExtravascularSaturation_ = x.ExtravascularSaturation_;
          }

          return *this;
        }

        TissueSubstanceQuantityData::
        ~TissueSubstanceQuantityData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueSubstanceQuantityData >
        _xsd_TissueSubstanceQuantityData_type_factory_init (
          "TissueSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceQuantityData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Substance: ";
            om.insert (o, i.Substance ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceQuantityData >
        _xsd_SubstanceQuantityData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GasSubstanceQuantityData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PartialPressure ())
            {
              o << ::std::endl << "PartialPressure: ";
              om.insert (o, *i.PartialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Volume ())
            {
              o << ::std::endl << "Volume: ";
              om.insert (o, *i.Volume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VolumeFraction ())
            {
              o << ::std::endl << "VolumeFraction: ";
              om.insert (o, *i.VolumeFraction ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GasSubstanceQuantityData >
        _xsd_GasSubstanceQuantityData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LiquidSubstanceQuantityData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Concentration ())
            {
              o << ::std::endl << "Concentration: ";
              om.insert (o, *i.Concentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Mass ())
            {
              o << ::std::endl << "Mass: ";
              om.insert (o, *i.Mass ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassCleared ())
            {
              o << ::std::endl << "MassCleared: ";
              om.insert (o, *i.MassCleared ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassDeposited ())
            {
              o << ::std::endl << "MassDeposited: ";
              om.insert (o, *i.MassDeposited ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassExcreted ())
            {
              o << ::std::endl << "MassExcreted: ";
              om.insert (o, *i.MassExcreted ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Molarity ())
            {
              o << ::std::endl << "Molarity: ";
              om.insert (o, *i.Molarity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PartialPressure ())
            {
              o << ::std::endl << "PartialPressure: ";
              om.insert (o, *i.PartialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Saturation ())
            {
              o << ::std::endl << "Saturation: ";
              om.insert (o, *i.Saturation ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidSubstanceQuantityData >
        _xsd_LiquidSubstanceQuantityData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TissueSubstanceQuantityData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Mass ())
            {
              o << ::std::endl << "Mass: ";
              om.insert (o, *i.Mass ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueConcentration ())
            {
              o << ::std::endl << "TissueConcentration: ";
              om.insert (o, *i.TissueConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueMolarity ())
            {
              o << ::std::endl << "TissueMolarity: ";
              om.insert (o, *i.TissueMolarity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularConcentration ())
            {
              o << ::std::endl << "ExtravascularConcentration: ";
              om.insert (o, *i.ExtravascularConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularMolarity ())
            {
              o << ::std::endl << "ExtravascularMolarity: ";
              om.insert (o, *i.ExtravascularMolarity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularPartialPressure ())
            {
              o << ::std::endl << "ExtravascularPartialPressure: ";
              om.insert (o, *i.ExtravascularPartialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularSaturation ())
            {
              o << ::std::endl << "ExtravascularSaturation: ";
              om.insert (o, *i.ExtravascularSaturation ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueSubstanceQuantityData >
        _xsd_TissueSubstanceQuantityData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const SubstanceQuantityData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Substance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceQuantityData::Substance_type& x (i.Substance ());
            if (typeid (SubstanceQuantityData::Substance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Substance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceQuantityData >
        _xsd_SubstanceQuantityData_type_serializer_init (
          "SubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GasSubstanceQuantityData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          // PartialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PartialPressure ())
            {
              const GasSubstanceQuantityData::PartialPressure_type& x (*i.PartialPressure ());
              if (typeid (GasSubstanceQuantityData::PartialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PartialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Volume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Volume ())
            {
              const GasSubstanceQuantityData::Volume_type& x (*i.Volume ());
              if (typeid (GasSubstanceQuantityData::Volume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Volume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VolumeFraction ())
            {
              const GasSubstanceQuantityData::VolumeFraction_type& x (*i.VolumeFraction ());
              if (typeid (GasSubstanceQuantityData::VolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GasSubstanceQuantityData >
        _xsd_GasSubstanceQuantityData_type_serializer_init (
          "GasSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LiquidSubstanceQuantityData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          // Concentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Concentration ())
            {
              const LiquidSubstanceQuantityData::Concentration_type& x (*i.Concentration ());
              if (typeid (LiquidSubstanceQuantityData::Concentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Concentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Mass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Mass ())
            {
              const LiquidSubstanceQuantityData::Mass_type& x (*i.Mass ());
              if (typeid (LiquidSubstanceQuantityData::Mass_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Mass",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Mass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassCleared
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassCleared ())
            {
              const LiquidSubstanceQuantityData::MassCleared_type& x (*i.MassCleared ());
              if (typeid (LiquidSubstanceQuantityData::MassCleared_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassCleared",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassCleared",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassDeposited
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassDeposited ())
            {
              const LiquidSubstanceQuantityData::MassDeposited_type& x (*i.MassDeposited ());
              if (typeid (LiquidSubstanceQuantityData::MassDeposited_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassDeposited",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassDeposited",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassExcreted
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassExcreted ())
            {
              const LiquidSubstanceQuantityData::MassExcreted_type& x (*i.MassExcreted ());
              if (typeid (LiquidSubstanceQuantityData::MassExcreted_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassExcreted",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassExcreted",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Molarity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Molarity ())
            {
              const LiquidSubstanceQuantityData::Molarity_type& x (*i.Molarity ());
              if (typeid (LiquidSubstanceQuantityData::Molarity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Molarity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Molarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PartialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PartialPressure ())
            {
              const LiquidSubstanceQuantityData::PartialPressure_type& x (*i.PartialPressure ());
              if (typeid (LiquidSubstanceQuantityData::PartialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PartialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Saturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Saturation ())
            {
              const LiquidSubstanceQuantityData::Saturation_type& x (*i.Saturation ());
              if (typeid (LiquidSubstanceQuantityData::Saturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Saturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Saturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidSubstanceQuantityData >
        _xsd_LiquidSubstanceQuantityData_type_serializer_init (
          "LiquidSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TissueSubstanceQuantityData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceQuantityData& > (i);

          // Mass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Mass ())
            {
              const TissueSubstanceQuantityData::Mass_type& x (*i.Mass ());
              if (typeid (TissueSubstanceQuantityData::Mass_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Mass",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Mass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueConcentration ())
            {
              const TissueSubstanceQuantityData::TissueConcentration_type& x (*i.TissueConcentration ());
              if (typeid (TissueSubstanceQuantityData::TissueConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueMolarity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueMolarity ())
            {
              const TissueSubstanceQuantityData::TissueMolarity_type& x (*i.TissueMolarity ());
              if (typeid (TissueSubstanceQuantityData::TissueMolarity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueMolarity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueMolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularConcentration ())
            {
              const TissueSubstanceQuantityData::ExtravascularConcentration_type& x (*i.ExtravascularConcentration ());
              if (typeid (TissueSubstanceQuantityData::ExtravascularConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularMolarity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularMolarity ())
            {
              const TissueSubstanceQuantityData::ExtravascularMolarity_type& x (*i.ExtravascularMolarity ());
              if (typeid (TissueSubstanceQuantityData::ExtravascularMolarity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularMolarity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularMolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularPartialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularPartialPressure ())
            {
              const TissueSubstanceQuantityData::ExtravascularPartialPressure_type& x (*i.ExtravascularPartialPressure ());
              if (typeid (TissueSubstanceQuantityData::ExtravascularPartialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularPartialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularPartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularSaturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularSaturation ())
            {
              const TissueSubstanceQuantityData::ExtravascularSaturation_type& x (*i.ExtravascularSaturation ());
              if (typeid (TissueSubstanceQuantityData::ExtravascularSaturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularSaturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueSubstanceQuantityData >
        _xsd_TissueSubstanceQuantityData_type_serializer_init (
          "TissueSubstanceQuantityData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

