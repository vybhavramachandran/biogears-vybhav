// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from EngineConfiguration.xsd.
 */

#ifndef CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_ENGINE_CONFIGURATION_HXX
#define CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_ENGINE_CONFIGURATION_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include <biogears/cdm-exports.h>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class PhysiologyEngineConfigurationData;
        class PhysiologyEngineStabilizationData;
        class PhysiologyEngineConditionStabilizationData;
        class PhysiologyEngineTimedStabilizationData;
        class PhysiologyEngineTimedConditionStabilizationData;
        class PhysiologyEngineDynamicStabilizationData;
        class PhysiologyEngineDynamicConditionStabilizationData;
        class PhysiologyEngineDynamicStabilizationCriteriaData;
        class PhysiologyEngineDynamicStabilizationCriteriaPropertyData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Properties.hxx"

#include "ElectroCardioGram.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %PhysiologyEngineConfigurationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineConfigurationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name TimeStep
           *
           * @brief Accessor and modifier functions for the %TimeStep
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData TimeStep_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TimeStep_type > TimeStep_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TimeStep_type, char > TimeStep_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TimeStep_optional&
          TimeStep () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TimeStep_optional&
          TimeStep ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TimeStep (const TimeStep_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TimeStep (const TimeStep_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TimeStep (::std::unique_ptr< TimeStep_type > p);

          //@}

          /**
           * @name WritePatientBaselineFile
           *
           * @brief Accessor and modifier functions for the %WritePatientBaselineFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumOnOff WritePatientBaselineFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WritePatientBaselineFile_type > WritePatientBaselineFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WritePatientBaselineFile_type, char > WritePatientBaselineFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WritePatientBaselineFile_optional&
          WritePatientBaselineFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WritePatientBaselineFile_optional&
          WritePatientBaselineFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WritePatientBaselineFile (const WritePatientBaselineFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WritePatientBaselineFile (const WritePatientBaselineFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WritePatientBaselineFile (::std::unique_ptr< WritePatientBaselineFile_type > p);

          //@}

          /**
           * @name ElectroCardioGramInterpolator
           *
           * @brief Accessor and modifier functions for the %ElectroCardioGramInterpolator
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData ElectroCardioGramInterpolator_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectroCardioGramInterpolator_type > ElectroCardioGramInterpolator_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectroCardioGramInterpolator_type, char > ElectroCardioGramInterpolator_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectroCardioGramInterpolator_optional&
          ElectroCardioGramInterpolator () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectroCardioGramInterpolator_optional&
          ElectroCardioGramInterpolator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectroCardioGramInterpolator (const ElectroCardioGramInterpolator_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectroCardioGramInterpolator (const ElectroCardioGramInterpolator_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectroCardioGramInterpolator (::std::unique_ptr< ElectroCardioGramInterpolator_type > p);

          //@}

          /**
           * @name ElectroCardioGramInterpolatorFile
           *
           * @brief Accessor and modifier functions for the %ElectroCardioGramInterpolatorFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string ElectroCardioGramInterpolatorFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ElectroCardioGramInterpolatorFile_type > ElectroCardioGramInterpolatorFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectroCardioGramInterpolatorFile_type, char > ElectroCardioGramInterpolatorFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ElectroCardioGramInterpolatorFile_optional&
          ElectroCardioGramInterpolatorFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ElectroCardioGramInterpolatorFile_optional&
          ElectroCardioGramInterpolatorFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElectroCardioGramInterpolatorFile (const ElectroCardioGramInterpolatorFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ElectroCardioGramInterpolatorFile (const ElectroCardioGramInterpolatorFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ElectroCardioGramInterpolatorFile (::std::unique_ptr< ElectroCardioGramInterpolatorFile_type > p);

          //@}

          /**
           * @name StabilizationCriteria
           *
           * @brief Accessor and modifier functions for the %StabilizationCriteria
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData StabilizationCriteria_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StabilizationCriteria_type > StabilizationCriteria_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StabilizationCriteria_type, char > StabilizationCriteria_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StabilizationCriteria_optional&
          StabilizationCriteria () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StabilizationCriteria_optional&
          StabilizationCriteria ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StabilizationCriteria (const StabilizationCriteria_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StabilizationCriteria (const StabilizationCriteria_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StabilizationCriteria (::std::unique_ptr< StabilizationCriteria_type > p);

          //@}

          /**
           * @name StabilizationCriteriaFile
           *
           * @brief Accessor and modifier functions for the %StabilizationCriteriaFile
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string StabilizationCriteriaFile_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StabilizationCriteriaFile_type > StabilizationCriteriaFile_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StabilizationCriteriaFile_type, char > StabilizationCriteriaFile_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StabilizationCriteriaFile_optional&
          StabilizationCriteriaFile () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StabilizationCriteriaFile_optional&
          StabilizationCriteriaFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StabilizationCriteriaFile (const StabilizationCriteriaFile_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StabilizationCriteriaFile (const StabilizationCriteriaFile_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StabilizationCriteriaFile (::std::unique_ptr< StabilizationCriteriaFile_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineConfigurationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineConfigurationData (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineConfigurationData (const PhysiologyEngineConfigurationData& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineConfigurationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineConfigurationData&
          operator= (const PhysiologyEngineConfigurationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineConfigurationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          TimeStep_optional TimeStep_;
          WritePatientBaselineFile_optional WritePatientBaselineFile_;
          ElectroCardioGramInterpolator_optional ElectroCardioGramInterpolator_;
          ElectroCardioGramInterpolatorFile_optional ElectroCardioGramInterpolatorFile_;
          StabilizationCriteria_optional StabilizationCriteria_;
          StabilizationCriteriaFile_optional StabilizationCriteriaFile_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineStabilizationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineStabilizationData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineStabilizationData (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineStabilizationData (const PhysiologyEngineStabilizationData& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineStabilizationData ();
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineConditionStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineConditionStabilizationData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Name
           *
           * @brief Accessor and modifier functions for the %Name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Name_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_type&
          Name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_type&
          Name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Name (const Name_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Name (::std::unique_ptr< Name_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineConditionStabilizationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineConditionStabilizationData (const Name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineConditionStabilizationData (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineConditionStabilizationData (const PhysiologyEngineConditionStabilizationData& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineConditionStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineConditionStabilizationData&
          operator= (const PhysiologyEngineConditionStabilizationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineConditionStabilizationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Name_type > Name_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineTimedStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineTimedStabilizationData: public ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData
        {
          public:
          /**
           * @name RestingStabilizationTime
           *
           * @brief Accessor and modifier functions for the %RestingStabilizationTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData RestingStabilizationTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RestingStabilizationTime_type, char > RestingStabilizationTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RestingStabilizationTime_type&
          RestingStabilizationTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RestingStabilizationTime_type&
          RestingStabilizationTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RestingStabilizationTime (const RestingStabilizationTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RestingStabilizationTime (::std::unique_ptr< RestingStabilizationTime_type > p);

          //@}

          /**
           * @name FeedbackStabilizationTime
           *
           * @brief Accessor and modifier functions for the %FeedbackStabilizationTime
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData FeedbackStabilizationTime_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FeedbackStabilizationTime_type > FeedbackStabilizationTime_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FeedbackStabilizationTime_type, char > FeedbackStabilizationTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FeedbackStabilizationTime_optional&
          FeedbackStabilizationTime () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FeedbackStabilizationTime_optional&
          FeedbackStabilizationTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FeedbackStabilizationTime (const FeedbackStabilizationTime_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FeedbackStabilizationTime (const FeedbackStabilizationTime_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FeedbackStabilizationTime (::std::unique_ptr< FeedbackStabilizationTime_type > p);

          //@}

          /**
           * @name ConditionStabilization
           *
           * @brief Accessor and modifier functions for the %ConditionStabilization
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedConditionStabilizationData ConditionStabilization_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ConditionStabilization_type > ConditionStabilization_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ConditionStabilization_sequence::iterator ConditionStabilization_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ConditionStabilization_sequence::const_iterator ConditionStabilization_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConditionStabilization_type, char > ConditionStabilization_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ConditionStabilization_sequence&
          ConditionStabilization () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ConditionStabilization_sequence&
          ConditionStabilization ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ConditionStabilization (const ConditionStabilization_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineTimedStabilizationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineTimedStabilizationData (const RestingStabilizationTime_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PhysiologyEngineTimedStabilizationData (::std::unique_ptr< RestingStabilizationTime_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineTimedStabilizationData (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineTimedStabilizationData (const PhysiologyEngineTimedStabilizationData& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineTimedStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineTimedStabilizationData&
          operator= (const PhysiologyEngineTimedStabilizationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineTimedStabilizationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< RestingStabilizationTime_type > RestingStabilizationTime_;
          FeedbackStabilizationTime_optional FeedbackStabilizationTime_;
          ConditionStabilization_sequence ConditionStabilization_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineTimedConditionStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineTimedConditionStabilizationData: public ::mil::tatrc::physiology::datamodel::PhysiologyEngineConditionStabilizationData
        {
          public:
          /**
           * @name Time
           *
           * @brief Accessor and modifier functions for the %Time
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData Time_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Time_type, char > Time_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Time_type&
          Time () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Time_type&
          Time ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Time (const Time_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Time (::std::unique_ptr< Time_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineTimedConditionStabilizationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineTimedConditionStabilizationData (const Name_type&,
                                                           const Time_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PhysiologyEngineTimedConditionStabilizationData (const Name_type&,
                                                           ::std::unique_ptr< Time_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineTimedConditionStabilizationData (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineTimedConditionStabilizationData (const PhysiologyEngineTimedConditionStabilizationData& x,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineTimedConditionStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineTimedConditionStabilizationData&
          operator= (const PhysiologyEngineTimedConditionStabilizationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineTimedConditionStabilizationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Time_type > Time_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineDynamicStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineDynamicStabilizationData: public ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData
        {
          public:
          /**
           * @name RestingStabilizationCriteria
           *
           * @brief Accessor and modifier functions for the %RestingStabilizationCriteria
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationCriteriaData RestingStabilizationCriteria_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RestingStabilizationCriteria_type, char > RestingStabilizationCriteria_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RestingStabilizationCriteria_type&
          RestingStabilizationCriteria () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RestingStabilizationCriteria_type&
          RestingStabilizationCriteria ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RestingStabilizationCriteria (const RestingStabilizationCriteria_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          RestingStabilizationCriteria (::std::unique_ptr< RestingStabilizationCriteria_type > p);

          //@}

          /**
           * @name FeedbackStabilizationCriteria
           *
           * @brief Accessor and modifier functions for the %FeedbackStabilizationCriteria
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationCriteriaData FeedbackStabilizationCriteria_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< FeedbackStabilizationCriteria_type > FeedbackStabilizationCriteria_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FeedbackStabilizationCriteria_type, char > FeedbackStabilizationCriteria_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const FeedbackStabilizationCriteria_optional&
          FeedbackStabilizationCriteria () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          FeedbackStabilizationCriteria_optional&
          FeedbackStabilizationCriteria ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          FeedbackStabilizationCriteria (const FeedbackStabilizationCriteria_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          FeedbackStabilizationCriteria (const FeedbackStabilizationCriteria_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          FeedbackStabilizationCriteria (::std::unique_ptr< FeedbackStabilizationCriteria_type > p);

          //@}

          /**
           * @name ConditionStabilization
           *
           * @brief Accessor and modifier functions for the %ConditionStabilization
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicConditionStabilizationData ConditionStabilization_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ConditionStabilization_type > ConditionStabilization_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ConditionStabilization_sequence::iterator ConditionStabilization_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ConditionStabilization_sequence::const_iterator ConditionStabilization_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConditionStabilization_type, char > ConditionStabilization_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ConditionStabilization_sequence&
          ConditionStabilization () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ConditionStabilization_sequence&
          ConditionStabilization ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ConditionStabilization (const ConditionStabilization_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineDynamicStabilizationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineDynamicStabilizationData (const RestingStabilizationCriteria_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PhysiologyEngineDynamicStabilizationData (::std::unique_ptr< RestingStabilizationCriteria_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineDynamicStabilizationData (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationData (const PhysiologyEngineDynamicStabilizationData& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineDynamicStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationData&
          operator= (const PhysiologyEngineDynamicStabilizationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineDynamicStabilizationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< RestingStabilizationCriteria_type > RestingStabilizationCriteria_;
          FeedbackStabilizationCriteria_optional FeedbackStabilizationCriteria_;
          ConditionStabilization_sequence ConditionStabilization_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineDynamicConditionStabilizationData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineDynamicConditionStabilizationData: public ::mil::tatrc::physiology::datamodel::PhysiologyEngineConditionStabilizationData
        {
          public:
          /**
           * @name Criteria
           *
           * @brief Accessor and modifier functions for the %Criteria
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationCriteriaData Criteria_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Criteria_type, char > Criteria_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Criteria_type&
          Criteria () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Criteria_type&
          Criteria ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Criteria (const Criteria_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Criteria (::std::unique_ptr< Criteria_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineDynamicConditionStabilizationData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineDynamicConditionStabilizationData (const Name_type&,
                                                             const Criteria_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PhysiologyEngineDynamicConditionStabilizationData (const Name_type&,
                                                             ::std::unique_ptr< Criteria_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineDynamicConditionStabilizationData (const ::xercesc::DOMElement& e,
                                                             ::xml_schema::flags f = 0,
                                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicConditionStabilizationData (const PhysiologyEngineDynamicConditionStabilizationData& x,
                                                             ::xml_schema::flags f = 0,
                                                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineDynamicConditionStabilizationData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicConditionStabilizationData&
          operator= (const PhysiologyEngineDynamicConditionStabilizationData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineDynamicConditionStabilizationData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Criteria_type > Criteria_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineDynamicStabilizationCriteriaData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineDynamicStabilizationCriteriaData: public ::xml_schema::type
        {
          public:
          /**
           * @name ConvergenceTime
           *
           * @brief Accessor and modifier functions for the %ConvergenceTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData ConvergenceTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConvergenceTime_type, char > ConvergenceTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConvergenceTime_type&
          ConvergenceTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConvergenceTime_type&
          ConvergenceTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConvergenceTime (const ConvergenceTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ConvergenceTime (::std::unique_ptr< ConvergenceTime_type > p);

          //@}

          /**
           * @name MinimumReactionTime
           *
           * @brief Accessor and modifier functions for the %MinimumReactionTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData MinimumReactionTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinimumReactionTime_type, char > MinimumReactionTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MinimumReactionTime_type&
          MinimumReactionTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MinimumReactionTime_type&
          MinimumReactionTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MinimumReactionTime (const MinimumReactionTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MinimumReactionTime (::std::unique_ptr< MinimumReactionTime_type > p);

          //@}

          /**
           * @name MaximumAllowedStabilizationTime
           *
           * @brief Accessor and modifier functions for the %MaximumAllowedStabilizationTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarTimeData MaximumAllowedStabilizationTime_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumAllowedStabilizationTime_type, char > MaximumAllowedStabilizationTime_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MaximumAllowedStabilizationTime_type&
          MaximumAllowedStabilizationTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MaximumAllowedStabilizationTime_type&
          MaximumAllowedStabilizationTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumAllowedStabilizationTime (const MaximumAllowedStabilizationTime_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          MaximumAllowedStabilizationTime (::std::unique_ptr< MaximumAllowedStabilizationTime_type > p);

          //@}

          /**
           * @name PropertyConvergence
           *
           * @brief Accessor and modifier functions for the %PropertyConvergence
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationCriteriaPropertyData PropertyConvergence_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< PropertyConvergence_type > PropertyConvergence_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef PropertyConvergence_sequence::iterator PropertyConvergence_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef PropertyConvergence_sequence::const_iterator PropertyConvergence_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PropertyConvergence_type, char > PropertyConvergence_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const PropertyConvergence_sequence&
          PropertyConvergence () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          PropertyConvergence_sequence&
          PropertyConvergence ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          PropertyConvergence (const PropertyConvergence_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData (const ConvergenceTime_type&,
                                                            const MinimumReactionTime_type&,
                                                            const MaximumAllowedStabilizationTime_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData (::std::unique_ptr< ConvergenceTime_type >,
                                                            ::std::unique_ptr< MinimumReactionTime_type >,
                                                            ::std::unique_ptr< MaximumAllowedStabilizationTime_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData (const PhysiologyEngineDynamicStabilizationCriteriaData& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineDynamicStabilizationCriteriaData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationCriteriaData&
          operator= (const PhysiologyEngineDynamicStabilizationCriteriaData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineDynamicStabilizationCriteriaData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< ConvergenceTime_type > ConvergenceTime_;
          ::xsd::cxx::tree::one< MinimumReactionTime_type > MinimumReactionTime_;
          ::xsd::cxx::tree::one< MaximumAllowedStabilizationTime_type > MaximumAllowedStabilizationTime_;
          PropertyConvergence_sequence PropertyConvergence_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PhysiologyEngineDynamicStabilizationCriteriaPropertyData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API PhysiologyEngineDynamicStabilizationCriteriaPropertyData: public ::xml_schema::type
        {
          public:
          /**
           * @name Name
           *
           * @brief Accessor and modifier functions for the %Name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::string Name_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_type&
          Name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_type&
          Name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          Name (const Name_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Name (::std::unique_ptr< Name_type > p);

          //@}

          /**
           * @name PercentDifference
           *
           * @brief Accessor and modifier functions for the %PercentDifference
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ PercentDifference_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< PercentDifference_type, char, ::xsd::cxx::tree::schema_type::double_ > PercentDifference_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const PercentDifference_type&
          PercentDifference () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          PercentDifference_type&
          PercentDifference ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          PercentDifference (const PercentDifference_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PhysiologyEngineDynamicStabilizationCriteriaPropertyData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PhysiologyEngineDynamicStabilizationCriteriaPropertyData (const Name_type&,
                                                                    const PercentDifference_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PhysiologyEngineDynamicStabilizationCriteriaPropertyData (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationCriteriaPropertyData (const PhysiologyEngineDynamicStabilizationCriteriaPropertyData& x,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PhysiologyEngineDynamicStabilizationCriteriaPropertyData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PhysiologyEngineDynamicStabilizationCriteriaPropertyData&
          operator= (const PhysiologyEngineDynamicStabilizationCriteriaPropertyData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PhysiologyEngineDynamicStabilizationCriteriaPropertyData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Name_type > Name_;
          ::xsd::cxx::tree::one< PercentDifference_type > PercentDifference_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineConfigurationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineConditionStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineTimedStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineTimedConditionStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineDynamicStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineDynamicConditionStabilizationData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineDynamicStabilizationCriteriaData&);

        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const PhysiologyEngineDynamicStabilizationCriteriaPropertyData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        /**
         * @name Parsing functions for the %PhysiologyEngineTimedStabilization document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData >
        PhysiologyEngineTimedStabilization (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}

        /**
         * @name Parsing functions for the %PhysiologyEngineDynamicStabilization document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        BIOGEARS_CDM_API
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData >
        PhysiologyEngineDynamicStabilization (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineConfigurationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineStabilizationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineConditionStabilizationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineTimedStabilizationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineTimedConditionStabilizationData&);

        /**
         * @name Serialization functions for the %PhysiologyEngineTimedStabilization document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::std::ostream& os,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::std::ostream& os,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::std::ostream& os,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::xercesc::XMLFormatTarget& ft,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::xercesc::XMLFormatTarget& ft,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::xercesc::XMLFormatTarget& ft,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineTimedStabilization (::xercesc::DOMDocument& d,
                                            const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x,
                                            ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PhysiologyEngineTimedStabilization (const ::mil::tatrc::physiology::datamodel::PhysiologyEngineTimedStabilizationData& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

        //@}

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineDynamicStabilizationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineDynamicConditionStabilizationData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineDynamicStabilizationCriteriaData&);

        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const PhysiologyEngineDynamicStabilizationCriteriaPropertyData&);

        /**
         * @name Serialization functions for the %PhysiologyEngineDynamicStabilization document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::std::ostream& os,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::std::ostream& os,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::std::ostream& os,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::xercesc::XMLFormatTarget& ft,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::xercesc::XMLFormatTarget& ft,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::xercesc::XMLFormatTarget& ft,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        BIOGEARS_CDM_API
        void
        PhysiologyEngineDynamicStabilization (::xercesc::DOMDocument& d,
                                              const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x,
                                              ::xml_schema::flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        BIOGEARS_CDM_API
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PhysiologyEngineDynamicStabilization (const ::mil::tatrc::physiology::datamodel::PhysiologyEngineDynamicStabilizationData& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

        //@}
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_OPT_BIOGEARS_CORE_SHARE_XSD__CDM_ENGINE_CONFIGURATION_HXX
