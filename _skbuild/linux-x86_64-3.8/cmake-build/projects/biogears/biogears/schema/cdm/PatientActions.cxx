// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PatientActions.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientActionData
        // 


        // enumPatientAssessment
        // 

        enumPatientAssessment::
        enumPatientAssessment ()
        : ::xml_schema::string ()
        {
        }

        enumPatientAssessment::
        enumPatientAssessment (value v)
        : ::xml_schema::string (_xsd_enumPatientAssessment_literals_[v])
        {
        }

        enumPatientAssessment::
        enumPatientAssessment (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumPatientAssessment::
        enumPatientAssessment (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPatientAssessment::
        enumPatientAssessment (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPatientAssessment::
        enumPatientAssessment (const enumPatientAssessment& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumPatientAssessment& enumPatientAssessment::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumPatientAssessment_literals_[v]);

          return *this;
        }


        // PatientAssessmentRequestData
        // 

        const PatientAssessmentRequestData::Type_type& PatientAssessmentRequestData::
        Type () const
        {
          return this->Type_.get ();
        }

        PatientAssessmentRequestData::Type_type& PatientAssessmentRequestData::
        Type ()
        {
          return this->Type_.get ();
        }

        void PatientAssessmentRequestData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void PatientAssessmentRequestData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }


        // AcuteRespiratoryDistressData
        // 

        const AcuteRespiratoryDistressData::Severity_type& AcuteRespiratoryDistressData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        AcuteRespiratoryDistressData::Severity_type& AcuteRespiratoryDistressData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void AcuteRespiratoryDistressData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void AcuteRespiratoryDistressData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // AcuteStressData
        // 

        const AcuteStressData::Severity_type& AcuteStressData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        AcuteStressData::Severity_type& AcuteStressData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void AcuteStressData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void AcuteStressData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // AirwayObstructionData
        // 

        const AirwayObstructionData::Severity_type& AirwayObstructionData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        AirwayObstructionData::Severity_type& AirwayObstructionData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void AirwayObstructionData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void AirwayObstructionData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // ApneaData
        // 

        const ApneaData::Severity_type& ApneaData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        ApneaData::Severity_type& ApneaData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void ApneaData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void ApneaData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // AsthmaAttackData
        // 

        const AsthmaAttackData::Severity_type& AsthmaAttackData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        AsthmaAttackData::Severity_type& AsthmaAttackData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void AsthmaAttackData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void AsthmaAttackData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // enumBrainInjuryType
        // 

        enumBrainInjuryType::
        enumBrainInjuryType ()
        : ::xml_schema::string ()
        {
        }

        enumBrainInjuryType::
        enumBrainInjuryType (value v)
        : ::xml_schema::string (_xsd_enumBrainInjuryType_literals_[v])
        {
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const enumBrainInjuryType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumBrainInjuryType& enumBrainInjuryType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumBrainInjuryType_literals_[v]);

          return *this;
        }


        // BrainInjuryData
        // 

        const BrainInjuryData::Severity_type& BrainInjuryData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        BrainInjuryData::Severity_type& BrainInjuryData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void BrainInjuryData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void BrainInjuryData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }

        const BrainInjuryData::Type_type& BrainInjuryData::
        Type () const
        {
          return this->Type_.get ();
        }

        BrainInjuryData::Type_type& BrainInjuryData::
        Type ()
        {
          return this->Type_.get ();
        }

        void BrainInjuryData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void BrainInjuryData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }


        // BronchoconstrictionData
        // 

        const BronchoconstrictionData::Severity_type& BronchoconstrictionData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        BronchoconstrictionData::Severity_type& BronchoconstrictionData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void BronchoconstrictionData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void BronchoconstrictionData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // BurnWoundData
        // 

        const BurnWoundData::TotalBodySurfaceArea_type& BurnWoundData::
        TotalBodySurfaceArea () const
        {
          return this->TotalBodySurfaceArea_.get ();
        }

        BurnWoundData::TotalBodySurfaceArea_type& BurnWoundData::
        TotalBodySurfaceArea ()
        {
          return this->TotalBodySurfaceArea_.get ();
        }

        void BurnWoundData::
        TotalBodySurfaceArea (const TotalBodySurfaceArea_type& x)
        {
          this->TotalBodySurfaceArea_.set (x);
        }

        void BurnWoundData::
        TotalBodySurfaceArea (::std::unique_ptr< TotalBodySurfaceArea_type > x)
        {
          this->TotalBodySurfaceArea_.set (std::move (x));
        }


        // CardiacArrestData
        // 

        const CardiacArrestData::State_type& CardiacArrestData::
        State () const
        {
          return this->State_.get ();
        }

        CardiacArrestData::State_type& CardiacArrestData::
        State ()
        {
          return this->State_.get ();
        }

        void CardiacArrestData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void CardiacArrestData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }


        // ChestCompressionData
        // 


        // ChestCompressionForceData
        // 

        const ChestCompressionForceData::Force_type& ChestCompressionForceData::
        Force () const
        {
          return this->Force_.get ();
        }

        ChestCompressionForceData::Force_type& ChestCompressionForceData::
        Force ()
        {
          return this->Force_.get ();
        }

        void ChestCompressionForceData::
        Force (const Force_type& x)
        {
          this->Force_.set (x);
        }

        void ChestCompressionForceData::
        Force (::std::unique_ptr< Force_type > x)
        {
          this->Force_.set (std::move (x));
        }


        // ChestCompressionForceScaleData
        // 

        const ChestCompressionForceScaleData::ForceScale_type& ChestCompressionForceScaleData::
        ForceScale () const
        {
          return this->ForceScale_.get ();
        }

        ChestCompressionForceScaleData::ForceScale_type& ChestCompressionForceScaleData::
        ForceScale ()
        {
          return this->ForceScale_.get ();
        }

        void ChestCompressionForceScaleData::
        ForceScale (const ForceScale_type& x)
        {
          this->ForceScale_.set (x);
        }

        void ChestCompressionForceScaleData::
        ForceScale (::std::unique_ptr< ForceScale_type > x)
        {
          this->ForceScale_.set (std::move (x));
        }

        const ChestCompressionForceScaleData::ForcePeriod_optional& ChestCompressionForceScaleData::
        ForcePeriod () const
        {
          return this->ForcePeriod_;
        }

        ChestCompressionForceScaleData::ForcePeriod_optional& ChestCompressionForceScaleData::
        ForcePeriod ()
        {
          return this->ForcePeriod_;
        }

        void ChestCompressionForceScaleData::
        ForcePeriod (const ForcePeriod_type& x)
        {
          this->ForcePeriod_.set (x);
        }

        void ChestCompressionForceScaleData::
        ForcePeriod (const ForcePeriod_optional& x)
        {
          this->ForcePeriod_ = x;
        }

        void ChestCompressionForceScaleData::
        ForcePeriod (::std::unique_ptr< ForcePeriod_type > x)
        {
          this->ForcePeriod_.set (std::move (x));
        }


        // ChestOcclusiveDressingData
        // 

        const ChestOcclusiveDressingData::State_type& ChestOcclusiveDressingData::
        State () const
        {
          return this->State_.get ();
        }

        ChestOcclusiveDressingData::State_type& ChestOcclusiveDressingData::
        State ()
        {
          return this->State_.get ();
        }

        void ChestOcclusiveDressingData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void ChestOcclusiveDressingData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const ChestOcclusiveDressingData::Side_type& ChestOcclusiveDressingData::
        Side () const
        {
          return this->Side_.get ();
        }

        ChestOcclusiveDressingData::Side_type& ChestOcclusiveDressingData::
        Side ()
        {
          return this->Side_.get ();
        }

        void ChestOcclusiveDressingData::
        Side (const Side_type& x)
        {
          this->Side_.set (x);
        }

        void ChestOcclusiveDressingData::
        Side (::std::unique_ptr< Side_type > x)
        {
          this->Side_.set (std::move (x));
        }


        // ConsciousRespirationCommandData
        // 

        const ConsciousRespirationCommandData::Comment_optional& ConsciousRespirationCommandData::
        Comment () const
        {
          return this->Comment_;
        }

        ConsciousRespirationCommandData::Comment_optional& ConsciousRespirationCommandData::
        Comment ()
        {
          return this->Comment_;
        }

        void ConsciousRespirationCommandData::
        Comment (const Comment_type& x)
        {
          this->Comment_.set (x);
        }

        void ConsciousRespirationCommandData::
        Comment (const Comment_optional& x)
        {
          this->Comment_ = x;
        }

        void ConsciousRespirationCommandData::
        Comment (::std::unique_ptr< Comment_type > x)
        {
          this->Comment_.set (std::move (x));
        }


        // ForcedInhaleData
        // 

        const ForcedInhaleData::InspiratoryCapacityFraction_type& ForcedInhaleData::
        InspiratoryCapacityFraction () const
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        ForcedInhaleData::InspiratoryCapacityFraction_type& ForcedInhaleData::
        InspiratoryCapacityFraction ()
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        void ForcedInhaleData::
        InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x)
        {
          this->InspiratoryCapacityFraction_.set (x);
        }

        void ForcedInhaleData::
        InspiratoryCapacityFraction (::std::unique_ptr< InspiratoryCapacityFraction_type > x)
        {
          this->InspiratoryCapacityFraction_.set (std::move (x));
        }

        const ForcedInhaleData::Period_type& ForcedInhaleData::
        Period () const
        {
          return this->Period_.get ();
        }

        ForcedInhaleData::Period_type& ForcedInhaleData::
        Period ()
        {
          return this->Period_.get ();
        }

        void ForcedInhaleData::
        Period (const Period_type& x)
        {
          this->Period_.set (x);
        }

        void ForcedInhaleData::
        Period (::std::unique_ptr< Period_type > x)
        {
          this->Period_.set (std::move (x));
        }


        // ForcedExhaleData
        // 

        const ForcedExhaleData::ExpiratoryReserveVolumeFraction_type& ForcedExhaleData::
        ExpiratoryReserveVolumeFraction () const
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        ForcedExhaleData::ExpiratoryReserveVolumeFraction_type& ForcedExhaleData::
        ExpiratoryReserveVolumeFraction ()
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        void ForcedExhaleData::
        ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x)
        {
          this->ExpiratoryReserveVolumeFraction_.set (x);
        }

        void ForcedExhaleData::
        ExpiratoryReserveVolumeFraction (::std::unique_ptr< ExpiratoryReserveVolumeFraction_type > x)
        {
          this->ExpiratoryReserveVolumeFraction_.set (std::move (x));
        }

        const ForcedExhaleData::Period_type& ForcedExhaleData::
        Period () const
        {
          return this->Period_.get ();
        }

        ForcedExhaleData::Period_type& ForcedExhaleData::
        Period ()
        {
          return this->Period_.get ();
        }

        void ForcedExhaleData::
        Period (const Period_type& x)
        {
          this->Period_.set (x);
        }

        void ForcedExhaleData::
        Period (::std::unique_ptr< Period_type > x)
        {
          this->Period_.set (std::move (x));
        }


        // BreathHoldData
        // 

        const BreathHoldData::Period_type& BreathHoldData::
        Period () const
        {
          return this->Period_.get ();
        }

        BreathHoldData::Period_type& BreathHoldData::
        Period ()
        {
          return this->Period_.get ();
        }

        void BreathHoldData::
        Period (const Period_type& x)
        {
          this->Period_.set (x);
        }

        void BreathHoldData::
        Period (::std::unique_ptr< Period_type > x)
        {
          this->Period_.set (std::move (x));
        }


        // UseInhalerData
        // 


        // ConsciousRespirationData
        // 

        const ConsciousRespirationData::Command_sequence& ConsciousRespirationData::
        Command () const
        {
          return this->Command_;
        }

        ConsciousRespirationData::Command_sequence& ConsciousRespirationData::
        Command ()
        {
          return this->Command_;
        }

        void ConsciousRespirationData::
        Command (const Command_sequence& s)
        {
          this->Command_ = s;
        }

        const ConsciousRespirationData::AppendToPrevious_type& ConsciousRespirationData::
        AppendToPrevious () const
        {
          return this->AppendToPrevious_.get ();
        }

        ConsciousRespirationData::AppendToPrevious_type& ConsciousRespirationData::
        AppendToPrevious ()
        {
          return this->AppendToPrevious_.get ();
        }

        void ConsciousRespirationData::
        AppendToPrevious (const AppendToPrevious_type& x)
        {
          this->AppendToPrevious_.set (x);
        }


        // ConsumeNutrientsData
        // 

        const ConsumeNutrientsData::NutritionFile_optional& ConsumeNutrientsData::
        NutritionFile () const
        {
          return this->NutritionFile_;
        }

        ConsumeNutrientsData::NutritionFile_optional& ConsumeNutrientsData::
        NutritionFile ()
        {
          return this->NutritionFile_;
        }

        void ConsumeNutrientsData::
        NutritionFile (const NutritionFile_type& x)
        {
          this->NutritionFile_.set (x);
        }

        void ConsumeNutrientsData::
        NutritionFile (const NutritionFile_optional& x)
        {
          this->NutritionFile_ = x;
        }

        void ConsumeNutrientsData::
        NutritionFile (::std::unique_ptr< NutritionFile_type > x)
        {
          this->NutritionFile_.set (std::move (x));
        }

        const ConsumeNutrientsData::Nutrition_optional& ConsumeNutrientsData::
        Nutrition () const
        {
          return this->Nutrition_;
        }

        ConsumeNutrientsData::Nutrition_optional& ConsumeNutrientsData::
        Nutrition ()
        {
          return this->Nutrition_;
        }

        void ConsumeNutrientsData::
        Nutrition (const Nutrition_type& x)
        {
          this->Nutrition_.set (x);
        }

        void ConsumeNutrientsData::
        Nutrition (const Nutrition_optional& x)
        {
          this->Nutrition_ = x;
        }

        void ConsumeNutrientsData::
        Nutrition (::std::unique_ptr< Nutrition_type > x)
        {
          this->Nutrition_.set (std::move (x));
        }


        // GenericExerciseData
        // 

        const GenericExerciseData::Intensity_optional& GenericExerciseData::
        Intensity () const
        {
          return this->Intensity_;
        }

        GenericExerciseData::Intensity_optional& GenericExerciseData::
        Intensity ()
        {
          return this->Intensity_;
        }

        void GenericExerciseData::
        Intensity (const Intensity_type& x)
        {
          this->Intensity_.set (x);
        }

        void GenericExerciseData::
        Intensity (const Intensity_optional& x)
        {
          this->Intensity_ = x;
        }

        void GenericExerciseData::
        Intensity (::std::unique_ptr< Intensity_type > x)
        {
          this->Intensity_.set (std::move (x));
        }

        const GenericExerciseData::DesiredWorkRate_optional& GenericExerciseData::
        DesiredWorkRate () const
        {
          return this->DesiredWorkRate_;
        }

        GenericExerciseData::DesiredWorkRate_optional& GenericExerciseData::
        DesiredWorkRate ()
        {
          return this->DesiredWorkRate_;
        }

        void GenericExerciseData::
        DesiredWorkRate (const DesiredWorkRate_type& x)
        {
          this->DesiredWorkRate_.set (x);
        }

        void GenericExerciseData::
        DesiredWorkRate (const DesiredWorkRate_optional& x)
        {
          this->DesiredWorkRate_ = x;
        }

        void GenericExerciseData::
        DesiredWorkRate (::std::unique_ptr< DesiredWorkRate_type > x)
        {
          this->DesiredWorkRate_.set (std::move (x));
        }


        // RunningExerciseData
        // 

        const RunningExerciseData::Speed_type& RunningExerciseData::
        Speed () const
        {
          return this->Speed_.get ();
        }

        RunningExerciseData::Speed_type& RunningExerciseData::
        Speed ()
        {
          return this->Speed_.get ();
        }

        void RunningExerciseData::
        Speed (const Speed_type& x)
        {
          this->Speed_.set (x);
        }

        void RunningExerciseData::
        Speed (::std::unique_ptr< Speed_type > x)
        {
          this->Speed_.set (std::move (x));
        }

        const RunningExerciseData::Incline_type& RunningExerciseData::
        Incline () const
        {
          return this->Incline_.get ();
        }

        RunningExerciseData::Incline_type& RunningExerciseData::
        Incline ()
        {
          return this->Incline_.get ();
        }

        void RunningExerciseData::
        Incline (const Incline_type& x)
        {
          this->Incline_.set (x);
        }

        void RunningExerciseData::
        Incline (::std::unique_ptr< Incline_type > x)
        {
          this->Incline_.set (std::move (x));
        }

        const RunningExerciseData::AddedWeight_optional& RunningExerciseData::
        AddedWeight () const
        {
          return this->AddedWeight_;
        }

        RunningExerciseData::AddedWeight_optional& RunningExerciseData::
        AddedWeight ()
        {
          return this->AddedWeight_;
        }

        void RunningExerciseData::
        AddedWeight (const AddedWeight_type& x)
        {
          this->AddedWeight_.set (x);
        }

        void RunningExerciseData::
        AddedWeight (const AddedWeight_optional& x)
        {
          this->AddedWeight_ = x;
        }

        void RunningExerciseData::
        AddedWeight (::std::unique_ptr< AddedWeight_type > x)
        {
          this->AddedWeight_.set (std::move (x));
        }


        // CyclingExerciseData
        // 

        const CyclingExerciseData::Cadence_type& CyclingExerciseData::
        Cadence () const
        {
          return this->Cadence_.get ();
        }

        CyclingExerciseData::Cadence_type& CyclingExerciseData::
        Cadence ()
        {
          return this->Cadence_.get ();
        }

        void CyclingExerciseData::
        Cadence (const Cadence_type& x)
        {
          this->Cadence_.set (x);
        }

        void CyclingExerciseData::
        Cadence (::std::unique_ptr< Cadence_type > x)
        {
          this->Cadence_.set (std::move (x));
        }

        const CyclingExerciseData::Power_type& CyclingExerciseData::
        Power () const
        {
          return this->Power_.get ();
        }

        CyclingExerciseData::Power_type& CyclingExerciseData::
        Power ()
        {
          return this->Power_.get ();
        }

        void CyclingExerciseData::
        Power (const Power_type& x)
        {
          this->Power_.set (x);
        }

        void CyclingExerciseData::
        Power (::std::unique_ptr< Power_type > x)
        {
          this->Power_.set (std::move (x));
        }

        const CyclingExerciseData::AddedWeight_optional& CyclingExerciseData::
        AddedWeight () const
        {
          return this->AddedWeight_;
        }

        CyclingExerciseData::AddedWeight_optional& CyclingExerciseData::
        AddedWeight ()
        {
          return this->AddedWeight_;
        }

        void CyclingExerciseData::
        AddedWeight (const AddedWeight_type& x)
        {
          this->AddedWeight_.set (x);
        }

        void CyclingExerciseData::
        AddedWeight (const AddedWeight_optional& x)
        {
          this->AddedWeight_ = x;
        }

        void CyclingExerciseData::
        AddedWeight (::std::unique_ptr< AddedWeight_type > x)
        {
          this->AddedWeight_.set (std::move (x));
        }


        // StrengthExerciseData
        // 

        const StrengthExerciseData::Weight_type& StrengthExerciseData::
        Weight () const
        {
          return this->Weight_.get ();
        }

        StrengthExerciseData::Weight_type& StrengthExerciseData::
        Weight ()
        {
          return this->Weight_.get ();
        }

        void StrengthExerciseData::
        Weight (const Weight_type& x)
        {
          this->Weight_.set (x);
        }

        void StrengthExerciseData::
        Weight (::std::unique_ptr< Weight_type > x)
        {
          this->Weight_.set (std::move (x));
        }

        const StrengthExerciseData::Repetitions_type& StrengthExerciseData::
        Repetitions () const
        {
          return this->Repetitions_.get ();
        }

        StrengthExerciseData::Repetitions_type& StrengthExerciseData::
        Repetitions ()
        {
          return this->Repetitions_.get ();
        }

        void StrengthExerciseData::
        Repetitions (const Repetitions_type& x)
        {
          this->Repetitions_.set (x);
        }

        void StrengthExerciseData::
        Repetitions (::std::unique_ptr< Repetitions_type > x)
        {
          this->Repetitions_.set (std::move (x));
        }


        // ExerciseData
        // 

        const ExerciseData::GenericExercise_optional& ExerciseData::
        GenericExercise () const
        {
          return this->GenericExercise_;
        }

        ExerciseData::GenericExercise_optional& ExerciseData::
        GenericExercise ()
        {
          return this->GenericExercise_;
        }

        void ExerciseData::
        GenericExercise (const GenericExercise_type& x)
        {
          this->GenericExercise_.set (x);
        }

        void ExerciseData::
        GenericExercise (const GenericExercise_optional& x)
        {
          this->GenericExercise_ = x;
        }

        void ExerciseData::
        GenericExercise (::std::unique_ptr< GenericExercise_type > x)
        {
          this->GenericExercise_.set (std::move (x));
        }

        const ExerciseData::RunningExercise_optional& ExerciseData::
        RunningExercise () const
        {
          return this->RunningExercise_;
        }

        ExerciseData::RunningExercise_optional& ExerciseData::
        RunningExercise ()
        {
          return this->RunningExercise_;
        }

        void ExerciseData::
        RunningExercise (const RunningExercise_type& x)
        {
          this->RunningExercise_.set (x);
        }

        void ExerciseData::
        RunningExercise (const RunningExercise_optional& x)
        {
          this->RunningExercise_ = x;
        }

        void ExerciseData::
        RunningExercise (::std::unique_ptr< RunningExercise_type > x)
        {
          this->RunningExercise_.set (std::move (x));
        }

        const ExerciseData::CyclingExercise_optional& ExerciseData::
        CyclingExercise () const
        {
          return this->CyclingExercise_;
        }

        ExerciseData::CyclingExercise_optional& ExerciseData::
        CyclingExercise ()
        {
          return this->CyclingExercise_;
        }

        void ExerciseData::
        CyclingExercise (const CyclingExercise_type& x)
        {
          this->CyclingExercise_.set (x);
        }

        void ExerciseData::
        CyclingExercise (const CyclingExercise_optional& x)
        {
          this->CyclingExercise_ = x;
        }

        void ExerciseData::
        CyclingExercise (::std::unique_ptr< CyclingExercise_type > x)
        {
          this->CyclingExercise_.set (std::move (x));
        }

        const ExerciseData::StrengthExercise_optional& ExerciseData::
        StrengthExercise () const
        {
          return this->StrengthExercise_;
        }

        ExerciseData::StrengthExercise_optional& ExerciseData::
        StrengthExercise ()
        {
          return this->StrengthExercise_;
        }

        void ExerciseData::
        StrengthExercise (const StrengthExercise_type& x)
        {
          this->StrengthExercise_.set (x);
        }

        void ExerciseData::
        StrengthExercise (const StrengthExercise_optional& x)
        {
          this->StrengthExercise_ = x;
        }

        void ExerciseData::
        StrengthExercise (::std::unique_ptr< StrengthExercise_type > x)
        {
          this->StrengthExercise_.set (std::move (x));
        }


        // HemorrhageData
        // 

        const HemorrhageData::InitialRate_type& HemorrhageData::
        InitialRate () const
        {
          return this->InitialRate_.get ();
        }

        HemorrhageData::InitialRate_type& HemorrhageData::
        InitialRate ()
        {
          return this->InitialRate_.get ();
        }

        void HemorrhageData::
        InitialRate (const InitialRate_type& x)
        {
          this->InitialRate_.set (x);
        }

        void HemorrhageData::
        InitialRate (::std::unique_ptr< InitialRate_type > x)
        {
          this->InitialRate_.set (std::move (x));
        }

        const HemorrhageData::Compartment_type& HemorrhageData::
        Compartment () const
        {
          return this->Compartment_.get ();
        }

        HemorrhageData::Compartment_type& HemorrhageData::
        Compartment ()
        {
          return this->Compartment_.get ();
        }

        void HemorrhageData::
        Compartment (const Compartment_type& x)
        {
          this->Compartment_.set (x);
        }

        void HemorrhageData::
        Compartment (::std::unique_ptr< Compartment_type > x)
        {
          this->Compartment_.set (std::move (x));
        }


        // enumInfectionSeverity
        // 

        enumInfectionSeverity::
        enumInfectionSeverity ()
        : ::xml_schema::string ()
        {
        }

        enumInfectionSeverity::
        enumInfectionSeverity (value v)
        : ::xml_schema::string (_xsd_enumInfectionSeverity_literals_[v])
        {
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const enumInfectionSeverity& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumInfectionSeverity& enumInfectionSeverity::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumInfectionSeverity_literals_[v]);

          return *this;
        }


        // InfectionData
        // 

        const InfectionData::MinimumInhibitoryConcentration_type& InfectionData::
        MinimumInhibitoryConcentration () const
        {
          return this->MinimumInhibitoryConcentration_.get ();
        }

        InfectionData::MinimumInhibitoryConcentration_type& InfectionData::
        MinimumInhibitoryConcentration ()
        {
          return this->MinimumInhibitoryConcentration_.get ();
        }

        void InfectionData::
        MinimumInhibitoryConcentration (const MinimumInhibitoryConcentration_type& x)
        {
          this->MinimumInhibitoryConcentration_.set (x);
        }

        void InfectionData::
        MinimumInhibitoryConcentration (::std::unique_ptr< MinimumInhibitoryConcentration_type > x)
        {
          this->MinimumInhibitoryConcentration_.set (std::move (x));
        }

        const InfectionData::Location_type& InfectionData::
        Location () const
        {
          return this->Location_.get ();
        }

        InfectionData::Location_type& InfectionData::
        Location ()
        {
          return this->Location_.get ();
        }

        void InfectionData::
        Location (const Location_type& x)
        {
          this->Location_.set (x);
        }

        void InfectionData::
        Location (::std::unique_ptr< Location_type > x)
        {
          this->Location_.set (std::move (x));
        }

        const InfectionData::Severity_type& InfectionData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        InfectionData::Severity_type& InfectionData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void InfectionData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void InfectionData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }


        // enumIntubationType
        // 

        enumIntubationType::
        enumIntubationType ()
        : ::xml_schema::string ()
        {
        }

        enumIntubationType::
        enumIntubationType (value v)
        : ::xml_schema::string (_xsd_enumIntubationType_literals_[v])
        {
        }

        enumIntubationType::
        enumIntubationType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumIntubationType::
        enumIntubationType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumIntubationType::
        enumIntubationType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumIntubationType::
        enumIntubationType (const enumIntubationType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumIntubationType& enumIntubationType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumIntubationType_literals_[v]);

          return *this;
        }


        // IntubationData
        // 

        const IntubationData::Type_type& IntubationData::
        Type () const
        {
          return this->Type_.get ();
        }

        IntubationData::Type_type& IntubationData::
        Type ()
        {
          return this->Type_.get ();
        }

        void IntubationData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void IntubationData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }


        // MechanicalVentilationData
        // 

        const MechanicalVentilationData::Pressure_optional& MechanicalVentilationData::
        Pressure () const
        {
          return this->Pressure_;
        }

        MechanicalVentilationData::Pressure_optional& MechanicalVentilationData::
        Pressure ()
        {
          return this->Pressure_;
        }

        void MechanicalVentilationData::
        Pressure (const Pressure_type& x)
        {
          this->Pressure_.set (x);
        }

        void MechanicalVentilationData::
        Pressure (const Pressure_optional& x)
        {
          this->Pressure_ = x;
        }

        void MechanicalVentilationData::
        Pressure (::std::unique_ptr< Pressure_type > x)
        {
          this->Pressure_.set (std::move (x));
        }

        const MechanicalVentilationData::Flow_optional& MechanicalVentilationData::
        Flow () const
        {
          return this->Flow_;
        }

        MechanicalVentilationData::Flow_optional& MechanicalVentilationData::
        Flow ()
        {
          return this->Flow_;
        }

        void MechanicalVentilationData::
        Flow (const Flow_type& x)
        {
          this->Flow_.set (x);
        }

        void MechanicalVentilationData::
        Flow (const Flow_optional& x)
        {
          this->Flow_ = x;
        }

        void MechanicalVentilationData::
        Flow (::std::unique_ptr< Flow_type > x)
        {
          this->Flow_.set (std::move (x));
        }

        const MechanicalVentilationData::GasFraction_sequence& MechanicalVentilationData::
        GasFraction () const
        {
          return this->GasFraction_;
        }

        MechanicalVentilationData::GasFraction_sequence& MechanicalVentilationData::
        GasFraction ()
        {
          return this->GasFraction_;
        }

        void MechanicalVentilationData::
        GasFraction (const GasFraction_sequence& s)
        {
          this->GasFraction_ = s;
        }

        const MechanicalVentilationData::State_type& MechanicalVentilationData::
        State () const
        {
          return this->State_.get ();
        }

        MechanicalVentilationData::State_type& MechanicalVentilationData::
        State ()
        {
          return this->State_.get ();
        }

        void MechanicalVentilationData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void MechanicalVentilationData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }


        // NeedleDecompressionData
        // 

        const NeedleDecompressionData::State_type& NeedleDecompressionData::
        State () const
        {
          return this->State_.get ();
        }

        NeedleDecompressionData::State_type& NeedleDecompressionData::
        State ()
        {
          return this->State_.get ();
        }

        void NeedleDecompressionData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void NeedleDecompressionData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const NeedleDecompressionData::Side_type& NeedleDecompressionData::
        Side () const
        {
          return this->Side_.get ();
        }

        NeedleDecompressionData::Side_type& NeedleDecompressionData::
        Side ()
        {
          return this->Side_.get ();
        }

        void NeedleDecompressionData::
        Side (const Side_type& x)
        {
          this->Side_.set (x);
        }

        void NeedleDecompressionData::
        Side (::std::unique_ptr< Side_type > x)
        {
          this->Side_.set (std::move (x));
        }


        // NasalStateData
        // 

        const NasalStateData::TotalNasalDose_type& NasalStateData::
        TotalNasalDose () const
        {
          return this->TotalNasalDose_.get ();
        }

        NasalStateData::TotalNasalDose_type& NasalStateData::
        TotalNasalDose ()
        {
          return this->TotalNasalDose_.get ();
        }

        void NasalStateData::
        TotalNasalDose (const TotalNasalDose_type& x)
        {
          this->TotalNasalDose_.set (x);
        }

        void NasalStateData::
        TotalNasalDose (::std::unique_ptr< TotalNasalDose_type > x)
        {
          this->TotalNasalDose_.set (std::move (x));
        }

        const NasalStateData::UnreleasedDrugMasses_sequence& NasalStateData::
        UnreleasedDrugMasses () const
        {
          return this->UnreleasedDrugMasses_;
        }

        NasalStateData::UnreleasedDrugMasses_sequence& NasalStateData::
        UnreleasedDrugMasses ()
        {
          return this->UnreleasedDrugMasses_;
        }

        void NasalStateData::
        UnreleasedDrugMasses (const UnreleasedDrugMasses_sequence& s)
        {
          this->UnreleasedDrugMasses_ = s;
        }

        const NasalStateData::ReleasedDrugMasses_sequence& NasalStateData::
        ReleasedDrugMasses () const
        {
          return this->ReleasedDrugMasses_;
        }

        NasalStateData::ReleasedDrugMasses_sequence& NasalStateData::
        ReleasedDrugMasses ()
        {
          return this->ReleasedDrugMasses_;
        }

        void NasalStateData::
        ReleasedDrugMasses (const ReleasedDrugMasses_sequence& s)
        {
          this->ReleasedDrugMasses_ = s;
        }

        const NasalStateData::Substance_type& NasalStateData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        NasalStateData::Substance_type& NasalStateData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void NasalStateData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void NasalStateData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // PainStimulusData
        // 

        const PainStimulusData::Severity_type& PainStimulusData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        PainStimulusData::Severity_type& PainStimulusData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void PainStimulusData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void PainStimulusData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }

        const PainStimulusData::HalfLife_optional& PainStimulusData::
        HalfLife () const
        {
          return this->HalfLife_;
        }

        PainStimulusData::HalfLife_optional& PainStimulusData::
        HalfLife ()
        {
          return this->HalfLife_;
        }

        void PainStimulusData::
        HalfLife (const HalfLife_type& x)
        {
          this->HalfLife_.set (x);
        }

        void PainStimulusData::
        HalfLife (const HalfLife_optional& x)
        {
          this->HalfLife_ = x;
        }

        void PainStimulusData::
        HalfLife (::std::unique_ptr< HalfLife_type > x)
        {
          this->HalfLife_.set (std::move (x));
        }

        const PainStimulusData::Location_type& PainStimulusData::
        Location () const
        {
          return this->Location_.get ();
        }

        PainStimulusData::Location_type& PainStimulusData::
        Location ()
        {
          return this->Location_.get ();
        }

        void PainStimulusData::
        Location (const Location_type& x)
        {
          this->Location_.set (x);
        }

        void PainStimulusData::
        Location (::std::unique_ptr< Location_type > x)
        {
          this->Location_.set (std::move (x));
        }


        // PericardialEffusionData
        // 

        const PericardialEffusionData::EffusionRate_type& PericardialEffusionData::
        EffusionRate () const
        {
          return this->EffusionRate_.get ();
        }

        PericardialEffusionData::EffusionRate_type& PericardialEffusionData::
        EffusionRate ()
        {
          return this->EffusionRate_.get ();
        }

        void PericardialEffusionData::
        EffusionRate (const EffusionRate_type& x)
        {
          this->EffusionRate_.set (x);
        }

        void PericardialEffusionData::
        EffusionRate (::std::unique_ptr< EffusionRate_type > x)
        {
          this->EffusionRate_.set (std::move (x));
        }


        // enumPneumothoraxType
        // 

        enumPneumothoraxType::
        enumPneumothoraxType ()
        : ::xml_schema::string ()
        {
        }

        enumPneumothoraxType::
        enumPneumothoraxType (value v)
        : ::xml_schema::string (_xsd_enumPneumothoraxType_literals_[v])
        {
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const enumPneumothoraxType& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumPneumothoraxType& enumPneumothoraxType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumPneumothoraxType_literals_[v]);

          return *this;
        }


        // TensionPneumothoraxData
        // 

        const TensionPneumothoraxData::Severity_type& TensionPneumothoraxData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        TensionPneumothoraxData::Severity_type& TensionPneumothoraxData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void TensionPneumothoraxData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void TensionPneumothoraxData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }

        const TensionPneumothoraxData::Type_type& TensionPneumothoraxData::
        Type () const
        {
          return this->Type_.get ();
        }

        TensionPneumothoraxData::Type_type& TensionPneumothoraxData::
        Type ()
        {
          return this->Type_.get ();
        }

        void TensionPneumothoraxData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void TensionPneumothoraxData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }

        const TensionPneumothoraxData::Side_type& TensionPneumothoraxData::
        Side () const
        {
          return this->Side_.get ();
        }

        TensionPneumothoraxData::Side_type& TensionPneumothoraxData::
        Side ()
        {
          return this->Side_.get ();
        }

        void TensionPneumothoraxData::
        Side (const Side_type& x)
        {
          this->Side_.set (x);
        }

        void TensionPneumothoraxData::
        Side (::std::unique_ptr< Side_type > x)
        {
          this->Side_.set (std::move (x));
        }


        // SleepData
        // 

        const SleepData::Sleep_type& SleepData::
        Sleep () const
        {
          return this->Sleep_.get ();
        }

        SleepData::Sleep_type& SleepData::
        Sleep ()
        {
          return this->Sleep_.get ();
        }

        void SleepData::
        Sleep (const Sleep_type& x)
        {
          this->Sleep_.set (x);
        }

        void SleepData::
        Sleep (::std::unique_ptr< Sleep_type > x)
        {
          this->Sleep_.set (std::move (x));
        }


        // enumBolusAdministration
        // 

        enumBolusAdministration::
        enumBolusAdministration ()
        : ::xml_schema::string ()
        {
        }

        enumBolusAdministration::
        enumBolusAdministration (value v)
        : ::xml_schema::string (_xsd_enumBolusAdministration_literals_[v])
        {
        }

        enumBolusAdministration::
        enumBolusAdministration (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumBolusAdministration::
        enumBolusAdministration (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumBolusAdministration::
        enumBolusAdministration (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumBolusAdministration::
        enumBolusAdministration (const enumBolusAdministration& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumBolusAdministration& enumBolusAdministration::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumBolusAdministration_literals_[v]);

          return *this;
        }


        // enumOralAdministration
        // 

        enumOralAdministration::
        enumOralAdministration ()
        : ::xml_schema::string ()
        {
        }

        enumOralAdministration::
        enumOralAdministration (value v)
        : ::xml_schema::string (_xsd_enumOralAdministration_literals_[v])
        {
        }

        enumOralAdministration::
        enumOralAdministration (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumOralAdministration::
        enumOralAdministration (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumOralAdministration::
        enumOralAdministration (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumOralAdministration::
        enumOralAdministration (const enumOralAdministration& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumOralAdministration& enumOralAdministration::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumOralAdministration_literals_[v]);

          return *this;
        }


        // SubstanceAdministrationData
        // 


        // SubstanceBolusData
        // 

        const SubstanceBolusData::Substance_type& SubstanceBolusData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceBolusData::Substance_type& SubstanceBolusData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceBolusData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceBolusData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }

        const SubstanceBolusData::Concentration_type& SubstanceBolusData::
        Concentration () const
        {
          return this->Concentration_.get ();
        }

        SubstanceBolusData::Concentration_type& SubstanceBolusData::
        Concentration ()
        {
          return this->Concentration_.get ();
        }

        void SubstanceBolusData::
        Concentration (const Concentration_type& x)
        {
          this->Concentration_.set (x);
        }

        void SubstanceBolusData::
        Concentration (::std::unique_ptr< Concentration_type > x)
        {
          this->Concentration_.set (std::move (x));
        }

        const SubstanceBolusData::Dose_type& SubstanceBolusData::
        Dose () const
        {
          return this->Dose_.get ();
        }

        SubstanceBolusData::Dose_type& SubstanceBolusData::
        Dose ()
        {
          return this->Dose_.get ();
        }

        void SubstanceBolusData::
        Dose (const Dose_type& x)
        {
          this->Dose_.set (x);
        }

        void SubstanceBolusData::
        Dose (::std::unique_ptr< Dose_type > x)
        {
          this->Dose_.set (std::move (x));
        }

        const SubstanceBolusData::AdminTime_optional& SubstanceBolusData::
        AdminTime () const
        {
          return this->AdminTime_;
        }

        SubstanceBolusData::AdminTime_optional& SubstanceBolusData::
        AdminTime ()
        {
          return this->AdminTime_;
        }

        void SubstanceBolusData::
        AdminTime (const AdminTime_type& x)
        {
          this->AdminTime_.set (x);
        }

        void SubstanceBolusData::
        AdminTime (const AdminTime_optional& x)
        {
          this->AdminTime_ = x;
        }

        void SubstanceBolusData::
        AdminTime (::std::unique_ptr< AdminTime_type > x)
        {
          this->AdminTime_.set (std::move (x));
        }

        const SubstanceBolusData::AdminRoute_type& SubstanceBolusData::
        AdminRoute () const
        {
          return this->AdminRoute_.get ();
        }

        SubstanceBolusData::AdminRoute_type& SubstanceBolusData::
        AdminRoute ()
        {
          return this->AdminRoute_.get ();
        }

        void SubstanceBolusData::
        AdminRoute (const AdminRoute_type& x)
        {
          this->AdminRoute_.set (x);
        }

        void SubstanceBolusData::
        AdminRoute (::std::unique_ptr< AdminRoute_type > x)
        {
          this->AdminRoute_.set (std::move (x));
        }


        // SubstanceBolusStateData
        // 

        const SubstanceBolusStateData::ElapsedTime_type& SubstanceBolusStateData::
        ElapsedTime () const
        {
          return this->ElapsedTime_.get ();
        }

        SubstanceBolusStateData::ElapsedTime_type& SubstanceBolusStateData::
        ElapsedTime ()
        {
          return this->ElapsedTime_.get ();
        }

        void SubstanceBolusStateData::
        ElapsedTime (const ElapsedTime_type& x)
        {
          this->ElapsedTime_.set (x);
        }

        void SubstanceBolusStateData::
        ElapsedTime (::std::unique_ptr< ElapsedTime_type > x)
        {
          this->ElapsedTime_.set (std::move (x));
        }

        const SubstanceBolusStateData::AdministeredDose_type& SubstanceBolusStateData::
        AdministeredDose () const
        {
          return this->AdministeredDose_.get ();
        }

        SubstanceBolusStateData::AdministeredDose_type& SubstanceBolusStateData::
        AdministeredDose ()
        {
          return this->AdministeredDose_.get ();
        }

        void SubstanceBolusStateData::
        AdministeredDose (const AdministeredDose_type& x)
        {
          this->AdministeredDose_.set (x);
        }

        void SubstanceBolusStateData::
        AdministeredDose (::std::unique_ptr< AdministeredDose_type > x)
        {
          this->AdministeredDose_.set (std::move (x));
        }

        const SubstanceBolusStateData::Substance_type& SubstanceBolusStateData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceBolusStateData::Substance_type& SubstanceBolusStateData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceBolusStateData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceBolusStateData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // SubstanceCompoundInfusionData
        // 

        const SubstanceCompoundInfusionData::SubstanceCompound_type& SubstanceCompoundInfusionData::
        SubstanceCompound () const
        {
          return this->SubstanceCompound_.get ();
        }

        SubstanceCompoundInfusionData::SubstanceCompound_type& SubstanceCompoundInfusionData::
        SubstanceCompound ()
        {
          return this->SubstanceCompound_.get ();
        }

        void SubstanceCompoundInfusionData::
        SubstanceCompound (const SubstanceCompound_type& x)
        {
          this->SubstanceCompound_.set (x);
        }

        void SubstanceCompoundInfusionData::
        SubstanceCompound (::std::unique_ptr< SubstanceCompound_type > x)
        {
          this->SubstanceCompound_.set (std::move (x));
        }

        const SubstanceCompoundInfusionData::BagVolume_type& SubstanceCompoundInfusionData::
        BagVolume () const
        {
          return this->BagVolume_.get ();
        }

        SubstanceCompoundInfusionData::BagVolume_type& SubstanceCompoundInfusionData::
        BagVolume ()
        {
          return this->BagVolume_.get ();
        }

        void SubstanceCompoundInfusionData::
        BagVolume (const BagVolume_type& x)
        {
          this->BagVolume_.set (x);
        }

        void SubstanceCompoundInfusionData::
        BagVolume (::std::unique_ptr< BagVolume_type > x)
        {
          this->BagVolume_.set (std::move (x));
        }

        const SubstanceCompoundInfusionData::Rate_type& SubstanceCompoundInfusionData::
        Rate () const
        {
          return this->Rate_.get ();
        }

        SubstanceCompoundInfusionData::Rate_type& SubstanceCompoundInfusionData::
        Rate ()
        {
          return this->Rate_.get ();
        }

        void SubstanceCompoundInfusionData::
        Rate (const Rate_type& x)
        {
          this->Rate_.set (x);
        }

        void SubstanceCompoundInfusionData::
        Rate (::std::unique_ptr< Rate_type > x)
        {
          this->Rate_.set (std::move (x));
        }


        // SubstanceInfusionData
        // 

        const SubstanceInfusionData::Substance_type& SubstanceInfusionData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceInfusionData::Substance_type& SubstanceInfusionData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceInfusionData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceInfusionData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }

        const SubstanceInfusionData::Concentration_type& SubstanceInfusionData::
        Concentration () const
        {
          return this->Concentration_.get ();
        }

        SubstanceInfusionData::Concentration_type& SubstanceInfusionData::
        Concentration ()
        {
          return this->Concentration_.get ();
        }

        void SubstanceInfusionData::
        Concentration (const Concentration_type& x)
        {
          this->Concentration_.set (x);
        }

        void SubstanceInfusionData::
        Concentration (::std::unique_ptr< Concentration_type > x)
        {
          this->Concentration_.set (std::move (x));
        }

        const SubstanceInfusionData::Rate_type& SubstanceInfusionData::
        Rate () const
        {
          return this->Rate_.get ();
        }

        SubstanceInfusionData::Rate_type& SubstanceInfusionData::
        Rate ()
        {
          return this->Rate_.get ();
        }

        void SubstanceInfusionData::
        Rate (const Rate_type& x)
        {
          this->Rate_.set (x);
        }

        void SubstanceInfusionData::
        Rate (::std::unique_ptr< Rate_type > x)
        {
          this->Rate_.set (std::move (x));
        }


        // SubstanceNasalDoseData
        // 

        const SubstanceNasalDoseData::Substance_type& SubstanceNasalDoseData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceNasalDoseData::Substance_type& SubstanceNasalDoseData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceNasalDoseData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceNasalDoseData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }

        const SubstanceNasalDoseData::Dose_type& SubstanceNasalDoseData::
        Dose () const
        {
          return this->Dose_.get ();
        }

        SubstanceNasalDoseData::Dose_type& SubstanceNasalDoseData::
        Dose ()
        {
          return this->Dose_.get ();
        }

        void SubstanceNasalDoseData::
        Dose (const Dose_type& x)
        {
          this->Dose_.set (x);
        }

        void SubstanceNasalDoseData::
        Dose (::std::unique_ptr< Dose_type > x)
        {
          this->Dose_.set (std::move (x));
        }

        const SubstanceNasalDoseData::ElapsedTime_optional& SubstanceNasalDoseData::
        ElapsedTime () const
        {
          return this->ElapsedTime_;
        }

        SubstanceNasalDoseData::ElapsedTime_optional& SubstanceNasalDoseData::
        ElapsedTime ()
        {
          return this->ElapsedTime_;
        }

        void SubstanceNasalDoseData::
        ElapsedTime (const ElapsedTime_type& x)
        {
          this->ElapsedTime_.set (x);
        }

        void SubstanceNasalDoseData::
        ElapsedTime (const ElapsedTime_optional& x)
        {
          this->ElapsedTime_ = x;
        }

        void SubstanceNasalDoseData::
        ElapsedTime (::std::unique_ptr< ElapsedTime_type > x)
        {
          this->ElapsedTime_.set (std::move (x));
        }


        // SubstanceOralDoseData
        // 

        const SubstanceOralDoseData::Substance_type& SubstanceOralDoseData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceOralDoseData::Substance_type& SubstanceOralDoseData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceOralDoseData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceOralDoseData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }

        const SubstanceOralDoseData::Dose_type& SubstanceOralDoseData::
        Dose () const
        {
          return this->Dose_.get ();
        }

        SubstanceOralDoseData::Dose_type& SubstanceOralDoseData::
        Dose ()
        {
          return this->Dose_.get ();
        }

        void SubstanceOralDoseData::
        Dose (const Dose_type& x)
        {
          this->Dose_.set (x);
        }

        void SubstanceOralDoseData::
        Dose (::std::unique_ptr< Dose_type > x)
        {
          this->Dose_.set (std::move (x));
        }

        const SubstanceOralDoseData::AdminRoute_type& SubstanceOralDoseData::
        AdminRoute () const
        {
          return this->AdminRoute_.get ();
        }

        SubstanceOralDoseData::AdminRoute_type& SubstanceOralDoseData::
        AdminRoute ()
        {
          return this->AdminRoute_.get ();
        }

        void SubstanceOralDoseData::
        AdminRoute (const AdminRoute_type& x)
        {
          this->AdminRoute_.set (x);
        }

        void SubstanceOralDoseData::
        AdminRoute (::std::unique_ptr< AdminRoute_type > x)
        {
          this->AdminRoute_.set (std::move (x));
        }


        // enumTourniquetApplicationLevel
        // 

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel ()
        : ::xml_schema::string ()
        {
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (value v)
        : ::xml_schema::string (_xsd_enumTourniquetApplicationLevel_literals_[v])
        {
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const enumTourniquetApplicationLevel& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumTourniquetApplicationLevel& enumTourniquetApplicationLevel::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumTourniquetApplicationLevel_literals_[v]);

          return *this;
        }


        // TourniquetData
        // 

        const TourniquetData::Compartment_type& TourniquetData::
        Compartment () const
        {
          return this->Compartment_.get ();
        }

        TourniquetData::Compartment_type& TourniquetData::
        Compartment ()
        {
          return this->Compartment_.get ();
        }

        void TourniquetData::
        Compartment (const Compartment_type& x)
        {
          this->Compartment_.set (x);
        }

        void TourniquetData::
        Compartment (::std::unique_ptr< Compartment_type > x)
        {
          this->Compartment_.set (std::move (x));
        }

        const TourniquetData::TourniquetLevel_type& TourniquetData::
        TourniquetLevel () const
        {
          return this->TourniquetLevel_.get ();
        }

        TourniquetData::TourniquetLevel_type& TourniquetData::
        TourniquetLevel ()
        {
          return this->TourniquetLevel_.get ();
        }

        void TourniquetData::
        TourniquetLevel (const TourniquetLevel_type& x)
        {
          this->TourniquetLevel_.set (x);
        }

        void TourniquetData::
        TourniquetLevel (::std::unique_ptr< TourniquetLevel_type > x)
        {
          this->TourniquetLevel_.set (std::move (x));
        }


        // TransmucosalStateData
        // 

        const TransmucosalStateData::MouthSolidMass_type& TransmucosalStateData::
        MouthSolidMass () const
        {
          return this->MouthSolidMass_.get ();
        }

        TransmucosalStateData::MouthSolidMass_type& TransmucosalStateData::
        MouthSolidMass ()
        {
          return this->MouthSolidMass_.get ();
        }

        void TransmucosalStateData::
        MouthSolidMass (const MouthSolidMass_type& x)
        {
          this->MouthSolidMass_.set (x);
        }

        void TransmucosalStateData::
        MouthSolidMass (::std::unique_ptr< MouthSolidMass_type > x)
        {
          this->MouthSolidMass_.set (std::move (x));
        }

        const TransmucosalStateData::SalivaConcentration_type& TransmucosalStateData::
        SalivaConcentration () const
        {
          return this->SalivaConcentration_.get ();
        }

        TransmucosalStateData::SalivaConcentration_type& TransmucosalStateData::
        SalivaConcentration ()
        {
          return this->SalivaConcentration_.get ();
        }

        void TransmucosalStateData::
        SalivaConcentration (const SalivaConcentration_type& x)
        {
          this->SalivaConcentration_.set (x);
        }

        void TransmucosalStateData::
        SalivaConcentration (::std::unique_ptr< SalivaConcentration_type > x)
        {
          this->SalivaConcentration_.set (std::move (x));
        }

        const TransmucosalStateData::BuccalConcentrations_sequence& TransmucosalStateData::
        BuccalConcentrations () const
        {
          return this->BuccalConcentrations_;
        }

        TransmucosalStateData::BuccalConcentrations_sequence& TransmucosalStateData::
        BuccalConcentrations ()
        {
          return this->BuccalConcentrations_;
        }

        void TransmucosalStateData::
        BuccalConcentrations (const BuccalConcentrations_sequence& s)
        {
          this->BuccalConcentrations_ = s;
        }

        const TransmucosalStateData::SublingualConcentrations_sequence& TransmucosalStateData::
        SublingualConcentrations () const
        {
          return this->SublingualConcentrations_;
        }

        TransmucosalStateData::SublingualConcentrations_sequence& TransmucosalStateData::
        SublingualConcentrations ()
        {
          return this->SublingualConcentrations_;
        }

        void TransmucosalStateData::
        SublingualConcentrations (const SublingualConcentrations_sequence& s)
        {
          this->SublingualConcentrations_ = s;
        }

        const TransmucosalStateData::Substance_type& TransmucosalStateData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        TransmucosalStateData::Substance_type& TransmucosalStateData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void TransmucosalStateData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void TransmucosalStateData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // UrinateData
        // 


        // OverrideData
        // 

        const OverrideData::ArterialBloodPHOverride_optional& OverrideData::
        ArterialBloodPHOverride () const
        {
          return this->ArterialBloodPHOverride_;
        }

        OverrideData::ArterialBloodPHOverride_optional& OverrideData::
        ArterialBloodPHOverride ()
        {
          return this->ArterialBloodPHOverride_;
        }

        void OverrideData::
        ArterialBloodPHOverride (const ArterialBloodPHOverride_type& x)
        {
          this->ArterialBloodPHOverride_.set (x);
        }

        void OverrideData::
        ArterialBloodPHOverride (const ArterialBloodPHOverride_optional& x)
        {
          this->ArterialBloodPHOverride_ = x;
        }

        void OverrideData::
        ArterialBloodPHOverride (::std::unique_ptr< ArterialBloodPHOverride_type > x)
        {
          this->ArterialBloodPHOverride_.set (std::move (x));
        }

        const OverrideData::CalciumConcentrationOverride_optional& OverrideData::
        CalciumConcentrationOverride () const
        {
          return this->CalciumConcentrationOverride_;
        }

        OverrideData::CalciumConcentrationOverride_optional& OverrideData::
        CalciumConcentrationOverride ()
        {
          return this->CalciumConcentrationOverride_;
        }

        void OverrideData::
        CalciumConcentrationOverride (const CalciumConcentrationOverride_type& x)
        {
          this->CalciumConcentrationOverride_.set (x);
        }

        void OverrideData::
        CalciumConcentrationOverride (const CalciumConcentrationOverride_optional& x)
        {
          this->CalciumConcentrationOverride_ = x;
        }

        void OverrideData::
        CalciumConcentrationOverride (::std::unique_ptr< CalciumConcentrationOverride_type > x)
        {
          this->CalciumConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::CarbonDioxideSaturationOverride_optional& OverrideData::
        CarbonDioxideSaturationOverride () const
        {
          return this->CarbonDioxideSaturationOverride_;
        }

        OverrideData::CarbonDioxideSaturationOverride_optional& OverrideData::
        CarbonDioxideSaturationOverride ()
        {
          return this->CarbonDioxideSaturationOverride_;
        }

        void OverrideData::
        CarbonDioxideSaturationOverride (const CarbonDioxideSaturationOverride_type& x)
        {
          this->CarbonDioxideSaturationOverride_.set (x);
        }

        void OverrideData::
        CarbonDioxideSaturationOverride (const CarbonDioxideSaturationOverride_optional& x)
        {
          this->CarbonDioxideSaturationOverride_ = x;
        }

        void OverrideData::
        CarbonDioxideSaturationOverride (::std::unique_ptr< CarbonDioxideSaturationOverride_type > x)
        {
          this->CarbonDioxideSaturationOverride_.set (std::move (x));
        }

        const OverrideData::CarbonMonoxideSaturationOverride_optional& OverrideData::
        CarbonMonoxideSaturationOverride () const
        {
          return this->CarbonMonoxideSaturationOverride_;
        }

        OverrideData::CarbonMonoxideSaturationOverride_optional& OverrideData::
        CarbonMonoxideSaturationOverride ()
        {
          return this->CarbonMonoxideSaturationOverride_;
        }

        void OverrideData::
        CarbonMonoxideSaturationOverride (const CarbonMonoxideSaturationOverride_type& x)
        {
          this->CarbonMonoxideSaturationOverride_.set (x);
        }

        void OverrideData::
        CarbonMonoxideSaturationOverride (const CarbonMonoxideSaturationOverride_optional& x)
        {
          this->CarbonMonoxideSaturationOverride_ = x;
        }

        void OverrideData::
        CarbonMonoxideSaturationOverride (::std::unique_ptr< CarbonMonoxideSaturationOverride_type > x)
        {
          this->CarbonMonoxideSaturationOverride_.set (std::move (x));
        }

        const OverrideData::GlucoseConcentrationOverride_optional& OverrideData::
        GlucoseConcentrationOverride () const
        {
          return this->GlucoseConcentrationOverride_;
        }

        OverrideData::GlucoseConcentrationOverride_optional& OverrideData::
        GlucoseConcentrationOverride ()
        {
          return this->GlucoseConcentrationOverride_;
        }

        void OverrideData::
        GlucoseConcentrationOverride (const GlucoseConcentrationOverride_type& x)
        {
          this->GlucoseConcentrationOverride_.set (x);
        }

        void OverrideData::
        GlucoseConcentrationOverride (const GlucoseConcentrationOverride_optional& x)
        {
          this->GlucoseConcentrationOverride_ = x;
        }

        void OverrideData::
        GlucoseConcentrationOverride (::std::unique_ptr< GlucoseConcentrationOverride_type > x)
        {
          this->GlucoseConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::LactateConcentrationOverride_optional& OverrideData::
        LactateConcentrationOverride () const
        {
          return this->LactateConcentrationOverride_;
        }

        OverrideData::LactateConcentrationOverride_optional& OverrideData::
        LactateConcentrationOverride ()
        {
          return this->LactateConcentrationOverride_;
        }

        void OverrideData::
        LactateConcentrationOverride (const LactateConcentrationOverride_type& x)
        {
          this->LactateConcentrationOverride_.set (x);
        }

        void OverrideData::
        LactateConcentrationOverride (const LactateConcentrationOverride_optional& x)
        {
          this->LactateConcentrationOverride_ = x;
        }

        void OverrideData::
        LactateConcentrationOverride (::std::unique_ptr< LactateConcentrationOverride_type > x)
        {
          this->LactateConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::OxygenSaturationOverride_optional& OverrideData::
        OxygenSaturationOverride () const
        {
          return this->OxygenSaturationOverride_;
        }

        OverrideData::OxygenSaturationOverride_optional& OverrideData::
        OxygenSaturationOverride ()
        {
          return this->OxygenSaturationOverride_;
        }

        void OverrideData::
        OxygenSaturationOverride (const OxygenSaturationOverride_type& x)
        {
          this->OxygenSaturationOverride_.set (x);
        }

        void OverrideData::
        OxygenSaturationOverride (const OxygenSaturationOverride_optional& x)
        {
          this->OxygenSaturationOverride_ = x;
        }

        void OverrideData::
        OxygenSaturationOverride (::std::unique_ptr< OxygenSaturationOverride_type > x)
        {
          this->OxygenSaturationOverride_.set (std::move (x));
        }

        const OverrideData::PhosphateOverride_optional& OverrideData::
        PhosphateOverride () const
        {
          return this->PhosphateOverride_;
        }

        OverrideData::PhosphateOverride_optional& OverrideData::
        PhosphateOverride ()
        {
          return this->PhosphateOverride_;
        }

        void OverrideData::
        PhosphateOverride (const PhosphateOverride_type& x)
        {
          this->PhosphateOverride_.set (x);
        }

        void OverrideData::
        PhosphateOverride (const PhosphateOverride_optional& x)
        {
          this->PhosphateOverride_ = x;
        }

        void OverrideData::
        PhosphateOverride (::std::unique_ptr< PhosphateOverride_type > x)
        {
          this->PhosphateOverride_.set (std::move (x));
        }

        const OverrideData::PotassiumConcentrationOverride_optional& OverrideData::
        PotassiumConcentrationOverride () const
        {
          return this->PotassiumConcentrationOverride_;
        }

        OverrideData::PotassiumConcentrationOverride_optional& OverrideData::
        PotassiumConcentrationOverride ()
        {
          return this->PotassiumConcentrationOverride_;
        }

        void OverrideData::
        PotassiumConcentrationOverride (const PotassiumConcentrationOverride_type& x)
        {
          this->PotassiumConcentrationOverride_.set (x);
        }

        void OverrideData::
        PotassiumConcentrationOverride (const PotassiumConcentrationOverride_optional& x)
        {
          this->PotassiumConcentrationOverride_ = x;
        }

        void OverrideData::
        PotassiumConcentrationOverride (::std::unique_ptr< PotassiumConcentrationOverride_type > x)
        {
          this->PotassiumConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::SodiumConcentrationOverride_optional& OverrideData::
        SodiumConcentrationOverride () const
        {
          return this->SodiumConcentrationOverride_;
        }

        OverrideData::SodiumConcentrationOverride_optional& OverrideData::
        SodiumConcentrationOverride ()
        {
          return this->SodiumConcentrationOverride_;
        }

        void OverrideData::
        SodiumConcentrationOverride (const SodiumConcentrationOverride_type& x)
        {
          this->SodiumConcentrationOverride_.set (x);
        }

        void OverrideData::
        SodiumConcentrationOverride (const SodiumConcentrationOverride_optional& x)
        {
          this->SodiumConcentrationOverride_ = x;
        }

        void OverrideData::
        SodiumConcentrationOverride (::std::unique_ptr< SodiumConcentrationOverride_type > x)
        {
          this->SodiumConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::TotalBilirubinOverride_optional& OverrideData::
        TotalBilirubinOverride () const
        {
          return this->TotalBilirubinOverride_;
        }

        OverrideData::TotalBilirubinOverride_optional& OverrideData::
        TotalBilirubinOverride ()
        {
          return this->TotalBilirubinOverride_;
        }

        void OverrideData::
        TotalBilirubinOverride (const TotalBilirubinOverride_type& x)
        {
          this->TotalBilirubinOverride_.set (x);
        }

        void OverrideData::
        TotalBilirubinOverride (const TotalBilirubinOverride_optional& x)
        {
          this->TotalBilirubinOverride_ = x;
        }

        void OverrideData::
        TotalBilirubinOverride (::std::unique_ptr< TotalBilirubinOverride_type > x)
        {
          this->TotalBilirubinOverride_.set (std::move (x));
        }

        const OverrideData::VenousBloodPHOverride_optional& OverrideData::
        VenousBloodPHOverride () const
        {
          return this->VenousBloodPHOverride_;
        }

        OverrideData::VenousBloodPHOverride_optional& OverrideData::
        VenousBloodPHOverride ()
        {
          return this->VenousBloodPHOverride_;
        }

        void OverrideData::
        VenousBloodPHOverride (const VenousBloodPHOverride_type& x)
        {
          this->VenousBloodPHOverride_.set (x);
        }

        void OverrideData::
        VenousBloodPHOverride (const VenousBloodPHOverride_optional& x)
        {
          this->VenousBloodPHOverride_ = x;
        }

        void OverrideData::
        VenousBloodPHOverride (::std::unique_ptr< VenousBloodPHOverride_type > x)
        {
          this->VenousBloodPHOverride_.set (std::move (x));
        }

        const OverrideData::WhiteBloodCellCountOverride_optional& OverrideData::
        WhiteBloodCellCountOverride () const
        {
          return this->WhiteBloodCellCountOverride_;
        }

        OverrideData::WhiteBloodCellCountOverride_optional& OverrideData::
        WhiteBloodCellCountOverride ()
        {
          return this->WhiteBloodCellCountOverride_;
        }

        void OverrideData::
        WhiteBloodCellCountOverride (const WhiteBloodCellCountOverride_type& x)
        {
          this->WhiteBloodCellCountOverride_.set (x);
        }

        void OverrideData::
        WhiteBloodCellCountOverride (const WhiteBloodCellCountOverride_optional& x)
        {
          this->WhiteBloodCellCountOverride_ = x;
        }

        void OverrideData::
        WhiteBloodCellCountOverride (::std::unique_ptr< WhiteBloodCellCountOverride_type > x)
        {
          this->WhiteBloodCellCountOverride_.set (std::move (x));
        }

        const OverrideData::BloodVolumeOverride_optional& OverrideData::
        BloodVolumeOverride () const
        {
          return this->BloodVolumeOverride_;
        }

        OverrideData::BloodVolumeOverride_optional& OverrideData::
        BloodVolumeOverride ()
        {
          return this->BloodVolumeOverride_;
        }

        void OverrideData::
        BloodVolumeOverride (const BloodVolumeOverride_type& x)
        {
          this->BloodVolumeOverride_.set (x);
        }

        void OverrideData::
        BloodVolumeOverride (const BloodVolumeOverride_optional& x)
        {
          this->BloodVolumeOverride_ = x;
        }

        void OverrideData::
        BloodVolumeOverride (::std::unique_ptr< BloodVolumeOverride_type > x)
        {
          this->BloodVolumeOverride_.set (std::move (x));
        }

        const OverrideData::CardiacOutputOverride_optional& OverrideData::
        CardiacOutputOverride () const
        {
          return this->CardiacOutputOverride_;
        }

        OverrideData::CardiacOutputOverride_optional& OverrideData::
        CardiacOutputOverride ()
        {
          return this->CardiacOutputOverride_;
        }

        void OverrideData::
        CardiacOutputOverride (const CardiacOutputOverride_type& x)
        {
          this->CardiacOutputOverride_.set (x);
        }

        void OverrideData::
        CardiacOutputOverride (const CardiacOutputOverride_optional& x)
        {
          this->CardiacOutputOverride_ = x;
        }

        void OverrideData::
        CardiacOutputOverride (::std::unique_ptr< CardiacOutputOverride_type > x)
        {
          this->CardiacOutputOverride_.set (std::move (x));
        }

        const OverrideData::DiastolicArterialPressureOverride_optional& OverrideData::
        DiastolicArterialPressureOverride () const
        {
          return this->DiastolicArterialPressureOverride_;
        }

        OverrideData::DiastolicArterialPressureOverride_optional& OverrideData::
        DiastolicArterialPressureOverride ()
        {
          return this->DiastolicArterialPressureOverride_;
        }

        void OverrideData::
        DiastolicArterialPressureOverride (const DiastolicArterialPressureOverride_type& x)
        {
          this->DiastolicArterialPressureOverride_.set (x);
        }

        void OverrideData::
        DiastolicArterialPressureOverride (const DiastolicArterialPressureOverride_optional& x)
        {
          this->DiastolicArterialPressureOverride_ = x;
        }

        void OverrideData::
        DiastolicArterialPressureOverride (::std::unique_ptr< DiastolicArterialPressureOverride_type > x)
        {
          this->DiastolicArterialPressureOverride_.set (std::move (x));
        }

        const OverrideData::HeartRateOverride_optional& OverrideData::
        HeartRateOverride () const
        {
          return this->HeartRateOverride_;
        }

        OverrideData::HeartRateOverride_optional& OverrideData::
        HeartRateOverride ()
        {
          return this->HeartRateOverride_;
        }

        void OverrideData::
        HeartRateOverride (const HeartRateOverride_type& x)
        {
          this->HeartRateOverride_.set (x);
        }

        void OverrideData::
        HeartRateOverride (const HeartRateOverride_optional& x)
        {
          this->HeartRateOverride_ = x;
        }

        void OverrideData::
        HeartRateOverride (::std::unique_ptr< HeartRateOverride_type > x)
        {
          this->HeartRateOverride_.set (std::move (x));
        }

        const OverrideData::HeartStrokeVolumeOverride_optional& OverrideData::
        HeartStrokeVolumeOverride () const
        {
          return this->HeartStrokeVolumeOverride_;
        }

        OverrideData::HeartStrokeVolumeOverride_optional& OverrideData::
        HeartStrokeVolumeOverride ()
        {
          return this->HeartStrokeVolumeOverride_;
        }

        void OverrideData::
        HeartStrokeVolumeOverride (const HeartStrokeVolumeOverride_type& x)
        {
          this->HeartStrokeVolumeOverride_.set (x);
        }

        void OverrideData::
        HeartStrokeVolumeOverride (const HeartStrokeVolumeOverride_optional& x)
        {
          this->HeartStrokeVolumeOverride_ = x;
        }

        void OverrideData::
        HeartStrokeVolumeOverride (::std::unique_ptr< HeartStrokeVolumeOverride_type > x)
        {
          this->HeartStrokeVolumeOverride_.set (std::move (x));
        }

        const OverrideData::MeanArterialPressureOverride_optional& OverrideData::
        MeanArterialPressureOverride () const
        {
          return this->MeanArterialPressureOverride_;
        }

        OverrideData::MeanArterialPressureOverride_optional& OverrideData::
        MeanArterialPressureOverride ()
        {
          return this->MeanArterialPressureOverride_;
        }

        void OverrideData::
        MeanArterialPressureOverride (const MeanArterialPressureOverride_type& x)
        {
          this->MeanArterialPressureOverride_.set (x);
        }

        void OverrideData::
        MeanArterialPressureOverride (const MeanArterialPressureOverride_optional& x)
        {
          this->MeanArterialPressureOverride_ = x;
        }

        void OverrideData::
        MeanArterialPressureOverride (::std::unique_ptr< MeanArterialPressureOverride_type > x)
        {
          this->MeanArterialPressureOverride_.set (std::move (x));
        }

        const OverrideData::SystolicArterialPressureOverride_optional& OverrideData::
        SystolicArterialPressureOverride () const
        {
          return this->SystolicArterialPressureOverride_;
        }

        OverrideData::SystolicArterialPressureOverride_optional& OverrideData::
        SystolicArterialPressureOverride ()
        {
          return this->SystolicArterialPressureOverride_;
        }

        void OverrideData::
        SystolicArterialPressureOverride (const SystolicArterialPressureOverride_type& x)
        {
          this->SystolicArterialPressureOverride_.set (x);
        }

        void OverrideData::
        SystolicArterialPressureOverride (const SystolicArterialPressureOverride_optional& x)
        {
          this->SystolicArterialPressureOverride_ = x;
        }

        void OverrideData::
        SystolicArterialPressureOverride (::std::unique_ptr< SystolicArterialPressureOverride_type > x)
        {
          this->SystolicArterialPressureOverride_.set (std::move (x));
        }

        const OverrideData::InsulinSynthesisRateOverride_optional& OverrideData::
        InsulinSynthesisRateOverride () const
        {
          return this->InsulinSynthesisRateOverride_;
        }

        OverrideData::InsulinSynthesisRateOverride_optional& OverrideData::
        InsulinSynthesisRateOverride ()
        {
          return this->InsulinSynthesisRateOverride_;
        }

        void OverrideData::
        InsulinSynthesisRateOverride (const InsulinSynthesisRateOverride_type& x)
        {
          this->InsulinSynthesisRateOverride_.set (x);
        }

        void OverrideData::
        InsulinSynthesisRateOverride (const InsulinSynthesisRateOverride_optional& x)
        {
          this->InsulinSynthesisRateOverride_ = x;
        }

        void OverrideData::
        InsulinSynthesisRateOverride (::std::unique_ptr< InsulinSynthesisRateOverride_type > x)
        {
          this->InsulinSynthesisRateOverride_.set (std::move (x));
        }

        const OverrideData::GlucagonSynthesisRateOverride_optional& OverrideData::
        GlucagonSynthesisRateOverride () const
        {
          return this->GlucagonSynthesisRateOverride_;
        }

        OverrideData::GlucagonSynthesisRateOverride_optional& OverrideData::
        GlucagonSynthesisRateOverride ()
        {
          return this->GlucagonSynthesisRateOverride_;
        }

        void OverrideData::
        GlucagonSynthesisRateOverride (const GlucagonSynthesisRateOverride_type& x)
        {
          this->GlucagonSynthesisRateOverride_.set (x);
        }

        void OverrideData::
        GlucagonSynthesisRateOverride (const GlucagonSynthesisRateOverride_optional& x)
        {
          this->GlucagonSynthesisRateOverride_ = x;
        }

        void OverrideData::
        GlucagonSynthesisRateOverride (::std::unique_ptr< GlucagonSynthesisRateOverride_type > x)
        {
          this->GlucagonSynthesisRateOverride_.set (std::move (x));
        }

        const OverrideData::AchievedExerciseLevelOverride_optional& OverrideData::
        AchievedExerciseLevelOverride () const
        {
          return this->AchievedExerciseLevelOverride_;
        }

        OverrideData::AchievedExerciseLevelOverride_optional& OverrideData::
        AchievedExerciseLevelOverride ()
        {
          return this->AchievedExerciseLevelOverride_;
        }

        void OverrideData::
        AchievedExerciseLevelOverride (const AchievedExerciseLevelOverride_type& x)
        {
          this->AchievedExerciseLevelOverride_.set (x);
        }

        void OverrideData::
        AchievedExerciseLevelOverride (const AchievedExerciseLevelOverride_optional& x)
        {
          this->AchievedExerciseLevelOverride_ = x;
        }

        void OverrideData::
        AchievedExerciseLevelOverride (::std::unique_ptr< AchievedExerciseLevelOverride_type > x)
        {
          this->AchievedExerciseLevelOverride_.set (std::move (x));
        }

        const OverrideData::ChlorideLostToSweatOverride_optional& OverrideData::
        ChlorideLostToSweatOverride () const
        {
          return this->ChlorideLostToSweatOverride_;
        }

        OverrideData::ChlorideLostToSweatOverride_optional& OverrideData::
        ChlorideLostToSweatOverride ()
        {
          return this->ChlorideLostToSweatOverride_;
        }

        void OverrideData::
        ChlorideLostToSweatOverride (const ChlorideLostToSweatOverride_type& x)
        {
          this->ChlorideLostToSweatOverride_.set (x);
        }

        void OverrideData::
        ChlorideLostToSweatOverride (const ChlorideLostToSweatOverride_optional& x)
        {
          this->ChlorideLostToSweatOverride_ = x;
        }

        void OverrideData::
        ChlorideLostToSweatOverride (::std::unique_ptr< ChlorideLostToSweatOverride_type > x)
        {
          this->ChlorideLostToSweatOverride_.set (std::move (x));
        }

        const OverrideData::CoreTemperatureOverride_optional& OverrideData::
        CoreTemperatureOverride () const
        {
          return this->CoreTemperatureOverride_;
        }

        OverrideData::CoreTemperatureOverride_optional& OverrideData::
        CoreTemperatureOverride ()
        {
          return this->CoreTemperatureOverride_;
        }

        void OverrideData::
        CoreTemperatureOverride (const CoreTemperatureOverride_type& x)
        {
          this->CoreTemperatureOverride_.set (x);
        }

        void OverrideData::
        CoreTemperatureOverride (const CoreTemperatureOverride_optional& x)
        {
          this->CoreTemperatureOverride_ = x;
        }

        void OverrideData::
        CoreTemperatureOverride (::std::unique_ptr< CoreTemperatureOverride_type > x)
        {
          this->CoreTemperatureOverride_.set (std::move (x));
        }

        const OverrideData::CreatinineProductionRateOverride_optional& OverrideData::
        CreatinineProductionRateOverride () const
        {
          return this->CreatinineProductionRateOverride_;
        }

        OverrideData::CreatinineProductionRateOverride_optional& OverrideData::
        CreatinineProductionRateOverride ()
        {
          return this->CreatinineProductionRateOverride_;
        }

        void OverrideData::
        CreatinineProductionRateOverride (const CreatinineProductionRateOverride_type& x)
        {
          this->CreatinineProductionRateOverride_.set (x);
        }

        void OverrideData::
        CreatinineProductionRateOverride (const CreatinineProductionRateOverride_optional& x)
        {
          this->CreatinineProductionRateOverride_ = x;
        }

        void OverrideData::
        CreatinineProductionRateOverride (::std::unique_ptr< CreatinineProductionRateOverride_type > x)
        {
          this->CreatinineProductionRateOverride_.set (std::move (x));
        }

        const OverrideData::ExerciseMeanArterialPressureDeltaOverride_optional& OverrideData::
        ExerciseMeanArterialPressureDeltaOverride () const
        {
          return this->ExerciseMeanArterialPressureDeltaOverride_;
        }

        OverrideData::ExerciseMeanArterialPressureDeltaOverride_optional& OverrideData::
        ExerciseMeanArterialPressureDeltaOverride ()
        {
          return this->ExerciseMeanArterialPressureDeltaOverride_;
        }

        void OverrideData::
        ExerciseMeanArterialPressureDeltaOverride (const ExerciseMeanArterialPressureDeltaOverride_type& x)
        {
          this->ExerciseMeanArterialPressureDeltaOverride_.set (x);
        }

        void OverrideData::
        ExerciseMeanArterialPressureDeltaOverride (const ExerciseMeanArterialPressureDeltaOverride_optional& x)
        {
          this->ExerciseMeanArterialPressureDeltaOverride_ = x;
        }

        void OverrideData::
        ExerciseMeanArterialPressureDeltaOverride (::std::unique_ptr< ExerciseMeanArterialPressureDeltaOverride_type > x)
        {
          this->ExerciseMeanArterialPressureDeltaOverride_.set (std::move (x));
        }

        const OverrideData::FatigueLevelOverride_optional& OverrideData::
        FatigueLevelOverride () const
        {
          return this->FatigueLevelOverride_;
        }

        OverrideData::FatigueLevelOverride_optional& OverrideData::
        FatigueLevelOverride ()
        {
          return this->FatigueLevelOverride_;
        }

        void OverrideData::
        FatigueLevelOverride (const FatigueLevelOverride_type& x)
        {
          this->FatigueLevelOverride_.set (x);
        }

        void OverrideData::
        FatigueLevelOverride (const FatigueLevelOverride_optional& x)
        {
          this->FatigueLevelOverride_ = x;
        }

        void OverrideData::
        FatigueLevelOverride (::std::unique_ptr< FatigueLevelOverride_type > x)
        {
          this->FatigueLevelOverride_.set (std::move (x));
        }

        const OverrideData::LactateProductionRateOverride_optional& OverrideData::
        LactateProductionRateOverride () const
        {
          return this->LactateProductionRateOverride_;
        }

        OverrideData::LactateProductionRateOverride_optional& OverrideData::
        LactateProductionRateOverride ()
        {
          return this->LactateProductionRateOverride_;
        }

        void OverrideData::
        LactateProductionRateOverride (const LactateProductionRateOverride_type& x)
        {
          this->LactateProductionRateOverride_.set (x);
        }

        void OverrideData::
        LactateProductionRateOverride (const LactateProductionRateOverride_optional& x)
        {
          this->LactateProductionRateOverride_ = x;
        }

        void OverrideData::
        LactateProductionRateOverride (::std::unique_ptr< LactateProductionRateOverride_type > x)
        {
          this->LactateProductionRateOverride_.set (std::move (x));
        }

        const OverrideData::PotassiumLostToSweatOverride_optional& OverrideData::
        PotassiumLostToSweatOverride () const
        {
          return this->PotassiumLostToSweatOverride_;
        }

        OverrideData::PotassiumLostToSweatOverride_optional& OverrideData::
        PotassiumLostToSweatOverride ()
        {
          return this->PotassiumLostToSweatOverride_;
        }

        void OverrideData::
        PotassiumLostToSweatOverride (const PotassiumLostToSweatOverride_type& x)
        {
          this->PotassiumLostToSweatOverride_.set (x);
        }

        void OverrideData::
        PotassiumLostToSweatOverride (const PotassiumLostToSweatOverride_optional& x)
        {
          this->PotassiumLostToSweatOverride_ = x;
        }

        void OverrideData::
        PotassiumLostToSweatOverride (::std::unique_ptr< PotassiumLostToSweatOverride_type > x)
        {
          this->PotassiumLostToSweatOverride_.set (std::move (x));
        }

        const OverrideData::SkinTemperatureOverride_optional& OverrideData::
        SkinTemperatureOverride () const
        {
          return this->SkinTemperatureOverride_;
        }

        OverrideData::SkinTemperatureOverride_optional& OverrideData::
        SkinTemperatureOverride ()
        {
          return this->SkinTemperatureOverride_;
        }

        void OverrideData::
        SkinTemperatureOverride (const SkinTemperatureOverride_type& x)
        {
          this->SkinTemperatureOverride_.set (x);
        }

        void OverrideData::
        SkinTemperatureOverride (const SkinTemperatureOverride_optional& x)
        {
          this->SkinTemperatureOverride_ = x;
        }

        void OverrideData::
        SkinTemperatureOverride (::std::unique_ptr< SkinTemperatureOverride_type > x)
        {
          this->SkinTemperatureOverride_.set (std::move (x));
        }

        const OverrideData::SodiumLostToSweatOverride_optional& OverrideData::
        SodiumLostToSweatOverride () const
        {
          return this->SodiumLostToSweatOverride_;
        }

        OverrideData::SodiumLostToSweatOverride_optional& OverrideData::
        SodiumLostToSweatOverride ()
        {
          return this->SodiumLostToSweatOverride_;
        }

        void OverrideData::
        SodiumLostToSweatOverride (const SodiumLostToSweatOverride_type& x)
        {
          this->SodiumLostToSweatOverride_.set (x);
        }

        void OverrideData::
        SodiumLostToSweatOverride (const SodiumLostToSweatOverride_optional& x)
        {
          this->SodiumLostToSweatOverride_ = x;
        }

        void OverrideData::
        SodiumLostToSweatOverride (::std::unique_ptr< SodiumLostToSweatOverride_type > x)
        {
          this->SodiumLostToSweatOverride_.set (std::move (x));
        }

        const OverrideData::SweatRateOverride_optional& OverrideData::
        SweatRateOverride () const
        {
          return this->SweatRateOverride_;
        }

        OverrideData::SweatRateOverride_optional& OverrideData::
        SweatRateOverride ()
        {
          return this->SweatRateOverride_;
        }

        void OverrideData::
        SweatRateOverride (const SweatRateOverride_type& x)
        {
          this->SweatRateOverride_.set (x);
        }

        void OverrideData::
        SweatRateOverride (const SweatRateOverride_optional& x)
        {
          this->SweatRateOverride_ = x;
        }

        void OverrideData::
        SweatRateOverride (::std::unique_ptr< SweatRateOverride_type > x)
        {
          this->SweatRateOverride_.set (std::move (x));
        }

        const OverrideData::TotalMetabolicRateOverride_optional& OverrideData::
        TotalMetabolicRateOverride () const
        {
          return this->TotalMetabolicRateOverride_;
        }

        OverrideData::TotalMetabolicRateOverride_optional& OverrideData::
        TotalMetabolicRateOverride ()
        {
          return this->TotalMetabolicRateOverride_;
        }

        void OverrideData::
        TotalMetabolicRateOverride (const TotalMetabolicRateOverride_type& x)
        {
          this->TotalMetabolicRateOverride_.set (x);
        }

        void OverrideData::
        TotalMetabolicRateOverride (const TotalMetabolicRateOverride_optional& x)
        {
          this->TotalMetabolicRateOverride_ = x;
        }

        void OverrideData::
        TotalMetabolicRateOverride (::std::unique_ptr< TotalMetabolicRateOverride_type > x)
        {
          this->TotalMetabolicRateOverride_.set (std::move (x));
        }

        const OverrideData::TotalWorkRateLevelOverride_optional& OverrideData::
        TotalWorkRateLevelOverride () const
        {
          return this->TotalWorkRateLevelOverride_;
        }

        OverrideData::TotalWorkRateLevelOverride_optional& OverrideData::
        TotalWorkRateLevelOverride ()
        {
          return this->TotalWorkRateLevelOverride_;
        }

        void OverrideData::
        TotalWorkRateLevelOverride (const TotalWorkRateLevelOverride_type& x)
        {
          this->TotalWorkRateLevelOverride_.set (x);
        }

        void OverrideData::
        TotalWorkRateLevelOverride (const TotalWorkRateLevelOverride_optional& x)
        {
          this->TotalWorkRateLevelOverride_ = x;
        }

        void OverrideData::
        TotalWorkRateLevelOverride (::std::unique_ptr< TotalWorkRateLevelOverride_type > x)
        {
          this->TotalWorkRateLevelOverride_.set (std::move (x));
        }

        const OverrideData::LeftAfferentArterioleResistanceOverride_optional& OverrideData::
        LeftAfferentArterioleResistanceOverride () const
        {
          return this->LeftAfferentArterioleResistanceOverride_;
        }

        OverrideData::LeftAfferentArterioleResistanceOverride_optional& OverrideData::
        LeftAfferentArterioleResistanceOverride ()
        {
          return this->LeftAfferentArterioleResistanceOverride_;
        }

        void OverrideData::
        LeftAfferentArterioleResistanceOverride (const LeftAfferentArterioleResistanceOverride_type& x)
        {
          this->LeftAfferentArterioleResistanceOverride_.set (x);
        }

        void OverrideData::
        LeftAfferentArterioleResistanceOverride (const LeftAfferentArterioleResistanceOverride_optional& x)
        {
          this->LeftAfferentArterioleResistanceOverride_ = x;
        }

        void OverrideData::
        LeftAfferentArterioleResistanceOverride (::std::unique_ptr< LeftAfferentArterioleResistanceOverride_type > x)
        {
          this->LeftAfferentArterioleResistanceOverride_.set (std::move (x));
        }

        const OverrideData::LeftGlomerularFiltrationRateOverride_optional& OverrideData::
        LeftGlomerularFiltrationRateOverride () const
        {
          return this->LeftGlomerularFiltrationRateOverride_;
        }

        OverrideData::LeftGlomerularFiltrationRateOverride_optional& OverrideData::
        LeftGlomerularFiltrationRateOverride ()
        {
          return this->LeftGlomerularFiltrationRateOverride_;
        }

        void OverrideData::
        LeftGlomerularFiltrationRateOverride (const LeftGlomerularFiltrationRateOverride_type& x)
        {
          this->LeftGlomerularFiltrationRateOverride_.set (x);
        }

        void OverrideData::
        LeftGlomerularFiltrationRateOverride (const LeftGlomerularFiltrationRateOverride_optional& x)
        {
          this->LeftGlomerularFiltrationRateOverride_ = x;
        }

        void OverrideData::
        LeftGlomerularFiltrationRateOverride (::std::unique_ptr< LeftGlomerularFiltrationRateOverride_type > x)
        {
          this->LeftGlomerularFiltrationRateOverride_.set (std::move (x));
        }

        const OverrideData::LeftReabsorptionRateOverride_optional& OverrideData::
        LeftReabsorptionRateOverride () const
        {
          return this->LeftReabsorptionRateOverride_;
        }

        OverrideData::LeftReabsorptionRateOverride_optional& OverrideData::
        LeftReabsorptionRateOverride ()
        {
          return this->LeftReabsorptionRateOverride_;
        }

        void OverrideData::
        LeftReabsorptionRateOverride (const LeftReabsorptionRateOverride_type& x)
        {
          this->LeftReabsorptionRateOverride_.set (x);
        }

        void OverrideData::
        LeftReabsorptionRateOverride (const LeftReabsorptionRateOverride_optional& x)
        {
          this->LeftReabsorptionRateOverride_ = x;
        }

        void OverrideData::
        LeftReabsorptionRateOverride (::std::unique_ptr< LeftReabsorptionRateOverride_type > x)
        {
          this->LeftReabsorptionRateOverride_.set (std::move (x));
        }

        const OverrideData::RenalBloodFlowOverride_optional& OverrideData::
        RenalBloodFlowOverride () const
        {
          return this->RenalBloodFlowOverride_;
        }

        OverrideData::RenalBloodFlowOverride_optional& OverrideData::
        RenalBloodFlowOverride ()
        {
          return this->RenalBloodFlowOverride_;
        }

        void OverrideData::
        RenalBloodFlowOverride (const RenalBloodFlowOverride_type& x)
        {
          this->RenalBloodFlowOverride_.set (x);
        }

        void OverrideData::
        RenalBloodFlowOverride (const RenalBloodFlowOverride_optional& x)
        {
          this->RenalBloodFlowOverride_ = x;
        }

        void OverrideData::
        RenalBloodFlowOverride (::std::unique_ptr< RenalBloodFlowOverride_type > x)
        {
          this->RenalBloodFlowOverride_.set (std::move (x));
        }

        const OverrideData::RenalPlasmaFlowOverride_optional& OverrideData::
        RenalPlasmaFlowOverride () const
        {
          return this->RenalPlasmaFlowOverride_;
        }

        OverrideData::RenalPlasmaFlowOverride_optional& OverrideData::
        RenalPlasmaFlowOverride ()
        {
          return this->RenalPlasmaFlowOverride_;
        }

        void OverrideData::
        RenalPlasmaFlowOverride (const RenalPlasmaFlowOverride_type& x)
        {
          this->RenalPlasmaFlowOverride_.set (x);
        }

        void OverrideData::
        RenalPlasmaFlowOverride (const RenalPlasmaFlowOverride_optional& x)
        {
          this->RenalPlasmaFlowOverride_ = x;
        }

        void OverrideData::
        RenalPlasmaFlowOverride (::std::unique_ptr< RenalPlasmaFlowOverride_type > x)
        {
          this->RenalPlasmaFlowOverride_.set (std::move (x));
        }

        const OverrideData::RightAfferentArterioleResistanceOverride_optional& OverrideData::
        RightAfferentArterioleResistanceOverride () const
        {
          return this->RightAfferentArterioleResistanceOverride_;
        }

        OverrideData::RightAfferentArterioleResistanceOverride_optional& OverrideData::
        RightAfferentArterioleResistanceOverride ()
        {
          return this->RightAfferentArterioleResistanceOverride_;
        }

        void OverrideData::
        RightAfferentArterioleResistanceOverride (const RightAfferentArterioleResistanceOverride_type& x)
        {
          this->RightAfferentArterioleResistanceOverride_.set (x);
        }

        void OverrideData::
        RightAfferentArterioleResistanceOverride (const RightAfferentArterioleResistanceOverride_optional& x)
        {
          this->RightAfferentArterioleResistanceOverride_ = x;
        }

        void OverrideData::
        RightAfferentArterioleResistanceOverride (::std::unique_ptr< RightAfferentArterioleResistanceOverride_type > x)
        {
          this->RightAfferentArterioleResistanceOverride_.set (std::move (x));
        }

        const OverrideData::RightGlomerularFiltrationRateOverride_optional& OverrideData::
        RightGlomerularFiltrationRateOverride () const
        {
          return this->RightGlomerularFiltrationRateOverride_;
        }

        OverrideData::RightGlomerularFiltrationRateOverride_optional& OverrideData::
        RightGlomerularFiltrationRateOverride ()
        {
          return this->RightGlomerularFiltrationRateOverride_;
        }

        void OverrideData::
        RightGlomerularFiltrationRateOverride (const RightGlomerularFiltrationRateOverride_type& x)
        {
          this->RightGlomerularFiltrationRateOverride_.set (x);
        }

        void OverrideData::
        RightGlomerularFiltrationRateOverride (const RightGlomerularFiltrationRateOverride_optional& x)
        {
          this->RightGlomerularFiltrationRateOverride_ = x;
        }

        void OverrideData::
        RightGlomerularFiltrationRateOverride (::std::unique_ptr< RightGlomerularFiltrationRateOverride_type > x)
        {
          this->RightGlomerularFiltrationRateOverride_.set (std::move (x));
        }

        const OverrideData::RightReabsorptionRateOverride_optional& OverrideData::
        RightReabsorptionRateOverride () const
        {
          return this->RightReabsorptionRateOverride_;
        }

        OverrideData::RightReabsorptionRateOverride_optional& OverrideData::
        RightReabsorptionRateOverride ()
        {
          return this->RightReabsorptionRateOverride_;
        }

        void OverrideData::
        RightReabsorptionRateOverride (const RightReabsorptionRateOverride_type& x)
        {
          this->RightReabsorptionRateOverride_.set (x);
        }

        void OverrideData::
        RightReabsorptionRateOverride (const RightReabsorptionRateOverride_optional& x)
        {
          this->RightReabsorptionRateOverride_ = x;
        }

        void OverrideData::
        RightReabsorptionRateOverride (::std::unique_ptr< RightReabsorptionRateOverride_type > x)
        {
          this->RightReabsorptionRateOverride_.set (std::move (x));
        }

        const OverrideData::UrinationRateOverride_optional& OverrideData::
        UrinationRateOverride () const
        {
          return this->UrinationRateOverride_;
        }

        OverrideData::UrinationRateOverride_optional& OverrideData::
        UrinationRateOverride ()
        {
          return this->UrinationRateOverride_;
        }

        void OverrideData::
        UrinationRateOverride (const UrinationRateOverride_type& x)
        {
          this->UrinationRateOverride_.set (x);
        }

        void OverrideData::
        UrinationRateOverride (const UrinationRateOverride_optional& x)
        {
          this->UrinationRateOverride_ = x;
        }

        void OverrideData::
        UrinationRateOverride (::std::unique_ptr< UrinationRateOverride_type > x)
        {
          this->UrinationRateOverride_.set (std::move (x));
        }

        const OverrideData::UrineProductionRateOverride_optional& OverrideData::
        UrineProductionRateOverride () const
        {
          return this->UrineProductionRateOverride_;
        }

        OverrideData::UrineProductionRateOverride_optional& OverrideData::
        UrineProductionRateOverride ()
        {
          return this->UrineProductionRateOverride_;
        }

        void OverrideData::
        UrineProductionRateOverride (const UrineProductionRateOverride_type& x)
        {
          this->UrineProductionRateOverride_.set (x);
        }

        void OverrideData::
        UrineProductionRateOverride (const UrineProductionRateOverride_optional& x)
        {
          this->UrineProductionRateOverride_ = x;
        }

        void OverrideData::
        UrineProductionRateOverride (::std::unique_ptr< UrineProductionRateOverride_type > x)
        {
          this->UrineProductionRateOverride_.set (std::move (x));
        }

        const OverrideData::UrineOsmolalityOverride_optional& OverrideData::
        UrineOsmolalityOverride () const
        {
          return this->UrineOsmolalityOverride_;
        }

        OverrideData::UrineOsmolalityOverride_optional& OverrideData::
        UrineOsmolalityOverride ()
        {
          return this->UrineOsmolalityOverride_;
        }

        void OverrideData::
        UrineOsmolalityOverride (const UrineOsmolalityOverride_type& x)
        {
          this->UrineOsmolalityOverride_.set (x);
        }

        void OverrideData::
        UrineOsmolalityOverride (const UrineOsmolalityOverride_optional& x)
        {
          this->UrineOsmolalityOverride_ = x;
        }

        void OverrideData::
        UrineOsmolalityOverride (::std::unique_ptr< UrineOsmolalityOverride_type > x)
        {
          this->UrineOsmolalityOverride_.set (std::move (x));
        }

        const OverrideData::UrineVolumeOverride_optional& OverrideData::
        UrineVolumeOverride () const
        {
          return this->UrineVolumeOverride_;
        }

        OverrideData::UrineVolumeOverride_optional& OverrideData::
        UrineVolumeOverride ()
        {
          return this->UrineVolumeOverride_;
        }

        void OverrideData::
        UrineVolumeOverride (const UrineVolumeOverride_type& x)
        {
          this->UrineVolumeOverride_.set (x);
        }

        void OverrideData::
        UrineVolumeOverride (const UrineVolumeOverride_optional& x)
        {
          this->UrineVolumeOverride_ = x;
        }

        void OverrideData::
        UrineVolumeOverride (::std::unique_ptr< UrineVolumeOverride_type > x)
        {
          this->UrineVolumeOverride_.set (std::move (x));
        }

        const OverrideData::UrineUreaNitrogenConcentrationOverride_optional& OverrideData::
        UrineUreaNitrogenConcentrationOverride () const
        {
          return this->UrineUreaNitrogenConcentrationOverride_;
        }

        OverrideData::UrineUreaNitrogenConcentrationOverride_optional& OverrideData::
        UrineUreaNitrogenConcentrationOverride ()
        {
          return this->UrineUreaNitrogenConcentrationOverride_;
        }

        void OverrideData::
        UrineUreaNitrogenConcentrationOverride (const UrineUreaNitrogenConcentrationOverride_type& x)
        {
          this->UrineUreaNitrogenConcentrationOverride_.set (x);
        }

        void OverrideData::
        UrineUreaNitrogenConcentrationOverride (const UrineUreaNitrogenConcentrationOverride_optional& x)
        {
          this->UrineUreaNitrogenConcentrationOverride_ = x;
        }

        void OverrideData::
        UrineUreaNitrogenConcentrationOverride (::std::unique_ptr< UrineUreaNitrogenConcentrationOverride_type > x)
        {
          this->UrineUreaNitrogenConcentrationOverride_.set (std::move (x));
        }

        const OverrideData::ExpiratoryFlowOverride_optional& OverrideData::
        ExpiratoryFlowOverride () const
        {
          return this->ExpiratoryFlowOverride_;
        }

        OverrideData::ExpiratoryFlowOverride_optional& OverrideData::
        ExpiratoryFlowOverride ()
        {
          return this->ExpiratoryFlowOverride_;
        }

        void OverrideData::
        ExpiratoryFlowOverride (const ExpiratoryFlowOverride_type& x)
        {
          this->ExpiratoryFlowOverride_.set (x);
        }

        void OverrideData::
        ExpiratoryFlowOverride (const ExpiratoryFlowOverride_optional& x)
        {
          this->ExpiratoryFlowOverride_ = x;
        }

        void OverrideData::
        ExpiratoryFlowOverride (::std::unique_ptr< ExpiratoryFlowOverride_type > x)
        {
          this->ExpiratoryFlowOverride_.set (std::move (x));
        }

        const OverrideData::InspiratoryFlowOverride_optional& OverrideData::
        InspiratoryFlowOverride () const
        {
          return this->InspiratoryFlowOverride_;
        }

        OverrideData::InspiratoryFlowOverride_optional& OverrideData::
        InspiratoryFlowOverride ()
        {
          return this->InspiratoryFlowOverride_;
        }

        void OverrideData::
        InspiratoryFlowOverride (const InspiratoryFlowOverride_type& x)
        {
          this->InspiratoryFlowOverride_.set (x);
        }

        void OverrideData::
        InspiratoryFlowOverride (const InspiratoryFlowOverride_optional& x)
        {
          this->InspiratoryFlowOverride_ = x;
        }

        void OverrideData::
        InspiratoryFlowOverride (::std::unique_ptr< InspiratoryFlowOverride_type > x)
        {
          this->InspiratoryFlowOverride_.set (std::move (x));
        }

        const OverrideData::PulmonaryComplianceOverride_optional& OverrideData::
        PulmonaryComplianceOverride () const
        {
          return this->PulmonaryComplianceOverride_;
        }

        OverrideData::PulmonaryComplianceOverride_optional& OverrideData::
        PulmonaryComplianceOverride ()
        {
          return this->PulmonaryComplianceOverride_;
        }

        void OverrideData::
        PulmonaryComplianceOverride (const PulmonaryComplianceOverride_type& x)
        {
          this->PulmonaryComplianceOverride_.set (x);
        }

        void OverrideData::
        PulmonaryComplianceOverride (const PulmonaryComplianceOverride_optional& x)
        {
          this->PulmonaryComplianceOverride_ = x;
        }

        void OverrideData::
        PulmonaryComplianceOverride (::std::unique_ptr< PulmonaryComplianceOverride_type > x)
        {
          this->PulmonaryComplianceOverride_.set (std::move (x));
        }

        const OverrideData::PulmonaryResistanceOverride_optional& OverrideData::
        PulmonaryResistanceOverride () const
        {
          return this->PulmonaryResistanceOverride_;
        }

        OverrideData::PulmonaryResistanceOverride_optional& OverrideData::
        PulmonaryResistanceOverride ()
        {
          return this->PulmonaryResistanceOverride_;
        }

        void OverrideData::
        PulmonaryResistanceOverride (const PulmonaryResistanceOverride_type& x)
        {
          this->PulmonaryResistanceOverride_.set (x);
        }

        void OverrideData::
        PulmonaryResistanceOverride (const PulmonaryResistanceOverride_optional& x)
        {
          this->PulmonaryResistanceOverride_ = x;
        }

        void OverrideData::
        PulmonaryResistanceOverride (::std::unique_ptr< PulmonaryResistanceOverride_type > x)
        {
          this->PulmonaryResistanceOverride_.set (std::move (x));
        }

        const OverrideData::RespirationRateOverride_optional& OverrideData::
        RespirationRateOverride () const
        {
          return this->RespirationRateOverride_;
        }

        OverrideData::RespirationRateOverride_optional& OverrideData::
        RespirationRateOverride ()
        {
          return this->RespirationRateOverride_;
        }

        void OverrideData::
        RespirationRateOverride (const RespirationRateOverride_type& x)
        {
          this->RespirationRateOverride_.set (x);
        }

        void OverrideData::
        RespirationRateOverride (const RespirationRateOverride_optional& x)
        {
          this->RespirationRateOverride_ = x;
        }

        void OverrideData::
        RespirationRateOverride (::std::unique_ptr< RespirationRateOverride_type > x)
        {
          this->RespirationRateOverride_.set (std::move (x));
        }

        const OverrideData::TargetPulmonaryVentilationOverride_optional& OverrideData::
        TargetPulmonaryVentilationOverride () const
        {
          return this->TargetPulmonaryVentilationOverride_;
        }

        OverrideData::TargetPulmonaryVentilationOverride_optional& OverrideData::
        TargetPulmonaryVentilationOverride ()
        {
          return this->TargetPulmonaryVentilationOverride_;
        }

        void OverrideData::
        TargetPulmonaryVentilationOverride (const TargetPulmonaryVentilationOverride_type& x)
        {
          this->TargetPulmonaryVentilationOverride_.set (x);
        }

        void OverrideData::
        TargetPulmonaryVentilationOverride (const TargetPulmonaryVentilationOverride_optional& x)
        {
          this->TargetPulmonaryVentilationOverride_ = x;
        }

        void OverrideData::
        TargetPulmonaryVentilationOverride (::std::unique_ptr< TargetPulmonaryVentilationOverride_type > x)
        {
          this->TargetPulmonaryVentilationOverride_.set (std::move (x));
        }

        const OverrideData::TidalVolumeOverride_optional& OverrideData::
        TidalVolumeOverride () const
        {
          return this->TidalVolumeOverride_;
        }

        OverrideData::TidalVolumeOverride_optional& OverrideData::
        TidalVolumeOverride ()
        {
          return this->TidalVolumeOverride_;
        }

        void OverrideData::
        TidalVolumeOverride (const TidalVolumeOverride_type& x)
        {
          this->TidalVolumeOverride_.set (x);
        }

        void OverrideData::
        TidalVolumeOverride (const TidalVolumeOverride_optional& x)
        {
          this->TidalVolumeOverride_ = x;
        }

        void OverrideData::
        TidalVolumeOverride (::std::unique_ptr< TidalVolumeOverride_type > x)
        {
          this->TidalVolumeOverride_.set (std::move (x));
        }

        const OverrideData::TotalAlveolarVentilationOverride_optional& OverrideData::
        TotalAlveolarVentilationOverride () const
        {
          return this->TotalAlveolarVentilationOverride_;
        }

        OverrideData::TotalAlveolarVentilationOverride_optional& OverrideData::
        TotalAlveolarVentilationOverride ()
        {
          return this->TotalAlveolarVentilationOverride_;
        }

        void OverrideData::
        TotalAlveolarVentilationOverride (const TotalAlveolarVentilationOverride_type& x)
        {
          this->TotalAlveolarVentilationOverride_.set (x);
        }

        void OverrideData::
        TotalAlveolarVentilationOverride (const TotalAlveolarVentilationOverride_optional& x)
        {
          this->TotalAlveolarVentilationOverride_ = x;
        }

        void OverrideData::
        TotalAlveolarVentilationOverride (::std::unique_ptr< TotalAlveolarVentilationOverride_type > x)
        {
          this->TotalAlveolarVentilationOverride_.set (std::move (x));
        }

        const OverrideData::TotalLungVolumeOverride_optional& OverrideData::
        TotalLungVolumeOverride () const
        {
          return this->TotalLungVolumeOverride_;
        }

        OverrideData::TotalLungVolumeOverride_optional& OverrideData::
        TotalLungVolumeOverride ()
        {
          return this->TotalLungVolumeOverride_;
        }

        void OverrideData::
        TotalLungVolumeOverride (const TotalLungVolumeOverride_type& x)
        {
          this->TotalLungVolumeOverride_.set (x);
        }

        void OverrideData::
        TotalLungVolumeOverride (const TotalLungVolumeOverride_optional& x)
        {
          this->TotalLungVolumeOverride_ = x;
        }

        void OverrideData::
        TotalLungVolumeOverride (::std::unique_ptr< TotalLungVolumeOverride_type > x)
        {
          this->TotalLungVolumeOverride_.set (std::move (x));
        }

        const OverrideData::TotalPulmonaryVentilationOverride_optional& OverrideData::
        TotalPulmonaryVentilationOverride () const
        {
          return this->TotalPulmonaryVentilationOverride_;
        }

        OverrideData::TotalPulmonaryVentilationOverride_optional& OverrideData::
        TotalPulmonaryVentilationOverride ()
        {
          return this->TotalPulmonaryVentilationOverride_;
        }

        void OverrideData::
        TotalPulmonaryVentilationOverride (const TotalPulmonaryVentilationOverride_type& x)
        {
          this->TotalPulmonaryVentilationOverride_.set (x);
        }

        void OverrideData::
        TotalPulmonaryVentilationOverride (const TotalPulmonaryVentilationOverride_optional& x)
        {
          this->TotalPulmonaryVentilationOverride_ = x;
        }

        void OverrideData::
        TotalPulmonaryVentilationOverride (::std::unique_ptr< TotalPulmonaryVentilationOverride_type > x)
        {
          this->TotalPulmonaryVentilationOverride_.set (std::move (x));
        }

        const OverrideData::ExtravascularFluidVolumeOverride_optional& OverrideData::
        ExtravascularFluidVolumeOverride () const
        {
          return this->ExtravascularFluidVolumeOverride_;
        }

        OverrideData::ExtravascularFluidVolumeOverride_optional& OverrideData::
        ExtravascularFluidVolumeOverride ()
        {
          return this->ExtravascularFluidVolumeOverride_;
        }

        void OverrideData::
        ExtravascularFluidVolumeOverride (const ExtravascularFluidVolumeOverride_type& x)
        {
          this->ExtravascularFluidVolumeOverride_.set (x);
        }

        void OverrideData::
        ExtravascularFluidVolumeOverride (const ExtravascularFluidVolumeOverride_optional& x)
        {
          this->ExtravascularFluidVolumeOverride_ = x;
        }

        void OverrideData::
        ExtravascularFluidVolumeOverride (::std::unique_ptr< ExtravascularFluidVolumeOverride_type > x)
        {
          this->ExtravascularFluidVolumeOverride_.set (std::move (x));
        }

        const OverrideData::IntracellularFluidVolumeOverride_optional& OverrideData::
        IntracellularFluidVolumeOverride () const
        {
          return this->IntracellularFluidVolumeOverride_;
        }

        OverrideData::IntracellularFluidVolumeOverride_optional& OverrideData::
        IntracellularFluidVolumeOverride ()
        {
          return this->IntracellularFluidVolumeOverride_;
        }

        void OverrideData::
        IntracellularFluidVolumeOverride (const IntracellularFluidVolumeOverride_type& x)
        {
          this->IntracellularFluidVolumeOverride_.set (x);
        }

        void OverrideData::
        IntracellularFluidVolumeOverride (const IntracellularFluidVolumeOverride_optional& x)
        {
          this->IntracellularFluidVolumeOverride_ = x;
        }

        void OverrideData::
        IntracellularFluidVolumeOverride (::std::unique_ptr< IntracellularFluidVolumeOverride_type > x)
        {
          this->IntracellularFluidVolumeOverride_.set (std::move (x));
        }

        const OverrideData::LiverGlycogenOverride_optional& OverrideData::
        LiverGlycogenOverride () const
        {
          return this->LiverGlycogenOverride_;
        }

        OverrideData::LiverGlycogenOverride_optional& OverrideData::
        LiverGlycogenOverride ()
        {
          return this->LiverGlycogenOverride_;
        }

        void OverrideData::
        LiverGlycogenOverride (const LiverGlycogenOverride_type& x)
        {
          this->LiverGlycogenOverride_.set (x);
        }

        void OverrideData::
        LiverGlycogenOverride (const LiverGlycogenOverride_optional& x)
        {
          this->LiverGlycogenOverride_ = x;
        }

        void OverrideData::
        LiverGlycogenOverride (::std::unique_ptr< LiverGlycogenOverride_type > x)
        {
          this->LiverGlycogenOverride_.set (std::move (x));
        }

        const OverrideData::MuscleGlycogenOverride_optional& OverrideData::
        MuscleGlycogenOverride () const
        {
          return this->MuscleGlycogenOverride_;
        }

        OverrideData::MuscleGlycogenOverride_optional& OverrideData::
        MuscleGlycogenOverride ()
        {
          return this->MuscleGlycogenOverride_;
        }

        void OverrideData::
        MuscleGlycogenOverride (const MuscleGlycogenOverride_type& x)
        {
          this->MuscleGlycogenOverride_.set (x);
        }

        void OverrideData::
        MuscleGlycogenOverride (const MuscleGlycogenOverride_optional& x)
        {
          this->MuscleGlycogenOverride_ = x;
        }

        void OverrideData::
        MuscleGlycogenOverride (::std::unique_ptr< MuscleGlycogenOverride_type > x)
        {
          this->MuscleGlycogenOverride_.set (std::move (x));
        }

        const OverrideData::StoredFatOverride_optional& OverrideData::
        StoredFatOverride () const
        {
          return this->StoredFatOverride_;
        }

        OverrideData::StoredFatOverride_optional& OverrideData::
        StoredFatOverride ()
        {
          return this->StoredFatOverride_;
        }

        void OverrideData::
        StoredFatOverride (const StoredFatOverride_type& x)
        {
          this->StoredFatOverride_.set (x);
        }

        void OverrideData::
        StoredFatOverride (const StoredFatOverride_optional& x)
        {
          this->StoredFatOverride_ = x;
        }

        void OverrideData::
        StoredFatOverride (::std::unique_ptr< StoredFatOverride_type > x)
        {
          this->StoredFatOverride_.set (std::move (x));
        }

        const OverrideData::StoredProteinOverride_optional& OverrideData::
        StoredProteinOverride () const
        {
          return this->StoredProteinOverride_;
        }

        OverrideData::StoredProteinOverride_optional& OverrideData::
        StoredProteinOverride ()
        {
          return this->StoredProteinOverride_;
        }

        void OverrideData::
        StoredProteinOverride (const StoredProteinOverride_type& x)
        {
          this->StoredProteinOverride_.set (x);
        }

        void OverrideData::
        StoredProteinOverride (const StoredProteinOverride_optional& x)
        {
          this->StoredProteinOverride_ = x;
        }

        void OverrideData::
        StoredProteinOverride (::std::unique_ptr< StoredProteinOverride_type > x)
        {
          this->StoredProteinOverride_.set (std::move (x));
        }

        const OverrideData::State_type& OverrideData::
        State () const
        {
          return this->State_.get ();
        }

        OverrideData::State_type& OverrideData::
        State ()
        {
          return this->State_.get ();
        }

        void OverrideData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void OverrideData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const OverrideData::Conformant_type& OverrideData::
        Conformant () const
        {
          return this->Conformant_.get ();
        }

        OverrideData::Conformant_type& OverrideData::
        Conformant ()
        {
          return this->Conformant_.get ();
        }

        void OverrideData::
        Conformant (const Conformant_type& x)
        {
          this->Conformant_.set (x);
        }

        void OverrideData::
        Conformant (::std::unique_ptr< Conformant_type > x)
        {
          this->Conformant_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientActionData
        //

        PatientActionData::
        PatientActionData ()
        : ::mil::tatrc::physiology::datamodel::ActionData ()
        {
        }

        PatientActionData::
        PatientActionData (const PatientActionData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (x, f, c)
        {
        }

        PatientActionData::
        PatientActionData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (e, f, c)
        {
        }

        PatientActionData* PatientActionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PatientActionData (*this, f, c);
        }

        PatientActionData::
        ~PatientActionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PatientActionData >
        _xsd_PatientActionData_type_factory_init (
          "PatientActionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumPatientAssessment
        //

        enumPatientAssessment::
        enumPatientAssessment (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumPatientAssessment_convert ();
        }

        enumPatientAssessment::
        enumPatientAssessment (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumPatientAssessment_convert ();
        }

        enumPatientAssessment::
        enumPatientAssessment (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumPatientAssessment_convert ();
        }

        enumPatientAssessment* enumPatientAssessment::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumPatientAssessment (*this, f, c);
        }

        enumPatientAssessment::value enumPatientAssessment::
        _xsd_enumPatientAssessment_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumPatientAssessment_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumPatientAssessment_indexes_,
                            _xsd_enumPatientAssessment_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_enumPatientAssessment_indexes_ + 5 || _xsd_enumPatientAssessment_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumPatientAssessment::
        _xsd_enumPatientAssessment_literals_[5] =
        {
          "PulmonaryFunctionTest",
          "CompleteBloodCount",
          "ComprehensiveMetabolicPanel",
          "SequentialOrganFailureAssessment",
          "Urinalysis"
        };

        const enumPatientAssessment::value enumPatientAssessment::
        _xsd_enumPatientAssessment_indexes_[5] =
        {
          ::mil::tatrc::physiology::datamodel::enumPatientAssessment::CompleteBloodCount,
          ::mil::tatrc::physiology::datamodel::enumPatientAssessment::ComprehensiveMetabolicPanel,
          ::mil::tatrc::physiology::datamodel::enumPatientAssessment::PulmonaryFunctionTest,
          ::mil::tatrc::physiology::datamodel::enumPatientAssessment::SequentialOrganFailureAssessment,
          ::mil::tatrc::physiology::datamodel::enumPatientAssessment::Urinalysis
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumPatientAssessment >
        _xsd_enumPatientAssessment_type_factory_init (
          "enumPatientAssessment",
          "uri:/mil/tatrc/physiology/datamodel");

        // PatientAssessmentRequestData
        //

        PatientAssessmentRequestData::
        PatientAssessmentRequestData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Type_ (this)
        {
        }

        PatientAssessmentRequestData::
        PatientAssessmentRequestData (const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Type_ (Type, this)
        {
        }

        PatientAssessmentRequestData::
        PatientAssessmentRequestData (const PatientAssessmentRequestData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Type_ (x.Type_, f, this)
        {
        }

        PatientAssessmentRequestData::
        PatientAssessmentRequestData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PatientAssessmentRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }
        }

        PatientAssessmentRequestData* PatientAssessmentRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PatientAssessmentRequestData (*this, f, c);
        }

        PatientAssessmentRequestData& PatientAssessmentRequestData::
        operator= (const PatientAssessmentRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Type_ = x.Type_;
          }

          return *this;
        }

        PatientAssessmentRequestData::
        ~PatientAssessmentRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PatientAssessmentRequestData >
        _xsd_PatientAssessmentRequestData_type_factory_init (
          "PatientAssessmentRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AcuteRespiratoryDistressData
        //

        AcuteRespiratoryDistressData::
        AcuteRespiratoryDistressData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        AcuteRespiratoryDistressData::
        AcuteRespiratoryDistressData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        AcuteRespiratoryDistressData::
        AcuteRespiratoryDistressData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        AcuteRespiratoryDistressData::
        AcuteRespiratoryDistressData (const AcuteRespiratoryDistressData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        AcuteRespiratoryDistressData::
        AcuteRespiratoryDistressData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AcuteRespiratoryDistressData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        AcuteRespiratoryDistressData* AcuteRespiratoryDistressData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AcuteRespiratoryDistressData (*this, f, c);
        }

        AcuteRespiratoryDistressData& AcuteRespiratoryDistressData::
        operator= (const AcuteRespiratoryDistressData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        AcuteRespiratoryDistressData::
        ~AcuteRespiratoryDistressData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AcuteRespiratoryDistressData >
        _xsd_AcuteRespiratoryDistressData_type_factory_init (
          "AcuteRespiratoryDistressData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AcuteStressData
        //

        AcuteStressData::
        AcuteStressData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        AcuteStressData::
        AcuteStressData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        AcuteStressData::
        AcuteStressData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        AcuteStressData::
        AcuteStressData (const AcuteStressData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        AcuteStressData::
        AcuteStressData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AcuteStressData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        AcuteStressData* AcuteStressData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AcuteStressData (*this, f, c);
        }

        AcuteStressData& AcuteStressData::
        operator= (const AcuteStressData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        AcuteStressData::
        ~AcuteStressData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AcuteStressData >
        _xsd_AcuteStressData_type_factory_init (
          "AcuteStressData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AirwayObstructionData
        //

        AirwayObstructionData::
        AirwayObstructionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        AirwayObstructionData::
        AirwayObstructionData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        AirwayObstructionData::
        AirwayObstructionData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        AirwayObstructionData::
        AirwayObstructionData (const AirwayObstructionData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        AirwayObstructionData::
        AirwayObstructionData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AirwayObstructionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        AirwayObstructionData* AirwayObstructionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AirwayObstructionData (*this, f, c);
        }

        AirwayObstructionData& AirwayObstructionData::
        operator= (const AirwayObstructionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        AirwayObstructionData::
        ~AirwayObstructionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AirwayObstructionData >
        _xsd_AirwayObstructionData_type_factory_init (
          "AirwayObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ApneaData
        //

        ApneaData::
        ApneaData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        ApneaData::
        ApneaData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        ApneaData::
        ApneaData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        ApneaData::
        ApneaData (const ApneaData& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        ApneaData::
        ApneaData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ApneaData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ApneaData* ApneaData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ApneaData (*this, f, c);
        }

        ApneaData& ApneaData::
        operator= (const ApneaData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        ApneaData::
        ~ApneaData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ApneaData >
        _xsd_ApneaData_type_factory_init (
          "ApneaData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AsthmaAttackData
        //

        AsthmaAttackData::
        AsthmaAttackData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        AsthmaAttackData::
        AsthmaAttackData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        AsthmaAttackData::
        AsthmaAttackData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        AsthmaAttackData::
        AsthmaAttackData (const AsthmaAttackData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        AsthmaAttackData::
        AsthmaAttackData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AsthmaAttackData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        AsthmaAttackData* AsthmaAttackData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AsthmaAttackData (*this, f, c);
        }

        AsthmaAttackData& AsthmaAttackData::
        operator= (const AsthmaAttackData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        AsthmaAttackData::
        ~AsthmaAttackData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AsthmaAttackData >
        _xsd_AsthmaAttackData_type_factory_init (
          "AsthmaAttackData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumBrainInjuryType
        //

        enumBrainInjuryType::
        enumBrainInjuryType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumBrainInjuryType_convert ();
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumBrainInjuryType_convert ();
        }

        enumBrainInjuryType::
        enumBrainInjuryType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumBrainInjuryType_convert ();
        }

        enumBrainInjuryType* enumBrainInjuryType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumBrainInjuryType (*this, f, c);
        }

        enumBrainInjuryType::value enumBrainInjuryType::
        _xsd_enumBrainInjuryType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumBrainInjuryType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumBrainInjuryType_indexes_,
                            _xsd_enumBrainInjuryType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_enumBrainInjuryType_indexes_ + 3 || _xsd_enumBrainInjuryType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumBrainInjuryType::
        _xsd_enumBrainInjuryType_literals_[3] =
        {
          "Diffuse",
          "LeftFocal",
          "RightFocal"
        };

        const enumBrainInjuryType::value enumBrainInjuryType::
        _xsd_enumBrainInjuryType_indexes_[3] =
        {
          ::mil::tatrc::physiology::datamodel::enumBrainInjuryType::Diffuse,
          ::mil::tatrc::physiology::datamodel::enumBrainInjuryType::LeftFocal,
          ::mil::tatrc::physiology::datamodel::enumBrainInjuryType::RightFocal
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumBrainInjuryType >
        _xsd_enumBrainInjuryType_type_factory_init (
          "enumBrainInjuryType",
          "uri:/mil/tatrc/physiology/datamodel");

        // BrainInjuryData
        //

        BrainInjuryData::
        BrainInjuryData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this),
          Type_ (this)
        {
        }

        BrainInjuryData::
        BrainInjuryData (const Severity_type& Severity,
                         const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this),
          Type_ (Type, this)
        {
        }

        BrainInjuryData::
        BrainInjuryData (::std::unique_ptr< Severity_type > Severity,
                         const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this),
          Type_ (Type, this)
        {
        }

        BrainInjuryData::
        BrainInjuryData (const BrainInjuryData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this),
          Type_ (x.Type_, f, this)
        {
        }

        BrainInjuryData::
        BrainInjuryData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this),
          Type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BrainInjuryData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }
        }

        BrainInjuryData* BrainInjuryData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BrainInjuryData (*this, f, c);
        }

        BrainInjuryData& BrainInjuryData::
        operator= (const BrainInjuryData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
            this->Type_ = x.Type_;
          }

          return *this;
        }

        BrainInjuryData::
        ~BrainInjuryData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BrainInjuryData >
        _xsd_BrainInjuryData_type_factory_init (
          "BrainInjuryData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BronchoconstrictionData
        //

        BronchoconstrictionData::
        BronchoconstrictionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this)
        {
        }

        BronchoconstrictionData::
        BronchoconstrictionData (const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this)
        {
        }

        BronchoconstrictionData::
        BronchoconstrictionData (::std::unique_ptr< Severity_type > Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this)
        {
        }

        BronchoconstrictionData::
        BronchoconstrictionData (const BronchoconstrictionData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this)
        {
        }

        BronchoconstrictionData::
        BronchoconstrictionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void BronchoconstrictionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BronchoconstrictionData* BronchoconstrictionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BronchoconstrictionData (*this, f, c);
        }

        BronchoconstrictionData& BronchoconstrictionData::
        operator= (const BronchoconstrictionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        BronchoconstrictionData::
        ~BronchoconstrictionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BronchoconstrictionData >
        _xsd_BronchoconstrictionData_type_factory_init (
          "BronchoconstrictionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BurnWoundData
        //

        BurnWoundData::
        BurnWoundData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          TotalBodySurfaceArea_ (this)
        {
        }

        BurnWoundData::
        BurnWoundData (const TotalBodySurfaceArea_type& TotalBodySurfaceArea)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          TotalBodySurfaceArea_ (TotalBodySurfaceArea, this)
        {
        }

        BurnWoundData::
        BurnWoundData (::std::unique_ptr< TotalBodySurfaceArea_type > TotalBodySurfaceArea)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          TotalBodySurfaceArea_ (std::move (TotalBodySurfaceArea), this)
        {
        }

        BurnWoundData::
        BurnWoundData (const BurnWoundData& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          TotalBodySurfaceArea_ (x.TotalBodySurfaceArea_, f, this)
        {
        }

        BurnWoundData::
        BurnWoundData (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          TotalBodySurfaceArea_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void BurnWoundData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TotalBodySurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBodySurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBodySurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TotalBodySurfaceArea_.present ())
                {
                  ::std::unique_ptr< TotalBodySurfaceArea_type > r (
                    dynamic_cast< TotalBodySurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBodySurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!TotalBodySurfaceArea_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalBodySurfaceArea",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BurnWoundData* BurnWoundData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BurnWoundData (*this, f, c);
        }

        BurnWoundData& BurnWoundData::
        operator= (const BurnWoundData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->TotalBodySurfaceArea_ = x.TotalBodySurfaceArea_;
          }

          return *this;
        }

        BurnWoundData::
        ~BurnWoundData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BurnWoundData >
        _xsd_BurnWoundData_type_factory_init (
          "BurnWoundData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CardiacArrestData
        //

        CardiacArrestData::
        CardiacArrestData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (this)
        {
        }

        CardiacArrestData::
        CardiacArrestData (const State_type& State)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (State, this)
        {
        }

        CardiacArrestData::
        CardiacArrestData (const CardiacArrestData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          State_ (x.State_, f, this)
        {
        }

        CardiacArrestData::
        CardiacArrestData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CardiacArrestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }
        }

        CardiacArrestData* CardiacArrestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CardiacArrestData (*this, f, c);
        }

        CardiacArrestData& CardiacArrestData::
        operator= (const CardiacArrestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->State_ = x.State_;
          }

          return *this;
        }

        CardiacArrestData::
        ~CardiacArrestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CardiacArrestData >
        _xsd_CardiacArrestData_type_factory_init (
          "CardiacArrestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChestCompressionData
        //

        ChestCompressionData::
        ChestCompressionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData ()
        {
        }

        ChestCompressionData::
        ChestCompressionData (const ChestCompressionData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c)
        {
        }

        ChestCompressionData::
        ChestCompressionData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f, c)
        {
        }

        ChestCompressionData* ChestCompressionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChestCompressionData (*this, f, c);
        }

        ChestCompressionData::
        ~ChestCompressionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChestCompressionData >
        _xsd_ChestCompressionData_type_factory_init (
          "ChestCompressionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChestCompressionForceData
        //

        ChestCompressionForceData::
        ChestCompressionForceData ()
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          Force_ (this)
        {
        }

        ChestCompressionForceData::
        ChestCompressionForceData (const Force_type& Force)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          Force_ (Force, this)
        {
        }

        ChestCompressionForceData::
        ChestCompressionForceData (::std::unique_ptr< Force_type > Force)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          Force_ (std::move (Force), this)
        {
        }

        ChestCompressionForceData::
        ChestCompressionForceData (const ChestCompressionForceData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (x, f, c),
          Force_ (x.Force_, f, this)
        {
        }

        ChestCompressionForceData::
        ChestCompressionForceData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (e, f | ::xml_schema::flags::base, c),
          Force_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChestCompressionForceData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ChestCompressionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Force
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Force",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Force_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Force_.present ())
                {
                  ::std::unique_ptr< Force_type > r (
                    dynamic_cast< Force_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Force_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Force_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Force",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ChestCompressionForceData* ChestCompressionForceData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChestCompressionForceData (*this, f, c);
        }

        ChestCompressionForceData& ChestCompressionForceData::
        operator= (const ChestCompressionForceData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (*this) = x;
            this->Force_ = x.Force_;
          }

          return *this;
        }

        ChestCompressionForceData::
        ~ChestCompressionForceData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChestCompressionForceData >
        _xsd_ChestCompressionForceData_type_factory_init (
          "ChestCompressionForceData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChestCompressionForceScaleData
        //

        ChestCompressionForceScaleData::
        ChestCompressionForceScaleData ()
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          ForceScale_ (this),
          ForcePeriod_ (this)
        {
        }

        ChestCompressionForceScaleData::
        ChestCompressionForceScaleData (const ForceScale_type& ForceScale)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          ForceScale_ (ForceScale, this),
          ForcePeriod_ (this)
        {
        }

        ChestCompressionForceScaleData::
        ChestCompressionForceScaleData (::std::unique_ptr< ForceScale_type > ForceScale)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (),
          ForceScale_ (std::move (ForceScale), this),
          ForcePeriod_ (this)
        {
        }

        ChestCompressionForceScaleData::
        ChestCompressionForceScaleData (const ChestCompressionForceScaleData& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (x, f, c),
          ForceScale_ (x.ForceScale_, f, this),
          ForcePeriod_ (x.ForcePeriod_, f, this)
        {
        }

        ChestCompressionForceScaleData::
        ChestCompressionForceScaleData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChestCompressionData (e, f | ::xml_schema::flags::base, c),
          ForceScale_ (this),
          ForcePeriod_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChestCompressionForceScaleData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ChestCompressionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ForceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ForceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ForceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ForceScale_.present ())
                {
                  ::std::unique_ptr< ForceScale_type > r (
                    dynamic_cast< ForceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ForceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ForcePeriod
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ForcePeriod",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ForcePeriod_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ForcePeriod_)
                {
                  ::std::unique_ptr< ForcePeriod_type > r (
                    dynamic_cast< ForcePeriod_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ForcePeriod_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ForceScale_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ForceScale",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ChestCompressionForceScaleData* ChestCompressionForceScaleData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChestCompressionForceScaleData (*this, f, c);
        }

        ChestCompressionForceScaleData& ChestCompressionForceScaleData::
        operator= (const ChestCompressionForceScaleData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (*this) = x;
            this->ForceScale_ = x.ForceScale_;
            this->ForcePeriod_ = x.ForcePeriod_;
          }

          return *this;
        }

        ChestCompressionForceScaleData::
        ~ChestCompressionForceScaleData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChestCompressionForceScaleData >
        _xsd_ChestCompressionForceScaleData_type_factory_init (
          "ChestCompressionForceScaleData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChestOcclusiveDressingData
        //

        ChestOcclusiveDressingData::
        ChestOcclusiveDressingData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (this),
          Side_ (this)
        {
        }

        ChestOcclusiveDressingData::
        ChestOcclusiveDressingData (const State_type& State,
                                    const Side_type& Side)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (State, this),
          Side_ (Side, this)
        {
        }

        ChestOcclusiveDressingData::
        ChestOcclusiveDressingData (const ChestOcclusiveDressingData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          State_ (x.State_, f, this),
          Side_ (x.Side_, f, this)
        {
        }

        ChestOcclusiveDressingData::
        ChestOcclusiveDressingData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this),
          Side_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ChestOcclusiveDressingData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Side" && n.namespace_ ().empty ())
            {
              this->Side_.set (Side_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }

          if (!Side_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Side",
              "");
          }
        }

        ChestOcclusiveDressingData* ChestOcclusiveDressingData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChestOcclusiveDressingData (*this, f, c);
        }

        ChestOcclusiveDressingData& ChestOcclusiveDressingData::
        operator= (const ChestOcclusiveDressingData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->State_ = x.State_;
            this->Side_ = x.Side_;
          }

          return *this;
        }

        ChestOcclusiveDressingData::
        ~ChestOcclusiveDressingData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChestOcclusiveDressingData >
        _xsd_ChestOcclusiveDressingData_type_factory_init (
          "ChestOcclusiveDressingData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ConsciousRespirationCommandData
        //

        ConsciousRespirationCommandData::
        ConsciousRespirationCommandData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Comment_ (this)
        {
        }

        ConsciousRespirationCommandData::
        ConsciousRespirationCommandData (const ConsciousRespirationCommandData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Comment_ (x.Comment_, f, this)
        {
        }

        ConsciousRespirationCommandData::
        ConsciousRespirationCommandData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Comment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ConsciousRespirationCommandData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Comment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Comment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Comment_)
                {
                  ::std::unique_ptr< Comment_type > r (
                    dynamic_cast< Comment_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Comment_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ConsciousRespirationCommandData* ConsciousRespirationCommandData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConsciousRespirationCommandData (*this, f, c);
        }

        ConsciousRespirationCommandData& ConsciousRespirationCommandData::
        operator= (const ConsciousRespirationCommandData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Comment_ = x.Comment_;
          }

          return *this;
        }

        ConsciousRespirationCommandData::
        ~ConsciousRespirationCommandData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsciousRespirationCommandData >
        _xsd_ConsciousRespirationCommandData_type_factory_init (
          "ConsciousRespirationCommandData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ForcedInhaleData
        //

        ForcedInhaleData::
        ForcedInhaleData ()
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          InspiratoryCapacityFraction_ (this),
          Period_ (this)
        {
        }

        ForcedInhaleData::
        ForcedInhaleData (const InspiratoryCapacityFraction_type& InspiratoryCapacityFraction,
                          const Period_type& Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          InspiratoryCapacityFraction_ (InspiratoryCapacityFraction, this),
          Period_ (Period, this)
        {
        }

        ForcedInhaleData::
        ForcedInhaleData (::std::unique_ptr< InspiratoryCapacityFraction_type > InspiratoryCapacityFraction,
                          ::std::unique_ptr< Period_type > Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          InspiratoryCapacityFraction_ (std::move (InspiratoryCapacityFraction), this),
          Period_ (std::move (Period), this)
        {
        }

        ForcedInhaleData::
        ForcedInhaleData (const ForcedInhaleData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (x, f, c),
          InspiratoryCapacityFraction_ (x.InspiratoryCapacityFraction_, f, this),
          Period_ (x.Period_, f, this)
        {
        }

        ForcedInhaleData::
        ForcedInhaleData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (e, f | ::xml_schema::flags::base, c),
          InspiratoryCapacityFraction_ (this),
          Period_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ForcedInhaleData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InspiratoryCapacityFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryCapacityFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryCapacityFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InspiratoryCapacityFraction_.present ())
                {
                  ::std::unique_ptr< InspiratoryCapacityFraction_type > r (
                    dynamic_cast< InspiratoryCapacityFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryCapacityFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Period
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Period_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Period_.present ())
                {
                  ::std::unique_ptr< Period_type > r (
                    dynamic_cast< Period_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Period_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!InspiratoryCapacityFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InspiratoryCapacityFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Period",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ForcedInhaleData* ForcedInhaleData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ForcedInhaleData (*this, f, c);
        }

        ForcedInhaleData& ForcedInhaleData::
        operator= (const ForcedInhaleData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (*this) = x;
            this->InspiratoryCapacityFraction_ = x.InspiratoryCapacityFraction_;
            this->Period_ = x.Period_;
          }

          return *this;
        }

        ForcedInhaleData::
        ~ForcedInhaleData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ForcedInhaleData >
        _xsd_ForcedInhaleData_type_factory_init (
          "ForcedInhaleData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ForcedExhaleData
        //

        ForcedExhaleData::
        ForcedExhaleData ()
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          ExpiratoryReserveVolumeFraction_ (this),
          Period_ (this)
        {
        }

        ForcedExhaleData::
        ForcedExhaleData (const ExpiratoryReserveVolumeFraction_type& ExpiratoryReserveVolumeFraction,
                          const Period_type& Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          ExpiratoryReserveVolumeFraction_ (ExpiratoryReserveVolumeFraction, this),
          Period_ (Period, this)
        {
        }

        ForcedExhaleData::
        ForcedExhaleData (::std::unique_ptr< ExpiratoryReserveVolumeFraction_type > ExpiratoryReserveVolumeFraction,
                          ::std::unique_ptr< Period_type > Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          ExpiratoryReserveVolumeFraction_ (std::move (ExpiratoryReserveVolumeFraction), this),
          Period_ (std::move (Period), this)
        {
        }

        ForcedExhaleData::
        ForcedExhaleData (const ForcedExhaleData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (x, f, c),
          ExpiratoryReserveVolumeFraction_ (x.ExpiratoryReserveVolumeFraction_, f, this),
          Period_ (x.Period_, f, this)
        {
        }

        ForcedExhaleData::
        ForcedExhaleData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (e, f | ::xml_schema::flags::base, c),
          ExpiratoryReserveVolumeFraction_ (this),
          Period_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ForcedExhaleData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ExpiratoryReserveVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExpiratoryReserveVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExpiratoryReserveVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ExpiratoryReserveVolumeFraction_.present ())
                {
                  ::std::unique_ptr< ExpiratoryReserveVolumeFraction_type > r (
                    dynamic_cast< ExpiratoryReserveVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExpiratoryReserveVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Period
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Period_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Period_.present ())
                {
                  ::std::unique_ptr< Period_type > r (
                    dynamic_cast< Period_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Period_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ExpiratoryReserveVolumeFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExpiratoryReserveVolumeFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Period",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ForcedExhaleData* ForcedExhaleData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ForcedExhaleData (*this, f, c);
        }

        ForcedExhaleData& ForcedExhaleData::
        operator= (const ForcedExhaleData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (*this) = x;
            this->ExpiratoryReserveVolumeFraction_ = x.ExpiratoryReserveVolumeFraction_;
            this->Period_ = x.Period_;
          }

          return *this;
        }

        ForcedExhaleData::
        ~ForcedExhaleData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ForcedExhaleData >
        _xsd_ForcedExhaleData_type_factory_init (
          "ForcedExhaleData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BreathHoldData
        //

        BreathHoldData::
        BreathHoldData ()
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          Period_ (this)
        {
        }

        BreathHoldData::
        BreathHoldData (const Period_type& Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          Period_ (Period, this)
        {
        }

        BreathHoldData::
        BreathHoldData (::std::unique_ptr< Period_type > Period)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (),
          Period_ (std::move (Period), this)
        {
        }

        BreathHoldData::
        BreathHoldData (const BreathHoldData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (x, f, c),
          Period_ (x.Period_, f, this)
        {
        }

        BreathHoldData::
        BreathHoldData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (e, f | ::xml_schema::flags::base, c),
          Period_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BreathHoldData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Period
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Period_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Period_.present ())
                {
                  ::std::unique_ptr< Period_type > r (
                    dynamic_cast< Period_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Period_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Period",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BreathHoldData* BreathHoldData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BreathHoldData (*this, f, c);
        }

        BreathHoldData& BreathHoldData::
        operator= (const BreathHoldData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (*this) = x;
            this->Period_ = x.Period_;
          }

          return *this;
        }

        BreathHoldData::
        ~BreathHoldData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BreathHoldData >
        _xsd_BreathHoldData_type_factory_init (
          "BreathHoldData",
          "uri:/mil/tatrc/physiology/datamodel");

        // UseInhalerData
        //

        UseInhalerData::
        UseInhalerData ()
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData ()
        {
        }

        UseInhalerData::
        UseInhalerData (const UseInhalerData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (x, f, c)
        {
        }

        UseInhalerData::
        UseInhalerData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData (e, f, c)
        {
        }

        UseInhalerData* UseInhalerData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UseInhalerData (*this, f, c);
        }

        UseInhalerData::
        ~UseInhalerData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UseInhalerData >
        _xsd_UseInhalerData_type_factory_init (
          "UseInhalerData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ConsciousRespirationData
        //

        ConsciousRespirationData::
        ConsciousRespirationData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Command_ (this),
          AppendToPrevious_ (this)
        {
        }

        ConsciousRespirationData::
        ConsciousRespirationData (const AppendToPrevious_type& AppendToPrevious)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Command_ (this),
          AppendToPrevious_ (AppendToPrevious, this)
        {
        }

        ConsciousRespirationData::
        ConsciousRespirationData (const ConsciousRespirationData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Command_ (x.Command_, f, this),
          AppendToPrevious_ (x.AppendToPrevious_, f, this)
        {
        }

        ConsciousRespirationData::
        ConsciousRespirationData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Command_ (this),
          AppendToPrevious_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ConsciousRespirationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Command
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Command",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Command_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Command_type > r (
                  dynamic_cast< Command_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Command_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "AppendToPrevious" && n.namespace_ ().empty ())
            {
              this->AppendToPrevious_.set (AppendToPrevious_traits::create (i, f, this));
              continue;
            }
          }

          if (!AppendToPrevious_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "AppendToPrevious",
              "");
          }
        }

        ConsciousRespirationData* ConsciousRespirationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConsciousRespirationData (*this, f, c);
        }

        ConsciousRespirationData& ConsciousRespirationData::
        operator= (const ConsciousRespirationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Command_ = x.Command_;
            this->AppendToPrevious_ = x.AppendToPrevious_;
          }

          return *this;
        }

        ConsciousRespirationData::
        ~ConsciousRespirationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsciousRespirationData >
        _xsd_ConsciousRespirationData_type_factory_init (
          "ConsciousRespirationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ConsumeNutrientsData
        //

        ConsumeNutrientsData::
        ConsumeNutrientsData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          NutritionFile_ (this),
          Nutrition_ (this)
        {
        }

        ConsumeNutrientsData::
        ConsumeNutrientsData (const ConsumeNutrientsData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          NutritionFile_ (x.NutritionFile_, f, this),
          Nutrition_ (x.Nutrition_, f, this)
        {
        }

        ConsumeNutrientsData::
        ConsumeNutrientsData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          NutritionFile_ (this),
          Nutrition_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ConsumeNutrientsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // NutritionFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NutritionFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NutritionFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NutritionFile_)
                {
                  ::std::unique_ptr< NutritionFile_type > r (
                    dynamic_cast< NutritionFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NutritionFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Nutrition
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Nutrition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Nutrition_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Nutrition_)
                {
                  ::std::unique_ptr< Nutrition_type > r (
                    dynamic_cast< Nutrition_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Nutrition_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ConsumeNutrientsData* ConsumeNutrientsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConsumeNutrientsData (*this, f, c);
        }

        ConsumeNutrientsData& ConsumeNutrientsData::
        operator= (const ConsumeNutrientsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->NutritionFile_ = x.NutritionFile_;
            this->Nutrition_ = x.Nutrition_;
          }

          return *this;
        }

        ConsumeNutrientsData::
        ~ConsumeNutrientsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConsumeNutrientsData >
        _xsd_ConsumeNutrientsData_type_factory_init (
          "ConsumeNutrientsData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GenericExerciseData
        //

        GenericExerciseData::
        GenericExerciseData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Intensity_ (this),
          DesiredWorkRate_ (this)
        {
        }

        GenericExerciseData::
        GenericExerciseData (const GenericExerciseData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Intensity_ (x.Intensity_, f, this),
          DesiredWorkRate_ (x.DesiredWorkRate_, f, this)
        {
        }

        GenericExerciseData::
        GenericExerciseData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Intensity_ (this),
          DesiredWorkRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void GenericExerciseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Intensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Intensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Intensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Intensity_)
                {
                  ::std::unique_ptr< Intensity_type > r (
                    dynamic_cast< Intensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Intensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DesiredWorkRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DesiredWorkRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DesiredWorkRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DesiredWorkRate_)
                {
                  ::std::unique_ptr< DesiredWorkRate_type > r (
                    dynamic_cast< DesiredWorkRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DesiredWorkRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        GenericExerciseData* GenericExerciseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GenericExerciseData (*this, f, c);
        }

        GenericExerciseData& GenericExerciseData::
        operator= (const GenericExerciseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Intensity_ = x.Intensity_;
            this->DesiredWorkRate_ = x.DesiredWorkRate_;
          }

          return *this;
        }

        GenericExerciseData::
        ~GenericExerciseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GenericExerciseData >
        _xsd_GenericExerciseData_type_factory_init (
          "GenericExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // RunningExerciseData
        //

        RunningExerciseData::
        RunningExerciseData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Speed_ (this),
          Incline_ (this),
          AddedWeight_ (this)
        {
        }

        RunningExerciseData::
        RunningExerciseData (const Speed_type& Speed,
                             const Incline_type& Incline)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Speed_ (Speed, this),
          Incline_ (Incline, this),
          AddedWeight_ (this)
        {
        }

        RunningExerciseData::
        RunningExerciseData (::std::unique_ptr< Speed_type > Speed,
                             ::std::unique_ptr< Incline_type > Incline)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Speed_ (std::move (Speed), this),
          Incline_ (std::move (Incline), this),
          AddedWeight_ (this)
        {
        }

        RunningExerciseData::
        RunningExerciseData (const RunningExerciseData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Speed_ (x.Speed_, f, this),
          Incline_ (x.Incline_, f, this),
          AddedWeight_ (x.AddedWeight_, f, this)
        {
        }

        RunningExerciseData::
        RunningExerciseData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Speed_ (this),
          Incline_ (this),
          AddedWeight_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void RunningExerciseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Speed
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Speed",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Speed_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Speed_.present ())
                {
                  ::std::unique_ptr< Speed_type > r (
                    dynamic_cast< Speed_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Speed_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Incline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Incline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Incline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Incline_.present ())
                {
                  ::std::unique_ptr< Incline_type > r (
                    dynamic_cast< Incline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Incline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AddedWeight
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AddedWeight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AddedWeight_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AddedWeight_)
                {
                  ::std::unique_ptr< AddedWeight_type > r (
                    dynamic_cast< AddedWeight_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AddedWeight_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Speed_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Speed",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Incline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Incline",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        RunningExerciseData* RunningExerciseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RunningExerciseData (*this, f, c);
        }

        RunningExerciseData& RunningExerciseData::
        operator= (const RunningExerciseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Speed_ = x.Speed_;
            this->Incline_ = x.Incline_;
            this->AddedWeight_ = x.AddedWeight_;
          }

          return *this;
        }

        RunningExerciseData::
        ~RunningExerciseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RunningExerciseData >
        _xsd_RunningExerciseData_type_factory_init (
          "RunningExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CyclingExerciseData
        //

        CyclingExerciseData::
        CyclingExerciseData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Cadence_ (this),
          Power_ (this),
          AddedWeight_ (this)
        {
        }

        CyclingExerciseData::
        CyclingExerciseData (const Cadence_type& Cadence,
                             const Power_type& Power)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Cadence_ (Cadence, this),
          Power_ (Power, this),
          AddedWeight_ (this)
        {
        }

        CyclingExerciseData::
        CyclingExerciseData (::std::unique_ptr< Cadence_type > Cadence,
                             ::std::unique_ptr< Power_type > Power)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Cadence_ (std::move (Cadence), this),
          Power_ (std::move (Power), this),
          AddedWeight_ (this)
        {
        }

        CyclingExerciseData::
        CyclingExerciseData (const CyclingExerciseData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Cadence_ (x.Cadence_, f, this),
          Power_ (x.Power_, f, this),
          AddedWeight_ (x.AddedWeight_, f, this)
        {
        }

        CyclingExerciseData::
        CyclingExerciseData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Cadence_ (this),
          Power_ (this),
          AddedWeight_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void CyclingExerciseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Cadence
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Cadence",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Cadence_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Cadence_.present ())
                {
                  ::std::unique_ptr< Cadence_type > r (
                    dynamic_cast< Cadence_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Cadence_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Power
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Power_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Power_.present ())
                {
                  ::std::unique_ptr< Power_type > r (
                    dynamic_cast< Power_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Power_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AddedWeight
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AddedWeight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AddedWeight_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AddedWeight_)
                {
                  ::std::unique_ptr< AddedWeight_type > r (
                    dynamic_cast< AddedWeight_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AddedWeight_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Cadence_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Cadence",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Power_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Power",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        CyclingExerciseData* CyclingExerciseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CyclingExerciseData (*this, f, c);
        }

        CyclingExerciseData& CyclingExerciseData::
        operator= (const CyclingExerciseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Cadence_ = x.Cadence_;
            this->Power_ = x.Power_;
            this->AddedWeight_ = x.AddedWeight_;
          }

          return *this;
        }

        CyclingExerciseData::
        ~CyclingExerciseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CyclingExerciseData >
        _xsd_CyclingExerciseData_type_factory_init (
          "CyclingExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // StrengthExerciseData
        //

        StrengthExerciseData::
        StrengthExerciseData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Weight_ (this),
          Repetitions_ (this)
        {
        }

        StrengthExerciseData::
        StrengthExerciseData (const Weight_type& Weight,
                              const Repetitions_type& Repetitions)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Weight_ (Weight, this),
          Repetitions_ (Repetitions, this)
        {
        }

        StrengthExerciseData::
        StrengthExerciseData (::std::unique_ptr< Weight_type > Weight,
                              ::std::unique_ptr< Repetitions_type > Repetitions)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Weight_ (std::move (Weight), this),
          Repetitions_ (std::move (Repetitions), this)
        {
        }

        StrengthExerciseData::
        StrengthExerciseData (const StrengthExerciseData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Weight_ (x.Weight_, f, this),
          Repetitions_ (x.Repetitions_, f, this)
        {
        }

        StrengthExerciseData::
        StrengthExerciseData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Weight_ (this),
          Repetitions_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void StrengthExerciseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Weight
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Weight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Weight_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Weight_.present ())
                {
                  ::std::unique_ptr< Weight_type > r (
                    dynamic_cast< Weight_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Weight_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Repetitions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Repetitions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Repetitions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Repetitions_.present ())
                {
                  ::std::unique_ptr< Repetitions_type > r (
                    dynamic_cast< Repetitions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Repetitions_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Weight_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Weight",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Repetitions_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Repetitions",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        StrengthExerciseData* StrengthExerciseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class StrengthExerciseData (*this, f, c);
        }

        StrengthExerciseData& StrengthExerciseData::
        operator= (const StrengthExerciseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Weight_ = x.Weight_;
            this->Repetitions_ = x.Repetitions_;
          }

          return *this;
        }

        StrengthExerciseData::
        ~StrengthExerciseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, StrengthExerciseData >
        _xsd_StrengthExerciseData_type_factory_init (
          "StrengthExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ExerciseData
        //

        ExerciseData::
        ExerciseData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          GenericExercise_ (this),
          RunningExercise_ (this),
          CyclingExercise_ (this),
          StrengthExercise_ (this)
        {
        }

        ExerciseData::
        ExerciseData (const ExerciseData& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          GenericExercise_ (x.GenericExercise_, f, this),
          RunningExercise_ (x.RunningExercise_, f, this),
          CyclingExercise_ (x.CyclingExercise_, f, this),
          StrengthExercise_ (x.StrengthExercise_, f, this)
        {
        }

        ExerciseData::
        ExerciseData (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          GenericExercise_ (this),
          RunningExercise_ (this),
          CyclingExercise_ (this),
          StrengthExercise_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ExerciseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // GenericExercise
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GenericExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GenericExercise_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GenericExercise_)
                {
                  ::std::unique_ptr< GenericExercise_type > r (
                    dynamic_cast< GenericExercise_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GenericExercise_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RunningExercise
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RunningExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RunningExercise_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RunningExercise_)
                {
                  ::std::unique_ptr< RunningExercise_type > r (
                    dynamic_cast< RunningExercise_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RunningExercise_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CyclingExercise
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CyclingExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CyclingExercise_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CyclingExercise_)
                {
                  ::std::unique_ptr< CyclingExercise_type > r (
                    dynamic_cast< CyclingExercise_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CyclingExercise_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StrengthExercise
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StrengthExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StrengthExercise_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StrengthExercise_)
                {
                  ::std::unique_ptr< StrengthExercise_type > r (
                    dynamic_cast< StrengthExercise_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StrengthExercise_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ExerciseData* ExerciseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ExerciseData (*this, f, c);
        }

        ExerciseData& ExerciseData::
        operator= (const ExerciseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->GenericExercise_ = x.GenericExercise_;
            this->RunningExercise_ = x.RunningExercise_;
            this->CyclingExercise_ = x.CyclingExercise_;
            this->StrengthExercise_ = x.StrengthExercise_;
          }

          return *this;
        }

        ExerciseData::
        ~ExerciseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ExerciseData >
        _xsd_ExerciseData_type_factory_init (
          "ExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // HemorrhageData
        //

        HemorrhageData::
        HemorrhageData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          InitialRate_ (this),
          Compartment_ (this)
        {
        }

        HemorrhageData::
        HemorrhageData (const InitialRate_type& InitialRate,
                        const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          InitialRate_ (InitialRate, this),
          Compartment_ (Compartment, this)
        {
        }

        HemorrhageData::
        HemorrhageData (::std::unique_ptr< InitialRate_type > InitialRate,
                        const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          InitialRate_ (std::move (InitialRate), this),
          Compartment_ (Compartment, this)
        {
        }

        HemorrhageData::
        HemorrhageData (const HemorrhageData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          InitialRate_ (x.InitialRate_, f, this),
          Compartment_ (x.Compartment_, f, this)
        {
        }

        HemorrhageData::
        HemorrhageData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          InitialRate_ (this),
          Compartment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void HemorrhageData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InitialRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InitialRate_.present ())
                {
                  ::std::unique_ptr< InitialRate_type > r (
                    dynamic_cast< InitialRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!InitialRate_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialRate",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Compartment" && n.namespace_ ().empty ())
            {
              this->Compartment_.set (Compartment_traits::create (i, f, this));
              continue;
            }
          }

          if (!Compartment_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Compartment",
              "");
          }
        }

        HemorrhageData* HemorrhageData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class HemorrhageData (*this, f, c);
        }

        HemorrhageData& HemorrhageData::
        operator= (const HemorrhageData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->InitialRate_ = x.InitialRate_;
            this->Compartment_ = x.Compartment_;
          }

          return *this;
        }

        HemorrhageData::
        ~HemorrhageData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, HemorrhageData >
        _xsd_HemorrhageData_type_factory_init (
          "HemorrhageData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumInfectionSeverity
        //

        enumInfectionSeverity::
        enumInfectionSeverity (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumInfectionSeverity_convert ();
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumInfectionSeverity_convert ();
        }

        enumInfectionSeverity::
        enumInfectionSeverity (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumInfectionSeverity_convert ();
        }

        enumInfectionSeverity* enumInfectionSeverity::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumInfectionSeverity (*this, f, c);
        }

        enumInfectionSeverity::value enumInfectionSeverity::
        _xsd_enumInfectionSeverity_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumInfectionSeverity_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumInfectionSeverity_indexes_,
                            _xsd_enumInfectionSeverity_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_enumInfectionSeverity_indexes_ + 4 || _xsd_enumInfectionSeverity_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumInfectionSeverity::
        _xsd_enumInfectionSeverity_literals_[4] =
        {
          "Eliminated",
          "Mild",
          "Moderate",
          "Severe"
        };

        const enumInfectionSeverity::value enumInfectionSeverity::
        _xsd_enumInfectionSeverity_indexes_[4] =
        {
          ::mil::tatrc::physiology::datamodel::enumInfectionSeverity::Eliminated,
          ::mil::tatrc::physiology::datamodel::enumInfectionSeverity::Mild,
          ::mil::tatrc::physiology::datamodel::enumInfectionSeverity::Moderate,
          ::mil::tatrc::physiology::datamodel::enumInfectionSeverity::Severe
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumInfectionSeverity >
        _xsd_enumInfectionSeverity_type_factory_init (
          "enumInfectionSeverity",
          "uri:/mil/tatrc/physiology/datamodel");

        // InfectionData
        //

        InfectionData::
        InfectionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          MinimumInhibitoryConcentration_ (this),
          Location_ (this),
          Severity_ (this)
        {
        }

        InfectionData::
        InfectionData (const MinimumInhibitoryConcentration_type& MinimumInhibitoryConcentration,
                       const Location_type& Location,
                       const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          MinimumInhibitoryConcentration_ (MinimumInhibitoryConcentration, this),
          Location_ (Location, this),
          Severity_ (Severity, this)
        {
        }

        InfectionData::
        InfectionData (::std::unique_ptr< MinimumInhibitoryConcentration_type > MinimumInhibitoryConcentration,
                       const Location_type& Location,
                       const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          MinimumInhibitoryConcentration_ (std::move (MinimumInhibitoryConcentration), this),
          Location_ (Location, this),
          Severity_ (Severity, this)
        {
        }

        InfectionData::
        InfectionData (::std::unique_ptr< MinimumInhibitoryConcentration_type > MinimumInhibitoryConcentration,
                       ::std::unique_ptr< Location_type > Location,
                       const Severity_type& Severity)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          MinimumInhibitoryConcentration_ (std::move (MinimumInhibitoryConcentration), this),
          Location_ (std::move (Location), this),
          Severity_ (Severity, this)
        {
        }

        InfectionData::
        InfectionData (const InfectionData& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          MinimumInhibitoryConcentration_ (x.MinimumInhibitoryConcentration_, f, this),
          Location_ (x.Location_, f, this),
          Severity_ (x.Severity_, f, this)
        {
        }

        InfectionData::
        InfectionData (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          MinimumInhibitoryConcentration_ (this),
          Location_ (this),
          Severity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void InfectionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MinimumInhibitoryConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumInhibitoryConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumInhibitoryConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MinimumInhibitoryConcentration_.present ())
                {
                  ::std::unique_ptr< MinimumInhibitoryConcentration_type > r (
                    dynamic_cast< MinimumInhibitoryConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumInhibitoryConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Location
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Location",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Location_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Location_.present ())
                {
                  ::std::unique_ptr< Location_type > r (
                    dynamic_cast< Location_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Location_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!MinimumInhibitoryConcentration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MinimumInhibitoryConcentration",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Location_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Location",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Severity" && n.namespace_ ().empty ())
            {
              this->Severity_.set (Severity_traits::create (i, f, this));
              continue;
            }
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Severity",
              "");
          }
        }

        InfectionData* InfectionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class InfectionData (*this, f, c);
        }

        InfectionData& InfectionData::
        operator= (const InfectionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->MinimumInhibitoryConcentration_ = x.MinimumInhibitoryConcentration_;
            this->Location_ = x.Location_;
            this->Severity_ = x.Severity_;
          }

          return *this;
        }

        InfectionData::
        ~InfectionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, InfectionData >
        _xsd_InfectionData_type_factory_init (
          "InfectionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumIntubationType
        //

        enumIntubationType::
        enumIntubationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumIntubationType_convert ();
        }

        enumIntubationType::
        enumIntubationType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumIntubationType_convert ();
        }

        enumIntubationType::
        enumIntubationType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumIntubationType_convert ();
        }

        enumIntubationType* enumIntubationType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumIntubationType (*this, f, c);
        }

        enumIntubationType::value enumIntubationType::
        _xsd_enumIntubationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumIntubationType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumIntubationType_indexes_,
                            _xsd_enumIntubationType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_enumIntubationType_indexes_ + 5 || _xsd_enumIntubationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumIntubationType::
        _xsd_enumIntubationType_literals_[5] =
        {
          "Off",
          "Esophageal",
          "LeftMainstem",
          "RightMainstem",
          "Tracheal"
        };

        const enumIntubationType::value enumIntubationType::
        _xsd_enumIntubationType_indexes_[5] =
        {
          ::mil::tatrc::physiology::datamodel::enumIntubationType::Esophageal,
          ::mil::tatrc::physiology::datamodel::enumIntubationType::LeftMainstem,
          ::mil::tatrc::physiology::datamodel::enumIntubationType::Off,
          ::mil::tatrc::physiology::datamodel::enumIntubationType::RightMainstem,
          ::mil::tatrc::physiology::datamodel::enumIntubationType::Tracheal
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumIntubationType >
        _xsd_enumIntubationType_type_factory_init (
          "enumIntubationType",
          "uri:/mil/tatrc/physiology/datamodel");

        // IntubationData
        //

        IntubationData::
        IntubationData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Type_ (this)
        {
        }

        IntubationData::
        IntubationData (const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Type_ (Type, this)
        {
        }

        IntubationData::
        IntubationData (const IntubationData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Type_ (x.Type_, f, this)
        {
        }

        IntubationData::
        IntubationData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void IntubationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }
        }

        IntubationData* IntubationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class IntubationData (*this, f, c);
        }

        IntubationData& IntubationData::
        operator= (const IntubationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Type_ = x.Type_;
          }

          return *this;
        }

        IntubationData::
        ~IntubationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, IntubationData >
        _xsd_IntubationData_type_factory_init (
          "IntubationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // MechanicalVentilationData
        //

        MechanicalVentilationData::
        MechanicalVentilationData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const State_type& State)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (State, this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const MechanicalVentilationData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Pressure_ (x.Pressure_, f, this),
          Flow_ (x.Flow_, f, this),
          GasFraction_ (x.GasFraction_, f, this),
          State_ (x.State_, f, this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void MechanicalVentilationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Pressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pressure_)
                {
                  ::std::unique_ptr< Pressure_type > r (
                    dynamic_cast< Pressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Flow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Flow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Flow_)
                {
                  ::std::unique_ptr< Flow_type > r (
                    dynamic_cast< Flow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Flow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GasFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasFraction_type > r (
                  dynamic_cast< GasFraction_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasFraction_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }
        }

        MechanicalVentilationData* MechanicalVentilationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class MechanicalVentilationData (*this, f, c);
        }

        MechanicalVentilationData& MechanicalVentilationData::
        operator= (const MechanicalVentilationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Pressure_ = x.Pressure_;
            this->Flow_ = x.Flow_;
            this->GasFraction_ = x.GasFraction_;
            this->State_ = x.State_;
          }

          return *this;
        }

        MechanicalVentilationData::
        ~MechanicalVentilationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_type_factory_init (
          "MechanicalVentilationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // NeedleDecompressionData
        //

        NeedleDecompressionData::
        NeedleDecompressionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (this),
          Side_ (this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const State_type& State,
                                 const Side_type& Side)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (State, this),
          Side_ (Side, this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const NeedleDecompressionData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          State_ (x.State_, f, this),
          Side_ (x.Side_, f, this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this),
          Side_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NeedleDecompressionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Side" && n.namespace_ ().empty ())
            {
              this->Side_.set (Side_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }

          if (!Side_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Side",
              "");
          }
        }

        NeedleDecompressionData* NeedleDecompressionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NeedleDecompressionData (*this, f, c);
        }

        NeedleDecompressionData& NeedleDecompressionData::
        operator= (const NeedleDecompressionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->State_ = x.State_;
            this->Side_ = x.Side_;
          }

          return *this;
        }

        NeedleDecompressionData::
        ~NeedleDecompressionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_type_factory_init (
          "NeedleDecompressionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // NasalStateData
        //

        NasalStateData::
        NasalStateData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          TotalNasalDose_ (this),
          UnreleasedDrugMasses_ (this),
          ReleasedDrugMasses_ (this),
          Substance_ (this)
        {
        }

        NasalStateData::
        NasalStateData (const TotalNasalDose_type& TotalNasalDose,
                        const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          TotalNasalDose_ (TotalNasalDose, this),
          UnreleasedDrugMasses_ (this),
          ReleasedDrugMasses_ (this),
          Substance_ (Substance, this)
        {
        }

        NasalStateData::
        NasalStateData (::std::unique_ptr< TotalNasalDose_type > TotalNasalDose,
                        const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          TotalNasalDose_ (std::move (TotalNasalDose), this),
          UnreleasedDrugMasses_ (this),
          ReleasedDrugMasses_ (this),
          Substance_ (Substance, this)
        {
        }

        NasalStateData::
        NasalStateData (const NasalStateData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          TotalNasalDose_ (x.TotalNasalDose_, f, this),
          UnreleasedDrugMasses_ (x.UnreleasedDrugMasses_, f, this),
          ReleasedDrugMasses_ (x.ReleasedDrugMasses_, f, this),
          Substance_ (x.Substance_, f, this)
        {
        }

        NasalStateData::
        NasalStateData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          TotalNasalDose_ (this),
          UnreleasedDrugMasses_ (this),
          ReleasedDrugMasses_ (this),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NasalStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TotalNasalDose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalNasalDose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalNasalDose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TotalNasalDose_.present ())
                {
                  ::std::unique_ptr< TotalNasalDose_type > r (
                    dynamic_cast< TotalNasalDose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalNasalDose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UnreleasedDrugMasses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UnreleasedDrugMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UnreleasedDrugMasses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< UnreleasedDrugMasses_type > r (
                  dynamic_cast< UnreleasedDrugMasses_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->UnreleasedDrugMasses_.push_back (::std::move (r));
                continue;
              }
            }

            // ReleasedDrugMasses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReleasedDrugMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReleasedDrugMasses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ReleasedDrugMasses_type > r (
                  dynamic_cast< ReleasedDrugMasses_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ReleasedDrugMasses_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!TotalNasalDose_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalNasalDose",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Substance",
              "");
          }
        }

        NasalStateData* NasalStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NasalStateData (*this, f, c);
        }

        NasalStateData& NasalStateData::
        operator= (const NasalStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->TotalNasalDose_ = x.TotalNasalDose_;
            this->UnreleasedDrugMasses_ = x.UnreleasedDrugMasses_;
            this->ReleasedDrugMasses_ = x.ReleasedDrugMasses_;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        NasalStateData::
        ~NasalStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NasalStateData >
        _xsd_NasalStateData_type_factory_init (
          "NasalStateData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PainStimulusData
        //

        PainStimulusData::
        PainStimulusData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this),
          HalfLife_ (this),
          Location_ (this)
        {
        }

        PainStimulusData::
        PainStimulusData (const Severity_type& Severity,
                          const Location_type& Location)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this),
          HalfLife_ (this),
          Location_ (Location, this)
        {
        }

        PainStimulusData::
        PainStimulusData (::std::unique_ptr< Severity_type > Severity,
                          const Location_type& Location)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this),
          HalfLife_ (this),
          Location_ (Location, this)
        {
        }

        PainStimulusData::
        PainStimulusData (const PainStimulusData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this),
          HalfLife_ (x.HalfLife_, f, this),
          Location_ (x.Location_, f, this)
        {
        }

        PainStimulusData::
        PainStimulusData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this),
          HalfLife_ (this),
          Location_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PainStimulusData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HalfLife
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HalfLife",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HalfLife_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HalfLife_)
                {
                  ::std::unique_ptr< HalfLife_type > r (
                    dynamic_cast< HalfLife_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HalfLife_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Location" && n.namespace_ ().empty ())
            {
              this->Location_.set (Location_traits::create (i, f, this));
              continue;
            }
          }

          if (!Location_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Location",
              "");
          }
        }

        PainStimulusData* PainStimulusData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PainStimulusData (*this, f, c);
        }

        PainStimulusData& PainStimulusData::
        operator= (const PainStimulusData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
            this->HalfLife_ = x.HalfLife_;
            this->Location_ = x.Location_;
          }

          return *this;
        }

        PainStimulusData::
        ~PainStimulusData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PainStimulusData >
        _xsd_PainStimulusData_type_factory_init (
          "PainStimulusData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PericardialEffusionData
        //

        PericardialEffusionData::
        PericardialEffusionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          EffusionRate_ (this)
        {
        }

        PericardialEffusionData::
        PericardialEffusionData (const EffusionRate_type& EffusionRate)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          EffusionRate_ (EffusionRate, this)
        {
        }

        PericardialEffusionData::
        PericardialEffusionData (::std::unique_ptr< EffusionRate_type > EffusionRate)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          EffusionRate_ (std::move (EffusionRate), this)
        {
        }

        PericardialEffusionData::
        PericardialEffusionData (const PericardialEffusionData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          EffusionRate_ (x.EffusionRate_, f, this)
        {
        }

        PericardialEffusionData::
        PericardialEffusionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          EffusionRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void PericardialEffusionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EffusionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EffusionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EffusionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!EffusionRate_.present ())
                {
                  ::std::unique_ptr< EffusionRate_type > r (
                    dynamic_cast< EffusionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EffusionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!EffusionRate_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EffusionRate",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        PericardialEffusionData* PericardialEffusionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PericardialEffusionData (*this, f, c);
        }

        PericardialEffusionData& PericardialEffusionData::
        operator= (const PericardialEffusionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->EffusionRate_ = x.EffusionRate_;
          }

          return *this;
        }

        PericardialEffusionData::
        ~PericardialEffusionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PericardialEffusionData >
        _xsd_PericardialEffusionData_type_factory_init (
          "PericardialEffusionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumPneumothoraxType
        //

        enumPneumothoraxType::
        enumPneumothoraxType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumPneumothoraxType_convert ();
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumPneumothoraxType_convert ();
        }

        enumPneumothoraxType::
        enumPneumothoraxType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumPneumothoraxType_convert ();
        }

        enumPneumothoraxType* enumPneumothoraxType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumPneumothoraxType (*this, f, c);
        }

        enumPneumothoraxType::value enumPneumothoraxType::
        _xsd_enumPneumothoraxType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumPneumothoraxType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumPneumothoraxType_indexes_,
                            _xsd_enumPneumothoraxType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumPneumothoraxType_indexes_ + 2 || _xsd_enumPneumothoraxType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumPneumothoraxType::
        _xsd_enumPneumothoraxType_literals_[2] =
        {
          "Open",
          "Closed"
        };

        const enumPneumothoraxType::value enumPneumothoraxType::
        _xsd_enumPneumothoraxType_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumPneumothoraxType::Closed,
          ::mil::tatrc::physiology::datamodel::enumPneumothoraxType::Open
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumPneumothoraxType >
        _xsd_enumPneumothoraxType_type_factory_init (
          "enumPneumothoraxType",
          "uri:/mil/tatrc/physiology/datamodel");

        // TensionPneumothoraxData
        //

        TensionPneumothoraxData::
        TensionPneumothoraxData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (this),
          Type_ (this),
          Side_ (this)
        {
        }

        TensionPneumothoraxData::
        TensionPneumothoraxData (const Severity_type& Severity,
                                 const Type_type& Type,
                                 const Side_type& Side)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (Severity, this),
          Type_ (Type, this),
          Side_ (Side, this)
        {
        }

        TensionPneumothoraxData::
        TensionPneumothoraxData (::std::unique_ptr< Severity_type > Severity,
                                 const Type_type& Type,
                                 const Side_type& Side)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Severity_ (std::move (Severity), this),
          Type_ (Type, this),
          Side_ (Side, this)
        {
        }

        TensionPneumothoraxData::
        TensionPneumothoraxData (const TensionPneumothoraxData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Severity_ (x.Severity_, f, this),
          Type_ (x.Type_, f, this),
          Side_ (x.Side_, f, this)
        {
        }

        TensionPneumothoraxData::
        TensionPneumothoraxData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this),
          Type_ (this),
          Side_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TensionPneumothoraxData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Side" && n.namespace_ ().empty ())
            {
              this->Side_.set (Side_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }

          if (!Side_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Side",
              "");
          }
        }

        TensionPneumothoraxData* TensionPneumothoraxData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TensionPneumothoraxData (*this, f, c);
        }

        TensionPneumothoraxData& TensionPneumothoraxData::
        operator= (const TensionPneumothoraxData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Severity_ = x.Severity_;
            this->Type_ = x.Type_;
            this->Side_ = x.Side_;
          }

          return *this;
        }

        TensionPneumothoraxData::
        ~TensionPneumothoraxData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TensionPneumothoraxData >
        _xsd_TensionPneumothoraxData_type_factory_init (
          "TensionPneumothoraxData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SleepData
        //

        SleepData::
        SleepData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Sleep_ (this)
        {
        }

        SleepData::
        SleepData (const Sleep_type& Sleep)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Sleep_ (Sleep, this)
        {
        }

        SleepData::
        SleepData (const SleepData& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Sleep_ (x.Sleep_, f, this)
        {
        }

        SleepData::
        SleepData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Sleep_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SleepData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Sleep" && n.namespace_ ().empty ())
            {
              this->Sleep_.set (Sleep_traits::create (i, f, this));
              continue;
            }
          }

          if (!Sleep_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Sleep",
              "");
          }
        }

        SleepData* SleepData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SleepData (*this, f, c);
        }

        SleepData& SleepData::
        operator= (const SleepData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Sleep_ = x.Sleep_;
          }

          return *this;
        }

        SleepData::
        ~SleepData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SleepData >
        _xsd_SleepData_type_factory_init (
          "SleepData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumBolusAdministration
        //

        enumBolusAdministration::
        enumBolusAdministration (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumBolusAdministration_convert ();
        }

        enumBolusAdministration::
        enumBolusAdministration (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumBolusAdministration_convert ();
        }

        enumBolusAdministration::
        enumBolusAdministration (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumBolusAdministration_convert ();
        }

        enumBolusAdministration* enumBolusAdministration::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumBolusAdministration (*this, f, c);
        }

        enumBolusAdministration::value enumBolusAdministration::
        _xsd_enumBolusAdministration_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumBolusAdministration_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumBolusAdministration_indexes_,
                            _xsd_enumBolusAdministration_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_enumBolusAdministration_indexes_ + 3 || _xsd_enumBolusAdministration_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumBolusAdministration::
        _xsd_enumBolusAdministration_literals_[3] =
        {
          "Intraarterial",
          "Intramuscular",
          "Intravenous"
        };

        const enumBolusAdministration::value enumBolusAdministration::
        _xsd_enumBolusAdministration_indexes_[3] =
        {
          ::mil::tatrc::physiology::datamodel::enumBolusAdministration::Intraarterial,
          ::mil::tatrc::physiology::datamodel::enumBolusAdministration::Intramuscular,
          ::mil::tatrc::physiology::datamodel::enumBolusAdministration::Intravenous
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumBolusAdministration >
        _xsd_enumBolusAdministration_type_factory_init (
          "enumBolusAdministration",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumOralAdministration
        //

        enumOralAdministration::
        enumOralAdministration (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumOralAdministration_convert ();
        }

        enumOralAdministration::
        enumOralAdministration (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumOralAdministration_convert ();
        }

        enumOralAdministration::
        enumOralAdministration (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumOralAdministration_convert ();
        }

        enumOralAdministration* enumOralAdministration::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumOralAdministration (*this, f, c);
        }

        enumOralAdministration::value enumOralAdministration::
        _xsd_enumOralAdministration_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumOralAdministration_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumOralAdministration_indexes_,
                            _xsd_enumOralAdministration_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumOralAdministration_indexes_ + 2 || _xsd_enumOralAdministration_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumOralAdministration::
        _xsd_enumOralAdministration_literals_[2] =
        {
          "Transmucosal",
          "Gastrointestinal"
        };

        const enumOralAdministration::value enumOralAdministration::
        _xsd_enumOralAdministration_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumOralAdministration::Gastrointestinal,
          ::mil::tatrc::physiology::datamodel::enumOralAdministration::Transmucosal
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumOralAdministration >
        _xsd_enumOralAdministration_type_factory_init (
          "enumOralAdministration",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceAdministrationData
        //

        SubstanceAdministrationData::
        SubstanceAdministrationData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData ()
        {
        }

        SubstanceAdministrationData::
        SubstanceAdministrationData (const SubstanceAdministrationData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c)
        {
        }

        SubstanceAdministrationData::
        SubstanceAdministrationData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f, c)
        {
        }

        SubstanceAdministrationData* SubstanceAdministrationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceAdministrationData (*this, f, c);
        }

        SubstanceAdministrationData::
        ~SubstanceAdministrationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceAdministrationData >
        _xsd_SubstanceAdministrationData_type_factory_init (
          "SubstanceAdministrationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceBolusData
        //

        SubstanceBolusData::
        SubstanceBolusData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (this),
          Concentration_ (this),
          Dose_ (this),
          AdminTime_ (this),
          AdminRoute_ (this)
        {
        }

        SubstanceBolusData::
        SubstanceBolusData (const Substance_type& Substance,
                            const Concentration_type& Concentration,
                            const Dose_type& Dose,
                            const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Concentration_ (Concentration, this),
          Dose_ (Dose, this),
          AdminTime_ (this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceBolusData::
        SubstanceBolusData (const Substance_type& Substance,
                            ::std::unique_ptr< Concentration_type > Concentration,
                            ::std::unique_ptr< Dose_type > Dose,
                            const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Concentration_ (std::move (Concentration), this),
          Dose_ (std::move (Dose), this),
          AdminTime_ (this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceBolusData::
        SubstanceBolusData (::std::unique_ptr< Substance_type > Substance,
                            ::std::unique_ptr< Concentration_type > Concentration,
                            ::std::unique_ptr< Dose_type > Dose,
                            const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (std::move (Substance), this),
          Concentration_ (std::move (Concentration), this),
          Dose_ (std::move (Dose), this),
          AdminTime_ (this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceBolusData::
        SubstanceBolusData (const SubstanceBolusData& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (x, f, c),
          Substance_ (x.Substance_, f, this),
          Concentration_ (x.Concentration_, f, this),
          Dose_ (x.Dose_, f, this),
          AdminTime_ (x.AdminTime_, f, this),
          AdminRoute_ (x.AdminRoute_, f, this)
        {
        }

        SubstanceBolusData::
        SubstanceBolusData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this),
          Concentration_ (this),
          Dose_ (this),
          AdminTime_ (this),
          AdminRoute_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceBolusData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceAdministrationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Substance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Substance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Substance_.present ())
                {
                  ::std::unique_ptr< Substance_type > r (
                    dynamic_cast< Substance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Substance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Concentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Concentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Concentration_.present ())
                {
                  ::std::unique_ptr< Concentration_type > r (
                    dynamic_cast< Concentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Concentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Dose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Dose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Dose_.present ())
                {
                  ::std::unique_ptr< Dose_type > r (
                    dynamic_cast< Dose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Dose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AdminTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AdminTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AdminTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AdminTime_)
                {
                  ::std::unique_ptr< AdminTime_type > r (
                    dynamic_cast< AdminTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AdminTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Substance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Concentration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Concentration",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Dose_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Dose",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "AdminRoute" && n.namespace_ ().empty ())
            {
              this->AdminRoute_.set (AdminRoute_traits::create (i, f, this));
              continue;
            }
          }

          if (!AdminRoute_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "AdminRoute",
              "");
          }
        }

        SubstanceBolusData* SubstanceBolusData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceBolusData (*this, f, c);
        }

        SubstanceBolusData& SubstanceBolusData::
        operator= (const SubstanceBolusData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (*this) = x;
            this->Substance_ = x.Substance_;
            this->Concentration_ = x.Concentration_;
            this->Dose_ = x.Dose_;
            this->AdminTime_ = x.AdminTime_;
            this->AdminRoute_ = x.AdminRoute_;
          }

          return *this;
        }

        SubstanceBolusData::
        ~SubstanceBolusData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceBolusData >
        _xsd_SubstanceBolusData_type_factory_init (
          "SubstanceBolusData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceBolusStateData
        //

        SubstanceBolusStateData::
        SubstanceBolusStateData ()
        : ::xml_schema::type (),
          ElapsedTime_ (this),
          AdministeredDose_ (this),
          Substance_ (this)
        {
        }

        SubstanceBolusStateData::
        SubstanceBolusStateData (const ElapsedTime_type& ElapsedTime,
                                 const AdministeredDose_type& AdministeredDose,
                                 const Substance_type& Substance)
        : ::xml_schema::type (),
          ElapsedTime_ (ElapsedTime, this),
          AdministeredDose_ (AdministeredDose, this),
          Substance_ (Substance, this)
        {
        }

        SubstanceBolusStateData::
        SubstanceBolusStateData (::std::unique_ptr< ElapsedTime_type > ElapsedTime,
                                 ::std::unique_ptr< AdministeredDose_type > AdministeredDose,
                                 const Substance_type& Substance)
        : ::xml_schema::type (),
          ElapsedTime_ (std::move (ElapsedTime), this),
          AdministeredDose_ (std::move (AdministeredDose), this),
          Substance_ (Substance, this)
        {
        }

        SubstanceBolusStateData::
        SubstanceBolusStateData (const SubstanceBolusStateData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          ElapsedTime_ (x.ElapsedTime_, f, this),
          AdministeredDose_ (x.AdministeredDose_, f, this),
          Substance_ (x.Substance_, f, this)
        {
        }

        SubstanceBolusStateData::
        SubstanceBolusStateData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          ElapsedTime_ (this),
          AdministeredDose_ (this),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceBolusStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ElapsedTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElapsedTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElapsedTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ElapsedTime_.present ())
                {
                  ::std::unique_ptr< ElapsedTime_type > r (
                    dynamic_cast< ElapsedTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ElapsedTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AdministeredDose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AdministeredDose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AdministeredDose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AdministeredDose_.present ())
                {
                  ::std::unique_ptr< AdministeredDose_type > r (
                    dynamic_cast< AdministeredDose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AdministeredDose_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ElapsedTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElapsedTime",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AdministeredDose_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AdministeredDose",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Substance",
              "");
          }
        }

        SubstanceBolusStateData* SubstanceBolusStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceBolusStateData (*this, f, c);
        }

        SubstanceBolusStateData& SubstanceBolusStateData::
        operator= (const SubstanceBolusStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->ElapsedTime_ = x.ElapsedTime_;
            this->AdministeredDose_ = x.AdministeredDose_;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        SubstanceBolusStateData::
        ~SubstanceBolusStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceBolusStateData >
        _xsd_SubstanceBolusStateData_type_factory_init (
          "SubstanceBolusStateData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceCompoundInfusionData
        //

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          SubstanceCompound_ (this),
          BagVolume_ (this),
          Rate_ (this)
        {
        }

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData (const SubstanceCompound_type& SubstanceCompound,
                                       const BagVolume_type& BagVolume,
                                       const Rate_type& Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          SubstanceCompound_ (SubstanceCompound, this),
          BagVolume_ (BagVolume, this),
          Rate_ (Rate, this)
        {
        }

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData (const SubstanceCompound_type& SubstanceCompound,
                                       ::std::unique_ptr< BagVolume_type > BagVolume,
                                       ::std::unique_ptr< Rate_type > Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          SubstanceCompound_ (SubstanceCompound, this),
          BagVolume_ (std::move (BagVolume), this),
          Rate_ (std::move (Rate), this)
        {
        }

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData (::std::unique_ptr< SubstanceCompound_type > SubstanceCompound,
                                       ::std::unique_ptr< BagVolume_type > BagVolume,
                                       ::std::unique_ptr< Rate_type > Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          SubstanceCompound_ (std::move (SubstanceCompound), this),
          BagVolume_ (std::move (BagVolume), this),
          Rate_ (std::move (Rate), this)
        {
        }

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData (const SubstanceCompoundInfusionData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (x, f, c),
          SubstanceCompound_ (x.SubstanceCompound_, f, this),
          BagVolume_ (x.BagVolume_, f, this),
          Rate_ (x.Rate_, f, this)
        {
        }

        SubstanceCompoundInfusionData::
        SubstanceCompoundInfusionData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (e, f | ::xml_schema::flags::base, c),
          SubstanceCompound_ (this),
          BagVolume_ (this),
          Rate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void SubstanceCompoundInfusionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceAdministrationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SubstanceCompound
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SubstanceCompound",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SubstanceCompound_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SubstanceCompound_.present ())
                {
                  ::std::unique_ptr< SubstanceCompound_type > r (
                    dynamic_cast< SubstanceCompound_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SubstanceCompound_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BagVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BagVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BagVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BagVolume_.present ())
                {
                  ::std::unique_ptr< BagVolume_type > r (
                    dynamic_cast< BagVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BagVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Rate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Rate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Rate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Rate_.present ())
                {
                  ::std::unique_ptr< Rate_type > r (
                    dynamic_cast< Rate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Rate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!SubstanceCompound_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SubstanceCompound",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BagVolume_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BagVolume",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Rate_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Rate",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstanceCompoundInfusionData* SubstanceCompoundInfusionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceCompoundInfusionData (*this, f, c);
        }

        SubstanceCompoundInfusionData& SubstanceCompoundInfusionData::
        operator= (const SubstanceCompoundInfusionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (*this) = x;
            this->SubstanceCompound_ = x.SubstanceCompound_;
            this->BagVolume_ = x.BagVolume_;
            this->Rate_ = x.Rate_;
          }

          return *this;
        }

        SubstanceCompoundInfusionData::
        ~SubstanceCompoundInfusionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceCompoundInfusionData >
        _xsd_SubstanceCompoundInfusionData_type_factory_init (
          "SubstanceCompoundInfusionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceInfusionData
        //

        SubstanceInfusionData::
        SubstanceInfusionData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (this),
          Concentration_ (this),
          Rate_ (this)
        {
        }

        SubstanceInfusionData::
        SubstanceInfusionData (const Substance_type& Substance,
                               const Concentration_type& Concentration,
                               const Rate_type& Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Concentration_ (Concentration, this),
          Rate_ (Rate, this)
        {
        }

        SubstanceInfusionData::
        SubstanceInfusionData (const Substance_type& Substance,
                               ::std::unique_ptr< Concentration_type > Concentration,
                               ::std::unique_ptr< Rate_type > Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Concentration_ (std::move (Concentration), this),
          Rate_ (std::move (Rate), this)
        {
        }

        SubstanceInfusionData::
        SubstanceInfusionData (::std::unique_ptr< Substance_type > Substance,
                               ::std::unique_ptr< Concentration_type > Concentration,
                               ::std::unique_ptr< Rate_type > Rate)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (std::move (Substance), this),
          Concentration_ (std::move (Concentration), this),
          Rate_ (std::move (Rate), this)
        {
        }

        SubstanceInfusionData::
        SubstanceInfusionData (const SubstanceInfusionData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (x, f, c),
          Substance_ (x.Substance_, f, this),
          Concentration_ (x.Concentration_, f, this),
          Rate_ (x.Rate_, f, this)
        {
        }

        SubstanceInfusionData::
        SubstanceInfusionData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this),
          Concentration_ (this),
          Rate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void SubstanceInfusionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceAdministrationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Substance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Substance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Substance_.present ())
                {
                  ::std::unique_ptr< Substance_type > r (
                    dynamic_cast< Substance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Substance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Concentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Concentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Concentration_.present ())
                {
                  ::std::unique_ptr< Concentration_type > r (
                    dynamic_cast< Concentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Concentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Rate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Rate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Rate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Rate_.present ())
                {
                  ::std::unique_ptr< Rate_type > r (
                    dynamic_cast< Rate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Rate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Substance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Concentration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Concentration",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Rate_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Rate",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstanceInfusionData* SubstanceInfusionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceInfusionData (*this, f, c);
        }

        SubstanceInfusionData& SubstanceInfusionData::
        operator= (const SubstanceInfusionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (*this) = x;
            this->Substance_ = x.Substance_;
            this->Concentration_ = x.Concentration_;
            this->Rate_ = x.Rate_;
          }

          return *this;
        }

        SubstanceInfusionData::
        ~SubstanceInfusionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceInfusionData >
        _xsd_SubstanceInfusionData_type_factory_init (
          "SubstanceInfusionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceNasalDoseData
        //

        SubstanceNasalDoseData::
        SubstanceNasalDoseData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (this),
          Dose_ (this),
          ElapsedTime_ (this)
        {
        }

        SubstanceNasalDoseData::
        SubstanceNasalDoseData (const Substance_type& Substance,
                                const Dose_type& Dose)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Dose_ (Dose, this),
          ElapsedTime_ (this)
        {
        }

        SubstanceNasalDoseData::
        SubstanceNasalDoseData (const Substance_type& Substance,
                                ::std::unique_ptr< Dose_type > Dose)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Dose_ (std::move (Dose), this),
          ElapsedTime_ (this)
        {
        }

        SubstanceNasalDoseData::
        SubstanceNasalDoseData (::std::unique_ptr< Substance_type > Substance,
                                ::std::unique_ptr< Dose_type > Dose)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (std::move (Substance), this),
          Dose_ (std::move (Dose), this),
          ElapsedTime_ (this)
        {
        }

        SubstanceNasalDoseData::
        SubstanceNasalDoseData (const SubstanceNasalDoseData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (x, f, c),
          Substance_ (x.Substance_, f, this),
          Dose_ (x.Dose_, f, this),
          ElapsedTime_ (x.ElapsedTime_, f, this)
        {
        }

        SubstanceNasalDoseData::
        SubstanceNasalDoseData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this),
          Dose_ (this),
          ElapsedTime_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void SubstanceNasalDoseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceAdministrationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Substance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Substance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Substance_.present ())
                {
                  ::std::unique_ptr< Substance_type > r (
                    dynamic_cast< Substance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Substance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Dose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Dose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Dose_.present ())
                {
                  ::std::unique_ptr< Dose_type > r (
                    dynamic_cast< Dose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Dose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ElapsedTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElapsedTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElapsedTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ElapsedTime_)
                {
                  ::std::unique_ptr< ElapsedTime_type > r (
                    dynamic_cast< ElapsedTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ElapsedTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Substance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Dose_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Dose",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstanceNasalDoseData* SubstanceNasalDoseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceNasalDoseData (*this, f, c);
        }

        SubstanceNasalDoseData& SubstanceNasalDoseData::
        operator= (const SubstanceNasalDoseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (*this) = x;
            this->Substance_ = x.Substance_;
            this->Dose_ = x.Dose_;
            this->ElapsedTime_ = x.ElapsedTime_;
          }

          return *this;
        }

        SubstanceNasalDoseData::
        ~SubstanceNasalDoseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceNasalDoseData >
        _xsd_SubstanceNasalDoseData_type_factory_init (
          "SubstanceNasalDoseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceOralDoseData
        //

        SubstanceOralDoseData::
        SubstanceOralDoseData ()
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (this),
          Dose_ (this),
          AdminRoute_ (this)
        {
        }

        SubstanceOralDoseData::
        SubstanceOralDoseData (const Substance_type& Substance,
                               const Dose_type& Dose,
                               const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Dose_ (Dose, this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceOralDoseData::
        SubstanceOralDoseData (const Substance_type& Substance,
                               ::std::unique_ptr< Dose_type > Dose,
                               const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (Substance, this),
          Dose_ (std::move (Dose), this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceOralDoseData::
        SubstanceOralDoseData (::std::unique_ptr< Substance_type > Substance,
                               ::std::unique_ptr< Dose_type > Dose,
                               const AdminRoute_type& AdminRoute)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (),
          Substance_ (std::move (Substance), this),
          Dose_ (std::move (Dose), this),
          AdminRoute_ (AdminRoute, this)
        {
        }

        SubstanceOralDoseData::
        SubstanceOralDoseData (const SubstanceOralDoseData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (x, f, c),
          Substance_ (x.Substance_, f, this),
          Dose_ (x.Dose_, f, this),
          AdminRoute_ (x.AdminRoute_, f, this)
        {
        }

        SubstanceOralDoseData::
        SubstanceOralDoseData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this),
          Dose_ (this),
          AdminRoute_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceOralDoseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SubstanceAdministrationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Substance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Substance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Substance_.present ())
                {
                  ::std::unique_ptr< Substance_type > r (
                    dynamic_cast< Substance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Substance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Dose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Dose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Dose_.present ())
                {
                  ::std::unique_ptr< Dose_type > r (
                    dynamic_cast< Dose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Dose_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Substance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Dose_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Dose",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "AdminRoute" && n.namespace_ ().empty ())
            {
              this->AdminRoute_.set (AdminRoute_traits::create (i, f, this));
              continue;
            }
          }

          if (!AdminRoute_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "AdminRoute",
              "");
          }
        }

        SubstanceOralDoseData* SubstanceOralDoseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceOralDoseData (*this, f, c);
        }

        SubstanceOralDoseData& SubstanceOralDoseData::
        operator= (const SubstanceOralDoseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (*this) = x;
            this->Substance_ = x.Substance_;
            this->Dose_ = x.Dose_;
            this->AdminRoute_ = x.AdminRoute_;
          }

          return *this;
        }

        SubstanceOralDoseData::
        ~SubstanceOralDoseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceOralDoseData >
        _xsd_SubstanceOralDoseData_type_factory_init (
          "SubstanceOralDoseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumTourniquetApplicationLevel
        //

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumTourniquetApplicationLevel_convert ();
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumTourniquetApplicationLevel_convert ();
        }

        enumTourniquetApplicationLevel::
        enumTourniquetApplicationLevel (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumTourniquetApplicationLevel_convert ();
        }

        enumTourniquetApplicationLevel* enumTourniquetApplicationLevel::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumTourniquetApplicationLevel (*this, f, c);
        }

        enumTourniquetApplicationLevel::value enumTourniquetApplicationLevel::
        _xsd_enumTourniquetApplicationLevel_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumTourniquetApplicationLevel_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumTourniquetApplicationLevel_indexes_,
                            _xsd_enumTourniquetApplicationLevel_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_enumTourniquetApplicationLevel_indexes_ + 3 || _xsd_enumTourniquetApplicationLevel_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumTourniquetApplicationLevel::
        _xsd_enumTourniquetApplicationLevel_literals_[3] =
        {
          "Applied",
          "Misapplied",
          "None"
        };

        const enumTourniquetApplicationLevel::value enumTourniquetApplicationLevel::
        _xsd_enumTourniquetApplicationLevel_indexes_[3] =
        {
          ::mil::tatrc::physiology::datamodel::enumTourniquetApplicationLevel::Applied,
          ::mil::tatrc::physiology::datamodel::enumTourniquetApplicationLevel::Misapplied,
          ::mil::tatrc::physiology::datamodel::enumTourniquetApplicationLevel::None
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumTourniquetApplicationLevel >
        _xsd_enumTourniquetApplicationLevel_type_factory_init (
          "enumTourniquetApplicationLevel",
          "uri:/mil/tatrc/physiology/datamodel");

        // TourniquetData
        //

        TourniquetData::
        TourniquetData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Compartment_ (this),
          TourniquetLevel_ (this)
        {
        }

        TourniquetData::
        TourniquetData (const Compartment_type& Compartment,
                        const TourniquetLevel_type& TourniquetLevel)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Compartment_ (Compartment, this),
          TourniquetLevel_ (TourniquetLevel, this)
        {
        }

        TourniquetData::
        TourniquetData (const TourniquetData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Compartment_ (x.Compartment_, f, this),
          TourniquetLevel_ (x.TourniquetLevel_, f, this)
        {
        }

        TourniquetData::
        TourniquetData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Compartment_ (this),
          TourniquetLevel_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TourniquetData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Compartment" && n.namespace_ ().empty ())
            {
              this->Compartment_.set (Compartment_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "TourniquetLevel" && n.namespace_ ().empty ())
            {
              this->TourniquetLevel_.set (TourniquetLevel_traits::create (i, f, this));
              continue;
            }
          }

          if (!Compartment_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Compartment",
              "");
          }

          if (!TourniquetLevel_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "TourniquetLevel",
              "");
          }
        }

        TourniquetData* TourniquetData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TourniquetData (*this, f, c);
        }

        TourniquetData& TourniquetData::
        operator= (const TourniquetData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Compartment_ = x.Compartment_;
            this->TourniquetLevel_ = x.TourniquetLevel_;
          }

          return *this;
        }

        TourniquetData::
        ~TourniquetData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TourniquetData >
        _xsd_TourniquetData_type_factory_init (
          "TourniquetData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TransmucosalStateData
        //

        TransmucosalStateData::
        TransmucosalStateData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          MouthSolidMass_ (this),
          SalivaConcentration_ (this),
          BuccalConcentrations_ (this),
          SublingualConcentrations_ (this),
          Substance_ (this)
        {
        }

        TransmucosalStateData::
        TransmucosalStateData (const MouthSolidMass_type& MouthSolidMass,
                               const SalivaConcentration_type& SalivaConcentration,
                               const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          MouthSolidMass_ (MouthSolidMass, this),
          SalivaConcentration_ (SalivaConcentration, this),
          BuccalConcentrations_ (this),
          SublingualConcentrations_ (this),
          Substance_ (Substance, this)
        {
        }

        TransmucosalStateData::
        TransmucosalStateData (::std::unique_ptr< MouthSolidMass_type > MouthSolidMass,
                               ::std::unique_ptr< SalivaConcentration_type > SalivaConcentration,
                               const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          MouthSolidMass_ (std::move (MouthSolidMass), this),
          SalivaConcentration_ (std::move (SalivaConcentration), this),
          BuccalConcentrations_ (this),
          SublingualConcentrations_ (this),
          Substance_ (Substance, this)
        {
        }

        TransmucosalStateData::
        TransmucosalStateData (const TransmucosalStateData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          MouthSolidMass_ (x.MouthSolidMass_, f, this),
          SalivaConcentration_ (x.SalivaConcentration_, f, this),
          BuccalConcentrations_ (x.BuccalConcentrations_, f, this),
          SublingualConcentrations_ (x.SublingualConcentrations_, f, this),
          Substance_ (x.Substance_, f, this)
        {
        }

        TransmucosalStateData::
        TransmucosalStateData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          MouthSolidMass_ (this),
          SalivaConcentration_ (this),
          BuccalConcentrations_ (this),
          SublingualConcentrations_ (this),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TransmucosalStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MouthSolidMass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MouthSolidMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MouthSolidMass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MouthSolidMass_.present ())
                {
                  ::std::unique_ptr< MouthSolidMass_type > r (
                    dynamic_cast< MouthSolidMass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MouthSolidMass_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SalivaConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SalivaConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SalivaConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SalivaConcentration_.present ())
                {
                  ::std::unique_ptr< SalivaConcentration_type > r (
                    dynamic_cast< SalivaConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SalivaConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BuccalConcentrations
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BuccalConcentrations",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BuccalConcentrations_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< BuccalConcentrations_type > r (
                  dynamic_cast< BuccalConcentrations_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->BuccalConcentrations_.push_back (::std::move (r));
                continue;
              }
            }

            // SublingualConcentrations
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SublingualConcentrations",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SublingualConcentrations_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< SublingualConcentrations_type > r (
                  dynamic_cast< SublingualConcentrations_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->SublingualConcentrations_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!MouthSolidMass_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MouthSolidMass",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SalivaConcentration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SalivaConcentration",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Substance",
              "");
          }
        }

        TransmucosalStateData* TransmucosalStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TransmucosalStateData (*this, f, c);
        }

        TransmucosalStateData& TransmucosalStateData::
        operator= (const TransmucosalStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->MouthSolidMass_ = x.MouthSolidMass_;
            this->SalivaConcentration_ = x.SalivaConcentration_;
            this->BuccalConcentrations_ = x.BuccalConcentrations_;
            this->SublingualConcentrations_ = x.SublingualConcentrations_;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        TransmucosalStateData::
        ~TransmucosalStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransmucosalStateData >
        _xsd_TransmucosalStateData_type_factory_init (
          "TransmucosalStateData",
          "uri:/mil/tatrc/physiology/datamodel");

        // UrinateData
        //

        UrinateData::
        UrinateData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData ()
        {
        }

        UrinateData::
        UrinateData (const UrinateData& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c)
        {
        }

        UrinateData::
        UrinateData (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f, c)
        {
        }

        UrinateData* UrinateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UrinateData (*this, f, c);
        }

        UrinateData::
        ~UrinateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UrinateData >
        _xsd_UrinateData_type_factory_init (
          "UrinateData",
          "uri:/mil/tatrc/physiology/datamodel");

        // OverrideData
        //

        OverrideData::
        OverrideData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          ArterialBloodPHOverride_ (this),
          CalciumConcentrationOverride_ (this),
          CarbonDioxideSaturationOverride_ (this),
          CarbonMonoxideSaturationOverride_ (this),
          GlucoseConcentrationOverride_ (this),
          LactateConcentrationOverride_ (this),
          OxygenSaturationOverride_ (this),
          PhosphateOverride_ (this),
          PotassiumConcentrationOverride_ (this),
          SodiumConcentrationOverride_ (this),
          TotalBilirubinOverride_ (this),
          VenousBloodPHOverride_ (this),
          WhiteBloodCellCountOverride_ (this),
          BloodVolumeOverride_ (this),
          CardiacOutputOverride_ (this),
          DiastolicArterialPressureOverride_ (this),
          HeartRateOverride_ (this),
          HeartStrokeVolumeOverride_ (this),
          MeanArterialPressureOverride_ (this),
          SystolicArterialPressureOverride_ (this),
          InsulinSynthesisRateOverride_ (this),
          GlucagonSynthesisRateOverride_ (this),
          AchievedExerciseLevelOverride_ (this),
          ChlorideLostToSweatOverride_ (this),
          CoreTemperatureOverride_ (this),
          CreatinineProductionRateOverride_ (this),
          ExerciseMeanArterialPressureDeltaOverride_ (this),
          FatigueLevelOverride_ (this),
          LactateProductionRateOverride_ (this),
          PotassiumLostToSweatOverride_ (this),
          SkinTemperatureOverride_ (this),
          SodiumLostToSweatOverride_ (this),
          SweatRateOverride_ (this),
          TotalMetabolicRateOverride_ (this),
          TotalWorkRateLevelOverride_ (this),
          LeftAfferentArterioleResistanceOverride_ (this),
          LeftGlomerularFiltrationRateOverride_ (this),
          LeftReabsorptionRateOverride_ (this),
          RenalBloodFlowOverride_ (this),
          RenalPlasmaFlowOverride_ (this),
          RightAfferentArterioleResistanceOverride_ (this),
          RightGlomerularFiltrationRateOverride_ (this),
          RightReabsorptionRateOverride_ (this),
          UrinationRateOverride_ (this),
          UrineProductionRateOverride_ (this),
          UrineOsmolalityOverride_ (this),
          UrineVolumeOverride_ (this),
          UrineUreaNitrogenConcentrationOverride_ (this),
          ExpiratoryFlowOverride_ (this),
          InspiratoryFlowOverride_ (this),
          PulmonaryComplianceOverride_ (this),
          PulmonaryResistanceOverride_ (this),
          RespirationRateOverride_ (this),
          TargetPulmonaryVentilationOverride_ (this),
          TidalVolumeOverride_ (this),
          TotalAlveolarVentilationOverride_ (this),
          TotalLungVolumeOverride_ (this),
          TotalPulmonaryVentilationOverride_ (this),
          ExtravascularFluidVolumeOverride_ (this),
          IntracellularFluidVolumeOverride_ (this),
          LiverGlycogenOverride_ (this),
          MuscleGlycogenOverride_ (this),
          StoredFatOverride_ (this),
          StoredProteinOverride_ (this),
          State_ (this),
          Conformant_ (this)
        {
        }

        OverrideData::
        OverrideData (const State_type& State,
                      const Conformant_type& Conformant)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          ArterialBloodPHOverride_ (this),
          CalciumConcentrationOverride_ (this),
          CarbonDioxideSaturationOverride_ (this),
          CarbonMonoxideSaturationOverride_ (this),
          GlucoseConcentrationOverride_ (this),
          LactateConcentrationOverride_ (this),
          OxygenSaturationOverride_ (this),
          PhosphateOverride_ (this),
          PotassiumConcentrationOverride_ (this),
          SodiumConcentrationOverride_ (this),
          TotalBilirubinOverride_ (this),
          VenousBloodPHOverride_ (this),
          WhiteBloodCellCountOverride_ (this),
          BloodVolumeOverride_ (this),
          CardiacOutputOverride_ (this),
          DiastolicArterialPressureOverride_ (this),
          HeartRateOverride_ (this),
          HeartStrokeVolumeOverride_ (this),
          MeanArterialPressureOverride_ (this),
          SystolicArterialPressureOverride_ (this),
          InsulinSynthesisRateOverride_ (this),
          GlucagonSynthesisRateOverride_ (this),
          AchievedExerciseLevelOverride_ (this),
          ChlorideLostToSweatOverride_ (this),
          CoreTemperatureOverride_ (this),
          CreatinineProductionRateOverride_ (this),
          ExerciseMeanArterialPressureDeltaOverride_ (this),
          FatigueLevelOverride_ (this),
          LactateProductionRateOverride_ (this),
          PotassiumLostToSweatOverride_ (this),
          SkinTemperatureOverride_ (this),
          SodiumLostToSweatOverride_ (this),
          SweatRateOverride_ (this),
          TotalMetabolicRateOverride_ (this),
          TotalWorkRateLevelOverride_ (this),
          LeftAfferentArterioleResistanceOverride_ (this),
          LeftGlomerularFiltrationRateOverride_ (this),
          LeftReabsorptionRateOverride_ (this),
          RenalBloodFlowOverride_ (this),
          RenalPlasmaFlowOverride_ (this),
          RightAfferentArterioleResistanceOverride_ (this),
          RightGlomerularFiltrationRateOverride_ (this),
          RightReabsorptionRateOverride_ (this),
          UrinationRateOverride_ (this),
          UrineProductionRateOverride_ (this),
          UrineOsmolalityOverride_ (this),
          UrineVolumeOverride_ (this),
          UrineUreaNitrogenConcentrationOverride_ (this),
          ExpiratoryFlowOverride_ (this),
          InspiratoryFlowOverride_ (this),
          PulmonaryComplianceOverride_ (this),
          PulmonaryResistanceOverride_ (this),
          RespirationRateOverride_ (this),
          TargetPulmonaryVentilationOverride_ (this),
          TidalVolumeOverride_ (this),
          TotalAlveolarVentilationOverride_ (this),
          TotalLungVolumeOverride_ (this),
          TotalPulmonaryVentilationOverride_ (this),
          ExtravascularFluidVolumeOverride_ (this),
          IntracellularFluidVolumeOverride_ (this),
          LiverGlycogenOverride_ (this),
          MuscleGlycogenOverride_ (this),
          StoredFatOverride_ (this),
          StoredProteinOverride_ (this),
          State_ (State, this),
          Conformant_ (Conformant, this)
        {
        }

        OverrideData::
        OverrideData (const OverrideData& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          ArterialBloodPHOverride_ (x.ArterialBloodPHOverride_, f, this),
          CalciumConcentrationOverride_ (x.CalciumConcentrationOverride_, f, this),
          CarbonDioxideSaturationOverride_ (x.CarbonDioxideSaturationOverride_, f, this),
          CarbonMonoxideSaturationOverride_ (x.CarbonMonoxideSaturationOverride_, f, this),
          GlucoseConcentrationOverride_ (x.GlucoseConcentrationOverride_, f, this),
          LactateConcentrationOverride_ (x.LactateConcentrationOverride_, f, this),
          OxygenSaturationOverride_ (x.OxygenSaturationOverride_, f, this),
          PhosphateOverride_ (x.PhosphateOverride_, f, this),
          PotassiumConcentrationOverride_ (x.PotassiumConcentrationOverride_, f, this),
          SodiumConcentrationOverride_ (x.SodiumConcentrationOverride_, f, this),
          TotalBilirubinOverride_ (x.TotalBilirubinOverride_, f, this),
          VenousBloodPHOverride_ (x.VenousBloodPHOverride_, f, this),
          WhiteBloodCellCountOverride_ (x.WhiteBloodCellCountOverride_, f, this),
          BloodVolumeOverride_ (x.BloodVolumeOverride_, f, this),
          CardiacOutputOverride_ (x.CardiacOutputOverride_, f, this),
          DiastolicArterialPressureOverride_ (x.DiastolicArterialPressureOverride_, f, this),
          HeartRateOverride_ (x.HeartRateOverride_, f, this),
          HeartStrokeVolumeOverride_ (x.HeartStrokeVolumeOverride_, f, this),
          MeanArterialPressureOverride_ (x.MeanArterialPressureOverride_, f, this),
          SystolicArterialPressureOverride_ (x.SystolicArterialPressureOverride_, f, this),
          InsulinSynthesisRateOverride_ (x.InsulinSynthesisRateOverride_, f, this),
          GlucagonSynthesisRateOverride_ (x.GlucagonSynthesisRateOverride_, f, this),
          AchievedExerciseLevelOverride_ (x.AchievedExerciseLevelOverride_, f, this),
          ChlorideLostToSweatOverride_ (x.ChlorideLostToSweatOverride_, f, this),
          CoreTemperatureOverride_ (x.CoreTemperatureOverride_, f, this),
          CreatinineProductionRateOverride_ (x.CreatinineProductionRateOverride_, f, this),
          ExerciseMeanArterialPressureDeltaOverride_ (x.ExerciseMeanArterialPressureDeltaOverride_, f, this),
          FatigueLevelOverride_ (x.FatigueLevelOverride_, f, this),
          LactateProductionRateOverride_ (x.LactateProductionRateOverride_, f, this),
          PotassiumLostToSweatOverride_ (x.PotassiumLostToSweatOverride_, f, this),
          SkinTemperatureOverride_ (x.SkinTemperatureOverride_, f, this),
          SodiumLostToSweatOverride_ (x.SodiumLostToSweatOverride_, f, this),
          SweatRateOverride_ (x.SweatRateOverride_, f, this),
          TotalMetabolicRateOverride_ (x.TotalMetabolicRateOverride_, f, this),
          TotalWorkRateLevelOverride_ (x.TotalWorkRateLevelOverride_, f, this),
          LeftAfferentArterioleResistanceOverride_ (x.LeftAfferentArterioleResistanceOverride_, f, this),
          LeftGlomerularFiltrationRateOverride_ (x.LeftGlomerularFiltrationRateOverride_, f, this),
          LeftReabsorptionRateOverride_ (x.LeftReabsorptionRateOverride_, f, this),
          RenalBloodFlowOverride_ (x.RenalBloodFlowOverride_, f, this),
          RenalPlasmaFlowOverride_ (x.RenalPlasmaFlowOverride_, f, this),
          RightAfferentArterioleResistanceOverride_ (x.RightAfferentArterioleResistanceOverride_, f, this),
          RightGlomerularFiltrationRateOverride_ (x.RightGlomerularFiltrationRateOverride_, f, this),
          RightReabsorptionRateOverride_ (x.RightReabsorptionRateOverride_, f, this),
          UrinationRateOverride_ (x.UrinationRateOverride_, f, this),
          UrineProductionRateOverride_ (x.UrineProductionRateOverride_, f, this),
          UrineOsmolalityOverride_ (x.UrineOsmolalityOverride_, f, this),
          UrineVolumeOverride_ (x.UrineVolumeOverride_, f, this),
          UrineUreaNitrogenConcentrationOverride_ (x.UrineUreaNitrogenConcentrationOverride_, f, this),
          ExpiratoryFlowOverride_ (x.ExpiratoryFlowOverride_, f, this),
          InspiratoryFlowOverride_ (x.InspiratoryFlowOverride_, f, this),
          PulmonaryComplianceOverride_ (x.PulmonaryComplianceOverride_, f, this),
          PulmonaryResistanceOverride_ (x.PulmonaryResistanceOverride_, f, this),
          RespirationRateOverride_ (x.RespirationRateOverride_, f, this),
          TargetPulmonaryVentilationOverride_ (x.TargetPulmonaryVentilationOverride_, f, this),
          TidalVolumeOverride_ (x.TidalVolumeOverride_, f, this),
          TotalAlveolarVentilationOverride_ (x.TotalAlveolarVentilationOverride_, f, this),
          TotalLungVolumeOverride_ (x.TotalLungVolumeOverride_, f, this),
          TotalPulmonaryVentilationOverride_ (x.TotalPulmonaryVentilationOverride_, f, this),
          ExtravascularFluidVolumeOverride_ (x.ExtravascularFluidVolumeOverride_, f, this),
          IntracellularFluidVolumeOverride_ (x.IntracellularFluidVolumeOverride_, f, this),
          LiverGlycogenOverride_ (x.LiverGlycogenOverride_, f, this),
          MuscleGlycogenOverride_ (x.MuscleGlycogenOverride_, f, this),
          StoredFatOverride_ (x.StoredFatOverride_, f, this),
          StoredProteinOverride_ (x.StoredProteinOverride_, f, this),
          State_ (x.State_, f, this),
          Conformant_ (x.Conformant_, f, this)
        {
        }

        OverrideData::
        OverrideData (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          ArterialBloodPHOverride_ (this),
          CalciumConcentrationOverride_ (this),
          CarbonDioxideSaturationOverride_ (this),
          CarbonMonoxideSaturationOverride_ (this),
          GlucoseConcentrationOverride_ (this),
          LactateConcentrationOverride_ (this),
          OxygenSaturationOverride_ (this),
          PhosphateOverride_ (this),
          PotassiumConcentrationOverride_ (this),
          SodiumConcentrationOverride_ (this),
          TotalBilirubinOverride_ (this),
          VenousBloodPHOverride_ (this),
          WhiteBloodCellCountOverride_ (this),
          BloodVolumeOverride_ (this),
          CardiacOutputOverride_ (this),
          DiastolicArterialPressureOverride_ (this),
          HeartRateOverride_ (this),
          HeartStrokeVolumeOverride_ (this),
          MeanArterialPressureOverride_ (this),
          SystolicArterialPressureOverride_ (this),
          InsulinSynthesisRateOverride_ (this),
          GlucagonSynthesisRateOverride_ (this),
          AchievedExerciseLevelOverride_ (this),
          ChlorideLostToSweatOverride_ (this),
          CoreTemperatureOverride_ (this),
          CreatinineProductionRateOverride_ (this),
          ExerciseMeanArterialPressureDeltaOverride_ (this),
          FatigueLevelOverride_ (this),
          LactateProductionRateOverride_ (this),
          PotassiumLostToSweatOverride_ (this),
          SkinTemperatureOverride_ (this),
          SodiumLostToSweatOverride_ (this),
          SweatRateOverride_ (this),
          TotalMetabolicRateOverride_ (this),
          TotalWorkRateLevelOverride_ (this),
          LeftAfferentArterioleResistanceOverride_ (this),
          LeftGlomerularFiltrationRateOverride_ (this),
          LeftReabsorptionRateOverride_ (this),
          RenalBloodFlowOverride_ (this),
          RenalPlasmaFlowOverride_ (this),
          RightAfferentArterioleResistanceOverride_ (this),
          RightGlomerularFiltrationRateOverride_ (this),
          RightReabsorptionRateOverride_ (this),
          UrinationRateOverride_ (this),
          UrineProductionRateOverride_ (this),
          UrineOsmolalityOverride_ (this),
          UrineVolumeOverride_ (this),
          UrineUreaNitrogenConcentrationOverride_ (this),
          ExpiratoryFlowOverride_ (this),
          InspiratoryFlowOverride_ (this),
          PulmonaryComplianceOverride_ (this),
          PulmonaryResistanceOverride_ (this),
          RespirationRateOverride_ (this),
          TargetPulmonaryVentilationOverride_ (this),
          TidalVolumeOverride_ (this),
          TotalAlveolarVentilationOverride_ (this),
          TotalLungVolumeOverride_ (this),
          TotalPulmonaryVentilationOverride_ (this),
          ExtravascularFluidVolumeOverride_ (this),
          IntracellularFluidVolumeOverride_ (this),
          LiverGlycogenOverride_ (this),
          MuscleGlycogenOverride_ (this),
          StoredFatOverride_ (this),
          StoredProteinOverride_ (this),
          State_ (this),
          Conformant_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void OverrideData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ArterialBloodPHOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialBloodPHOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialBloodPHOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialBloodPHOverride_)
                {
                  ::std::unique_ptr< ArterialBloodPHOverride_type > r (
                    dynamic_cast< ArterialBloodPHOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialBloodPHOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CalciumConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CalciumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CalciumConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CalciumConcentrationOverride_)
                {
                  ::std::unique_ptr< CalciumConcentrationOverride_type > r (
                    dynamic_cast< CalciumConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CalciumConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarbonDioxideSaturationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbonDioxideSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbonDioxideSaturationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbonDioxideSaturationOverride_)
                {
                  ::std::unique_ptr< CarbonDioxideSaturationOverride_type > r (
                    dynamic_cast< CarbonDioxideSaturationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbonDioxideSaturationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarbonMonoxideSaturationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbonMonoxideSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbonMonoxideSaturationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbonMonoxideSaturationOverride_)
                {
                  ::std::unique_ptr< CarbonMonoxideSaturationOverride_type > r (
                    dynamic_cast< CarbonMonoxideSaturationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbonMonoxideSaturationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GlucoseConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GlucoseConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GlucoseConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GlucoseConcentrationOverride_)
                {
                  ::std::unique_ptr< GlucoseConcentrationOverride_type > r (
                    dynamic_cast< GlucoseConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GlucoseConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LactateConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LactateConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LactateConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LactateConcentrationOverride_)
                {
                  ::std::unique_ptr< LactateConcentrationOverride_type > r (
                    dynamic_cast< LactateConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LactateConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenSaturationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenSaturationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenSaturationOverride_)
                {
                  ::std::unique_ptr< OxygenSaturationOverride_type > r (
                    dynamic_cast< OxygenSaturationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenSaturationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PhosphateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PhosphateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PhosphateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PhosphateOverride_)
                {
                  ::std::unique_ptr< PhosphateOverride_type > r (
                    dynamic_cast< PhosphateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PhosphateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PotassiumConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PotassiumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PotassiumConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PotassiumConcentrationOverride_)
                {
                  ::std::unique_ptr< PotassiumConcentrationOverride_type > r (
                    dynamic_cast< PotassiumConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PotassiumConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SodiumConcentrationOverride_)
                {
                  ::std::unique_ptr< SodiumConcentrationOverride_type > r (
                    dynamic_cast< SodiumConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalBilirubinOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBilirubinOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBilirubinOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalBilirubinOverride_)
                {
                  ::std::unique_ptr< TotalBilirubinOverride_type > r (
                    dynamic_cast< TotalBilirubinOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBilirubinOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VenousBloodPHOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VenousBloodPHOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VenousBloodPHOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VenousBloodPHOverride_)
                {
                  ::std::unique_ptr< VenousBloodPHOverride_type > r (
                    dynamic_cast< VenousBloodPHOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VenousBloodPHOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCellCountOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCellCountOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCellCountOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCellCountOverride_)
                {
                  ::std::unique_ptr< WhiteBloodCellCountOverride_type > r (
                    dynamic_cast< WhiteBloodCellCountOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCellCountOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodVolumeOverride_)
                {
                  ::std::unique_ptr< BloodVolumeOverride_type > r (
                    dynamic_cast< BloodVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacOutputOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacOutputOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacOutputOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiacOutputOverride_)
                {
                  ::std::unique_ptr< CardiacOutputOverride_type > r (
                    dynamic_cast< CardiacOutputOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacOutputOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DiastolicArterialPressureOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DiastolicArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DiastolicArterialPressureOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DiastolicArterialPressureOverride_)
                {
                  ::std::unique_ptr< DiastolicArterialPressureOverride_type > r (
                    dynamic_cast< DiastolicArterialPressureOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DiastolicArterialPressureOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRateOverride_)
                {
                  ::std::unique_ptr< HeartRateOverride_type > r (
                    dynamic_cast< HeartRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartStrokeVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartStrokeVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartStrokeVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartStrokeVolumeOverride_)
                {
                  ::std::unique_ptr< HeartStrokeVolumeOverride_type > r (
                    dynamic_cast< HeartStrokeVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartStrokeVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialPressureOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialPressureOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialPressureOverride_)
                {
                  ::std::unique_ptr< MeanArterialPressureOverride_type > r (
                    dynamic_cast< MeanArterialPressureOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialPressureOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystolicArterialPressureOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystolicArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystolicArterialPressureOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystolicArterialPressureOverride_)
                {
                  ::std::unique_ptr< SystolicArterialPressureOverride_type > r (
                    dynamic_cast< SystolicArterialPressureOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystolicArterialPressureOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InsulinSynthesisRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InsulinSynthesisRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InsulinSynthesisRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InsulinSynthesisRateOverride_)
                {
                  ::std::unique_ptr< InsulinSynthesisRateOverride_type > r (
                    dynamic_cast< InsulinSynthesisRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InsulinSynthesisRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GlucagonSynthesisRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GlucagonSynthesisRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GlucagonSynthesisRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GlucagonSynthesisRateOverride_)
                {
                  ::std::unique_ptr< GlucagonSynthesisRateOverride_type > r (
                    dynamic_cast< GlucagonSynthesisRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GlucagonSynthesisRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AchievedExerciseLevelOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AchievedExerciseLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AchievedExerciseLevelOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AchievedExerciseLevelOverride_)
                {
                  ::std::unique_ptr< AchievedExerciseLevelOverride_type > r (
                    dynamic_cast< AchievedExerciseLevelOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AchievedExerciseLevelOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChlorideLostToSweatOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChlorideLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChlorideLostToSweatOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChlorideLostToSweatOverride_)
                {
                  ::std::unique_ptr< ChlorideLostToSweatOverride_type > r (
                    dynamic_cast< ChlorideLostToSweatOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChlorideLostToSweatOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperatureOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperatureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperatureOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperatureOverride_)
                {
                  ::std::unique_ptr< CoreTemperatureOverride_type > r (
                    dynamic_cast< CoreTemperatureOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperatureOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CreatinineProductionRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CreatinineProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CreatinineProductionRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CreatinineProductionRateOverride_)
                {
                  ::std::unique_ptr< CreatinineProductionRateOverride_type > r (
                    dynamic_cast< CreatinineProductionRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CreatinineProductionRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExerciseMeanArterialPressureDeltaOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExerciseMeanArterialPressureDeltaOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExerciseMeanArterialPressureDeltaOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExerciseMeanArterialPressureDeltaOverride_)
                {
                  ::std::unique_ptr< ExerciseMeanArterialPressureDeltaOverride_type > r (
                    dynamic_cast< ExerciseMeanArterialPressureDeltaOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExerciseMeanArterialPressureDeltaOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatigueLevelOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatigueLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatigueLevelOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatigueLevelOverride_)
                {
                  ::std::unique_ptr< FatigueLevelOverride_type > r (
                    dynamic_cast< FatigueLevelOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatigueLevelOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LactateProductionRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LactateProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LactateProductionRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LactateProductionRateOverride_)
                {
                  ::std::unique_ptr< LactateProductionRateOverride_type > r (
                    dynamic_cast< LactateProductionRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LactateProductionRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PotassiumLostToSweatOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PotassiumLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PotassiumLostToSweatOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PotassiumLostToSweatOverride_)
                {
                  ::std::unique_ptr< PotassiumLostToSweatOverride_type > r (
                    dynamic_cast< PotassiumLostToSweatOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PotassiumLostToSweatOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SkinTemperatureOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SkinTemperatureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SkinTemperatureOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SkinTemperatureOverride_)
                {
                  ::std::unique_ptr< SkinTemperatureOverride_type > r (
                    dynamic_cast< SkinTemperatureOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SkinTemperatureOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumLostToSweatOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumLostToSweatOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SodiumLostToSweatOverride_)
                {
                  ::std::unique_ptr< SodiumLostToSweatOverride_type > r (
                    dynamic_cast< SodiumLostToSweatOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumLostToSweatOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SweatRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SweatRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SweatRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SweatRateOverride_)
                {
                  ::std::unique_ptr< SweatRateOverride_type > r (
                    dynamic_cast< SweatRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SweatRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalMetabolicRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalMetabolicRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalMetabolicRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalMetabolicRateOverride_)
                {
                  ::std::unique_ptr< TotalMetabolicRateOverride_type > r (
                    dynamic_cast< TotalMetabolicRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalMetabolicRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalWorkRateLevelOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalWorkRateLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalWorkRateLevelOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalWorkRateLevelOverride_)
                {
                  ::std::unique_ptr< TotalWorkRateLevelOverride_type > r (
                    dynamic_cast< TotalWorkRateLevelOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalWorkRateLevelOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftAfferentArterioleResistanceOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftAfferentArterioleResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftAfferentArterioleResistanceOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftAfferentArterioleResistanceOverride_)
                {
                  ::std::unique_ptr< LeftAfferentArterioleResistanceOverride_type > r (
                    dynamic_cast< LeftAfferentArterioleResistanceOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftAfferentArterioleResistanceOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFiltrationRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFiltrationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFiltrationRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFiltrationRateOverride_)
                {
                  ::std::unique_ptr< LeftGlomerularFiltrationRateOverride_type > r (
                    dynamic_cast< LeftGlomerularFiltrationRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFiltrationRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftReabsorptionRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftReabsorptionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftReabsorptionRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftReabsorptionRateOverride_)
                {
                  ::std::unique_ptr< LeftReabsorptionRateOverride_type > r (
                    dynamic_cast< LeftReabsorptionRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftReabsorptionRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalBloodFlowOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalBloodFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalBloodFlowOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalBloodFlowOverride_)
                {
                  ::std::unique_ptr< RenalBloodFlowOverride_type > r (
                    dynamic_cast< RenalBloodFlowOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalBloodFlowOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalPlasmaFlowOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalPlasmaFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalPlasmaFlowOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalPlasmaFlowOverride_)
                {
                  ::std::unique_ptr< RenalPlasmaFlowOverride_type > r (
                    dynamic_cast< RenalPlasmaFlowOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalPlasmaFlowOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightAfferentArterioleResistanceOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightAfferentArterioleResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightAfferentArterioleResistanceOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightAfferentArterioleResistanceOverride_)
                {
                  ::std::unique_ptr< RightAfferentArterioleResistanceOverride_type > r (
                    dynamic_cast< RightAfferentArterioleResistanceOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightAfferentArterioleResistanceOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFiltrationRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFiltrationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFiltrationRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFiltrationRateOverride_)
                {
                  ::std::unique_ptr< RightGlomerularFiltrationRateOverride_type > r (
                    dynamic_cast< RightGlomerularFiltrationRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFiltrationRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightReabsorptionRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightReabsorptionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightReabsorptionRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightReabsorptionRateOverride_)
                {
                  ::std::unique_ptr< RightReabsorptionRateOverride_type > r (
                    dynamic_cast< RightReabsorptionRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightReabsorptionRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrinationRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrinationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrinationRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrinationRateOverride_)
                {
                  ::std::unique_ptr< UrinationRateOverride_type > r (
                    dynamic_cast< UrinationRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrinationRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineProductionRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineProductionRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineProductionRateOverride_)
                {
                  ::std::unique_ptr< UrineProductionRateOverride_type > r (
                    dynamic_cast< UrineProductionRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineProductionRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineOsmolalityOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineOsmolalityOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineOsmolalityOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineOsmolalityOverride_)
                {
                  ::std::unique_ptr< UrineOsmolalityOverride_type > r (
                    dynamic_cast< UrineOsmolalityOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineOsmolalityOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineVolumeOverride_)
                {
                  ::std::unique_ptr< UrineVolumeOverride_type > r (
                    dynamic_cast< UrineVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineUreaNitrogenConcentrationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineUreaNitrogenConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineUreaNitrogenConcentrationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineUreaNitrogenConcentrationOverride_)
                {
                  ::std::unique_ptr< UrineUreaNitrogenConcentrationOverride_type > r (
                    dynamic_cast< UrineUreaNitrogenConcentrationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineUreaNitrogenConcentrationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExpiratoryFlowOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExpiratoryFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExpiratoryFlowOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExpiratoryFlowOverride_)
                {
                  ::std::unique_ptr< ExpiratoryFlowOverride_type > r (
                    dynamic_cast< ExpiratoryFlowOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExpiratoryFlowOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryFlowOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryFlowOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryFlowOverride_)
                {
                  ::std::unique_ptr< InspiratoryFlowOverride_type > r (
                    dynamic_cast< InspiratoryFlowOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryFlowOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryComplianceOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryComplianceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryComplianceOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryComplianceOverride_)
                {
                  ::std::unique_ptr< PulmonaryComplianceOverride_type > r (
                    dynamic_cast< PulmonaryComplianceOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryComplianceOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryResistanceOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryResistanceOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryResistanceOverride_)
                {
                  ::std::unique_ptr< PulmonaryResistanceOverride_type > r (
                    dynamic_cast< PulmonaryResistanceOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryResistanceOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRateOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRateOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationRateOverride_)
                {
                  ::std::unique_ptr< RespirationRateOverride_type > r (
                    dynamic_cast< RespirationRateOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRateOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetPulmonaryVentilationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetPulmonaryVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetPulmonaryVentilationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TargetPulmonaryVentilationOverride_)
                {
                  ::std::unique_ptr< TargetPulmonaryVentilationOverride_type > r (
                    dynamic_cast< TargetPulmonaryVentilationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetPulmonaryVentilationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TidalVolumeOverride_)
                {
                  ::std::unique_ptr< TidalVolumeOverride_type > r (
                    dynamic_cast< TidalVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalAlveolarVentilationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalAlveolarVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalAlveolarVentilationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalAlveolarVentilationOverride_)
                {
                  ::std::unique_ptr< TotalAlveolarVentilationOverride_type > r (
                    dynamic_cast< TotalAlveolarVentilationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalAlveolarVentilationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalLungVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalLungVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalLungVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalLungVolumeOverride_)
                {
                  ::std::unique_ptr< TotalLungVolumeOverride_type > r (
                    dynamic_cast< TotalLungVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalLungVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalPulmonaryVentilationOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalPulmonaryVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalPulmonaryVentilationOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalPulmonaryVentilationOverride_)
                {
                  ::std::unique_ptr< TotalPulmonaryVentilationOverride_type > r (
                    dynamic_cast< TotalPulmonaryVentilationOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalPulmonaryVentilationOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularFluidVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularFluidVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularFluidVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularFluidVolumeOverride_)
                {
                  ::std::unique_ptr< ExtravascularFluidVolumeOverride_type > r (
                    dynamic_cast< ExtravascularFluidVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularFluidVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntracellularFluidVolumeOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntracellularFluidVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntracellularFluidVolumeOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->IntracellularFluidVolumeOverride_)
                {
                  ::std::unique_ptr< IntracellularFluidVolumeOverride_type > r (
                    dynamic_cast< IntracellularFluidVolumeOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntracellularFluidVolumeOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LiverGlycogenOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiverGlycogenOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiverGlycogenOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LiverGlycogenOverride_)
                {
                  ::std::unique_ptr< LiverGlycogenOverride_type > r (
                    dynamic_cast< LiverGlycogenOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LiverGlycogenOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MuscleGlycogenOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MuscleGlycogenOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MuscleGlycogenOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MuscleGlycogenOverride_)
                {
                  ::std::unique_ptr< MuscleGlycogenOverride_type > r (
                    dynamic_cast< MuscleGlycogenOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MuscleGlycogenOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StoredFatOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StoredFatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StoredFatOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StoredFatOverride_)
                {
                  ::std::unique_ptr< StoredFatOverride_type > r (
                    dynamic_cast< StoredFatOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StoredFatOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StoredProteinOverride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StoredProteinOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StoredProteinOverride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StoredProteinOverride_)
                {
                  ::std::unique_ptr< StoredProteinOverride_type > r (
                    dynamic_cast< StoredProteinOverride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StoredProteinOverride_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Conformant" && n.namespace_ ().empty ())
            {
              this->Conformant_.set (Conformant_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }

          if (!Conformant_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Conformant",
              "");
          }
        }

        OverrideData* OverrideData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class OverrideData (*this, f, c);
        }

        OverrideData& OverrideData::
        operator= (const OverrideData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->ArterialBloodPHOverride_ = x.ArterialBloodPHOverride_;
            this->CalciumConcentrationOverride_ = x.CalciumConcentrationOverride_;
            this->CarbonDioxideSaturationOverride_ = x.CarbonDioxideSaturationOverride_;
            this->CarbonMonoxideSaturationOverride_ = x.CarbonMonoxideSaturationOverride_;
            this->GlucoseConcentrationOverride_ = x.GlucoseConcentrationOverride_;
            this->LactateConcentrationOverride_ = x.LactateConcentrationOverride_;
            this->OxygenSaturationOverride_ = x.OxygenSaturationOverride_;
            this->PhosphateOverride_ = x.PhosphateOverride_;
            this->PotassiumConcentrationOverride_ = x.PotassiumConcentrationOverride_;
            this->SodiumConcentrationOverride_ = x.SodiumConcentrationOverride_;
            this->TotalBilirubinOverride_ = x.TotalBilirubinOverride_;
            this->VenousBloodPHOverride_ = x.VenousBloodPHOverride_;
            this->WhiteBloodCellCountOverride_ = x.WhiteBloodCellCountOverride_;
            this->BloodVolumeOverride_ = x.BloodVolumeOverride_;
            this->CardiacOutputOverride_ = x.CardiacOutputOverride_;
            this->DiastolicArterialPressureOverride_ = x.DiastolicArterialPressureOverride_;
            this->HeartRateOverride_ = x.HeartRateOverride_;
            this->HeartStrokeVolumeOverride_ = x.HeartStrokeVolumeOverride_;
            this->MeanArterialPressureOverride_ = x.MeanArterialPressureOverride_;
            this->SystolicArterialPressureOverride_ = x.SystolicArterialPressureOverride_;
            this->InsulinSynthesisRateOverride_ = x.InsulinSynthesisRateOverride_;
            this->GlucagonSynthesisRateOverride_ = x.GlucagonSynthesisRateOverride_;
            this->AchievedExerciseLevelOverride_ = x.AchievedExerciseLevelOverride_;
            this->ChlorideLostToSweatOverride_ = x.ChlorideLostToSweatOverride_;
            this->CoreTemperatureOverride_ = x.CoreTemperatureOverride_;
            this->CreatinineProductionRateOverride_ = x.CreatinineProductionRateOverride_;
            this->ExerciseMeanArterialPressureDeltaOverride_ = x.ExerciseMeanArterialPressureDeltaOverride_;
            this->FatigueLevelOverride_ = x.FatigueLevelOverride_;
            this->LactateProductionRateOverride_ = x.LactateProductionRateOverride_;
            this->PotassiumLostToSweatOverride_ = x.PotassiumLostToSweatOverride_;
            this->SkinTemperatureOverride_ = x.SkinTemperatureOverride_;
            this->SodiumLostToSweatOverride_ = x.SodiumLostToSweatOverride_;
            this->SweatRateOverride_ = x.SweatRateOverride_;
            this->TotalMetabolicRateOverride_ = x.TotalMetabolicRateOverride_;
            this->TotalWorkRateLevelOverride_ = x.TotalWorkRateLevelOverride_;
            this->LeftAfferentArterioleResistanceOverride_ = x.LeftAfferentArterioleResistanceOverride_;
            this->LeftGlomerularFiltrationRateOverride_ = x.LeftGlomerularFiltrationRateOverride_;
            this->LeftReabsorptionRateOverride_ = x.LeftReabsorptionRateOverride_;
            this->RenalBloodFlowOverride_ = x.RenalBloodFlowOverride_;
            this->RenalPlasmaFlowOverride_ = x.RenalPlasmaFlowOverride_;
            this->RightAfferentArterioleResistanceOverride_ = x.RightAfferentArterioleResistanceOverride_;
            this->RightGlomerularFiltrationRateOverride_ = x.RightGlomerularFiltrationRateOverride_;
            this->RightReabsorptionRateOverride_ = x.RightReabsorptionRateOverride_;
            this->UrinationRateOverride_ = x.UrinationRateOverride_;
            this->UrineProductionRateOverride_ = x.UrineProductionRateOverride_;
            this->UrineOsmolalityOverride_ = x.UrineOsmolalityOverride_;
            this->UrineVolumeOverride_ = x.UrineVolumeOverride_;
            this->UrineUreaNitrogenConcentrationOverride_ = x.UrineUreaNitrogenConcentrationOverride_;
            this->ExpiratoryFlowOverride_ = x.ExpiratoryFlowOverride_;
            this->InspiratoryFlowOverride_ = x.InspiratoryFlowOverride_;
            this->PulmonaryComplianceOverride_ = x.PulmonaryComplianceOverride_;
            this->PulmonaryResistanceOverride_ = x.PulmonaryResistanceOverride_;
            this->RespirationRateOverride_ = x.RespirationRateOverride_;
            this->TargetPulmonaryVentilationOverride_ = x.TargetPulmonaryVentilationOverride_;
            this->TidalVolumeOverride_ = x.TidalVolumeOverride_;
            this->TotalAlveolarVentilationOverride_ = x.TotalAlveolarVentilationOverride_;
            this->TotalLungVolumeOverride_ = x.TotalLungVolumeOverride_;
            this->TotalPulmonaryVentilationOverride_ = x.TotalPulmonaryVentilationOverride_;
            this->ExtravascularFluidVolumeOverride_ = x.ExtravascularFluidVolumeOverride_;
            this->IntracellularFluidVolumeOverride_ = x.IntracellularFluidVolumeOverride_;
            this->LiverGlycogenOverride_ = x.LiverGlycogenOverride_;
            this->MuscleGlycogenOverride_ = x.MuscleGlycogenOverride_;
            this->StoredFatOverride_ = x.StoredFatOverride_;
            this->StoredProteinOverride_ = x.StoredProteinOverride_;
            this->State_ = x.State_;
            this->Conformant_ = x.Conformant_;
          }

          return *this;
        }

        OverrideData::
        ~OverrideData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, OverrideData >
        _xsd_OverrideData_type_factory_init (
          "OverrideData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PatientActionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PatientActionData >
        _xsd_PatientActionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumPatientAssessment::value i)
        {
          return o << enumPatientAssessment::_xsd_enumPatientAssessment_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumPatientAssessment& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumPatientAssessment >
        _xsd_enumPatientAssessment_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PatientAssessmentRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "Type: " << i.Type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PatientAssessmentRequestData >
        _xsd_PatientAssessmentRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AcuteRespiratoryDistressData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AcuteRespiratoryDistressData >
        _xsd_AcuteRespiratoryDistressData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AcuteStressData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AcuteStressData >
        _xsd_AcuteStressData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AirwayObstructionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AirwayObstructionData >
        _xsd_AirwayObstructionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ApneaData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ApneaData >
        _xsd_ApneaData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AsthmaAttackData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AsthmaAttackData >
        _xsd_AsthmaAttackData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumBrainInjuryType::value i)
        {
          return o << enumBrainInjuryType::_xsd_enumBrainInjuryType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumBrainInjuryType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumBrainInjuryType >
        _xsd_enumBrainInjuryType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BrainInjuryData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          o << ::std::endl << "Type: " << i.Type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BrainInjuryData >
        _xsd_BrainInjuryData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BronchoconstrictionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BronchoconstrictionData >
        _xsd_BronchoconstrictionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BurnWoundData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TotalBodySurfaceArea: ";
            om.insert (o, i.TotalBodySurfaceArea ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BurnWoundData >
        _xsd_BurnWoundData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CardiacArrestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CardiacArrestData >
        _xsd_CardiacArrestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChestCompressionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChestCompressionData >
        _xsd_ChestCompressionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChestCompressionForceData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Force: ";
            om.insert (o, i.Force ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChestCompressionForceData >
        _xsd_ChestCompressionForceData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChestCompressionForceScaleData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ForceScale: ";
            om.insert (o, i.ForceScale ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ForcePeriod ())
            {
              o << ::std::endl << "ForcePeriod: ";
              om.insert (o, *i.ForcePeriod ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChestCompressionForceScaleData >
        _xsd_ChestCompressionForceScaleData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChestOcclusiveDressingData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          o << ::std::endl << "Side: " << i.Side ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChestOcclusiveDressingData >
        _xsd_ChestOcclusiveDressingData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ConsciousRespirationCommandData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Comment ())
            {
              o << ::std::endl << "Comment: ";
              om.insert (o, *i.Comment ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsciousRespirationCommandData >
        _xsd_ConsciousRespirationCommandData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ForcedInhaleData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InspiratoryCapacityFraction: ";
            om.insert (o, i.InspiratoryCapacityFraction ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Period: ";
            om.insert (o, i.Period ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ForcedInhaleData >
        _xsd_ForcedInhaleData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ForcedExhaleData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ExpiratoryReserveVolumeFraction: ";
            om.insert (o, i.ExpiratoryReserveVolumeFraction ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Period: ";
            om.insert (o, i.Period ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ForcedExhaleData >
        _xsd_ForcedExhaleData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BreathHoldData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Period: ";
            om.insert (o, i.Period ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BreathHoldData >
        _xsd_BreathHoldData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const UseInhalerData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UseInhalerData >
        _xsd_UseInhalerData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ConsciousRespirationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ConsciousRespirationData::Command_const_iterator
                 b (i.Command ().begin ()), e (i.Command ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Command: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "AppendToPrevious: " << i.AppendToPrevious ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsciousRespirationData >
        _xsd_ConsciousRespirationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ConsumeNutrientsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NutritionFile ())
            {
              o << ::std::endl << "NutritionFile: ";
              om.insert (o, *i.NutritionFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Nutrition ())
            {
              o << ::std::endl << "Nutrition: ";
              om.insert (o, *i.Nutrition ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConsumeNutrientsData >
        _xsd_ConsumeNutrientsData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GenericExerciseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Intensity ())
            {
              o << ::std::endl << "Intensity: ";
              om.insert (o, *i.Intensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DesiredWorkRate ())
            {
              o << ::std::endl << "DesiredWorkRate: ";
              om.insert (o, *i.DesiredWorkRate ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GenericExerciseData >
        _xsd_GenericExerciseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const RunningExerciseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Speed: ";
            om.insert (o, i.Speed ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Incline: ";
            om.insert (o, i.Incline ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AddedWeight ())
            {
              o << ::std::endl << "AddedWeight: ";
              om.insert (o, *i.AddedWeight ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RunningExerciseData >
        _xsd_RunningExerciseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CyclingExerciseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Cadence: ";
            om.insert (o, i.Cadence ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Power: ";
            om.insert (o, i.Power ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AddedWeight ())
            {
              o << ::std::endl << "AddedWeight: ";
              om.insert (o, *i.AddedWeight ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CyclingExerciseData >
        _xsd_CyclingExerciseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const StrengthExerciseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Weight: ";
            om.insert (o, i.Weight ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Repetitions: ";
            om.insert (o, i.Repetitions ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StrengthExerciseData >
        _xsd_StrengthExerciseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ExerciseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GenericExercise ())
            {
              o << ::std::endl << "GenericExercise: ";
              om.insert (o, *i.GenericExercise ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RunningExercise ())
            {
              o << ::std::endl << "RunningExercise: ";
              om.insert (o, *i.RunningExercise ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CyclingExercise ())
            {
              o << ::std::endl << "CyclingExercise: ";
              om.insert (o, *i.CyclingExercise ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StrengthExercise ())
            {
              o << ::std::endl << "StrengthExercise: ";
              om.insert (o, *i.StrengthExercise ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ExerciseData >
        _xsd_ExerciseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const HemorrhageData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InitialRate: ";
            om.insert (o, i.InitialRate ());
          }

          o << ::std::endl << "Compartment: " << i.Compartment ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HemorrhageData >
        _xsd_HemorrhageData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumInfectionSeverity::value i)
        {
          return o << enumInfectionSeverity::_xsd_enumInfectionSeverity_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumInfectionSeverity& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumInfectionSeverity >
        _xsd_enumInfectionSeverity_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const InfectionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MinimumInhibitoryConcentration: ";
            om.insert (o, i.MinimumInhibitoryConcentration ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Location: ";
            om.insert (o, i.Location ());
          }

          o << ::std::endl << "Severity: " << i.Severity ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, InfectionData >
        _xsd_InfectionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumIntubationType::value i)
        {
          return o << enumIntubationType::_xsd_enumIntubationType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumIntubationType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumIntubationType >
        _xsd_enumIntubationType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const IntubationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "Type: " << i.Type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, IntubationData >
        _xsd_IntubationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const MechanicalVentilationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              o << ::std::endl << "Pressure: ";
              om.insert (o, *i.Pressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Flow ())
            {
              o << ::std::endl << "Flow: ";
              om.insert (o, *i.Flow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (MechanicalVentilationData::GasFraction_const_iterator
                 b (i.GasFraction ().begin ()), e (i.GasFraction ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasFraction: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "State: " << i.State ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const NeedleDecompressionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          o << ::std::endl << "Side: " << i.Side ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const NasalStateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TotalNasalDose: ";
            om.insert (o, i.TotalNasalDose ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (NasalStateData::UnreleasedDrugMasses_const_iterator
                 b (i.UnreleasedDrugMasses ().begin ()), e (i.UnreleasedDrugMasses ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "UnreleasedDrugMasses: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (NasalStateData::ReleasedDrugMasses_const_iterator
                 b (i.ReleasedDrugMasses ().begin ()), e (i.ReleasedDrugMasses ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ReleasedDrugMasses: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "Substance: " << i.Substance ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NasalStateData >
        _xsd_NasalStateData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PainStimulusData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HalfLife ())
            {
              o << ::std::endl << "HalfLife: ";
              om.insert (o, *i.HalfLife ());
            }
          }

          o << ::std::endl << "Location: " << i.Location ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PainStimulusData >
        _xsd_PainStimulusData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PericardialEffusionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "EffusionRate: ";
            om.insert (o, i.EffusionRate ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PericardialEffusionData >
        _xsd_PericardialEffusionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumPneumothoraxType::value i)
        {
          return o << enumPneumothoraxType::_xsd_enumPneumothoraxType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumPneumothoraxType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumPneumothoraxType >
        _xsd_enumPneumothoraxType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TensionPneumothoraxData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          o << ::std::endl << "Type: " << i.Type ();
          o << ::std::endl << "Side: " << i.Side ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TensionPneumothoraxData >
        _xsd_TensionPneumothoraxData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SleepData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "Sleep: " << i.Sleep ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SleepData >
        _xsd_SleepData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumBolusAdministration::value i)
        {
          return o << enumBolusAdministration::_xsd_enumBolusAdministration_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumBolusAdministration& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumBolusAdministration >
        _xsd_enumBolusAdministration_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumOralAdministration::value i)
        {
          return o << enumOralAdministration::_xsd_enumOralAdministration_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumOralAdministration& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumOralAdministration >
        _xsd_enumOralAdministration_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceAdministrationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceAdministrationData >
        _xsd_SubstanceAdministrationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceBolusData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Substance: ";
            om.insert (o, i.Substance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Concentration: ";
            om.insert (o, i.Concentration ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Dose: ";
            om.insert (o, i.Dose ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AdminTime ())
            {
              o << ::std::endl << "AdminTime: ";
              om.insert (o, *i.AdminTime ());
            }
          }

          o << ::std::endl << "AdminRoute: " << i.AdminRoute ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceBolusData >
        _xsd_SubstanceBolusData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceBolusStateData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ElapsedTime: ";
            om.insert (o, i.ElapsedTime ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AdministeredDose: ";
            om.insert (o, i.AdministeredDose ());
          }

          o << ::std::endl << "Substance: " << i.Substance ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceBolusStateData >
        _xsd_SubstanceBolusStateData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceCompoundInfusionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SubstanceCompound: ";
            om.insert (o, i.SubstanceCompound ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BagVolume: ";
            om.insert (o, i.BagVolume ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Rate: ";
            om.insert (o, i.Rate ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceCompoundInfusionData >
        _xsd_SubstanceCompoundInfusionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceInfusionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Substance: ";
            om.insert (o, i.Substance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Concentration: ";
            om.insert (o, i.Concentration ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Rate: ";
            om.insert (o, i.Rate ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceInfusionData >
        _xsd_SubstanceInfusionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceNasalDoseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Substance: ";
            om.insert (o, i.Substance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Dose: ";
            om.insert (o, i.Dose ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ElapsedTime ())
            {
              o << ::std::endl << "ElapsedTime: ";
              om.insert (o, *i.ElapsedTime ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceNasalDoseData >
        _xsd_SubstanceNasalDoseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceOralDoseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Substance: ";
            om.insert (o, i.Substance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Dose: ";
            om.insert (o, i.Dose ());
          }

          o << ::std::endl << "AdminRoute: " << i.AdminRoute ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceOralDoseData >
        _xsd_SubstanceOralDoseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumTourniquetApplicationLevel::value i)
        {
          return o << enumTourniquetApplicationLevel::_xsd_enumTourniquetApplicationLevel_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumTourniquetApplicationLevel& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumTourniquetApplicationLevel >
        _xsd_enumTourniquetApplicationLevel_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TourniquetData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "Compartment: " << i.Compartment ();
          o << ::std::endl << "TourniquetLevel: " << i.TourniquetLevel ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TourniquetData >
        _xsd_TourniquetData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TransmucosalStateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MouthSolidMass: ";
            om.insert (o, i.MouthSolidMass ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SalivaConcentration: ";
            om.insert (o, i.SalivaConcentration ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TransmucosalStateData::BuccalConcentrations_const_iterator
                 b (i.BuccalConcentrations ().begin ()), e (i.BuccalConcentrations ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "BuccalConcentrations: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TransmucosalStateData::SublingualConcentrations_const_iterator
                 b (i.SublingualConcentrations ().begin ()), e (i.SublingualConcentrations ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "SublingualConcentrations: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "Substance: " << i.Substance ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TransmucosalStateData >
        _xsd_TransmucosalStateData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const UrinateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UrinateData >
        _xsd_UrinateData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const OverrideData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialBloodPHOverride ())
            {
              o << ::std::endl << "ArterialBloodPHOverride: ";
              om.insert (o, *i.ArterialBloodPHOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CalciumConcentrationOverride ())
            {
              o << ::std::endl << "CalciumConcentrationOverride: ";
              om.insert (o, *i.CalciumConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbonDioxideSaturationOverride ())
            {
              o << ::std::endl << "CarbonDioxideSaturationOverride: ";
              om.insert (o, *i.CarbonDioxideSaturationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbonMonoxideSaturationOverride ())
            {
              o << ::std::endl << "CarbonMonoxideSaturationOverride: ";
              om.insert (o, *i.CarbonMonoxideSaturationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GlucoseConcentrationOverride ())
            {
              o << ::std::endl << "GlucoseConcentrationOverride: ";
              om.insert (o, *i.GlucoseConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LactateConcentrationOverride ())
            {
              o << ::std::endl << "LactateConcentrationOverride: ";
              om.insert (o, *i.LactateConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenSaturationOverride ())
            {
              o << ::std::endl << "OxygenSaturationOverride: ";
              om.insert (o, *i.OxygenSaturationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PhosphateOverride ())
            {
              o << ::std::endl << "PhosphateOverride: ";
              om.insert (o, *i.PhosphateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PotassiumConcentrationOverride ())
            {
              o << ::std::endl << "PotassiumConcentrationOverride: ";
              om.insert (o, *i.PotassiumConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SodiumConcentrationOverride ())
            {
              o << ::std::endl << "SodiumConcentrationOverride: ";
              om.insert (o, *i.SodiumConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalBilirubinOverride ())
            {
              o << ::std::endl << "TotalBilirubinOverride: ";
              om.insert (o, *i.TotalBilirubinOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VenousBloodPHOverride ())
            {
              o << ::std::endl << "VenousBloodPHOverride: ";
              om.insert (o, *i.VenousBloodPHOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCellCountOverride ())
            {
              o << ::std::endl << "WhiteBloodCellCountOverride: ";
              om.insert (o, *i.WhiteBloodCellCountOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodVolumeOverride ())
            {
              o << ::std::endl << "BloodVolumeOverride: ";
              om.insert (o, *i.BloodVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiacOutputOverride ())
            {
              o << ::std::endl << "CardiacOutputOverride: ";
              om.insert (o, *i.CardiacOutputOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DiastolicArterialPressureOverride ())
            {
              o << ::std::endl << "DiastolicArterialPressureOverride: ";
              om.insert (o, *i.DiastolicArterialPressureOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRateOverride ())
            {
              o << ::std::endl << "HeartRateOverride: ";
              om.insert (o, *i.HeartRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartStrokeVolumeOverride ())
            {
              o << ::std::endl << "HeartStrokeVolumeOverride: ";
              om.insert (o, *i.HeartStrokeVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialPressureOverride ())
            {
              o << ::std::endl << "MeanArterialPressureOverride: ";
              om.insert (o, *i.MeanArterialPressureOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystolicArterialPressureOverride ())
            {
              o << ::std::endl << "SystolicArterialPressureOverride: ";
              om.insert (o, *i.SystolicArterialPressureOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InsulinSynthesisRateOverride ())
            {
              o << ::std::endl << "InsulinSynthesisRateOverride: ";
              om.insert (o, *i.InsulinSynthesisRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GlucagonSynthesisRateOverride ())
            {
              o << ::std::endl << "GlucagonSynthesisRateOverride: ";
              om.insert (o, *i.GlucagonSynthesisRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AchievedExerciseLevelOverride ())
            {
              o << ::std::endl << "AchievedExerciseLevelOverride: ";
              om.insert (o, *i.AchievedExerciseLevelOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChlorideLostToSweatOverride ())
            {
              o << ::std::endl << "ChlorideLostToSweatOverride: ";
              om.insert (o, *i.ChlorideLostToSweatOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperatureOverride ())
            {
              o << ::std::endl << "CoreTemperatureOverride: ";
              om.insert (o, *i.CoreTemperatureOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CreatinineProductionRateOverride ())
            {
              o << ::std::endl << "CreatinineProductionRateOverride: ";
              om.insert (o, *i.CreatinineProductionRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDeltaOverride ())
            {
              o << ::std::endl << "ExerciseMeanArterialPressureDeltaOverride: ";
              om.insert (o, *i.ExerciseMeanArterialPressureDeltaOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatigueLevelOverride ())
            {
              o << ::std::endl << "FatigueLevelOverride: ";
              om.insert (o, *i.FatigueLevelOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LactateProductionRateOverride ())
            {
              o << ::std::endl << "LactateProductionRateOverride: ";
              om.insert (o, *i.LactateProductionRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PotassiumLostToSweatOverride ())
            {
              o << ::std::endl << "PotassiumLostToSweatOverride: ";
              om.insert (o, *i.PotassiumLostToSweatOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SkinTemperatureOverride ())
            {
              o << ::std::endl << "SkinTemperatureOverride: ";
              om.insert (o, *i.SkinTemperatureOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SodiumLostToSweatOverride ())
            {
              o << ::std::endl << "SodiumLostToSweatOverride: ";
              om.insert (o, *i.SodiumLostToSweatOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SweatRateOverride ())
            {
              o << ::std::endl << "SweatRateOverride: ";
              om.insert (o, *i.SweatRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalMetabolicRateOverride ())
            {
              o << ::std::endl << "TotalMetabolicRateOverride: ";
              om.insert (o, *i.TotalMetabolicRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalWorkRateLevelOverride ())
            {
              o << ::std::endl << "TotalWorkRateLevelOverride: ";
              om.insert (o, *i.TotalWorkRateLevelOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftAfferentArterioleResistanceOverride ())
            {
              o << ::std::endl << "LeftAfferentArterioleResistanceOverride: ";
              om.insert (o, *i.LeftAfferentArterioleResistanceOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationRateOverride ())
            {
              o << ::std::endl << "LeftGlomerularFiltrationRateOverride: ";
              om.insert (o, *i.LeftGlomerularFiltrationRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftReabsorptionRateOverride ())
            {
              o << ::std::endl << "LeftReabsorptionRateOverride: ";
              om.insert (o, *i.LeftReabsorptionRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalBloodFlowOverride ())
            {
              o << ::std::endl << "RenalBloodFlowOverride: ";
              om.insert (o, *i.RenalBloodFlowOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalPlasmaFlowOverride ())
            {
              o << ::std::endl << "RenalPlasmaFlowOverride: ";
              om.insert (o, *i.RenalPlasmaFlowOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightAfferentArterioleResistanceOverride ())
            {
              o << ::std::endl << "RightAfferentArterioleResistanceOverride: ";
              om.insert (o, *i.RightAfferentArterioleResistanceOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationRateOverride ())
            {
              o << ::std::endl << "RightGlomerularFiltrationRateOverride: ";
              om.insert (o, *i.RightGlomerularFiltrationRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightReabsorptionRateOverride ())
            {
              o << ::std::endl << "RightReabsorptionRateOverride: ";
              om.insert (o, *i.RightReabsorptionRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrinationRateOverride ())
            {
              o << ::std::endl << "UrinationRateOverride: ";
              om.insert (o, *i.UrinationRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineProductionRateOverride ())
            {
              o << ::std::endl << "UrineProductionRateOverride: ";
              om.insert (o, *i.UrineProductionRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineOsmolalityOverride ())
            {
              o << ::std::endl << "UrineOsmolalityOverride: ";
              om.insert (o, *i.UrineOsmolalityOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineVolumeOverride ())
            {
              o << ::std::endl << "UrineVolumeOverride: ";
              om.insert (o, *i.UrineVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineUreaNitrogenConcentrationOverride ())
            {
              o << ::std::endl << "UrineUreaNitrogenConcentrationOverride: ";
              om.insert (o, *i.UrineUreaNitrogenConcentrationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExpiratoryFlowOverride ())
            {
              o << ::std::endl << "ExpiratoryFlowOverride: ";
              om.insert (o, *i.ExpiratoryFlowOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryFlowOverride ())
            {
              o << ::std::endl << "InspiratoryFlowOverride: ";
              om.insert (o, *i.InspiratoryFlowOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryComplianceOverride ())
            {
              o << ::std::endl << "PulmonaryComplianceOverride: ";
              om.insert (o, *i.PulmonaryComplianceOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryResistanceOverride ())
            {
              o << ::std::endl << "PulmonaryResistanceOverride: ";
              om.insert (o, *i.PulmonaryResistanceOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationRateOverride ())
            {
              o << ::std::endl << "RespirationRateOverride: ";
              om.insert (o, *i.RespirationRateOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TargetPulmonaryVentilationOverride ())
            {
              o << ::std::endl << "TargetPulmonaryVentilationOverride: ";
              om.insert (o, *i.TargetPulmonaryVentilationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TidalVolumeOverride ())
            {
              o << ::std::endl << "TidalVolumeOverride: ";
              om.insert (o, *i.TidalVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilationOverride ())
            {
              o << ::std::endl << "TotalAlveolarVentilationOverride: ";
              om.insert (o, *i.TotalAlveolarVentilationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalLungVolumeOverride ())
            {
              o << ::std::endl << "TotalLungVolumeOverride: ";
              om.insert (o, *i.TotalLungVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilationOverride ())
            {
              o << ::std::endl << "TotalPulmonaryVentilationOverride: ";
              om.insert (o, *i.TotalPulmonaryVentilationOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularFluidVolumeOverride ())
            {
              o << ::std::endl << "ExtravascularFluidVolumeOverride: ";
              om.insert (o, *i.ExtravascularFluidVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.IntracellularFluidVolumeOverride ())
            {
              o << ::std::endl << "IntracellularFluidVolumeOverride: ";
              om.insert (o, *i.IntracellularFluidVolumeOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LiverGlycogenOverride ())
            {
              o << ::std::endl << "LiverGlycogenOverride: ";
              om.insert (o, *i.LiverGlycogenOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MuscleGlycogenOverride ())
            {
              o << ::std::endl << "MuscleGlycogenOverride: ";
              om.insert (o, *i.MuscleGlycogenOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StoredFatOverride ())
            {
              o << ::std::endl << "StoredFatOverride: ";
              om.insert (o, *i.StoredFatOverride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StoredProteinOverride ())
            {
              o << ::std::endl << "StoredProteinOverride: ";
              om.insert (o, *i.StoredProteinOverride ());
            }
          }

          o << ::std::endl << "State: " << i.State ();
          o << ::std::endl << "Conformant: " << i.Conformant ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OverrideData >
        _xsd_OverrideData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PatientActionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PatientActionData >
        _xsd_PatientActionData_type_serializer_init (
          "PatientActionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumPatientAssessment& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumPatientAssessment& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumPatientAssessment& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumPatientAssessment >
        _xsd_enumPatientAssessment_type_serializer_init (
          "enumPatientAssessment",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PatientAssessmentRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PatientAssessmentRequestData >
        _xsd_PatientAssessmentRequestData_type_serializer_init (
          "PatientAssessmentRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AcuteRespiratoryDistressData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const AcuteRespiratoryDistressData::Severity_type& x (i.Severity ());
            if (typeid (AcuteRespiratoryDistressData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AcuteRespiratoryDistressData >
        _xsd_AcuteRespiratoryDistressData_type_serializer_init (
          "AcuteRespiratoryDistressData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AcuteStressData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const AcuteStressData::Severity_type& x (i.Severity ());
            if (typeid (AcuteStressData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AcuteStressData >
        _xsd_AcuteStressData_type_serializer_init (
          "AcuteStressData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AirwayObstructionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const AirwayObstructionData::Severity_type& x (i.Severity ());
            if (typeid (AirwayObstructionData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AirwayObstructionData >
        _xsd_AirwayObstructionData_type_serializer_init (
          "AirwayObstructionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ApneaData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ApneaData::Severity_type& x (i.Severity ());
            if (typeid (ApneaData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ApneaData >
        _xsd_ApneaData_type_serializer_init (
          "ApneaData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AsthmaAttackData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const AsthmaAttackData::Severity_type& x (i.Severity ());
            if (typeid (AsthmaAttackData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AsthmaAttackData >
        _xsd_AsthmaAttackData_type_serializer_init (
          "AsthmaAttackData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumBrainInjuryType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumBrainInjuryType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumBrainInjuryType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumBrainInjuryType >
        _xsd_enumBrainInjuryType_type_serializer_init (
          "enumBrainInjuryType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BrainInjuryData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BrainInjuryData::Severity_type& x (i.Severity ());
            if (typeid (BrainInjuryData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BrainInjuryData >
        _xsd_BrainInjuryData_type_serializer_init (
          "BrainInjuryData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BronchoconstrictionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BronchoconstrictionData::Severity_type& x (i.Severity ());
            if (typeid (BronchoconstrictionData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BronchoconstrictionData >
        _xsd_BronchoconstrictionData_type_serializer_init (
          "BronchoconstrictionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BurnWoundData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // TotalBodySurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BurnWoundData::TotalBodySurfaceArea_type& x (i.TotalBodySurfaceArea ());
            if (typeid (BurnWoundData::TotalBodySurfaceArea_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TotalBodySurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TotalBodySurfaceArea",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BurnWoundData >
        _xsd_BurnWoundData_type_serializer_init (
          "BurnWoundData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CardiacArrestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CardiacArrestData >
        _xsd_CardiacArrestData_type_serializer_init (
          "CardiacArrestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChestCompressionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChestCompressionData >
        _xsd_ChestCompressionData_type_serializer_init (
          "ChestCompressionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChestCompressionForceData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (i);

          // Force
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChestCompressionForceData::Force_type& x (i.Force ());
            if (typeid (ChestCompressionForceData::Force_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Force",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Force",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChestCompressionForceData >
        _xsd_ChestCompressionForceData_type_serializer_init (
          "ChestCompressionForceData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChestCompressionForceScaleData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ChestCompressionData& > (i);

          // ForceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChestCompressionForceScaleData::ForceScale_type& x (i.ForceScale ());
            if (typeid (ChestCompressionForceScaleData::ForceScale_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ForceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ForceScale",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ForcePeriod
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ForcePeriod ())
            {
              const ChestCompressionForceScaleData::ForcePeriod_type& x (*i.ForcePeriod ());
              if (typeid (ChestCompressionForceScaleData::ForcePeriod_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ForcePeriod",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ForcePeriod",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChestCompressionForceScaleData >
        _xsd_ChestCompressionForceScaleData_type_serializer_init (
          "ChestCompressionForceScaleData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChestOcclusiveDressingData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }

          // Side
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Side",
                e));

            a << i.Side ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChestOcclusiveDressingData >
        _xsd_ChestOcclusiveDressingData_type_serializer_init (
          "ChestOcclusiveDressingData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ConsciousRespirationCommandData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Comment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Comment ())
            {
              const ConsciousRespirationCommandData::Comment_type& x (*i.Comment ());
              if (typeid (ConsciousRespirationCommandData::Comment_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Comment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsciousRespirationCommandData >
        _xsd_ConsciousRespirationCommandData_type_serializer_init (
          "ConsciousRespirationCommandData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ForcedInhaleData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          // InspiratoryCapacityFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ForcedInhaleData::InspiratoryCapacityFraction_type& x (i.InspiratoryCapacityFraction ());
            if (typeid (ForcedInhaleData::InspiratoryCapacityFraction_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InspiratoryCapacityFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InspiratoryCapacityFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Period
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ForcedInhaleData::Period_type& x (i.Period ());
            if (typeid (ForcedInhaleData::Period_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Period",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ForcedInhaleData >
        _xsd_ForcedInhaleData_type_serializer_init (
          "ForcedInhaleData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ForcedExhaleData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          // ExpiratoryReserveVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ForcedExhaleData::ExpiratoryReserveVolumeFraction_type& x (i.ExpiratoryReserveVolumeFraction ());
            if (typeid (ForcedExhaleData::ExpiratoryReserveVolumeFraction_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ExpiratoryReserveVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ExpiratoryReserveVolumeFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Period
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ForcedExhaleData::Period_type& x (i.Period ());
            if (typeid (ForcedExhaleData::Period_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Period",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ForcedExhaleData >
        _xsd_ForcedExhaleData_type_serializer_init (
          "ForcedExhaleData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BreathHoldData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);

          // Period
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BreathHoldData::Period_type& x (i.Period ());
            if (typeid (BreathHoldData::Period_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Period",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BreathHoldData >
        _xsd_BreathHoldData_type_serializer_init (
          "BreathHoldData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const UseInhalerData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ConsciousRespirationCommandData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UseInhalerData >
        _xsd_UseInhalerData_type_serializer_init (
          "UseInhalerData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ConsciousRespirationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Command
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ConsciousRespirationData::Command_const_iterator
                 b (i.Command ().begin ()), n (i.Command ().end ());
                 b != n; ++b)
            {
              if (typeid (ConsciousRespirationData::Command_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Command",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Command",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // AppendToPrevious
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "AppendToPrevious",
                e));

            a << i.AppendToPrevious ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsciousRespirationData >
        _xsd_ConsciousRespirationData_type_serializer_init (
          "ConsciousRespirationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ConsumeNutrientsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // NutritionFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NutritionFile ())
            {
              const ConsumeNutrientsData::NutritionFile_type& x (*i.NutritionFile ());
              if (typeid (ConsumeNutrientsData::NutritionFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NutritionFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NutritionFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Nutrition
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Nutrition ())
            {
              const ConsumeNutrientsData::Nutrition_type& x (*i.Nutrition ());
              if (typeid (ConsumeNutrientsData::Nutrition_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Nutrition",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Nutrition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConsumeNutrientsData >
        _xsd_ConsumeNutrientsData_type_serializer_init (
          "ConsumeNutrientsData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GenericExerciseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Intensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Intensity ())
            {
              const GenericExerciseData::Intensity_type& x (*i.Intensity ());
              if (typeid (GenericExerciseData::Intensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Intensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Intensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DesiredWorkRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DesiredWorkRate ())
            {
              const GenericExerciseData::DesiredWorkRate_type& x (*i.DesiredWorkRate ());
              if (typeid (GenericExerciseData::DesiredWorkRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DesiredWorkRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DesiredWorkRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GenericExerciseData >
        _xsd_GenericExerciseData_type_serializer_init (
          "GenericExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const RunningExerciseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Speed
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const RunningExerciseData::Speed_type& x (i.Speed ());
            if (typeid (RunningExerciseData::Speed_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Speed",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Speed",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Incline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const RunningExerciseData::Incline_type& x (i.Incline ());
            if (typeid (RunningExerciseData::Incline_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Incline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Incline",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AddedWeight
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AddedWeight ())
            {
              const RunningExerciseData::AddedWeight_type& x (*i.AddedWeight ());
              if (typeid (RunningExerciseData::AddedWeight_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AddedWeight",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AddedWeight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RunningExerciseData >
        _xsd_RunningExerciseData_type_serializer_init (
          "RunningExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CyclingExerciseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Cadence
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CyclingExerciseData::Cadence_type& x (i.Cadence ());
            if (typeid (CyclingExerciseData::Cadence_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Cadence",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Cadence",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Power
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CyclingExerciseData::Power_type& x (i.Power ());
            if (typeid (CyclingExerciseData::Power_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Power",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AddedWeight
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AddedWeight ())
            {
              const CyclingExerciseData::AddedWeight_type& x (*i.AddedWeight ());
              if (typeid (CyclingExerciseData::AddedWeight_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AddedWeight",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AddedWeight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CyclingExerciseData >
        _xsd_CyclingExerciseData_type_serializer_init (
          "CyclingExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const StrengthExerciseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Weight
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const StrengthExerciseData::Weight_type& x (i.Weight ());
            if (typeid (StrengthExerciseData::Weight_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Weight",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Weight",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Repetitions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const StrengthExerciseData::Repetitions_type& x (i.Repetitions ());
            if (typeid (StrengthExerciseData::Repetitions_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Repetitions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Repetitions",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StrengthExerciseData >
        _xsd_StrengthExerciseData_type_serializer_init (
          "StrengthExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ExerciseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // GenericExercise
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GenericExercise ())
            {
              const ExerciseData::GenericExercise_type& x (*i.GenericExercise ());
              if (typeid (ExerciseData::GenericExercise_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GenericExercise",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GenericExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RunningExercise
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RunningExercise ())
            {
              const ExerciseData::RunningExercise_type& x (*i.RunningExercise ());
              if (typeid (ExerciseData::RunningExercise_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RunningExercise",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RunningExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CyclingExercise
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CyclingExercise ())
            {
              const ExerciseData::CyclingExercise_type& x (*i.CyclingExercise ());
              if (typeid (ExerciseData::CyclingExercise_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CyclingExercise",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CyclingExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StrengthExercise
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StrengthExercise ())
            {
              const ExerciseData::StrengthExercise_type& x (*i.StrengthExercise ());
              if (typeid (ExerciseData::StrengthExercise_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StrengthExercise",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StrengthExercise",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ExerciseData >
        _xsd_ExerciseData_type_serializer_init (
          "ExerciseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const HemorrhageData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // InitialRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const HemorrhageData::InitialRate_type& x (i.InitialRate ());
            if (typeid (HemorrhageData::InitialRate_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InitialRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InitialRate",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Compartment
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Compartment",
                e));

            a << i.Compartment ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HemorrhageData >
        _xsd_HemorrhageData_type_serializer_init (
          "HemorrhageData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumInfectionSeverity& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumInfectionSeverity& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumInfectionSeverity& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumInfectionSeverity >
        _xsd_enumInfectionSeverity_type_serializer_init (
          "enumInfectionSeverity",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const InfectionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // MinimumInhibitoryConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InfectionData::MinimumInhibitoryConcentration_type& x (i.MinimumInhibitoryConcentration ());
            if (typeid (InfectionData::MinimumInhibitoryConcentration_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MinimumInhibitoryConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MinimumInhibitoryConcentration",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Location
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InfectionData::Location_type& x (i.Location ());
            if (typeid (InfectionData::Location_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Location",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Location",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Severity
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Severity",
                e));

            a << i.Severity ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InfectionData >
        _xsd_InfectionData_type_serializer_init (
          "InfectionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumIntubationType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumIntubationType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumIntubationType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumIntubationType >
        _xsd_enumIntubationType_type_serializer_init (
          "enumIntubationType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const IntubationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, IntubationData >
        _xsd_IntubationData_type_serializer_init (
          "IntubationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const MechanicalVentilationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Pressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              const MechanicalVentilationData::Pressure_type& x (*i.Pressure ());
              if (typeid (MechanicalVentilationData::Pressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Flow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Flow ())
            {
              const MechanicalVentilationData::Flow_type& x (*i.Flow ());
              if (typeid (MechanicalVentilationData::Flow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Flow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GasFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (MechanicalVentilationData::GasFraction_const_iterator
                 b (i.GasFraction ().begin ()), n (i.GasFraction ().end ());
                 b != n; ++b)
            {
              if (typeid (MechanicalVentilationData::GasFraction_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_type_serializer_init (
          "MechanicalVentilationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const NeedleDecompressionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }

          // Side
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Side",
                e));

            a << i.Side ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_type_serializer_init (
          "NeedleDecompressionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const NasalStateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // TotalNasalDose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const NasalStateData::TotalNasalDose_type& x (i.TotalNasalDose ());
            if (typeid (NasalStateData::TotalNasalDose_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TotalNasalDose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TotalNasalDose",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // UnreleasedDrugMasses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (NasalStateData::UnreleasedDrugMasses_const_iterator
                 b (i.UnreleasedDrugMasses ().begin ()), n (i.UnreleasedDrugMasses ().end ());
                 b != n; ++b)
            {
              if (typeid (NasalStateData::UnreleasedDrugMasses_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UnreleasedDrugMasses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "UnreleasedDrugMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ReleasedDrugMasses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (NasalStateData::ReleasedDrugMasses_const_iterator
                 b (i.ReleasedDrugMasses ().begin ()), n (i.ReleasedDrugMasses ().end ());
                 b != n; ++b)
            {
              if (typeid (NasalStateData::ReleasedDrugMasses_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReleasedDrugMasses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ReleasedDrugMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << i.Substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NasalStateData >
        _xsd_NasalStateData_type_serializer_init (
          "NasalStateData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PainStimulusData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PainStimulusData::Severity_type& x (i.Severity ());
            if (typeid (PainStimulusData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // HalfLife
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HalfLife ())
            {
              const PainStimulusData::HalfLife_type& x (*i.HalfLife ());
              if (typeid (PainStimulusData::HalfLife_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HalfLife",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HalfLife",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Location
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Location",
                e));

            a << i.Location ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PainStimulusData >
        _xsd_PainStimulusData_type_serializer_init (
          "PainStimulusData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PericardialEffusionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // EffusionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PericardialEffusionData::EffusionRate_type& x (i.EffusionRate ());
            if (typeid (PericardialEffusionData::EffusionRate_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "EffusionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "EffusionRate",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PericardialEffusionData >
        _xsd_PericardialEffusionData_type_serializer_init (
          "PericardialEffusionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumPneumothoraxType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumPneumothoraxType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumPneumothoraxType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumPneumothoraxType >
        _xsd_enumPneumothoraxType_type_serializer_init (
          "enumPneumothoraxType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TensionPneumothoraxData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TensionPneumothoraxData::Severity_type& x (i.Severity ());
            if (typeid (TensionPneumothoraxData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }

          // Side
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Side",
                e));

            a << i.Side ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TensionPneumothoraxData >
        _xsd_TensionPneumothoraxData_type_serializer_init (
          "TensionPneumothoraxData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SleepData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Sleep
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Sleep",
                e));

            a << i.Sleep ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SleepData >
        _xsd_SleepData_type_serializer_init (
          "SleepData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumBolusAdministration& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumBolusAdministration& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumBolusAdministration& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumBolusAdministration >
        _xsd_enumBolusAdministration_type_serializer_init (
          "enumBolusAdministration",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumOralAdministration& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumOralAdministration& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumOralAdministration& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumOralAdministration >
        _xsd_enumOralAdministration_type_serializer_init (
          "enumOralAdministration",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceAdministrationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceAdministrationData >
        _xsd_SubstanceAdministrationData_type_serializer_init (
          "SubstanceAdministrationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceBolusData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          // Substance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceBolusData::Substance_type& x (i.Substance ());
            if (typeid (SubstanceBolusData::Substance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Substance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Concentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceBolusData::Concentration_type& x (i.Concentration ());
            if (typeid (SubstanceBolusData::Concentration_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Concentration",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Dose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceBolusData::Dose_type& x (i.Dose ());
            if (typeid (SubstanceBolusData::Dose_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Dose",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AdminTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AdminTime ())
            {
              const SubstanceBolusData::AdminTime_type& x (*i.AdminTime ());
              if (typeid (SubstanceBolusData::AdminTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AdminTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AdminTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AdminRoute
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "AdminRoute",
                e));

            a << i.AdminRoute ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceBolusData >
        _xsd_SubstanceBolusData_type_serializer_init (
          "SubstanceBolusData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceBolusStateData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // ElapsedTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceBolusStateData::ElapsedTime_type& x (i.ElapsedTime ());
            if (typeid (SubstanceBolusStateData::ElapsedTime_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ElapsedTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ElapsedTime",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AdministeredDose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceBolusStateData::AdministeredDose_type& x (i.AdministeredDose ());
            if (typeid (SubstanceBolusStateData::AdministeredDose_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AdministeredDose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AdministeredDose",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << i.Substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceBolusStateData >
        _xsd_SubstanceBolusStateData_type_serializer_init (
          "SubstanceBolusStateData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceCompoundInfusionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          // SubstanceCompound
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceCompoundInfusionData::SubstanceCompound_type& x (i.SubstanceCompound ());
            if (typeid (SubstanceCompoundInfusionData::SubstanceCompound_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SubstanceCompound",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SubstanceCompound",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BagVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceCompoundInfusionData::BagVolume_type& x (i.BagVolume ());
            if (typeid (SubstanceCompoundInfusionData::BagVolume_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BagVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BagVolume",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Rate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceCompoundInfusionData::Rate_type& x (i.Rate ());
            if (typeid (SubstanceCompoundInfusionData::Rate_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Rate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Rate",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceCompoundInfusionData >
        _xsd_SubstanceCompoundInfusionData_type_serializer_init (
          "SubstanceCompoundInfusionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceInfusionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          // Substance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceInfusionData::Substance_type& x (i.Substance ());
            if (typeid (SubstanceInfusionData::Substance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Substance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Concentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceInfusionData::Concentration_type& x (i.Concentration ());
            if (typeid (SubstanceInfusionData::Concentration_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Concentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Concentration",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Rate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceInfusionData::Rate_type& x (i.Rate ());
            if (typeid (SubstanceInfusionData::Rate_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Rate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Rate",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceInfusionData >
        _xsd_SubstanceInfusionData_type_serializer_init (
          "SubstanceInfusionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceNasalDoseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          // Substance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceNasalDoseData::Substance_type& x (i.Substance ());
            if (typeid (SubstanceNasalDoseData::Substance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Substance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Dose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceNasalDoseData::Dose_type& x (i.Dose ());
            if (typeid (SubstanceNasalDoseData::Dose_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Dose",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ElapsedTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ElapsedTime ())
            {
              const SubstanceNasalDoseData::ElapsedTime_type& x (*i.ElapsedTime ());
              if (typeid (SubstanceNasalDoseData::ElapsedTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElapsedTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ElapsedTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceNasalDoseData >
        _xsd_SubstanceNasalDoseData_type_serializer_init (
          "SubstanceNasalDoseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceOralDoseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SubstanceAdministrationData& > (i);

          // Substance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceOralDoseData::Substance_type& x (i.Substance ());
            if (typeid (SubstanceOralDoseData::Substance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Substance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Substance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Dose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceOralDoseData::Dose_type& x (i.Dose ());
            if (typeid (SubstanceOralDoseData::Dose_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Dose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Dose",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AdminRoute
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "AdminRoute",
                e));

            a << i.AdminRoute ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceOralDoseData >
        _xsd_SubstanceOralDoseData_type_serializer_init (
          "SubstanceOralDoseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumTourniquetApplicationLevel& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumTourniquetApplicationLevel& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumTourniquetApplicationLevel& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumTourniquetApplicationLevel >
        _xsd_enumTourniquetApplicationLevel_type_serializer_init (
          "enumTourniquetApplicationLevel",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TourniquetData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Compartment
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Compartment",
                e));

            a << i.Compartment ();
          }

          // TourniquetLevel
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "TourniquetLevel",
                e));

            a << i.TourniquetLevel ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TourniquetData >
        _xsd_TourniquetData_type_serializer_init (
          "TourniquetData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TransmucosalStateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // MouthSolidMass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TransmucosalStateData::MouthSolidMass_type& x (i.MouthSolidMass ());
            if (typeid (TransmucosalStateData::MouthSolidMass_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MouthSolidMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MouthSolidMass",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SalivaConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const TransmucosalStateData::SalivaConcentration_type& x (i.SalivaConcentration ());
            if (typeid (TransmucosalStateData::SalivaConcentration_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SalivaConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SalivaConcentration",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BuccalConcentrations
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TransmucosalStateData::BuccalConcentrations_const_iterator
                 b (i.BuccalConcentrations ().begin ()), n (i.BuccalConcentrations ().end ());
                 b != n; ++b)
            {
              if (typeid (TransmucosalStateData::BuccalConcentrations_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BuccalConcentrations",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "BuccalConcentrations",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // SublingualConcentrations
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TransmucosalStateData::SublingualConcentrations_const_iterator
                 b (i.SublingualConcentrations ().begin ()), n (i.SublingualConcentrations ().end ());
                 b != n; ++b)
            {
              if (typeid (TransmucosalStateData::SublingualConcentrations_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SublingualConcentrations",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "SublingualConcentrations",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << i.Substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransmucosalStateData >
        _xsd_TransmucosalStateData_type_serializer_init (
          "TransmucosalStateData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const UrinateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UrinateData >
        _xsd_UrinateData_type_serializer_init (
          "UrinateData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const OverrideData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // ArterialBloodPHOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialBloodPHOverride ())
            {
              const OverrideData::ArterialBloodPHOverride_type& x (*i.ArterialBloodPHOverride ());
              if (typeid (OverrideData::ArterialBloodPHOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialBloodPHOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialBloodPHOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CalciumConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CalciumConcentrationOverride ())
            {
              const OverrideData::CalciumConcentrationOverride_type& x (*i.CalciumConcentrationOverride ());
              if (typeid (OverrideData::CalciumConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CalciumConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CalciumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarbonDioxideSaturationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbonDioxideSaturationOverride ())
            {
              const OverrideData::CarbonDioxideSaturationOverride_type& x (*i.CarbonDioxideSaturationOverride ());
              if (typeid (OverrideData::CarbonDioxideSaturationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbonDioxideSaturationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbonDioxideSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarbonMonoxideSaturationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbonMonoxideSaturationOverride ())
            {
              const OverrideData::CarbonMonoxideSaturationOverride_type& x (*i.CarbonMonoxideSaturationOverride ());
              if (typeid (OverrideData::CarbonMonoxideSaturationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbonMonoxideSaturationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbonMonoxideSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GlucoseConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GlucoseConcentrationOverride ())
            {
              const OverrideData::GlucoseConcentrationOverride_type& x (*i.GlucoseConcentrationOverride ());
              if (typeid (OverrideData::GlucoseConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GlucoseConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GlucoseConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LactateConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LactateConcentrationOverride ())
            {
              const OverrideData::LactateConcentrationOverride_type& x (*i.LactateConcentrationOverride ());
              if (typeid (OverrideData::LactateConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LactateConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LactateConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenSaturationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenSaturationOverride ())
            {
              const OverrideData::OxygenSaturationOverride_type& x (*i.OxygenSaturationOverride ());
              if (typeid (OverrideData::OxygenSaturationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenSaturationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenSaturationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PhosphateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PhosphateOverride ())
            {
              const OverrideData::PhosphateOverride_type& x (*i.PhosphateOverride ());
              if (typeid (OverrideData::PhosphateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PhosphateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PhosphateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PotassiumConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PotassiumConcentrationOverride ())
            {
              const OverrideData::PotassiumConcentrationOverride_type& x (*i.PotassiumConcentrationOverride ());
              if (typeid (OverrideData::PotassiumConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PotassiumConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PotassiumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SodiumConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SodiumConcentrationOverride ())
            {
              const OverrideData::SodiumConcentrationOverride_type& x (*i.SodiumConcentrationOverride ());
              if (typeid (OverrideData::SodiumConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SodiumConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SodiumConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalBilirubinOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalBilirubinOverride ())
            {
              const OverrideData::TotalBilirubinOverride_type& x (*i.TotalBilirubinOverride ());
              if (typeid (OverrideData::TotalBilirubinOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalBilirubinOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalBilirubinOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VenousBloodPHOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VenousBloodPHOverride ())
            {
              const OverrideData::VenousBloodPHOverride_type& x (*i.VenousBloodPHOverride ());
              if (typeid (OverrideData::VenousBloodPHOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VenousBloodPHOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VenousBloodPHOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCellCountOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCellCountOverride ())
            {
              const OverrideData::WhiteBloodCellCountOverride_type& x (*i.WhiteBloodCellCountOverride ());
              if (typeid (OverrideData::WhiteBloodCellCountOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCellCountOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCellCountOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodVolumeOverride ())
            {
              const OverrideData::BloodVolumeOverride_type& x (*i.BloodVolumeOverride ());
              if (typeid (OverrideData::BloodVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiacOutputOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiacOutputOverride ())
            {
              const OverrideData::CardiacOutputOverride_type& x (*i.CardiacOutputOverride ());
              if (typeid (OverrideData::CardiacOutputOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiacOutputOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiacOutputOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DiastolicArterialPressureOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DiastolicArterialPressureOverride ())
            {
              const OverrideData::DiastolicArterialPressureOverride_type& x (*i.DiastolicArterialPressureOverride ());
              if (typeid (OverrideData::DiastolicArterialPressureOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DiastolicArterialPressureOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DiastolicArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRateOverride ())
            {
              const OverrideData::HeartRateOverride_type& x (*i.HeartRateOverride ());
              if (typeid (OverrideData::HeartRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartStrokeVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartStrokeVolumeOverride ())
            {
              const OverrideData::HeartStrokeVolumeOverride_type& x (*i.HeartStrokeVolumeOverride ());
              if (typeid (OverrideData::HeartStrokeVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartStrokeVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartStrokeVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialPressureOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialPressureOverride ())
            {
              const OverrideData::MeanArterialPressureOverride_type& x (*i.MeanArterialPressureOverride ());
              if (typeid (OverrideData::MeanArterialPressureOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialPressureOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystolicArterialPressureOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystolicArterialPressureOverride ())
            {
              const OverrideData::SystolicArterialPressureOverride_type& x (*i.SystolicArterialPressureOverride ());
              if (typeid (OverrideData::SystolicArterialPressureOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystolicArterialPressureOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystolicArterialPressureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InsulinSynthesisRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InsulinSynthesisRateOverride ())
            {
              const OverrideData::InsulinSynthesisRateOverride_type& x (*i.InsulinSynthesisRateOverride ());
              if (typeid (OverrideData::InsulinSynthesisRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InsulinSynthesisRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InsulinSynthesisRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GlucagonSynthesisRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GlucagonSynthesisRateOverride ())
            {
              const OverrideData::GlucagonSynthesisRateOverride_type& x (*i.GlucagonSynthesisRateOverride ());
              if (typeid (OverrideData::GlucagonSynthesisRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GlucagonSynthesisRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GlucagonSynthesisRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AchievedExerciseLevelOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AchievedExerciseLevelOverride ())
            {
              const OverrideData::AchievedExerciseLevelOverride_type& x (*i.AchievedExerciseLevelOverride ());
              if (typeid (OverrideData::AchievedExerciseLevelOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AchievedExerciseLevelOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AchievedExerciseLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChlorideLostToSweatOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChlorideLostToSweatOverride ())
            {
              const OverrideData::ChlorideLostToSweatOverride_type& x (*i.ChlorideLostToSweatOverride ());
              if (typeid (OverrideData::ChlorideLostToSweatOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChlorideLostToSweatOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChlorideLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperatureOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperatureOverride ())
            {
              const OverrideData::CoreTemperatureOverride_type& x (*i.CoreTemperatureOverride ());
              if (typeid (OverrideData::CoreTemperatureOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperatureOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperatureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CreatinineProductionRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CreatinineProductionRateOverride ())
            {
              const OverrideData::CreatinineProductionRateOverride_type& x (*i.CreatinineProductionRateOverride ());
              if (typeid (OverrideData::CreatinineProductionRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CreatinineProductionRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CreatinineProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExerciseMeanArterialPressureDeltaOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDeltaOverride ())
            {
              const OverrideData::ExerciseMeanArterialPressureDeltaOverride_type& x (*i.ExerciseMeanArterialPressureDeltaOverride ());
              if (typeid (OverrideData::ExerciseMeanArterialPressureDeltaOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExerciseMeanArterialPressureDeltaOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExerciseMeanArterialPressureDeltaOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatigueLevelOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatigueLevelOverride ())
            {
              const OverrideData::FatigueLevelOverride_type& x (*i.FatigueLevelOverride ());
              if (typeid (OverrideData::FatigueLevelOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatigueLevelOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatigueLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LactateProductionRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LactateProductionRateOverride ())
            {
              const OverrideData::LactateProductionRateOverride_type& x (*i.LactateProductionRateOverride ());
              if (typeid (OverrideData::LactateProductionRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LactateProductionRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LactateProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PotassiumLostToSweatOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PotassiumLostToSweatOverride ())
            {
              const OverrideData::PotassiumLostToSweatOverride_type& x (*i.PotassiumLostToSweatOverride ());
              if (typeid (OverrideData::PotassiumLostToSweatOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PotassiumLostToSweatOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PotassiumLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SkinTemperatureOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SkinTemperatureOverride ())
            {
              const OverrideData::SkinTemperatureOverride_type& x (*i.SkinTemperatureOverride ());
              if (typeid (OverrideData::SkinTemperatureOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SkinTemperatureOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SkinTemperatureOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SodiumLostToSweatOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SodiumLostToSweatOverride ())
            {
              const OverrideData::SodiumLostToSweatOverride_type& x (*i.SodiumLostToSweatOverride ());
              if (typeid (OverrideData::SodiumLostToSweatOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SodiumLostToSweatOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SodiumLostToSweatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SweatRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SweatRateOverride ())
            {
              const OverrideData::SweatRateOverride_type& x (*i.SweatRateOverride ());
              if (typeid (OverrideData::SweatRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SweatRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SweatRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalMetabolicRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalMetabolicRateOverride ())
            {
              const OverrideData::TotalMetabolicRateOverride_type& x (*i.TotalMetabolicRateOverride ());
              if (typeid (OverrideData::TotalMetabolicRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalMetabolicRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalMetabolicRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalWorkRateLevelOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalWorkRateLevelOverride ())
            {
              const OverrideData::TotalWorkRateLevelOverride_type& x (*i.TotalWorkRateLevelOverride ());
              if (typeid (OverrideData::TotalWorkRateLevelOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalWorkRateLevelOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalWorkRateLevelOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftAfferentArterioleResistanceOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftAfferentArterioleResistanceOverride ())
            {
              const OverrideData::LeftAfferentArterioleResistanceOverride_type& x (*i.LeftAfferentArterioleResistanceOverride ());
              if (typeid (OverrideData::LeftAfferentArterioleResistanceOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftAfferentArterioleResistanceOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftAfferentArterioleResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFiltrationRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationRateOverride ())
            {
              const OverrideData::LeftGlomerularFiltrationRateOverride_type& x (*i.LeftGlomerularFiltrationRateOverride ());
              if (typeid (OverrideData::LeftGlomerularFiltrationRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFiltrationRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFiltrationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftReabsorptionRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftReabsorptionRateOverride ())
            {
              const OverrideData::LeftReabsorptionRateOverride_type& x (*i.LeftReabsorptionRateOverride ());
              if (typeid (OverrideData::LeftReabsorptionRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftReabsorptionRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftReabsorptionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalBloodFlowOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalBloodFlowOverride ())
            {
              const OverrideData::RenalBloodFlowOverride_type& x (*i.RenalBloodFlowOverride ());
              if (typeid (OverrideData::RenalBloodFlowOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalBloodFlowOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalBloodFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalPlasmaFlowOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalPlasmaFlowOverride ())
            {
              const OverrideData::RenalPlasmaFlowOverride_type& x (*i.RenalPlasmaFlowOverride ());
              if (typeid (OverrideData::RenalPlasmaFlowOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalPlasmaFlowOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalPlasmaFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightAfferentArterioleResistanceOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightAfferentArterioleResistanceOverride ())
            {
              const OverrideData::RightAfferentArterioleResistanceOverride_type& x (*i.RightAfferentArterioleResistanceOverride ());
              if (typeid (OverrideData::RightAfferentArterioleResistanceOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightAfferentArterioleResistanceOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightAfferentArterioleResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFiltrationRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationRateOverride ())
            {
              const OverrideData::RightGlomerularFiltrationRateOverride_type& x (*i.RightGlomerularFiltrationRateOverride ());
              if (typeid (OverrideData::RightGlomerularFiltrationRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFiltrationRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFiltrationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightReabsorptionRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightReabsorptionRateOverride ())
            {
              const OverrideData::RightReabsorptionRateOverride_type& x (*i.RightReabsorptionRateOverride ());
              if (typeid (OverrideData::RightReabsorptionRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightReabsorptionRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightReabsorptionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrinationRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrinationRateOverride ())
            {
              const OverrideData::UrinationRateOverride_type& x (*i.UrinationRateOverride ());
              if (typeid (OverrideData::UrinationRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrinationRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrinationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineProductionRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineProductionRateOverride ())
            {
              const OverrideData::UrineProductionRateOverride_type& x (*i.UrineProductionRateOverride ());
              if (typeid (OverrideData::UrineProductionRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineProductionRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineProductionRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineOsmolalityOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineOsmolalityOverride ())
            {
              const OverrideData::UrineOsmolalityOverride_type& x (*i.UrineOsmolalityOverride ());
              if (typeid (OverrideData::UrineOsmolalityOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineOsmolalityOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineOsmolalityOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineVolumeOverride ())
            {
              const OverrideData::UrineVolumeOverride_type& x (*i.UrineVolumeOverride ());
              if (typeid (OverrideData::UrineVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineUreaNitrogenConcentrationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineUreaNitrogenConcentrationOverride ())
            {
              const OverrideData::UrineUreaNitrogenConcentrationOverride_type& x (*i.UrineUreaNitrogenConcentrationOverride ());
              if (typeid (OverrideData::UrineUreaNitrogenConcentrationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineUreaNitrogenConcentrationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineUreaNitrogenConcentrationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExpiratoryFlowOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExpiratoryFlowOverride ())
            {
              const OverrideData::ExpiratoryFlowOverride_type& x (*i.ExpiratoryFlowOverride ());
              if (typeid (OverrideData::ExpiratoryFlowOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExpiratoryFlowOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExpiratoryFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryFlowOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryFlowOverride ())
            {
              const OverrideData::InspiratoryFlowOverride_type& x (*i.InspiratoryFlowOverride ());
              if (typeid (OverrideData::InspiratoryFlowOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryFlowOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryFlowOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryComplianceOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryComplianceOverride ())
            {
              const OverrideData::PulmonaryComplianceOverride_type& x (*i.PulmonaryComplianceOverride ());
              if (typeid (OverrideData::PulmonaryComplianceOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryComplianceOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryComplianceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryResistanceOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryResistanceOverride ())
            {
              const OverrideData::PulmonaryResistanceOverride_type& x (*i.PulmonaryResistanceOverride ());
              if (typeid (OverrideData::PulmonaryResistanceOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryResistanceOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryResistanceOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationRateOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationRateOverride ())
            {
              const OverrideData::RespirationRateOverride_type& x (*i.RespirationRateOverride ());
              if (typeid (OverrideData::RespirationRateOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationRateOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationRateOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TargetPulmonaryVentilationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TargetPulmonaryVentilationOverride ())
            {
              const OverrideData::TargetPulmonaryVentilationOverride_type& x (*i.TargetPulmonaryVentilationOverride ());
              if (typeid (OverrideData::TargetPulmonaryVentilationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TargetPulmonaryVentilationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TargetPulmonaryVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TidalVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TidalVolumeOverride ())
            {
              const OverrideData::TidalVolumeOverride_type& x (*i.TidalVolumeOverride ());
              if (typeid (OverrideData::TidalVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TidalVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TidalVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalAlveolarVentilationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilationOverride ())
            {
              const OverrideData::TotalAlveolarVentilationOverride_type& x (*i.TotalAlveolarVentilationOverride ());
              if (typeid (OverrideData::TotalAlveolarVentilationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalAlveolarVentilationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalAlveolarVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalLungVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalLungVolumeOverride ())
            {
              const OverrideData::TotalLungVolumeOverride_type& x (*i.TotalLungVolumeOverride ());
              if (typeid (OverrideData::TotalLungVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalLungVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalLungVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalPulmonaryVentilationOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilationOverride ())
            {
              const OverrideData::TotalPulmonaryVentilationOverride_type& x (*i.TotalPulmonaryVentilationOverride ());
              if (typeid (OverrideData::TotalPulmonaryVentilationOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalPulmonaryVentilationOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalPulmonaryVentilationOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularFluidVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularFluidVolumeOverride ())
            {
              const OverrideData::ExtravascularFluidVolumeOverride_type& x (*i.ExtravascularFluidVolumeOverride ());
              if (typeid (OverrideData::ExtravascularFluidVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularFluidVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularFluidVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // IntracellularFluidVolumeOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.IntracellularFluidVolumeOverride ())
            {
              const OverrideData::IntracellularFluidVolumeOverride_type& x (*i.IntracellularFluidVolumeOverride ());
              if (typeid (OverrideData::IntracellularFluidVolumeOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "IntracellularFluidVolumeOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "IntracellularFluidVolumeOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LiverGlycogenOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LiverGlycogenOverride ())
            {
              const OverrideData::LiverGlycogenOverride_type& x (*i.LiverGlycogenOverride ());
              if (typeid (OverrideData::LiverGlycogenOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiverGlycogenOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LiverGlycogenOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MuscleGlycogenOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MuscleGlycogenOverride ())
            {
              const OverrideData::MuscleGlycogenOverride_type& x (*i.MuscleGlycogenOverride ());
              if (typeid (OverrideData::MuscleGlycogenOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MuscleGlycogenOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MuscleGlycogenOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StoredFatOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StoredFatOverride ())
            {
              const OverrideData::StoredFatOverride_type& x (*i.StoredFatOverride ());
              if (typeid (OverrideData::StoredFatOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StoredFatOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StoredFatOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StoredProteinOverride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StoredProteinOverride ())
            {
              const OverrideData::StoredProteinOverride_type& x (*i.StoredProteinOverride ());
              if (typeid (OverrideData::StoredProteinOverride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StoredProteinOverride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StoredProteinOverride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }

          // Conformant
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Conformant",
                e));

            a << i.Conformant ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OverrideData >
        _xsd_OverrideData_type_serializer_init (
          "OverrideData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

