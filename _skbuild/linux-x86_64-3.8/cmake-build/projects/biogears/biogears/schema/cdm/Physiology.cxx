// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Physiology.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PupillaryResponseData
        // 

        const PupillaryResponseData::ReactivityModifier_optional& PupillaryResponseData::
        ReactivityModifier () const
        {
          return this->ReactivityModifier_;
        }

        PupillaryResponseData::ReactivityModifier_optional& PupillaryResponseData::
        ReactivityModifier ()
        {
          return this->ReactivityModifier_;
        }

        void PupillaryResponseData::
        ReactivityModifier (const ReactivityModifier_type& x)
        {
          this->ReactivityModifier_.set (x);
        }

        void PupillaryResponseData::
        ReactivityModifier (const ReactivityModifier_optional& x)
        {
          this->ReactivityModifier_ = x;
        }

        void PupillaryResponseData::
        ReactivityModifier (::std::unique_ptr< ReactivityModifier_type > x)
        {
          this->ReactivityModifier_.set (std::move (x));
        }

        const PupillaryResponseData::ShapeModifier_optional& PupillaryResponseData::
        ShapeModifier () const
        {
          return this->ShapeModifier_;
        }

        PupillaryResponseData::ShapeModifier_optional& PupillaryResponseData::
        ShapeModifier ()
        {
          return this->ShapeModifier_;
        }

        void PupillaryResponseData::
        ShapeModifier (const ShapeModifier_type& x)
        {
          this->ShapeModifier_.set (x);
        }

        void PupillaryResponseData::
        ShapeModifier (const ShapeModifier_optional& x)
        {
          this->ShapeModifier_ = x;
        }

        void PupillaryResponseData::
        ShapeModifier (::std::unique_ptr< ShapeModifier_type > x)
        {
          this->ShapeModifier_.set (std::move (x));
        }

        const PupillaryResponseData::SizeModifier_optional& PupillaryResponseData::
        SizeModifier () const
        {
          return this->SizeModifier_;
        }

        PupillaryResponseData::SizeModifier_optional& PupillaryResponseData::
        SizeModifier ()
        {
          return this->SizeModifier_;
        }

        void PupillaryResponseData::
        SizeModifier (const SizeModifier_type& x)
        {
          this->SizeModifier_.set (x);
        }

        void PupillaryResponseData::
        SizeModifier (const SizeModifier_optional& x)
        {
          this->SizeModifier_ = x;
        }

        void PupillaryResponseData::
        SizeModifier (::std::unique_ptr< SizeModifier_type > x)
        {
          this->SizeModifier_.set (std::move (x));
        }


        // enumInflammationSource
        // 

        enumInflammationSource::
        enumInflammationSource ()
        : ::xml_schema::string ()
        {
        }

        enumInflammationSource::
        enumInflammationSource (value v)
        : ::xml_schema::string (_xsd_enumInflammationSource_literals_[v])
        {
        }

        enumInflammationSource::
        enumInflammationSource (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumInflammationSource::
        enumInflammationSource (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumInflammationSource::
        enumInflammationSource (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumInflammationSource::
        enumInflammationSource (const enumInflammationSource& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumInflammationSource& enumInflammationSource::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumInflammationSource_literals_[v]);

          return *this;
        }


        // InflammatoryResponseData
        // 

        const InflammatoryResponseData::LocalPathogen_type& InflammatoryResponseData::
        LocalPathogen () const
        {
          return this->LocalPathogen_.get ();
        }

        InflammatoryResponseData::LocalPathogen_type& InflammatoryResponseData::
        LocalPathogen ()
        {
          return this->LocalPathogen_.get ();
        }

        void InflammatoryResponseData::
        LocalPathogen (const LocalPathogen_type& x)
        {
          this->LocalPathogen_.set (x);
        }

        void InflammatoryResponseData::
        LocalPathogen (::std::unique_ptr< LocalPathogen_type > x)
        {
          this->LocalPathogen_.set (std::move (x));
        }

        const InflammatoryResponseData::LocalMacrophage_type& InflammatoryResponseData::
        LocalMacrophage () const
        {
          return this->LocalMacrophage_.get ();
        }

        InflammatoryResponseData::LocalMacrophage_type& InflammatoryResponseData::
        LocalMacrophage ()
        {
          return this->LocalMacrophage_.get ();
        }

        void InflammatoryResponseData::
        LocalMacrophage (const LocalMacrophage_type& x)
        {
          this->LocalMacrophage_.set (x);
        }

        void InflammatoryResponseData::
        LocalMacrophage (::std::unique_ptr< LocalMacrophage_type > x)
        {
          this->LocalMacrophage_.set (std::move (x));
        }

        const InflammatoryResponseData::LocalNeutrophil_type& InflammatoryResponseData::
        LocalNeutrophil () const
        {
          return this->LocalNeutrophil_.get ();
        }

        InflammatoryResponseData::LocalNeutrophil_type& InflammatoryResponseData::
        LocalNeutrophil ()
        {
          return this->LocalNeutrophil_.get ();
        }

        void InflammatoryResponseData::
        LocalNeutrophil (const LocalNeutrophil_type& x)
        {
          this->LocalNeutrophil_.set (x);
        }

        void InflammatoryResponseData::
        LocalNeutrophil (::std::unique_ptr< LocalNeutrophil_type > x)
        {
          this->LocalNeutrophil_.set (std::move (x));
        }

        const InflammatoryResponseData::LocalBarrier_type& InflammatoryResponseData::
        LocalBarrier () const
        {
          return this->LocalBarrier_.get ();
        }

        InflammatoryResponseData::LocalBarrier_type& InflammatoryResponseData::
        LocalBarrier ()
        {
          return this->LocalBarrier_.get ();
        }

        void InflammatoryResponseData::
        LocalBarrier (const LocalBarrier_type& x)
        {
          this->LocalBarrier_.set (x);
        }

        void InflammatoryResponseData::
        LocalBarrier (::std::unique_ptr< LocalBarrier_type > x)
        {
          this->LocalBarrier_.set (std::move (x));
        }

        const InflammatoryResponseData::ActiveTLR_type& InflammatoryResponseData::
        ActiveTLR () const
        {
          return this->ActiveTLR_.get ();
        }

        InflammatoryResponseData::ActiveTLR_type& InflammatoryResponseData::
        ActiveTLR ()
        {
          return this->ActiveTLR_.get ();
        }

        void InflammatoryResponseData::
        ActiveTLR (const ActiveTLR_type& x)
        {
          this->ActiveTLR_.set (x);
        }

        void InflammatoryResponseData::
        ActiveTLR (::std::unique_ptr< ActiveTLR_type > x)
        {
          this->ActiveTLR_.set (std::move (x));
        }

        const InflammatoryResponseData::AutonomicResponseLevel_type& InflammatoryResponseData::
        AutonomicResponseLevel () const
        {
          return this->AutonomicResponseLevel_.get ();
        }

        InflammatoryResponseData::AutonomicResponseLevel_type& InflammatoryResponseData::
        AutonomicResponseLevel ()
        {
          return this->AutonomicResponseLevel_.get ();
        }

        void InflammatoryResponseData::
        AutonomicResponseLevel (const AutonomicResponseLevel_type& x)
        {
          this->AutonomicResponseLevel_.set (x);
        }

        void InflammatoryResponseData::
        AutonomicResponseLevel (::std::unique_ptr< AutonomicResponseLevel_type > x)
        {
          this->AutonomicResponseLevel_.set (std::move (x));
        }

        const InflammatoryResponseData::BloodPathogen_type& InflammatoryResponseData::
        BloodPathogen () const
        {
          return this->BloodPathogen_.get ();
        }

        InflammatoryResponseData::BloodPathogen_type& InflammatoryResponseData::
        BloodPathogen ()
        {
          return this->BloodPathogen_.get ();
        }

        void InflammatoryResponseData::
        BloodPathogen (const BloodPathogen_type& x)
        {
          this->BloodPathogen_.set (x);
        }

        void InflammatoryResponseData::
        BloodPathogen (::std::unique_ptr< BloodPathogen_type > x)
        {
          this->BloodPathogen_.set (std::move (x));
        }

        const InflammatoryResponseData::Trauma_type& InflammatoryResponseData::
        Trauma () const
        {
          return this->Trauma_.get ();
        }

        InflammatoryResponseData::Trauma_type& InflammatoryResponseData::
        Trauma ()
        {
          return this->Trauma_.get ();
        }

        void InflammatoryResponseData::
        Trauma (const Trauma_type& x)
        {
          this->Trauma_.set (x);
        }

        void InflammatoryResponseData::
        Trauma (::std::unique_ptr< Trauma_type > x)
        {
          this->Trauma_.set (std::move (x));
        }

        const InflammatoryResponseData::MacrophageResting_type& InflammatoryResponseData::
        MacrophageResting () const
        {
          return this->MacrophageResting_.get ();
        }

        InflammatoryResponseData::MacrophageResting_type& InflammatoryResponseData::
        MacrophageResting ()
        {
          return this->MacrophageResting_.get ();
        }

        void InflammatoryResponseData::
        MacrophageResting (const MacrophageResting_type& x)
        {
          this->MacrophageResting_.set (x);
        }

        void InflammatoryResponseData::
        MacrophageResting (::std::unique_ptr< MacrophageResting_type > x)
        {
          this->MacrophageResting_.set (std::move (x));
        }

        const InflammatoryResponseData::MacrophageActive_type& InflammatoryResponseData::
        MacrophageActive () const
        {
          return this->MacrophageActive_.get ();
        }

        InflammatoryResponseData::MacrophageActive_type& InflammatoryResponseData::
        MacrophageActive ()
        {
          return this->MacrophageActive_.get ();
        }

        void InflammatoryResponseData::
        MacrophageActive (const MacrophageActive_type& x)
        {
          this->MacrophageActive_.set (x);
        }

        void InflammatoryResponseData::
        MacrophageActive (::std::unique_ptr< MacrophageActive_type > x)
        {
          this->MacrophageActive_.set (std::move (x));
        }

        const InflammatoryResponseData::NeutrophilResting_type& InflammatoryResponseData::
        NeutrophilResting () const
        {
          return this->NeutrophilResting_.get ();
        }

        InflammatoryResponseData::NeutrophilResting_type& InflammatoryResponseData::
        NeutrophilResting ()
        {
          return this->NeutrophilResting_.get ();
        }

        void InflammatoryResponseData::
        NeutrophilResting (const NeutrophilResting_type& x)
        {
          this->NeutrophilResting_.set (x);
        }

        void InflammatoryResponseData::
        NeutrophilResting (::std::unique_ptr< NeutrophilResting_type > x)
        {
          this->NeutrophilResting_.set (std::move (x));
        }

        const InflammatoryResponseData::NeutrophilActive_type& InflammatoryResponseData::
        NeutrophilActive () const
        {
          return this->NeutrophilActive_.get ();
        }

        InflammatoryResponseData::NeutrophilActive_type& InflammatoryResponseData::
        NeutrophilActive ()
        {
          return this->NeutrophilActive_.get ();
        }

        void InflammatoryResponseData::
        NeutrophilActive (const NeutrophilActive_type& x)
        {
          this->NeutrophilActive_.set (x);
        }

        void InflammatoryResponseData::
        NeutrophilActive (::std::unique_ptr< NeutrophilActive_type > x)
        {
          this->NeutrophilActive_.set (std::move (x));
        }

        const InflammatoryResponseData::TumorNecrosisFactor_type& InflammatoryResponseData::
        TumorNecrosisFactor () const
        {
          return this->TumorNecrosisFactor_.get ();
        }

        InflammatoryResponseData::TumorNecrosisFactor_type& InflammatoryResponseData::
        TumorNecrosisFactor ()
        {
          return this->TumorNecrosisFactor_.get ();
        }

        void InflammatoryResponseData::
        TumorNecrosisFactor (const TumorNecrosisFactor_type& x)
        {
          this->TumorNecrosisFactor_.set (x);
        }

        void InflammatoryResponseData::
        TumorNecrosisFactor (::std::unique_ptr< TumorNecrosisFactor_type > x)
        {
          this->TumorNecrosisFactor_.set (std::move (x));
        }

        const InflammatoryResponseData::Interleukin6_type& InflammatoryResponseData::
        Interleukin6 () const
        {
          return this->Interleukin6_.get ();
        }

        InflammatoryResponseData::Interleukin6_type& InflammatoryResponseData::
        Interleukin6 ()
        {
          return this->Interleukin6_.get ();
        }

        void InflammatoryResponseData::
        Interleukin6 (const Interleukin6_type& x)
        {
          this->Interleukin6_.set (x);
        }

        void InflammatoryResponseData::
        Interleukin6 (::std::unique_ptr< Interleukin6_type > x)
        {
          this->Interleukin6_.set (std::move (x));
        }

        const InflammatoryResponseData::Interleukin10_type& InflammatoryResponseData::
        Interleukin10 () const
        {
          return this->Interleukin10_.get ();
        }

        InflammatoryResponseData::Interleukin10_type& InflammatoryResponseData::
        Interleukin10 ()
        {
          return this->Interleukin10_.get ();
        }

        void InflammatoryResponseData::
        Interleukin10 (const Interleukin10_type& x)
        {
          this->Interleukin10_.set (x);
        }

        void InflammatoryResponseData::
        Interleukin10 (::std::unique_ptr< Interleukin10_type > x)
        {
          this->Interleukin10_.set (std::move (x));
        }

        const InflammatoryResponseData::Interleukin12_type& InflammatoryResponseData::
        Interleukin12 () const
        {
          return this->Interleukin12_.get ();
        }

        InflammatoryResponseData::Interleukin12_type& InflammatoryResponseData::
        Interleukin12 ()
        {
          return this->Interleukin12_.get ();
        }

        void InflammatoryResponseData::
        Interleukin12 (const Interleukin12_type& x)
        {
          this->Interleukin12_.set (x);
        }

        void InflammatoryResponseData::
        Interleukin12 (::std::unique_ptr< Interleukin12_type > x)
        {
          this->Interleukin12_.set (std::move (x));
        }

        const InflammatoryResponseData::InducibleNOSPre_type& InflammatoryResponseData::
        InducibleNOSPre () const
        {
          return this->InducibleNOSPre_.get ();
        }

        InflammatoryResponseData::InducibleNOSPre_type& InflammatoryResponseData::
        InducibleNOSPre ()
        {
          return this->InducibleNOSPre_.get ();
        }

        void InflammatoryResponseData::
        InducibleNOSPre (const InducibleNOSPre_type& x)
        {
          this->InducibleNOSPre_.set (x);
        }

        void InflammatoryResponseData::
        InducibleNOSPre (::std::unique_ptr< InducibleNOSPre_type > x)
        {
          this->InducibleNOSPre_.set (std::move (x));
        }

        const InflammatoryResponseData::InducibleNOS_type& InflammatoryResponseData::
        InducibleNOS () const
        {
          return this->InducibleNOS_.get ();
        }

        InflammatoryResponseData::InducibleNOS_type& InflammatoryResponseData::
        InducibleNOS ()
        {
          return this->InducibleNOS_.get ();
        }

        void InflammatoryResponseData::
        InducibleNOS (const InducibleNOS_type& x)
        {
          this->InducibleNOS_.set (x);
        }

        void InflammatoryResponseData::
        InducibleNOS (::std::unique_ptr< InducibleNOS_type > x)
        {
          this->InducibleNOS_.set (std::move (x));
        }

        const InflammatoryResponseData::ConstitutiveNOS_type& InflammatoryResponseData::
        ConstitutiveNOS () const
        {
          return this->ConstitutiveNOS_.get ();
        }

        InflammatoryResponseData::ConstitutiveNOS_type& InflammatoryResponseData::
        ConstitutiveNOS ()
        {
          return this->ConstitutiveNOS_.get ();
        }

        void InflammatoryResponseData::
        ConstitutiveNOS (const ConstitutiveNOS_type& x)
        {
          this->ConstitutiveNOS_.set (x);
        }

        void InflammatoryResponseData::
        ConstitutiveNOS (::std::unique_ptr< ConstitutiveNOS_type > x)
        {
          this->ConstitutiveNOS_.set (std::move (x));
        }

        const InflammatoryResponseData::Nitrate_type& InflammatoryResponseData::
        Nitrate () const
        {
          return this->Nitrate_.get ();
        }

        InflammatoryResponseData::Nitrate_type& InflammatoryResponseData::
        Nitrate ()
        {
          return this->Nitrate_.get ();
        }

        void InflammatoryResponseData::
        Nitrate (const Nitrate_type& x)
        {
          this->Nitrate_.set (x);
        }

        void InflammatoryResponseData::
        Nitrate (::std::unique_ptr< Nitrate_type > x)
        {
          this->Nitrate_.set (std::move (x));
        }

        const InflammatoryResponseData::NitricOxide_type& InflammatoryResponseData::
        NitricOxide () const
        {
          return this->NitricOxide_.get ();
        }

        InflammatoryResponseData::NitricOxide_type& InflammatoryResponseData::
        NitricOxide ()
        {
          return this->NitricOxide_.get ();
        }

        void InflammatoryResponseData::
        NitricOxide (const NitricOxide_type& x)
        {
          this->NitricOxide_.set (x);
        }

        void InflammatoryResponseData::
        NitricOxide (::std::unique_ptr< NitricOxide_type > x)
        {
          this->NitricOxide_.set (std::move (x));
        }

        const InflammatoryResponseData::TissueIntegrity_type& InflammatoryResponseData::
        TissueIntegrity () const
        {
          return this->TissueIntegrity_.get ();
        }

        InflammatoryResponseData::TissueIntegrity_type& InflammatoryResponseData::
        TissueIntegrity ()
        {
          return this->TissueIntegrity_.get ();
        }

        void InflammatoryResponseData::
        TissueIntegrity (const TissueIntegrity_type& x)
        {
          this->TissueIntegrity_.set (x);
        }

        void InflammatoryResponseData::
        TissueIntegrity (::std::unique_ptr< TissueIntegrity_type > x)
        {
          this->TissueIntegrity_.set (std::move (x));
        }

        const InflammatoryResponseData::Catecholamines_type& InflammatoryResponseData::
        Catecholamines () const
        {
          return this->Catecholamines_.get ();
        }

        InflammatoryResponseData::Catecholamines_type& InflammatoryResponseData::
        Catecholamines ()
        {
          return this->Catecholamines_.get ();
        }

        void InflammatoryResponseData::
        Catecholamines (const Catecholamines_type& x)
        {
          this->Catecholamines_.set (x);
        }

        void InflammatoryResponseData::
        Catecholamines (::std::unique_ptr< Catecholamines_type > x)
        {
          this->Catecholamines_.set (std::move (x));
        }

        const InflammatoryResponseData::InflammationTime_type& InflammatoryResponseData::
        InflammationTime () const
        {
          return this->InflammationTime_.get ();
        }

        InflammatoryResponseData::InflammationTime_type& InflammatoryResponseData::
        InflammationTime ()
        {
          return this->InflammationTime_.get ();
        }

        void InflammatoryResponseData::
        InflammationTime (const InflammationTime_type& x)
        {
          this->InflammationTime_.set (x);
        }

        void InflammatoryResponseData::
        InflammationTime (::std::unique_ptr< InflammationTime_type > x)
        {
          this->InflammationTime_.set (std::move (x));
        }

        const InflammatoryResponseData::Source_sequence& InflammatoryResponseData::
        Source () const
        {
          return this->Source_;
        }

        InflammatoryResponseData::Source_sequence& InflammatoryResponseData::
        Source ()
        {
          return this->Source_;
        }

        void InflammatoryResponseData::
        Source (const Source_sequence& s)
        {
          this->Source_ = s;
        }


        // BloodChemistrySystemData
        // 

        const BloodChemistrySystemData::BloodDensity_optional& BloodChemistrySystemData::
        BloodDensity () const
        {
          return this->BloodDensity_;
        }

        BloodChemistrySystemData::BloodDensity_optional& BloodChemistrySystemData::
        BloodDensity ()
        {
          return this->BloodDensity_;
        }

        void BloodChemistrySystemData::
        BloodDensity (const BloodDensity_type& x)
        {
          this->BloodDensity_.set (x);
        }

        void BloodChemistrySystemData::
        BloodDensity (const BloodDensity_optional& x)
        {
          this->BloodDensity_ = x;
        }

        void BloodChemistrySystemData::
        BloodDensity (::std::unique_ptr< BloodDensity_type > x)
        {
          this->BloodDensity_.set (std::move (x));
        }

        const BloodChemistrySystemData::ArterialBloodPH_optional& BloodChemistrySystemData::
        ArterialBloodPH () const
        {
          return this->ArterialBloodPH_;
        }

        BloodChemistrySystemData::ArterialBloodPH_optional& BloodChemistrySystemData::
        ArterialBloodPH ()
        {
          return this->ArterialBloodPH_;
        }

        void BloodChemistrySystemData::
        ArterialBloodPH (const ArterialBloodPH_type& x)
        {
          this->ArterialBloodPH_.set (x);
        }

        void BloodChemistrySystemData::
        ArterialBloodPH (const ArterialBloodPH_optional& x)
        {
          this->ArterialBloodPH_ = x;
        }

        void BloodChemistrySystemData::
        ArterialBloodPH (::std::unique_ptr< ArterialBloodPH_type > x)
        {
          this->ArterialBloodPH_.set (std::move (x));
        }

        const BloodChemistrySystemData::ArterialBloodPHBaseline_optional& BloodChemistrySystemData::
        ArterialBloodPHBaseline () const
        {
          return this->ArterialBloodPHBaseline_;
        }

        BloodChemistrySystemData::ArterialBloodPHBaseline_optional& BloodChemistrySystemData::
        ArterialBloodPHBaseline ()
        {
          return this->ArterialBloodPHBaseline_;
        }

        void BloodChemistrySystemData::
        ArterialBloodPHBaseline (const ArterialBloodPHBaseline_type& x)
        {
          this->ArterialBloodPHBaseline_.set (x);
        }

        void BloodChemistrySystemData::
        ArterialBloodPHBaseline (const ArterialBloodPHBaseline_optional& x)
        {
          this->ArterialBloodPHBaseline_ = x;
        }

        void BloodChemistrySystemData::
        ArterialBloodPHBaseline (::std::unique_ptr< ArterialBloodPHBaseline_type > x)
        {
          this->ArterialBloodPHBaseline_.set (std::move (x));
        }

        const BloodChemistrySystemData::VenousBloodPH_optional& BloodChemistrySystemData::
        VenousBloodPH () const
        {
          return this->VenousBloodPH_;
        }

        BloodChemistrySystemData::VenousBloodPH_optional& BloodChemistrySystemData::
        VenousBloodPH ()
        {
          return this->VenousBloodPH_;
        }

        void BloodChemistrySystemData::
        VenousBloodPH (const VenousBloodPH_type& x)
        {
          this->VenousBloodPH_.set (x);
        }

        void BloodChemistrySystemData::
        VenousBloodPH (const VenousBloodPH_optional& x)
        {
          this->VenousBloodPH_ = x;
        }

        void BloodChemistrySystemData::
        VenousBloodPH (::std::unique_ptr< VenousBloodPH_type > x)
        {
          this->VenousBloodPH_.set (std::move (x));
        }

        const BloodChemistrySystemData::BloodSpecificHeat_optional& BloodChemistrySystemData::
        BloodSpecificHeat () const
        {
          return this->BloodSpecificHeat_;
        }

        BloodChemistrySystemData::BloodSpecificHeat_optional& BloodChemistrySystemData::
        BloodSpecificHeat ()
        {
          return this->BloodSpecificHeat_;
        }

        void BloodChemistrySystemData::
        BloodSpecificHeat (const BloodSpecificHeat_type& x)
        {
          this->BloodSpecificHeat_.set (x);
        }

        void BloodChemistrySystemData::
        BloodSpecificHeat (const BloodSpecificHeat_optional& x)
        {
          this->BloodSpecificHeat_ = x;
        }

        void BloodChemistrySystemData::
        BloodSpecificHeat (::std::unique_ptr< BloodSpecificHeat_type > x)
        {
          this->BloodSpecificHeat_.set (std::move (x));
        }

        const BloodChemistrySystemData::BloodUreaNitrogenConcentration_optional& BloodChemistrySystemData::
        BloodUreaNitrogenConcentration () const
        {
          return this->BloodUreaNitrogenConcentration_;
        }

        BloodChemistrySystemData::BloodUreaNitrogenConcentration_optional& BloodChemistrySystemData::
        BloodUreaNitrogenConcentration ()
        {
          return this->BloodUreaNitrogenConcentration_;
        }

        void BloodChemistrySystemData::
        BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_type& x)
        {
          this->BloodUreaNitrogenConcentration_.set (x);
        }

        void BloodChemistrySystemData::
        BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_optional& x)
        {
          this->BloodUreaNitrogenConcentration_ = x;
        }

        void BloodChemistrySystemData::
        BloodUreaNitrogenConcentration (::std::unique_ptr< BloodUreaNitrogenConcentration_type > x)
        {
          this->BloodUreaNitrogenConcentration_.set (std::move (x));
        }

        const BloodChemistrySystemData::CarbonDioxideSaturation_optional& BloodChemistrySystemData::
        CarbonDioxideSaturation () const
        {
          return this->CarbonDioxideSaturation_;
        }

        BloodChemistrySystemData::CarbonDioxideSaturation_optional& BloodChemistrySystemData::
        CarbonDioxideSaturation ()
        {
          return this->CarbonDioxideSaturation_;
        }

        void BloodChemistrySystemData::
        CarbonDioxideSaturation (const CarbonDioxideSaturation_type& x)
        {
          this->CarbonDioxideSaturation_.set (x);
        }

        void BloodChemistrySystemData::
        CarbonDioxideSaturation (const CarbonDioxideSaturation_optional& x)
        {
          this->CarbonDioxideSaturation_ = x;
        }

        void BloodChemistrySystemData::
        CarbonDioxideSaturation (::std::unique_ptr< CarbonDioxideSaturation_type > x)
        {
          this->CarbonDioxideSaturation_.set (std::move (x));
        }

        const BloodChemistrySystemData::CarbonMonoxideSaturation_optional& BloodChemistrySystemData::
        CarbonMonoxideSaturation () const
        {
          return this->CarbonMonoxideSaturation_;
        }

        BloodChemistrySystemData::CarbonMonoxideSaturation_optional& BloodChemistrySystemData::
        CarbonMonoxideSaturation ()
        {
          return this->CarbonMonoxideSaturation_;
        }

        void BloodChemistrySystemData::
        CarbonMonoxideSaturation (const CarbonMonoxideSaturation_type& x)
        {
          this->CarbonMonoxideSaturation_.set (x);
        }

        void BloodChemistrySystemData::
        CarbonMonoxideSaturation (const CarbonMonoxideSaturation_optional& x)
        {
          this->CarbonMonoxideSaturation_ = x;
        }

        void BloodChemistrySystemData::
        CarbonMonoxideSaturation (::std::unique_ptr< CarbonMonoxideSaturation_type > x)
        {
          this->CarbonMonoxideSaturation_.set (std::move (x));
        }

        const BloodChemistrySystemData::Hematocrit_optional& BloodChemistrySystemData::
        Hematocrit () const
        {
          return this->Hematocrit_;
        }

        BloodChemistrySystemData::Hematocrit_optional& BloodChemistrySystemData::
        Hematocrit ()
        {
          return this->Hematocrit_;
        }

        void BloodChemistrySystemData::
        Hematocrit (const Hematocrit_type& x)
        {
          this->Hematocrit_.set (x);
        }

        void BloodChemistrySystemData::
        Hematocrit (const Hematocrit_optional& x)
        {
          this->Hematocrit_ = x;
        }

        void BloodChemistrySystemData::
        Hematocrit (::std::unique_ptr< Hematocrit_type > x)
        {
          this->Hematocrit_.set (std::move (x));
        }

        const BloodChemistrySystemData::HemoglobinContent_optional& BloodChemistrySystemData::
        HemoglobinContent () const
        {
          return this->HemoglobinContent_;
        }

        BloodChemistrySystemData::HemoglobinContent_optional& BloodChemistrySystemData::
        HemoglobinContent ()
        {
          return this->HemoglobinContent_;
        }

        void BloodChemistrySystemData::
        HemoglobinContent (const HemoglobinContent_type& x)
        {
          this->HemoglobinContent_.set (x);
        }

        void BloodChemistrySystemData::
        HemoglobinContent (const HemoglobinContent_optional& x)
        {
          this->HemoglobinContent_ = x;
        }

        void BloodChemistrySystemData::
        HemoglobinContent (::std::unique_ptr< HemoglobinContent_type > x)
        {
          this->HemoglobinContent_.set (std::move (x));
        }

        const BloodChemistrySystemData::HemoglobinLostToUrine_optional& BloodChemistrySystemData::
        HemoglobinLostToUrine () const
        {
          return this->HemoglobinLostToUrine_;
        }

        BloodChemistrySystemData::HemoglobinLostToUrine_optional& BloodChemistrySystemData::
        HemoglobinLostToUrine ()
        {
          return this->HemoglobinLostToUrine_;
        }

        void BloodChemistrySystemData::
        HemoglobinLostToUrine (const HemoglobinLostToUrine_type& x)
        {
          this->HemoglobinLostToUrine_.set (x);
        }

        void BloodChemistrySystemData::
        HemoglobinLostToUrine (const HemoglobinLostToUrine_optional& x)
        {
          this->HemoglobinLostToUrine_ = x;
        }

        void BloodChemistrySystemData::
        HemoglobinLostToUrine (::std::unique_ptr< HemoglobinLostToUrine_type > x)
        {
          this->HemoglobinLostToUrine_.set (std::move (x));
        }

        const BloodChemistrySystemData::OxygenSaturation_optional& BloodChemistrySystemData::
        OxygenSaturation () const
        {
          return this->OxygenSaturation_;
        }

        BloodChemistrySystemData::OxygenSaturation_optional& BloodChemistrySystemData::
        OxygenSaturation ()
        {
          return this->OxygenSaturation_;
        }

        void BloodChemistrySystemData::
        OxygenSaturation (const OxygenSaturation_type& x)
        {
          this->OxygenSaturation_.set (x);
        }

        void BloodChemistrySystemData::
        OxygenSaturation (const OxygenSaturation_optional& x)
        {
          this->OxygenSaturation_ = x;
        }

        void BloodChemistrySystemData::
        OxygenSaturation (::std::unique_ptr< OxygenSaturation_type > x)
        {
          this->OxygenSaturation_.set (std::move (x));
        }

        const BloodChemistrySystemData::OxygenVenousSaturation_optional& BloodChemistrySystemData::
        OxygenVenousSaturation () const
        {
          return this->OxygenVenousSaturation_;
        }

        BloodChemistrySystemData::OxygenVenousSaturation_optional& BloodChemistrySystemData::
        OxygenVenousSaturation ()
        {
          return this->OxygenVenousSaturation_;
        }

        void BloodChemistrySystemData::
        OxygenVenousSaturation (const OxygenVenousSaturation_type& x)
        {
          this->OxygenVenousSaturation_.set (x);
        }

        void BloodChemistrySystemData::
        OxygenVenousSaturation (const OxygenVenousSaturation_optional& x)
        {
          this->OxygenVenousSaturation_ = x;
        }

        void BloodChemistrySystemData::
        OxygenVenousSaturation (::std::unique_ptr< OxygenVenousSaturation_type > x)
        {
          this->OxygenVenousSaturation_.set (std::move (x));
        }

        const BloodChemistrySystemData::Phosphate_optional& BloodChemistrySystemData::
        Phosphate () const
        {
          return this->Phosphate_;
        }

        BloodChemistrySystemData::Phosphate_optional& BloodChemistrySystemData::
        Phosphate ()
        {
          return this->Phosphate_;
        }

        void BloodChemistrySystemData::
        Phosphate (const Phosphate_type& x)
        {
          this->Phosphate_.set (x);
        }

        void BloodChemistrySystemData::
        Phosphate (const Phosphate_optional& x)
        {
          this->Phosphate_ = x;
        }

        void BloodChemistrySystemData::
        Phosphate (::std::unique_ptr< Phosphate_type > x)
        {
          this->Phosphate_.set (std::move (x));
        }

        const BloodChemistrySystemData::PlasmaVolume_optional& BloodChemistrySystemData::
        PlasmaVolume () const
        {
          return this->PlasmaVolume_;
        }

        BloodChemistrySystemData::PlasmaVolume_optional& BloodChemistrySystemData::
        PlasmaVolume ()
        {
          return this->PlasmaVolume_;
        }

        void BloodChemistrySystemData::
        PlasmaVolume (const PlasmaVolume_type& x)
        {
          this->PlasmaVolume_.set (x);
        }

        void BloodChemistrySystemData::
        PlasmaVolume (const PlasmaVolume_optional& x)
        {
          this->PlasmaVolume_ = x;
        }

        void BloodChemistrySystemData::
        PlasmaVolume (::std::unique_ptr< PlasmaVolume_type > x)
        {
          this->PlasmaVolume_.set (std::move (x));
        }

        const BloodChemistrySystemData::PulseOximetry_optional& BloodChemistrySystemData::
        PulseOximetry () const
        {
          return this->PulseOximetry_;
        }

        BloodChemistrySystemData::PulseOximetry_optional& BloodChemistrySystemData::
        PulseOximetry ()
        {
          return this->PulseOximetry_;
        }

        void BloodChemistrySystemData::
        PulseOximetry (const PulseOximetry_type& x)
        {
          this->PulseOximetry_.set (x);
        }

        void BloodChemistrySystemData::
        PulseOximetry (const PulseOximetry_optional& x)
        {
          this->PulseOximetry_ = x;
        }

        void BloodChemistrySystemData::
        PulseOximetry (::std::unique_ptr< PulseOximetry_type > x)
        {
          this->PulseOximetry_.set (std::move (x));
        }

        const BloodChemistrySystemData::RedBloodCellCount_optional& BloodChemistrySystemData::
        RedBloodCellCount () const
        {
          return this->RedBloodCellCount_;
        }

        BloodChemistrySystemData::RedBloodCellCount_optional& BloodChemistrySystemData::
        RedBloodCellCount ()
        {
          return this->RedBloodCellCount_;
        }

        void BloodChemistrySystemData::
        RedBloodCellCount (const RedBloodCellCount_type& x)
        {
          this->RedBloodCellCount_.set (x);
        }

        void BloodChemistrySystemData::
        RedBloodCellCount (const RedBloodCellCount_optional& x)
        {
          this->RedBloodCellCount_ = x;
        }

        void BloodChemistrySystemData::
        RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > x)
        {
          this->RedBloodCellCount_.set (std::move (x));
        }

        const BloodChemistrySystemData::RhTransfusionReactionVolume_optional& BloodChemistrySystemData::
        RhTransfusionReactionVolume () const
        {
          return this->RhTransfusionReactionVolume_;
        }

        BloodChemistrySystemData::RhTransfusionReactionVolume_optional& BloodChemistrySystemData::
        RhTransfusionReactionVolume ()
        {
          return this->RhTransfusionReactionVolume_;
        }

        void BloodChemistrySystemData::
        RhTransfusionReactionVolume (const RhTransfusionReactionVolume_type& x)
        {
          this->RhTransfusionReactionVolume_.set (x);
        }

        void BloodChemistrySystemData::
        RhTransfusionReactionVolume (const RhTransfusionReactionVolume_optional& x)
        {
          this->RhTransfusionReactionVolume_ = x;
        }

        void BloodChemistrySystemData::
        RhTransfusionReactionVolume (::std::unique_ptr< RhTransfusionReactionVolume_type > x)
        {
          this->RhTransfusionReactionVolume_.set (std::move (x));
        }

        const BloodChemistrySystemData::ShuntFraction_optional& BloodChemistrySystemData::
        ShuntFraction () const
        {
          return this->ShuntFraction_;
        }

        BloodChemistrySystemData::ShuntFraction_optional& BloodChemistrySystemData::
        ShuntFraction ()
        {
          return this->ShuntFraction_;
        }

        void BloodChemistrySystemData::
        ShuntFraction (const ShuntFraction_type& x)
        {
          this->ShuntFraction_.set (x);
        }

        void BloodChemistrySystemData::
        ShuntFraction (const ShuntFraction_optional& x)
        {
          this->ShuntFraction_ = x;
        }

        void BloodChemistrySystemData::
        ShuntFraction (::std::unique_ptr< ShuntFraction_type > x)
        {
          this->ShuntFraction_.set (std::move (x));
        }

        const BloodChemistrySystemData::StrongIonDifference_optional& BloodChemistrySystemData::
        StrongIonDifference () const
        {
          return this->StrongIonDifference_;
        }

        BloodChemistrySystemData::StrongIonDifference_optional& BloodChemistrySystemData::
        StrongIonDifference ()
        {
          return this->StrongIonDifference_;
        }

        void BloodChemistrySystemData::
        StrongIonDifference (const StrongIonDifference_type& x)
        {
          this->StrongIonDifference_.set (x);
        }

        void BloodChemistrySystemData::
        StrongIonDifference (const StrongIonDifference_optional& x)
        {
          this->StrongIonDifference_ = x;
        }

        void BloodChemistrySystemData::
        StrongIonDifference (::std::unique_ptr< StrongIonDifference_type > x)
        {
          this->StrongIonDifference_.set (std::move (x));
        }

        const BloodChemistrySystemData::TotalProteinConcentration_optional& BloodChemistrySystemData::
        TotalProteinConcentration () const
        {
          return this->TotalProteinConcentration_;
        }

        BloodChemistrySystemData::TotalProteinConcentration_optional& BloodChemistrySystemData::
        TotalProteinConcentration ()
        {
          return this->TotalProteinConcentration_;
        }

        void BloodChemistrySystemData::
        TotalProteinConcentration (const TotalProteinConcentration_type& x)
        {
          this->TotalProteinConcentration_.set (x);
        }

        void BloodChemistrySystemData::
        TotalProteinConcentration (const TotalProteinConcentration_optional& x)
        {
          this->TotalProteinConcentration_ = x;
        }

        void BloodChemistrySystemData::
        TotalProteinConcentration (::std::unique_ptr< TotalProteinConcentration_type > x)
        {
          this->TotalProteinConcentration_.set (std::move (x));
        }

        const BloodChemistrySystemData::VolumeFractionNeutralLipidInPlasma_optional& BloodChemistrySystemData::
        VolumeFractionNeutralLipidInPlasma () const
        {
          return this->VolumeFractionNeutralLipidInPlasma_;
        }

        BloodChemistrySystemData::VolumeFractionNeutralLipidInPlasma_optional& BloodChemistrySystemData::
        VolumeFractionNeutralLipidInPlasma ()
        {
          return this->VolumeFractionNeutralLipidInPlasma_;
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_type& x)
        {
          this->VolumeFractionNeutralLipidInPlasma_.set (x);
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_optional& x)
        {
          this->VolumeFractionNeutralLipidInPlasma_ = x;
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralLipidInPlasma (::std::unique_ptr< VolumeFractionNeutralLipidInPlasma_type > x)
        {
          this->VolumeFractionNeutralLipidInPlasma_.set (std::move (x));
        }

        const BloodChemistrySystemData::VolumeFractionNeutralPhospholipidInPlasma_optional& BloodChemistrySystemData::
        VolumeFractionNeutralPhospholipidInPlasma () const
        {
          return this->VolumeFractionNeutralPhospholipidInPlasma_;
        }

        BloodChemistrySystemData::VolumeFractionNeutralPhospholipidInPlasma_optional& BloodChemistrySystemData::
        VolumeFractionNeutralPhospholipidInPlasma ()
        {
          return this->VolumeFractionNeutralPhospholipidInPlasma_;
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_type& x)
        {
          this->VolumeFractionNeutralPhospholipidInPlasma_.set (x);
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_optional& x)
        {
          this->VolumeFractionNeutralPhospholipidInPlasma_ = x;
        }

        void BloodChemistrySystemData::
        VolumeFractionNeutralPhospholipidInPlasma (::std::unique_ptr< VolumeFractionNeutralPhospholipidInPlasma_type > x)
        {
          this->VolumeFractionNeutralPhospholipidInPlasma_.set (std::move (x));
        }

        const BloodChemistrySystemData::WhiteBloodCellCount_optional& BloodChemistrySystemData::
        WhiteBloodCellCount () const
        {
          return this->WhiteBloodCellCount_;
        }

        BloodChemistrySystemData::WhiteBloodCellCount_optional& BloodChemistrySystemData::
        WhiteBloodCellCount ()
        {
          return this->WhiteBloodCellCount_;
        }

        void BloodChemistrySystemData::
        WhiteBloodCellCount (const WhiteBloodCellCount_type& x)
        {
          this->WhiteBloodCellCount_.set (x);
        }

        void BloodChemistrySystemData::
        WhiteBloodCellCount (const WhiteBloodCellCount_optional& x)
        {
          this->WhiteBloodCellCount_ = x;
        }

        void BloodChemistrySystemData::
        WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > x)
        {
          this->WhiteBloodCellCount_.set (std::move (x));
        }

        const BloodChemistrySystemData::RedBloodCellAcetylcholinesterase_optional& BloodChemistrySystemData::
        RedBloodCellAcetylcholinesterase () const
        {
          return this->RedBloodCellAcetylcholinesterase_;
        }

        BloodChemistrySystemData::RedBloodCellAcetylcholinesterase_optional& BloodChemistrySystemData::
        RedBloodCellAcetylcholinesterase ()
        {
          return this->RedBloodCellAcetylcholinesterase_;
        }

        void BloodChemistrySystemData::
        RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_type& x)
        {
          this->RedBloodCellAcetylcholinesterase_.set (x);
        }

        void BloodChemistrySystemData::
        RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_optional& x)
        {
          this->RedBloodCellAcetylcholinesterase_ = x;
        }

        void BloodChemistrySystemData::
        RedBloodCellAcetylcholinesterase (::std::unique_ptr< RedBloodCellAcetylcholinesterase_type > x)
        {
          this->RedBloodCellAcetylcholinesterase_.set (std::move (x));
        }

        const BloodChemistrySystemData::TotalBilirubin_optional& BloodChemistrySystemData::
        TotalBilirubin () const
        {
          return this->TotalBilirubin_;
        }

        BloodChemistrySystemData::TotalBilirubin_optional& BloodChemistrySystemData::
        TotalBilirubin ()
        {
          return this->TotalBilirubin_;
        }

        void BloodChemistrySystemData::
        TotalBilirubin (const TotalBilirubin_type& x)
        {
          this->TotalBilirubin_.set (x);
        }

        void BloodChemistrySystemData::
        TotalBilirubin (const TotalBilirubin_optional& x)
        {
          this->TotalBilirubin_ = x;
        }

        void BloodChemistrySystemData::
        TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > x)
        {
          this->TotalBilirubin_.set (std::move (x));
        }

        const BloodChemistrySystemData::InflammatoryResponse_optional& BloodChemistrySystemData::
        InflammatoryResponse () const
        {
          return this->InflammatoryResponse_;
        }

        BloodChemistrySystemData::InflammatoryResponse_optional& BloodChemistrySystemData::
        InflammatoryResponse ()
        {
          return this->InflammatoryResponse_;
        }

        void BloodChemistrySystemData::
        InflammatoryResponse (const InflammatoryResponse_type& x)
        {
          this->InflammatoryResponse_.set (x);
        }

        void BloodChemistrySystemData::
        InflammatoryResponse (const InflammatoryResponse_optional& x)
        {
          this->InflammatoryResponse_ = x;
        }

        void BloodChemistrySystemData::
        InflammatoryResponse (::std::unique_ptr< InflammatoryResponse_type > x)
        {
          this->InflammatoryResponse_.set (std::move (x));
        }

        const BloodChemistrySystemData::ArterialCarbonDioxidePressure_optional& BloodChemistrySystemData::
        ArterialCarbonDioxidePressure () const
        {
          return this->ArterialCarbonDioxidePressure_;
        }

        BloodChemistrySystemData::ArterialCarbonDioxidePressure_optional& BloodChemistrySystemData::
        ArterialCarbonDioxidePressure ()
        {
          return this->ArterialCarbonDioxidePressure_;
        }

        void BloodChemistrySystemData::
        ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_type& x)
        {
          this->ArterialCarbonDioxidePressure_.set (x);
        }

        void BloodChemistrySystemData::
        ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_optional& x)
        {
          this->ArterialCarbonDioxidePressure_ = x;
        }

        void BloodChemistrySystemData::
        ArterialCarbonDioxidePressure (::std::unique_ptr< ArterialCarbonDioxidePressure_type > x)
        {
          this->ArterialCarbonDioxidePressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::ArterialOxygenPressure_optional& BloodChemistrySystemData::
        ArterialOxygenPressure () const
        {
          return this->ArterialOxygenPressure_;
        }

        BloodChemistrySystemData::ArterialOxygenPressure_optional& BloodChemistrySystemData::
        ArterialOxygenPressure ()
        {
          return this->ArterialOxygenPressure_;
        }

        void BloodChemistrySystemData::
        ArterialOxygenPressure (const ArterialOxygenPressure_type& x)
        {
          this->ArterialOxygenPressure_.set (x);
        }

        void BloodChemistrySystemData::
        ArterialOxygenPressure (const ArterialOxygenPressure_optional& x)
        {
          this->ArterialOxygenPressure_ = x;
        }

        void BloodChemistrySystemData::
        ArterialOxygenPressure (::std::unique_ptr< ArterialOxygenPressure_type > x)
        {
          this->ArterialOxygenPressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::PulmonaryArterialCarbonDioxidePressure_optional& BloodChemistrySystemData::
        PulmonaryArterialCarbonDioxidePressure () const
        {
          return this->PulmonaryArterialCarbonDioxidePressure_;
        }

        BloodChemistrySystemData::PulmonaryArterialCarbonDioxidePressure_optional& BloodChemistrySystemData::
        PulmonaryArterialCarbonDioxidePressure ()
        {
          return this->PulmonaryArterialCarbonDioxidePressure_;
        }

        void BloodChemistrySystemData::
        PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_type& x)
        {
          this->PulmonaryArterialCarbonDioxidePressure_.set (x);
        }

        void BloodChemistrySystemData::
        PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_optional& x)
        {
          this->PulmonaryArterialCarbonDioxidePressure_ = x;
        }

        void BloodChemistrySystemData::
        PulmonaryArterialCarbonDioxidePressure (::std::unique_ptr< PulmonaryArterialCarbonDioxidePressure_type > x)
        {
          this->PulmonaryArterialCarbonDioxidePressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::PulmonaryArterialOxygenPressure_optional& BloodChemistrySystemData::
        PulmonaryArterialOxygenPressure () const
        {
          return this->PulmonaryArterialOxygenPressure_;
        }

        BloodChemistrySystemData::PulmonaryArterialOxygenPressure_optional& BloodChemistrySystemData::
        PulmonaryArterialOxygenPressure ()
        {
          return this->PulmonaryArterialOxygenPressure_;
        }

        void BloodChemistrySystemData::
        PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_type& x)
        {
          this->PulmonaryArterialOxygenPressure_.set (x);
        }

        void BloodChemistrySystemData::
        PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_optional& x)
        {
          this->PulmonaryArterialOxygenPressure_ = x;
        }

        void BloodChemistrySystemData::
        PulmonaryArterialOxygenPressure (::std::unique_ptr< PulmonaryArterialOxygenPressure_type > x)
        {
          this->PulmonaryArterialOxygenPressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::PulmonaryVenousCarbonDioxidePressure_optional& BloodChemistrySystemData::
        PulmonaryVenousCarbonDioxidePressure () const
        {
          return this->PulmonaryVenousCarbonDioxidePressure_;
        }

        BloodChemistrySystemData::PulmonaryVenousCarbonDioxidePressure_optional& BloodChemistrySystemData::
        PulmonaryVenousCarbonDioxidePressure ()
        {
          return this->PulmonaryVenousCarbonDioxidePressure_;
        }

        void BloodChemistrySystemData::
        PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_type& x)
        {
          this->PulmonaryVenousCarbonDioxidePressure_.set (x);
        }

        void BloodChemistrySystemData::
        PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_optional& x)
        {
          this->PulmonaryVenousCarbonDioxidePressure_ = x;
        }

        void BloodChemistrySystemData::
        PulmonaryVenousCarbonDioxidePressure (::std::unique_ptr< PulmonaryVenousCarbonDioxidePressure_type > x)
        {
          this->PulmonaryVenousCarbonDioxidePressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::PulmonaryVenousOxygenPressure_optional& BloodChemistrySystemData::
        PulmonaryVenousOxygenPressure () const
        {
          return this->PulmonaryVenousOxygenPressure_;
        }

        BloodChemistrySystemData::PulmonaryVenousOxygenPressure_optional& BloodChemistrySystemData::
        PulmonaryVenousOxygenPressure ()
        {
          return this->PulmonaryVenousOxygenPressure_;
        }

        void BloodChemistrySystemData::
        PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_type& x)
        {
          this->PulmonaryVenousOxygenPressure_.set (x);
        }

        void BloodChemistrySystemData::
        PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_optional& x)
        {
          this->PulmonaryVenousOxygenPressure_ = x;
        }

        void BloodChemistrySystemData::
        PulmonaryVenousOxygenPressure (::std::unique_ptr< PulmonaryVenousOxygenPressure_type > x)
        {
          this->PulmonaryVenousOxygenPressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::VenousCarbonDioxidePressure_optional& BloodChemistrySystemData::
        VenousCarbonDioxidePressure () const
        {
          return this->VenousCarbonDioxidePressure_;
        }

        BloodChemistrySystemData::VenousCarbonDioxidePressure_optional& BloodChemistrySystemData::
        VenousCarbonDioxidePressure ()
        {
          return this->VenousCarbonDioxidePressure_;
        }

        void BloodChemistrySystemData::
        VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_type& x)
        {
          this->VenousCarbonDioxidePressure_.set (x);
        }

        void BloodChemistrySystemData::
        VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_optional& x)
        {
          this->VenousCarbonDioxidePressure_ = x;
        }

        void BloodChemistrySystemData::
        VenousCarbonDioxidePressure (::std::unique_ptr< VenousCarbonDioxidePressure_type > x)
        {
          this->VenousCarbonDioxidePressure_.set (std::move (x));
        }

        const BloodChemistrySystemData::VenousOxygenPressure_optional& BloodChemistrySystemData::
        VenousOxygenPressure () const
        {
          return this->VenousOxygenPressure_;
        }

        BloodChemistrySystemData::VenousOxygenPressure_optional& BloodChemistrySystemData::
        VenousOxygenPressure ()
        {
          return this->VenousOxygenPressure_;
        }

        void BloodChemistrySystemData::
        VenousOxygenPressure (const VenousOxygenPressure_type& x)
        {
          this->VenousOxygenPressure_.set (x);
        }

        void BloodChemistrySystemData::
        VenousOxygenPressure (const VenousOxygenPressure_optional& x)
        {
          this->VenousOxygenPressure_ = x;
        }

        void BloodChemistrySystemData::
        VenousOxygenPressure (::std::unique_ptr< VenousOxygenPressure_type > x)
        {
          this->VenousOxygenPressure_.set (std::move (x));
        }


        // enumHeartRhythm
        // 

        enumHeartRhythm::
        enumHeartRhythm ()
        : ::xml_schema::string ()
        {
        }

        enumHeartRhythm::
        enumHeartRhythm (value v)
        : ::xml_schema::string (_xsd_enumHeartRhythm_literals_[v])
        {
        }

        enumHeartRhythm::
        enumHeartRhythm (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumHeartRhythm::
        enumHeartRhythm (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumHeartRhythm::
        enumHeartRhythm (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumHeartRhythm::
        enumHeartRhythm (const enumHeartRhythm& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumHeartRhythm& enumHeartRhythm::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumHeartRhythm_literals_[v]);

          return *this;
        }


        // CardiovascularSystemData
        // 

        const CardiovascularSystemData::ArterialPressure_optional& CardiovascularSystemData::
        ArterialPressure () const
        {
          return this->ArterialPressure_;
        }

        CardiovascularSystemData::ArterialPressure_optional& CardiovascularSystemData::
        ArterialPressure ()
        {
          return this->ArterialPressure_;
        }

        void CardiovascularSystemData::
        ArterialPressure (const ArterialPressure_type& x)
        {
          this->ArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        ArterialPressure (const ArterialPressure_optional& x)
        {
          this->ArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        ArterialPressure (::std::unique_ptr< ArterialPressure_type > x)
        {
          this->ArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::BloodVolume_optional& CardiovascularSystemData::
        BloodVolume () const
        {
          return this->BloodVolume_;
        }

        CardiovascularSystemData::BloodVolume_optional& CardiovascularSystemData::
        BloodVolume ()
        {
          return this->BloodVolume_;
        }

        void CardiovascularSystemData::
        BloodVolume (const BloodVolume_type& x)
        {
          this->BloodVolume_.set (x);
        }

        void CardiovascularSystemData::
        BloodVolume (const BloodVolume_optional& x)
        {
          this->BloodVolume_ = x;
        }

        void CardiovascularSystemData::
        BloodVolume (::std::unique_ptr< BloodVolume_type > x)
        {
          this->BloodVolume_.set (std::move (x));
        }

        const CardiovascularSystemData::CardiacIndex_optional& CardiovascularSystemData::
        CardiacIndex () const
        {
          return this->CardiacIndex_;
        }

        CardiovascularSystemData::CardiacIndex_optional& CardiovascularSystemData::
        CardiacIndex ()
        {
          return this->CardiacIndex_;
        }

        void CardiovascularSystemData::
        CardiacIndex (const CardiacIndex_type& x)
        {
          this->CardiacIndex_.set (x);
        }

        void CardiovascularSystemData::
        CardiacIndex (const CardiacIndex_optional& x)
        {
          this->CardiacIndex_ = x;
        }

        void CardiovascularSystemData::
        CardiacIndex (::std::unique_ptr< CardiacIndex_type > x)
        {
          this->CardiacIndex_.set (std::move (x));
        }

        const CardiovascularSystemData::CardiacOutput_optional& CardiovascularSystemData::
        CardiacOutput () const
        {
          return this->CardiacOutput_;
        }

        CardiovascularSystemData::CardiacOutput_optional& CardiovascularSystemData::
        CardiacOutput ()
        {
          return this->CardiacOutput_;
        }

        void CardiovascularSystemData::
        CardiacOutput (const CardiacOutput_type& x)
        {
          this->CardiacOutput_.set (x);
        }

        void CardiovascularSystemData::
        CardiacOutput (const CardiacOutput_optional& x)
        {
          this->CardiacOutput_ = x;
        }

        void CardiovascularSystemData::
        CardiacOutput (::std::unique_ptr< CardiacOutput_type > x)
        {
          this->CardiacOutput_.set (std::move (x));
        }

        const CardiovascularSystemData::CentralVenousPressure_optional& CardiovascularSystemData::
        CentralVenousPressure () const
        {
          return this->CentralVenousPressure_;
        }

        CardiovascularSystemData::CentralVenousPressure_optional& CardiovascularSystemData::
        CentralVenousPressure ()
        {
          return this->CentralVenousPressure_;
        }

        void CardiovascularSystemData::
        CentralVenousPressure (const CentralVenousPressure_type& x)
        {
          this->CentralVenousPressure_.set (x);
        }

        void CardiovascularSystemData::
        CentralVenousPressure (const CentralVenousPressure_optional& x)
        {
          this->CentralVenousPressure_ = x;
        }

        void CardiovascularSystemData::
        CentralVenousPressure (::std::unique_ptr< CentralVenousPressure_type > x)
        {
          this->CentralVenousPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::CerebralBloodFlow_optional& CardiovascularSystemData::
        CerebralBloodFlow () const
        {
          return this->CerebralBloodFlow_;
        }

        CardiovascularSystemData::CerebralBloodFlow_optional& CardiovascularSystemData::
        CerebralBloodFlow ()
        {
          return this->CerebralBloodFlow_;
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (const CerebralBloodFlow_type& x)
        {
          this->CerebralBloodFlow_.set (x);
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (const CerebralBloodFlow_optional& x)
        {
          this->CerebralBloodFlow_ = x;
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (::std::unique_ptr< CerebralBloodFlow_type > x)
        {
          this->CerebralBloodFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::CerebralPerfusionPressure_optional& CardiovascularSystemData::
        CerebralPerfusionPressure () const
        {
          return this->CerebralPerfusionPressure_;
        }

        CardiovascularSystemData::CerebralPerfusionPressure_optional& CardiovascularSystemData::
        CerebralPerfusionPressure ()
        {
          return this->CerebralPerfusionPressure_;
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (const CerebralPerfusionPressure_type& x)
        {
          this->CerebralPerfusionPressure_.set (x);
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (const CerebralPerfusionPressure_optional& x)
        {
          this->CerebralPerfusionPressure_ = x;
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (::std::unique_ptr< CerebralPerfusionPressure_type > x)
        {
          this->CerebralPerfusionPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::DiastolicArterialPressure_optional& CardiovascularSystemData::
        DiastolicArterialPressure () const
        {
          return this->DiastolicArterialPressure_;
        }

        CardiovascularSystemData::DiastolicArterialPressure_optional& CardiovascularSystemData::
        DiastolicArterialPressure ()
        {
          return this->DiastolicArterialPressure_;
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (const DiastolicArterialPressure_type& x)
        {
          this->DiastolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (const DiastolicArterialPressure_optional& x)
        {
          this->DiastolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (::std::unique_ptr< DiastolicArterialPressure_type > x)
        {
          this->DiastolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartEjectionFraction_optional& CardiovascularSystemData::
        HeartEjectionFraction () const
        {
          return this->HeartEjectionFraction_;
        }

        CardiovascularSystemData::HeartEjectionFraction_optional& CardiovascularSystemData::
        HeartEjectionFraction ()
        {
          return this->HeartEjectionFraction_;
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (const HeartEjectionFraction_type& x)
        {
          this->HeartEjectionFraction_.set (x);
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (const HeartEjectionFraction_optional& x)
        {
          this->HeartEjectionFraction_ = x;
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (::std::unique_ptr< HeartEjectionFraction_type > x)
        {
          this->HeartEjectionFraction_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartRate_optional& CardiovascularSystemData::
        HeartRate () const
        {
          return this->HeartRate_;
        }

        CardiovascularSystemData::HeartRate_optional& CardiovascularSystemData::
        HeartRate ()
        {
          return this->HeartRate_;
        }

        void CardiovascularSystemData::
        HeartRate (const HeartRate_type& x)
        {
          this->HeartRate_.set (x);
        }

        void CardiovascularSystemData::
        HeartRate (const HeartRate_optional& x)
        {
          this->HeartRate_ = x;
        }

        void CardiovascularSystemData::
        HeartRate (::std::unique_ptr< HeartRate_type > x)
        {
          this->HeartRate_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartRhythm_optional& CardiovascularSystemData::
        HeartRhythm () const
        {
          return this->HeartRhythm_;
        }

        CardiovascularSystemData::HeartRhythm_optional& CardiovascularSystemData::
        HeartRhythm ()
        {
          return this->HeartRhythm_;
        }

        void CardiovascularSystemData::
        HeartRhythm (const HeartRhythm_type& x)
        {
          this->HeartRhythm_.set (x);
        }

        void CardiovascularSystemData::
        HeartRhythm (const HeartRhythm_optional& x)
        {
          this->HeartRhythm_ = x;
        }

        void CardiovascularSystemData::
        HeartRhythm (::std::unique_ptr< HeartRhythm_type > x)
        {
          this->HeartRhythm_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartStrokeVolume_optional& CardiovascularSystemData::
        HeartStrokeVolume () const
        {
          return this->HeartStrokeVolume_;
        }

        CardiovascularSystemData::HeartStrokeVolume_optional& CardiovascularSystemData::
        HeartStrokeVolume ()
        {
          return this->HeartStrokeVolume_;
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (const HeartStrokeVolume_type& x)
        {
          this->HeartStrokeVolume_.set (x);
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (const HeartStrokeVolume_optional& x)
        {
          this->HeartStrokeVolume_ = x;
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (::std::unique_ptr< HeartStrokeVolume_type > x)
        {
          this->HeartStrokeVolume_.set (std::move (x));
        }

        const CardiovascularSystemData::IntracranialPressure_optional& CardiovascularSystemData::
        IntracranialPressure () const
        {
          return this->IntracranialPressure_;
        }

        CardiovascularSystemData::IntracranialPressure_optional& CardiovascularSystemData::
        IntracranialPressure ()
        {
          return this->IntracranialPressure_;
        }

        void CardiovascularSystemData::
        IntracranialPressure (const IntracranialPressure_type& x)
        {
          this->IntracranialPressure_.set (x);
        }

        void CardiovascularSystemData::
        IntracranialPressure (const IntracranialPressure_optional& x)
        {
          this->IntracranialPressure_ = x;
        }

        void CardiovascularSystemData::
        IntracranialPressure (::std::unique_ptr< IntracranialPressure_type > x)
        {
          this->IntracranialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialPressure_optional& CardiovascularSystemData::
        MeanArterialPressure () const
        {
          return this->MeanArterialPressure_;
        }

        CardiovascularSystemData::MeanArterialPressure_optional& CardiovascularSystemData::
        MeanArterialPressure ()
        {
          return this->MeanArterialPressure_;
        }

        void CardiovascularSystemData::
        MeanArterialPressure (const MeanArterialPressure_type& x)
        {
          this->MeanArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialPressure (const MeanArterialPressure_optional& x)
        {
          this->MeanArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialPressure (::std::unique_ptr< MeanArterialPressure_type > x)
        {
          this->MeanArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure () const
        {
          return this->MeanArterialCarbonDioxidePartialPressure_;
        }

        CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure ()
        {
          return this->MeanArterialCarbonDioxidePartialPressure_;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_type& x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_optional& x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressure_type > x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta () const
        {
          return this->MeanArterialCarbonDioxidePartialPressureDelta_;
        }

        CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta ()
        {
          return this->MeanArterialCarbonDioxidePartialPressureDelta_;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_type& x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_optional& x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressureDelta_type > x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanCentralVenousPressure_optional& CardiovascularSystemData::
        MeanCentralVenousPressure () const
        {
          return this->MeanCentralVenousPressure_;
        }

        CardiovascularSystemData::MeanCentralVenousPressure_optional& CardiovascularSystemData::
        MeanCentralVenousPressure ()
        {
          return this->MeanCentralVenousPressure_;
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (const MeanCentralVenousPressure_type& x)
        {
          this->MeanCentralVenousPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (const MeanCentralVenousPressure_optional& x)
        {
          this->MeanCentralVenousPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (::std::unique_ptr< MeanCentralVenousPressure_type > x)
        {
          this->MeanCentralVenousPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanSkinFlow_optional& CardiovascularSystemData::
        MeanSkinFlow () const
        {
          return this->MeanSkinFlow_;
        }

        CardiovascularSystemData::MeanSkinFlow_optional& CardiovascularSystemData::
        MeanSkinFlow ()
        {
          return this->MeanSkinFlow_;
        }

        void CardiovascularSystemData::
        MeanSkinFlow (const MeanSkinFlow_type& x)
        {
          this->MeanSkinFlow_.set (x);
        }

        void CardiovascularSystemData::
        MeanSkinFlow (const MeanSkinFlow_optional& x)
        {
          this->MeanSkinFlow_ = x;
        }

        void CardiovascularSystemData::
        MeanSkinFlow (::std::unique_ptr< MeanSkinFlow_type > x)
        {
          this->MeanSkinFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryArterialPressure_optional& CardiovascularSystemData::
        PulmonaryArterialPressure () const
        {
          return this->PulmonaryArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryArterialPressure_optional& CardiovascularSystemData::
        PulmonaryArterialPressure ()
        {
          return this->PulmonaryArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (const PulmonaryArterialPressure_type& x)
        {
          this->PulmonaryArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (const PulmonaryArterialPressure_optional& x)
        {
          this->PulmonaryArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (::std::unique_ptr< PulmonaryArterialPressure_type > x)
        {
          this->PulmonaryArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryCapillariesWedgePressure_optional& CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure () const
        {
          return this->PulmonaryCapillariesWedgePressure_;
        }

        CardiovascularSystemData::PulmonaryCapillariesWedgePressure_optional& CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure ()
        {
          return this->PulmonaryCapillariesWedgePressure_;
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_type& x)
        {
          this->PulmonaryCapillariesWedgePressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_optional& x)
        {
          this->PulmonaryCapillariesWedgePressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (::std::unique_ptr< PulmonaryCapillariesWedgePressure_type > x)
        {
          this->PulmonaryCapillariesWedgePressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryDiastolicArterialPressure_optional& CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure () const
        {
          return this->PulmonaryDiastolicArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryDiastolicArterialPressure_optional& CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure ()
        {
          return this->PulmonaryDiastolicArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_type& x)
        {
          this->PulmonaryDiastolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_optional& x)
        {
          this->PulmonaryDiastolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (::std::unique_ptr< PulmonaryDiastolicArterialPressure_type > x)
        {
          this->PulmonaryDiastolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanArterialPressure_optional& CardiovascularSystemData::
        PulmonaryMeanArterialPressure () const
        {
          return this->PulmonaryMeanArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryMeanArterialPressure_optional& CardiovascularSystemData::
        PulmonaryMeanArterialPressure ()
        {
          return this->PulmonaryMeanArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_type& x)
        {
          this->PulmonaryMeanArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_optional& x)
        {
          this->PulmonaryMeanArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (::std::unique_ptr< PulmonaryMeanArterialPressure_type > x)
        {
          this->PulmonaryMeanArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanCapillaryFlow_optional& CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow () const
        {
          return this->PulmonaryMeanCapillaryFlow_;
        }

        CardiovascularSystemData::PulmonaryMeanCapillaryFlow_optional& CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow ()
        {
          return this->PulmonaryMeanCapillaryFlow_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_type& x)
        {
          this->PulmonaryMeanCapillaryFlow_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_optional& x)
        {
          this->PulmonaryMeanCapillaryFlow_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (::std::unique_ptr< PulmonaryMeanCapillaryFlow_type > x)
        {
          this->PulmonaryMeanCapillaryFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanShuntFlow_optional& CardiovascularSystemData::
        PulmonaryMeanShuntFlow () const
        {
          return this->PulmonaryMeanShuntFlow_;
        }

        CardiovascularSystemData::PulmonaryMeanShuntFlow_optional& CardiovascularSystemData::
        PulmonaryMeanShuntFlow ()
        {
          return this->PulmonaryMeanShuntFlow_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_type& x)
        {
          this->PulmonaryMeanShuntFlow_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_optional& x)
        {
          this->PulmonaryMeanShuntFlow_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (::std::unique_ptr< PulmonaryMeanShuntFlow_type > x)
        {
          this->PulmonaryMeanShuntFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonarySystolicArterialPressure_optional& CardiovascularSystemData::
        PulmonarySystolicArterialPressure () const
        {
          return this->PulmonarySystolicArterialPressure_;
        }

        CardiovascularSystemData::PulmonarySystolicArterialPressure_optional& CardiovascularSystemData::
        PulmonarySystolicArterialPressure ()
        {
          return this->PulmonarySystolicArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_type& x)
        {
          this->PulmonarySystolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_optional& x)
        {
          this->PulmonarySystolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (::std::unique_ptr< PulmonarySystolicArterialPressure_type > x)
        {
          this->PulmonarySystolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryVascularResistance_optional& CardiovascularSystemData::
        PulmonaryVascularResistance () const
        {
          return this->PulmonaryVascularResistance_;
        }

        CardiovascularSystemData::PulmonaryVascularResistance_optional& CardiovascularSystemData::
        PulmonaryVascularResistance ()
        {
          return this->PulmonaryVascularResistance_;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (const PulmonaryVascularResistance_type& x)
        {
          this->PulmonaryVascularResistance_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (const PulmonaryVascularResistance_optional& x)
        {
          this->PulmonaryVascularResistance_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (::std::unique_ptr< PulmonaryVascularResistance_type > x)
        {
          this->PulmonaryVascularResistance_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryVascularResistanceIndex_optional& CardiovascularSystemData::
        PulmonaryVascularResistanceIndex () const
        {
          return this->PulmonaryVascularResistanceIndex_;
        }

        CardiovascularSystemData::PulmonaryVascularResistanceIndex_optional& CardiovascularSystemData::
        PulmonaryVascularResistanceIndex ()
        {
          return this->PulmonaryVascularResistanceIndex_;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_type& x)
        {
          this->PulmonaryVascularResistanceIndex_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_optional& x)
        {
          this->PulmonaryVascularResistanceIndex_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (::std::unique_ptr< PulmonaryVascularResistanceIndex_type > x)
        {
          this->PulmonaryVascularResistanceIndex_.set (std::move (x));
        }

        const CardiovascularSystemData::PulsePressure_optional& CardiovascularSystemData::
        PulsePressure () const
        {
          return this->PulsePressure_;
        }

        CardiovascularSystemData::PulsePressure_optional& CardiovascularSystemData::
        PulsePressure ()
        {
          return this->PulsePressure_;
        }

        void CardiovascularSystemData::
        PulsePressure (const PulsePressure_type& x)
        {
          this->PulsePressure_.set (x);
        }

        void CardiovascularSystemData::
        PulsePressure (const PulsePressure_optional& x)
        {
          this->PulsePressure_ = x;
        }

        void CardiovascularSystemData::
        PulsePressure (::std::unique_ptr< PulsePressure_type > x)
        {
          this->PulsePressure_.set (std::move (x));
        }

        const CardiovascularSystemData::SystemicVascularResistance_optional& CardiovascularSystemData::
        SystemicVascularResistance () const
        {
          return this->SystemicVascularResistance_;
        }

        CardiovascularSystemData::SystemicVascularResistance_optional& CardiovascularSystemData::
        SystemicVascularResistance ()
        {
          return this->SystemicVascularResistance_;
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (const SystemicVascularResistance_type& x)
        {
          this->SystemicVascularResistance_.set (x);
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (const SystemicVascularResistance_optional& x)
        {
          this->SystemicVascularResistance_ = x;
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (::std::unique_ptr< SystemicVascularResistance_type > x)
        {
          this->SystemicVascularResistance_.set (std::move (x));
        }

        const CardiovascularSystemData::SystolicArterialPressure_optional& CardiovascularSystemData::
        SystolicArterialPressure () const
        {
          return this->SystolicArterialPressure_;
        }

        CardiovascularSystemData::SystolicArterialPressure_optional& CardiovascularSystemData::
        SystolicArterialPressure ()
        {
          return this->SystolicArterialPressure_;
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (const SystolicArterialPressure_type& x)
        {
          this->SystolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (const SystolicArterialPressure_optional& x)
        {
          this->SystolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (::std::unique_ptr< SystolicArterialPressure_type > x)
        {
          this->SystolicArterialPressure_.set (std::move (x));
        }


        // DrugSystemData
        // 

        const DrugSystemData::AntibioticActivity_optional& DrugSystemData::
        AntibioticActivity () const
        {
          return this->AntibioticActivity_;
        }

        DrugSystemData::AntibioticActivity_optional& DrugSystemData::
        AntibioticActivity ()
        {
          return this->AntibioticActivity_;
        }

        void DrugSystemData::
        AntibioticActivity (const AntibioticActivity_type& x)
        {
          this->AntibioticActivity_.set (x);
        }

        void DrugSystemData::
        AntibioticActivity (const AntibioticActivity_optional& x)
        {
          this->AntibioticActivity_ = x;
        }

        void DrugSystemData::
        AntibioticActivity (::std::unique_ptr< AntibioticActivity_type > x)
        {
          this->AntibioticActivity_.set (std::move (x));
        }

        const DrugSystemData::BronchodilationLevel_optional& DrugSystemData::
        BronchodilationLevel () const
        {
          return this->BronchodilationLevel_;
        }

        DrugSystemData::BronchodilationLevel_optional& DrugSystemData::
        BronchodilationLevel ()
        {
          return this->BronchodilationLevel_;
        }

        void DrugSystemData::
        BronchodilationLevel (const BronchodilationLevel_type& x)
        {
          this->BronchodilationLevel_.set (x);
        }

        void DrugSystemData::
        BronchodilationLevel (const BronchodilationLevel_optional& x)
        {
          this->BronchodilationLevel_ = x;
        }

        void DrugSystemData::
        BronchodilationLevel (::std::unique_ptr< BronchodilationLevel_type > x)
        {
          this->BronchodilationLevel_.set (std::move (x));
        }

        const DrugSystemData::FeverChange_optional& DrugSystemData::
        FeverChange () const
        {
          return this->FeverChange_;
        }

        DrugSystemData::FeverChange_optional& DrugSystemData::
        FeverChange ()
        {
          return this->FeverChange_;
        }

        void DrugSystemData::
        FeverChange (const FeverChange_type& x)
        {
          this->FeverChange_.set (x);
        }

        void DrugSystemData::
        FeverChange (const FeverChange_optional& x)
        {
          this->FeverChange_ = x;
        }

        void DrugSystemData::
        FeverChange (::std::unique_ptr< FeverChange_type > x)
        {
          this->FeverChange_.set (std::move (x));
        }

        const DrugSystemData::HeartRateChange_optional& DrugSystemData::
        HeartRateChange () const
        {
          return this->HeartRateChange_;
        }

        DrugSystemData::HeartRateChange_optional& DrugSystemData::
        HeartRateChange ()
        {
          return this->HeartRateChange_;
        }

        void DrugSystemData::
        HeartRateChange (const HeartRateChange_type& x)
        {
          this->HeartRateChange_.set (x);
        }

        void DrugSystemData::
        HeartRateChange (const HeartRateChange_optional& x)
        {
          this->HeartRateChange_ = x;
        }

        void DrugSystemData::
        HeartRateChange (::std::unique_ptr< HeartRateChange_type > x)
        {
          this->HeartRateChange_.set (std::move (x));
        }

        const DrugSystemData::HemorrhageChange_optional& DrugSystemData::
        HemorrhageChange () const
        {
          return this->HemorrhageChange_;
        }

        DrugSystemData::HemorrhageChange_optional& DrugSystemData::
        HemorrhageChange ()
        {
          return this->HemorrhageChange_;
        }

        void DrugSystemData::
        HemorrhageChange (const HemorrhageChange_type& x)
        {
          this->HemorrhageChange_.set (x);
        }

        void DrugSystemData::
        HemorrhageChange (const HemorrhageChange_optional& x)
        {
          this->HemorrhageChange_ = x;
        }

        void DrugSystemData::
        HemorrhageChange (::std::unique_ptr< HemorrhageChange_type > x)
        {
          this->HemorrhageChange_.set (std::move (x));
        }

        const DrugSystemData::MeanBloodPressureChange_optional& DrugSystemData::
        MeanBloodPressureChange () const
        {
          return this->MeanBloodPressureChange_;
        }

        DrugSystemData::MeanBloodPressureChange_optional& DrugSystemData::
        MeanBloodPressureChange ()
        {
          return this->MeanBloodPressureChange_;
        }

        void DrugSystemData::
        MeanBloodPressureChange (const MeanBloodPressureChange_type& x)
        {
          this->MeanBloodPressureChange_.set (x);
        }

        void DrugSystemData::
        MeanBloodPressureChange (const MeanBloodPressureChange_optional& x)
        {
          this->MeanBloodPressureChange_ = x;
        }

        void DrugSystemData::
        MeanBloodPressureChange (::std::unique_ptr< MeanBloodPressureChange_type > x)
        {
          this->MeanBloodPressureChange_.set (std::move (x));
        }

        const DrugSystemData::NeuromuscularBlockLevel_optional& DrugSystemData::
        NeuromuscularBlockLevel () const
        {
          return this->NeuromuscularBlockLevel_;
        }

        DrugSystemData::NeuromuscularBlockLevel_optional& DrugSystemData::
        NeuromuscularBlockLevel ()
        {
          return this->NeuromuscularBlockLevel_;
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (const NeuromuscularBlockLevel_type& x)
        {
          this->NeuromuscularBlockLevel_.set (x);
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (const NeuromuscularBlockLevel_optional& x)
        {
          this->NeuromuscularBlockLevel_ = x;
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (::std::unique_ptr< NeuromuscularBlockLevel_type > x)
        {
          this->NeuromuscularBlockLevel_.set (std::move (x));
        }

        const DrugSystemData::PainToleranceChange_optional& DrugSystemData::
        PainToleranceChange () const
        {
          return this->PainToleranceChange_;
        }

        DrugSystemData::PainToleranceChange_optional& DrugSystemData::
        PainToleranceChange ()
        {
          return this->PainToleranceChange_;
        }

        void DrugSystemData::
        PainToleranceChange (const PainToleranceChange_type& x)
        {
          this->PainToleranceChange_.set (x);
        }

        void DrugSystemData::
        PainToleranceChange (const PainToleranceChange_optional& x)
        {
          this->PainToleranceChange_ = x;
        }

        void DrugSystemData::
        PainToleranceChange (::std::unique_ptr< PainToleranceChange_type > x)
        {
          this->PainToleranceChange_.set (std::move (x));
        }

        const DrugSystemData::PulsePressureChange_optional& DrugSystemData::
        PulsePressureChange () const
        {
          return this->PulsePressureChange_;
        }

        DrugSystemData::PulsePressureChange_optional& DrugSystemData::
        PulsePressureChange ()
        {
          return this->PulsePressureChange_;
        }

        void DrugSystemData::
        PulsePressureChange (const PulsePressureChange_type& x)
        {
          this->PulsePressureChange_.set (x);
        }

        void DrugSystemData::
        PulsePressureChange (const PulsePressureChange_optional& x)
        {
          this->PulsePressureChange_ = x;
        }

        void DrugSystemData::
        PulsePressureChange (::std::unique_ptr< PulsePressureChange_type > x)
        {
          this->PulsePressureChange_.set (std::move (x));
        }

        const DrugSystemData::RespirationRateChange_optional& DrugSystemData::
        RespirationRateChange () const
        {
          return this->RespirationRateChange_;
        }

        DrugSystemData::RespirationRateChange_optional& DrugSystemData::
        RespirationRateChange ()
        {
          return this->RespirationRateChange_;
        }

        void DrugSystemData::
        RespirationRateChange (const RespirationRateChange_type& x)
        {
          this->RespirationRateChange_.set (x);
        }

        void DrugSystemData::
        RespirationRateChange (const RespirationRateChange_optional& x)
        {
          this->RespirationRateChange_ = x;
        }

        void DrugSystemData::
        RespirationRateChange (::std::unique_ptr< RespirationRateChange_type > x)
        {
          this->RespirationRateChange_.set (std::move (x));
        }

        const DrugSystemData::SedationLevel_optional& DrugSystemData::
        SedationLevel () const
        {
          return this->SedationLevel_;
        }

        DrugSystemData::SedationLevel_optional& DrugSystemData::
        SedationLevel ()
        {
          return this->SedationLevel_;
        }

        void DrugSystemData::
        SedationLevel (const SedationLevel_type& x)
        {
          this->SedationLevel_.set (x);
        }

        void DrugSystemData::
        SedationLevel (const SedationLevel_optional& x)
        {
          this->SedationLevel_ = x;
        }

        void DrugSystemData::
        SedationLevel (::std::unique_ptr< SedationLevel_type > x)
        {
          this->SedationLevel_.set (std::move (x));
        }

        const DrugSystemData::TidalVolumeChange_optional& DrugSystemData::
        TidalVolumeChange () const
        {
          return this->TidalVolumeChange_;
        }

        DrugSystemData::TidalVolumeChange_optional& DrugSystemData::
        TidalVolumeChange ()
        {
          return this->TidalVolumeChange_;
        }

        void DrugSystemData::
        TidalVolumeChange (const TidalVolumeChange_type& x)
        {
          this->TidalVolumeChange_.set (x);
        }

        void DrugSystemData::
        TidalVolumeChange (const TidalVolumeChange_optional& x)
        {
          this->TidalVolumeChange_ = x;
        }

        void DrugSystemData::
        TidalVolumeChange (::std::unique_ptr< TidalVolumeChange_type > x)
        {
          this->TidalVolumeChange_.set (std::move (x));
        }

        const DrugSystemData::TubularPermeabilityChange_optional& DrugSystemData::
        TubularPermeabilityChange () const
        {
          return this->TubularPermeabilityChange_;
        }

        DrugSystemData::TubularPermeabilityChange_optional& DrugSystemData::
        TubularPermeabilityChange ()
        {
          return this->TubularPermeabilityChange_;
        }

        void DrugSystemData::
        TubularPermeabilityChange (const TubularPermeabilityChange_type& x)
        {
          this->TubularPermeabilityChange_.set (x);
        }

        void DrugSystemData::
        TubularPermeabilityChange (const TubularPermeabilityChange_optional& x)
        {
          this->TubularPermeabilityChange_ = x;
        }

        void DrugSystemData::
        TubularPermeabilityChange (::std::unique_ptr< TubularPermeabilityChange_type > x)
        {
          this->TubularPermeabilityChange_.set (std::move (x));
        }

        const DrugSystemData::CentralNervousResponse_optional& DrugSystemData::
        CentralNervousResponse () const
        {
          return this->CentralNervousResponse_;
        }

        DrugSystemData::CentralNervousResponse_optional& DrugSystemData::
        CentralNervousResponse ()
        {
          return this->CentralNervousResponse_;
        }

        void DrugSystemData::
        CentralNervousResponse (const CentralNervousResponse_type& x)
        {
          this->CentralNervousResponse_.set (x);
        }

        void DrugSystemData::
        CentralNervousResponse (const CentralNervousResponse_optional& x)
        {
          this->CentralNervousResponse_ = x;
        }

        void DrugSystemData::
        CentralNervousResponse (::std::unique_ptr< CentralNervousResponse_type > x)
        {
          this->CentralNervousResponse_.set (std::move (x));
        }


        // EndocrineSystemData
        // 

        const EndocrineSystemData::InsulinSynthesisRate_optional& EndocrineSystemData::
        InsulinSynthesisRate () const
        {
          return this->InsulinSynthesisRate_;
        }

        EndocrineSystemData::InsulinSynthesisRate_optional& EndocrineSystemData::
        InsulinSynthesisRate ()
        {
          return this->InsulinSynthesisRate_;
        }

        void EndocrineSystemData::
        InsulinSynthesisRate (const InsulinSynthesisRate_type& x)
        {
          this->InsulinSynthesisRate_.set (x);
        }

        void EndocrineSystemData::
        InsulinSynthesisRate (const InsulinSynthesisRate_optional& x)
        {
          this->InsulinSynthesisRate_ = x;
        }

        void EndocrineSystemData::
        InsulinSynthesisRate (::std::unique_ptr< InsulinSynthesisRate_type > x)
        {
          this->InsulinSynthesisRate_.set (std::move (x));
        }

        const EndocrineSystemData::GlucagonSynthesisRate_optional& EndocrineSystemData::
        GlucagonSynthesisRate () const
        {
          return this->GlucagonSynthesisRate_;
        }

        EndocrineSystemData::GlucagonSynthesisRate_optional& EndocrineSystemData::
        GlucagonSynthesisRate ()
        {
          return this->GlucagonSynthesisRate_;
        }

        void EndocrineSystemData::
        GlucagonSynthesisRate (const GlucagonSynthesisRate_type& x)
        {
          this->GlucagonSynthesisRate_.set (x);
        }

        void EndocrineSystemData::
        GlucagonSynthesisRate (const GlucagonSynthesisRate_optional& x)
        {
          this->GlucagonSynthesisRate_ = x;
        }

        void EndocrineSystemData::
        GlucagonSynthesisRate (::std::unique_ptr< GlucagonSynthesisRate_type > x)
        {
          this->GlucagonSynthesisRate_.set (std::move (x));
        }


        // EnergySystemData
        // 

        const EnergySystemData::AchievedExerciseLevel_optional& EnergySystemData::
        AchievedExerciseLevel () const
        {
          return this->AchievedExerciseLevel_;
        }

        EnergySystemData::AchievedExerciseLevel_optional& EnergySystemData::
        AchievedExerciseLevel ()
        {
          return this->AchievedExerciseLevel_;
        }

        void EnergySystemData::
        AchievedExerciseLevel (const AchievedExerciseLevel_type& x)
        {
          this->AchievedExerciseLevel_.set (x);
        }

        void EnergySystemData::
        AchievedExerciseLevel (const AchievedExerciseLevel_optional& x)
        {
          this->AchievedExerciseLevel_ = x;
        }

        void EnergySystemData::
        AchievedExerciseLevel (::std::unique_ptr< AchievedExerciseLevel_type > x)
        {
          this->AchievedExerciseLevel_.set (std::move (x));
        }

        const EnergySystemData::CoreTemperature_optional& EnergySystemData::
        CoreTemperature () const
        {
          return this->CoreTemperature_;
        }

        EnergySystemData::CoreTemperature_optional& EnergySystemData::
        CoreTemperature ()
        {
          return this->CoreTemperature_;
        }

        void EnergySystemData::
        CoreTemperature (const CoreTemperature_type& x)
        {
          this->CoreTemperature_.set (x);
        }

        void EnergySystemData::
        CoreTemperature (const CoreTemperature_optional& x)
        {
          this->CoreTemperature_ = x;
        }

        void EnergySystemData::
        CoreTemperature (::std::unique_ptr< CoreTemperature_type > x)
        {
          this->CoreTemperature_.set (std::move (x));
        }

        const EnergySystemData::CreatinineProductionRate_optional& EnergySystemData::
        CreatinineProductionRate () const
        {
          return this->CreatinineProductionRate_;
        }

        EnergySystemData::CreatinineProductionRate_optional& EnergySystemData::
        CreatinineProductionRate ()
        {
          return this->CreatinineProductionRate_;
        }

        void EnergySystemData::
        CreatinineProductionRate (const CreatinineProductionRate_type& x)
        {
          this->CreatinineProductionRate_.set (x);
        }

        void EnergySystemData::
        CreatinineProductionRate (const CreatinineProductionRate_optional& x)
        {
          this->CreatinineProductionRate_ = x;
        }

        void EnergySystemData::
        CreatinineProductionRate (::std::unique_ptr< CreatinineProductionRate_type > x)
        {
          this->CreatinineProductionRate_.set (std::move (x));
        }

        const EnergySystemData::ExerciseEnergyDemand_optional& EnergySystemData::
        ExerciseEnergyDemand () const
        {
          return this->ExerciseEnergyDemand_;
        }

        EnergySystemData::ExerciseEnergyDemand_optional& EnergySystemData::
        ExerciseEnergyDemand ()
        {
          return this->ExerciseEnergyDemand_;
        }

        void EnergySystemData::
        ExerciseEnergyDemand (const ExerciseEnergyDemand_type& x)
        {
          this->ExerciseEnergyDemand_.set (x);
        }

        void EnergySystemData::
        ExerciseEnergyDemand (const ExerciseEnergyDemand_optional& x)
        {
          this->ExerciseEnergyDemand_ = x;
        }

        void EnergySystemData::
        ExerciseEnergyDemand (::std::unique_ptr< ExerciseEnergyDemand_type > x)
        {
          this->ExerciseEnergyDemand_.set (std::move (x));
        }

        const EnergySystemData::ExerciseMeanArterialPressureDelta_optional& EnergySystemData::
        ExerciseMeanArterialPressureDelta () const
        {
          return this->ExerciseMeanArterialPressureDelta_;
        }

        EnergySystemData::ExerciseMeanArterialPressureDelta_optional& EnergySystemData::
        ExerciseMeanArterialPressureDelta ()
        {
          return this->ExerciseMeanArterialPressureDelta_;
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_type& x)
        {
          this->ExerciseMeanArterialPressureDelta_.set (x);
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_optional& x)
        {
          this->ExerciseMeanArterialPressureDelta_ = x;
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (::std::unique_ptr< ExerciseMeanArterialPressureDelta_type > x)
        {
          this->ExerciseMeanArterialPressureDelta_.set (std::move (x));
        }

        const EnergySystemData::FatigueLevel_optional& EnergySystemData::
        FatigueLevel () const
        {
          return this->FatigueLevel_;
        }

        EnergySystemData::FatigueLevel_optional& EnergySystemData::
        FatigueLevel ()
        {
          return this->FatigueLevel_;
        }

        void EnergySystemData::
        FatigueLevel (const FatigueLevel_type& x)
        {
          this->FatigueLevel_.set (x);
        }

        void EnergySystemData::
        FatigueLevel (const FatigueLevel_optional& x)
        {
          this->FatigueLevel_ = x;
        }

        void EnergySystemData::
        FatigueLevel (::std::unique_ptr< FatigueLevel_type > x)
        {
          this->FatigueLevel_.set (std::move (x));
        }

        const EnergySystemData::LactateProductionRate_optional& EnergySystemData::
        LactateProductionRate () const
        {
          return this->LactateProductionRate_;
        }

        EnergySystemData::LactateProductionRate_optional& EnergySystemData::
        LactateProductionRate ()
        {
          return this->LactateProductionRate_;
        }

        void EnergySystemData::
        LactateProductionRate (const LactateProductionRate_type& x)
        {
          this->LactateProductionRate_.set (x);
        }

        void EnergySystemData::
        LactateProductionRate (const LactateProductionRate_optional& x)
        {
          this->LactateProductionRate_ = x;
        }

        void EnergySystemData::
        LactateProductionRate (::std::unique_ptr< LactateProductionRate_type > x)
        {
          this->LactateProductionRate_.set (std::move (x));
        }

        const EnergySystemData::SkinTemperature_optional& EnergySystemData::
        SkinTemperature () const
        {
          return this->SkinTemperature_;
        }

        EnergySystemData::SkinTemperature_optional& EnergySystemData::
        SkinTemperature ()
        {
          return this->SkinTemperature_;
        }

        void EnergySystemData::
        SkinTemperature (const SkinTemperature_type& x)
        {
          this->SkinTemperature_.set (x);
        }

        void EnergySystemData::
        SkinTemperature (const SkinTemperature_optional& x)
        {
          this->SkinTemperature_ = x;
        }

        void EnergySystemData::
        SkinTemperature (::std::unique_ptr< SkinTemperature_type > x)
        {
          this->SkinTemperature_.set (std::move (x));
        }

        const EnergySystemData::SweatRate_optional& EnergySystemData::
        SweatRate () const
        {
          return this->SweatRate_;
        }

        EnergySystemData::SweatRate_optional& EnergySystemData::
        SweatRate ()
        {
          return this->SweatRate_;
        }

        void EnergySystemData::
        SweatRate (const SweatRate_type& x)
        {
          this->SweatRate_.set (x);
        }

        void EnergySystemData::
        SweatRate (const SweatRate_optional& x)
        {
          this->SweatRate_ = x;
        }

        void EnergySystemData::
        SweatRate (::std::unique_ptr< SweatRate_type > x)
        {
          this->SweatRate_.set (std::move (x));
        }

        const EnergySystemData::TotalMetabolicRate_optional& EnergySystemData::
        TotalMetabolicRate () const
        {
          return this->TotalMetabolicRate_;
        }

        EnergySystemData::TotalMetabolicRate_optional& EnergySystemData::
        TotalMetabolicRate ()
        {
          return this->TotalMetabolicRate_;
        }

        void EnergySystemData::
        TotalMetabolicRate (const TotalMetabolicRate_type& x)
        {
          this->TotalMetabolicRate_.set (x);
        }

        void EnergySystemData::
        TotalMetabolicRate (const TotalMetabolicRate_optional& x)
        {
          this->TotalMetabolicRate_ = x;
        }

        void EnergySystemData::
        TotalMetabolicRate (::std::unique_ptr< TotalMetabolicRate_type > x)
        {
          this->TotalMetabolicRate_.set (std::move (x));
        }

        const EnergySystemData::TotalWorkRateLevel_optional& EnergySystemData::
        TotalWorkRateLevel () const
        {
          return this->TotalWorkRateLevel_;
        }

        EnergySystemData::TotalWorkRateLevel_optional& EnergySystemData::
        TotalWorkRateLevel ()
        {
          return this->TotalWorkRateLevel_;
        }

        void EnergySystemData::
        TotalWorkRateLevel (const TotalWorkRateLevel_type& x)
        {
          this->TotalWorkRateLevel_.set (x);
        }

        void EnergySystemData::
        TotalWorkRateLevel (const TotalWorkRateLevel_optional& x)
        {
          this->TotalWorkRateLevel_ = x;
        }

        void EnergySystemData::
        TotalWorkRateLevel (::std::unique_ptr< TotalWorkRateLevel_type > x)
        {
          this->TotalWorkRateLevel_.set (std::move (x));
        }

        const EnergySystemData::SodiumLostToSweat_optional& EnergySystemData::
        SodiumLostToSweat () const
        {
          return this->SodiumLostToSweat_;
        }

        EnergySystemData::SodiumLostToSweat_optional& EnergySystemData::
        SodiumLostToSweat ()
        {
          return this->SodiumLostToSweat_;
        }

        void EnergySystemData::
        SodiumLostToSweat (const SodiumLostToSweat_type& x)
        {
          this->SodiumLostToSweat_.set (x);
        }

        void EnergySystemData::
        SodiumLostToSweat (const SodiumLostToSweat_optional& x)
        {
          this->SodiumLostToSweat_ = x;
        }

        void EnergySystemData::
        SodiumLostToSweat (::std::unique_ptr< SodiumLostToSweat_type > x)
        {
          this->SodiumLostToSweat_.set (std::move (x));
        }

        const EnergySystemData::PotassiumLostToSweat_optional& EnergySystemData::
        PotassiumLostToSweat () const
        {
          return this->PotassiumLostToSweat_;
        }

        EnergySystemData::PotassiumLostToSweat_optional& EnergySystemData::
        PotassiumLostToSweat ()
        {
          return this->PotassiumLostToSweat_;
        }

        void EnergySystemData::
        PotassiumLostToSweat (const PotassiumLostToSweat_type& x)
        {
          this->PotassiumLostToSweat_.set (x);
        }

        void EnergySystemData::
        PotassiumLostToSweat (const PotassiumLostToSweat_optional& x)
        {
          this->PotassiumLostToSweat_ = x;
        }

        void EnergySystemData::
        PotassiumLostToSweat (::std::unique_ptr< PotassiumLostToSweat_type > x)
        {
          this->PotassiumLostToSweat_.set (std::move (x));
        }

        const EnergySystemData::ChlorideLostToSweat_optional& EnergySystemData::
        ChlorideLostToSweat () const
        {
          return this->ChlorideLostToSweat_;
        }

        EnergySystemData::ChlorideLostToSweat_optional& EnergySystemData::
        ChlorideLostToSweat ()
        {
          return this->ChlorideLostToSweat_;
        }

        void EnergySystemData::
        ChlorideLostToSweat (const ChlorideLostToSweat_type& x)
        {
          this->ChlorideLostToSweat_.set (x);
        }

        void EnergySystemData::
        ChlorideLostToSweat (const ChlorideLostToSweat_optional& x)
        {
          this->ChlorideLostToSweat_ = x;
        }

        void EnergySystemData::
        ChlorideLostToSweat (::std::unique_ptr< ChlorideLostToSweat_type > x)
        {
          this->ChlorideLostToSweat_.set (std::move (x));
        }

        const EnergySystemData::EnergyDeficit_optional& EnergySystemData::
        EnergyDeficit () const
        {
          return this->EnergyDeficit_;
        }

        EnergySystemData::EnergyDeficit_optional& EnergySystemData::
        EnergyDeficit ()
        {
          return this->EnergyDeficit_;
        }

        void EnergySystemData::
        EnergyDeficit (const EnergyDeficit_type& x)
        {
          this->EnergyDeficit_.set (x);
        }

        void EnergySystemData::
        EnergyDeficit (const EnergyDeficit_optional& x)
        {
          this->EnergyDeficit_ = x;
        }

        void EnergySystemData::
        EnergyDeficit (::std::unique_ptr< EnergyDeficit_type > x)
        {
          this->EnergyDeficit_.set (std::move (x));
        }


        // DrugTransitStateData
        // 

        const DrugTransitStateData::LumenSolidMasses_sequence& DrugTransitStateData::
        LumenSolidMasses () const
        {
          return this->LumenSolidMasses_;
        }

        DrugTransitStateData::LumenSolidMasses_sequence& DrugTransitStateData::
        LumenSolidMasses ()
        {
          return this->LumenSolidMasses_;
        }

        void DrugTransitStateData::
        LumenSolidMasses (const LumenSolidMasses_sequence& s)
        {
          this->LumenSolidMasses_ = s;
        }

        const DrugTransitStateData::LumenDissolvedMasses_sequence& DrugTransitStateData::
        LumenDissolvedMasses () const
        {
          return this->LumenDissolvedMasses_;
        }

        DrugTransitStateData::LumenDissolvedMasses_sequence& DrugTransitStateData::
        LumenDissolvedMasses ()
        {
          return this->LumenDissolvedMasses_;
        }

        void DrugTransitStateData::
        LumenDissolvedMasses (const LumenDissolvedMasses_sequence& s)
        {
          this->LumenDissolvedMasses_ = s;
        }

        const DrugTransitStateData::EnterocyteMasses_sequence& DrugTransitStateData::
        EnterocyteMasses () const
        {
          return this->EnterocyteMasses_;
        }

        DrugTransitStateData::EnterocyteMasses_sequence& DrugTransitStateData::
        EnterocyteMasses ()
        {
          return this->EnterocyteMasses_;
        }

        void DrugTransitStateData::
        EnterocyteMasses (const EnterocyteMasses_sequence& s)
        {
          this->EnterocyteMasses_ = s;
        }

        const DrugTransitStateData::MassMetabolized_type& DrugTransitStateData::
        MassMetabolized () const
        {
          return this->MassMetabolized_.get ();
        }

        DrugTransitStateData::MassMetabolized_type& DrugTransitStateData::
        MassMetabolized ()
        {
          return this->MassMetabolized_.get ();
        }

        void DrugTransitStateData::
        MassMetabolized (const MassMetabolized_type& x)
        {
          this->MassMetabolized_.set (x);
        }

        void DrugTransitStateData::
        MassMetabolized (::std::unique_ptr< MassMetabolized_type > x)
        {
          this->MassMetabolized_.set (std::move (x));
        }

        const DrugTransitStateData::MassExcreted_type& DrugTransitStateData::
        MassExcreted () const
        {
          return this->MassExcreted_.get ();
        }

        DrugTransitStateData::MassExcreted_type& DrugTransitStateData::
        MassExcreted ()
        {
          return this->MassExcreted_.get ();
        }

        void DrugTransitStateData::
        MassExcreted (const MassExcreted_type& x)
        {
          this->MassExcreted_.set (x);
        }

        void DrugTransitStateData::
        MassExcreted (::std::unique_ptr< MassExcreted_type > x)
        {
          this->MassExcreted_.set (std::move (x));
        }

        const DrugTransitStateData::Substance_type& DrugTransitStateData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        DrugTransitStateData::Substance_type& DrugTransitStateData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void DrugTransitStateData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void DrugTransitStateData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // GastrointestinalSystemData
        // 

        const GastrointestinalSystemData::ChymeAbsorptionRate_optional& GastrointestinalSystemData::
        ChymeAbsorptionRate () const
        {
          return this->ChymeAbsorptionRate_;
        }

        GastrointestinalSystemData::ChymeAbsorptionRate_optional& GastrointestinalSystemData::
        ChymeAbsorptionRate ()
        {
          return this->ChymeAbsorptionRate_;
        }

        void GastrointestinalSystemData::
        ChymeAbsorptionRate (const ChymeAbsorptionRate_type& x)
        {
          this->ChymeAbsorptionRate_.set (x);
        }

        void GastrointestinalSystemData::
        ChymeAbsorptionRate (const ChymeAbsorptionRate_optional& x)
        {
          this->ChymeAbsorptionRate_ = x;
        }

        void GastrointestinalSystemData::
        ChymeAbsorptionRate (::std::unique_ptr< ChymeAbsorptionRate_type > x)
        {
          this->ChymeAbsorptionRate_.set (std::move (x));
        }

        const GastrointestinalSystemData::StomachContents_optional& GastrointestinalSystemData::
        StomachContents () const
        {
          return this->StomachContents_;
        }

        GastrointestinalSystemData::StomachContents_optional& GastrointestinalSystemData::
        StomachContents ()
        {
          return this->StomachContents_;
        }

        void GastrointestinalSystemData::
        StomachContents (const StomachContents_type& x)
        {
          this->StomachContents_.set (x);
        }

        void GastrointestinalSystemData::
        StomachContents (const StomachContents_optional& x)
        {
          this->StomachContents_ = x;
        }

        void GastrointestinalSystemData::
        StomachContents (::std::unique_ptr< StomachContents_type > x)
        {
          this->StomachContents_.set (std::move (x));
        }

        const GastrointestinalSystemData::DrugTransitStates_sequence& GastrointestinalSystemData::
        DrugTransitStates () const
        {
          return this->DrugTransitStates_;
        }

        GastrointestinalSystemData::DrugTransitStates_sequence& GastrointestinalSystemData::
        DrugTransitStates ()
        {
          return this->DrugTransitStates_;
        }

        void GastrointestinalSystemData::
        DrugTransitStates (const DrugTransitStates_sequence& s)
        {
          this->DrugTransitStates_ = s;
        }


        // HepaticSystemData
        // 

        const HepaticSystemData::KetoneProductionRate_optional& HepaticSystemData::
        KetoneProductionRate () const
        {
          return this->KetoneProductionRate_;
        }

        HepaticSystemData::KetoneProductionRate_optional& HepaticSystemData::
        KetoneProductionRate ()
        {
          return this->KetoneProductionRate_;
        }

        void HepaticSystemData::
        KetoneProductionRate (const KetoneProductionRate_type& x)
        {
          this->KetoneProductionRate_.set (x);
        }

        void HepaticSystemData::
        KetoneProductionRate (const KetoneProductionRate_optional& x)
        {
          this->KetoneProductionRate_ = x;
        }

        void HepaticSystemData::
        KetoneProductionRate (::std::unique_ptr< KetoneProductionRate_type > x)
        {
          this->KetoneProductionRate_.set (std::move (x));
        }

        const HepaticSystemData::HepaticGluconeogenesisRate_optional& HepaticSystemData::
        HepaticGluconeogenesisRate () const
        {
          return this->HepaticGluconeogenesisRate_;
        }

        HepaticSystemData::HepaticGluconeogenesisRate_optional& HepaticSystemData::
        HepaticGluconeogenesisRate ()
        {
          return this->HepaticGluconeogenesisRate_;
        }

        void HepaticSystemData::
        HepaticGluconeogenesisRate (const HepaticGluconeogenesisRate_type& x)
        {
          this->HepaticGluconeogenesisRate_.set (x);
        }

        void HepaticSystemData::
        HepaticGluconeogenesisRate (const HepaticGluconeogenesisRate_optional& x)
        {
          this->HepaticGluconeogenesisRate_ = x;
        }

        void HepaticSystemData::
        HepaticGluconeogenesisRate (::std::unique_ptr< HepaticGluconeogenesisRate_type > x)
        {
          this->HepaticGluconeogenesisRate_.set (std::move (x));
        }


        // enumSleepState
        // 

        enumSleepState::
        enumSleepState ()
        : ::xml_schema::string ()
        {
        }

        enumSleepState::
        enumSleepState (value v)
        : ::xml_schema::string (_xsd_enumSleepState_literals_[v])
        {
        }

        enumSleepState::
        enumSleepState (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumSleepState::
        enumSleepState (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSleepState::
        enumSleepState (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSleepState::
        enumSleepState (const enumSleepState& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumSleepState& enumSleepState::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumSleepState_literals_[v]);

          return *this;
        }


        // NervousSystemData
        // 

        const NervousSystemData::HeartRateScale_optional& NervousSystemData::
        HeartRateScale () const
        {
          return this->HeartRateScale_;
        }

        NervousSystemData::HeartRateScale_optional& NervousSystemData::
        HeartRateScale ()
        {
          return this->HeartRateScale_;
        }

        void NervousSystemData::
        HeartRateScale (const HeartRateScale_type& x)
        {
          this->HeartRateScale_.set (x);
        }

        void NervousSystemData::
        HeartRateScale (const HeartRateScale_optional& x)
        {
          this->HeartRateScale_ = x;
        }

        void NervousSystemData::
        HeartRateScale (::std::unique_ptr< HeartRateScale_type > x)
        {
          this->HeartRateScale_.set (std::move (x));
        }

        const NervousSystemData::HeartElastanceScale_optional& NervousSystemData::
        HeartElastanceScale () const
        {
          return this->HeartElastanceScale_;
        }

        NervousSystemData::HeartElastanceScale_optional& NervousSystemData::
        HeartElastanceScale ()
        {
          return this->HeartElastanceScale_;
        }

        void NervousSystemData::
        HeartElastanceScale (const HeartElastanceScale_type& x)
        {
          this->HeartElastanceScale_.set (x);
        }

        void NervousSystemData::
        HeartElastanceScale (const HeartElastanceScale_optional& x)
        {
          this->HeartElastanceScale_ = x;
        }

        void NervousSystemData::
        HeartElastanceScale (::std::unique_ptr< HeartElastanceScale_type > x)
        {
          this->HeartElastanceScale_.set (std::move (x));
        }

        const NervousSystemData::ResistanceScaleExtrasplanchnic_optional& NervousSystemData::
        ResistanceScaleExtrasplanchnic () const
        {
          return this->ResistanceScaleExtrasplanchnic_;
        }

        NervousSystemData::ResistanceScaleExtrasplanchnic_optional& NervousSystemData::
        ResistanceScaleExtrasplanchnic ()
        {
          return this->ResistanceScaleExtrasplanchnic_;
        }

        void NervousSystemData::
        ResistanceScaleExtrasplanchnic (const ResistanceScaleExtrasplanchnic_type& x)
        {
          this->ResistanceScaleExtrasplanchnic_.set (x);
        }

        void NervousSystemData::
        ResistanceScaleExtrasplanchnic (const ResistanceScaleExtrasplanchnic_optional& x)
        {
          this->ResistanceScaleExtrasplanchnic_ = x;
        }

        void NervousSystemData::
        ResistanceScaleExtrasplanchnic (::std::unique_ptr< ResistanceScaleExtrasplanchnic_type > x)
        {
          this->ResistanceScaleExtrasplanchnic_.set (std::move (x));
        }

        const NervousSystemData::ResistanceScaleMuscle_optional& NervousSystemData::
        ResistanceScaleMuscle () const
        {
          return this->ResistanceScaleMuscle_;
        }

        NervousSystemData::ResistanceScaleMuscle_optional& NervousSystemData::
        ResistanceScaleMuscle ()
        {
          return this->ResistanceScaleMuscle_;
        }

        void NervousSystemData::
        ResistanceScaleMuscle (const ResistanceScaleMuscle_type& x)
        {
          this->ResistanceScaleMuscle_.set (x);
        }

        void NervousSystemData::
        ResistanceScaleMuscle (const ResistanceScaleMuscle_optional& x)
        {
          this->ResistanceScaleMuscle_ = x;
        }

        void NervousSystemData::
        ResistanceScaleMuscle (::std::unique_ptr< ResistanceScaleMuscle_type > x)
        {
          this->ResistanceScaleMuscle_.set (std::move (x));
        }

        const NervousSystemData::ResistanceScaleMyocardium_optional& NervousSystemData::
        ResistanceScaleMyocardium () const
        {
          return this->ResistanceScaleMyocardium_;
        }

        NervousSystemData::ResistanceScaleMyocardium_optional& NervousSystemData::
        ResistanceScaleMyocardium ()
        {
          return this->ResistanceScaleMyocardium_;
        }

        void NervousSystemData::
        ResistanceScaleMyocardium (const ResistanceScaleMyocardium_type& x)
        {
          this->ResistanceScaleMyocardium_.set (x);
        }

        void NervousSystemData::
        ResistanceScaleMyocardium (const ResistanceScaleMyocardium_optional& x)
        {
          this->ResistanceScaleMyocardium_ = x;
        }

        void NervousSystemData::
        ResistanceScaleMyocardium (::std::unique_ptr< ResistanceScaleMyocardium_type > x)
        {
          this->ResistanceScaleMyocardium_.set (std::move (x));
        }

        const NervousSystemData::ResistanceScaleSplanchnic_optional& NervousSystemData::
        ResistanceScaleSplanchnic () const
        {
          return this->ResistanceScaleSplanchnic_;
        }

        NervousSystemData::ResistanceScaleSplanchnic_optional& NervousSystemData::
        ResistanceScaleSplanchnic ()
        {
          return this->ResistanceScaleSplanchnic_;
        }

        void NervousSystemData::
        ResistanceScaleSplanchnic (const ResistanceScaleSplanchnic_type& x)
        {
          this->ResistanceScaleSplanchnic_.set (x);
        }

        void NervousSystemData::
        ResistanceScaleSplanchnic (const ResistanceScaleSplanchnic_optional& x)
        {
          this->ResistanceScaleSplanchnic_ = x;
        }

        void NervousSystemData::
        ResistanceScaleSplanchnic (::std::unique_ptr< ResistanceScaleSplanchnic_type > x)
        {
          this->ResistanceScaleSplanchnic_.set (std::move (x));
        }

        const NervousSystemData::ComplianceScale_optional& NervousSystemData::
        ComplianceScale () const
        {
          return this->ComplianceScale_;
        }

        NervousSystemData::ComplianceScale_optional& NervousSystemData::
        ComplianceScale ()
        {
          return this->ComplianceScale_;
        }

        void NervousSystemData::
        ComplianceScale (const ComplianceScale_type& x)
        {
          this->ComplianceScale_.set (x);
        }

        void NervousSystemData::
        ComplianceScale (const ComplianceScale_optional& x)
        {
          this->ComplianceScale_ = x;
        }

        void NervousSystemData::
        ComplianceScale (::std::unique_ptr< ComplianceScale_type > x)
        {
          this->ComplianceScale_.set (std::move (x));
        }

        const NervousSystemData::LeftEyePupillaryResponse_optional& NervousSystemData::
        LeftEyePupillaryResponse () const
        {
          return this->LeftEyePupillaryResponse_;
        }

        NervousSystemData::LeftEyePupillaryResponse_optional& NervousSystemData::
        LeftEyePupillaryResponse ()
        {
          return this->LeftEyePupillaryResponse_;
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (const LeftEyePupillaryResponse_type& x)
        {
          this->LeftEyePupillaryResponse_.set (x);
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (const LeftEyePupillaryResponse_optional& x)
        {
          this->LeftEyePupillaryResponse_ = x;
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (::std::unique_ptr< LeftEyePupillaryResponse_type > x)
        {
          this->LeftEyePupillaryResponse_.set (std::move (x));
        }

        const NervousSystemData::PainVisualAnalogueScale_optional& NervousSystemData::
        PainVisualAnalogueScale () const
        {
          return this->PainVisualAnalogueScale_;
        }

        NervousSystemData::PainVisualAnalogueScale_optional& NervousSystemData::
        PainVisualAnalogueScale ()
        {
          return this->PainVisualAnalogueScale_;
        }

        void NervousSystemData::
        PainVisualAnalogueScale (const PainVisualAnalogueScale_type& x)
        {
          this->PainVisualAnalogueScale_.set (x);
        }

        void NervousSystemData::
        PainVisualAnalogueScale (const PainVisualAnalogueScale_optional& x)
        {
          this->PainVisualAnalogueScale_ = x;
        }

        void NervousSystemData::
        PainVisualAnalogueScale (::std::unique_ptr< PainVisualAnalogueScale_type > x)
        {
          this->PainVisualAnalogueScale_.set (std::move (x));
        }

        const NervousSystemData::RichmondAgitationSedationScale_optional& NervousSystemData::
        RichmondAgitationSedationScale () const
        {
          return this->RichmondAgitationSedationScale_;
        }

        NervousSystemData::RichmondAgitationSedationScale_optional& NervousSystemData::
        RichmondAgitationSedationScale ()
        {
          return this->RichmondAgitationSedationScale_;
        }

        void NervousSystemData::
        RichmondAgitationSedationScale (const RichmondAgitationSedationScale_type& x)
        {
          this->RichmondAgitationSedationScale_.set (x);
        }

        void NervousSystemData::
        RichmondAgitationSedationScale (const RichmondAgitationSedationScale_optional& x)
        {
          this->RichmondAgitationSedationScale_ = x;
        }

        void NervousSystemData::
        RichmondAgitationSedationScale (::std::unique_ptr< RichmondAgitationSedationScale_type > x)
        {
          this->RichmondAgitationSedationScale_.set (std::move (x));
        }

        const NervousSystemData::RightEyePupillaryResponse_optional& NervousSystemData::
        RightEyePupillaryResponse () const
        {
          return this->RightEyePupillaryResponse_;
        }

        NervousSystemData::RightEyePupillaryResponse_optional& NervousSystemData::
        RightEyePupillaryResponse ()
        {
          return this->RightEyePupillaryResponse_;
        }

        void NervousSystemData::
        RightEyePupillaryResponse (const RightEyePupillaryResponse_type& x)
        {
          this->RightEyePupillaryResponse_.set (x);
        }

        void NervousSystemData::
        RightEyePupillaryResponse (const RightEyePupillaryResponse_optional& x)
        {
          this->RightEyePupillaryResponse_ = x;
        }

        void NervousSystemData::
        RightEyePupillaryResponse (::std::unique_ptr< RightEyePupillaryResponse_type > x)
        {
          this->RightEyePupillaryResponse_.set (std::move (x));
        }

        const NervousSystemData::SleepTime_optional& NervousSystemData::
        SleepTime () const
        {
          return this->SleepTime_;
        }

        NervousSystemData::SleepTime_optional& NervousSystemData::
        SleepTime ()
        {
          return this->SleepTime_;
        }

        void NervousSystemData::
        SleepTime (const SleepTime_type& x)
        {
          this->SleepTime_.set (x);
        }

        void NervousSystemData::
        SleepTime (const SleepTime_optional& x)
        {
          this->SleepTime_ = x;
        }

        void NervousSystemData::
        SleepTime (::std::unique_ptr< SleepTime_type > x)
        {
          this->SleepTime_.set (std::move (x));
        }

        const NervousSystemData::SleepState_optional& NervousSystemData::
        SleepState () const
        {
          return this->SleepState_;
        }

        NervousSystemData::SleepState_optional& NervousSystemData::
        SleepState ()
        {
          return this->SleepState_;
        }

        void NervousSystemData::
        SleepState (const SleepState_type& x)
        {
          this->SleepState_.set (x);
        }

        void NervousSystemData::
        SleepState (const SleepState_optional& x)
        {
          this->SleepState_ = x;
        }

        void NervousSystemData::
        SleepState (::std::unique_ptr< SleepState_type > x)
        {
          this->SleepState_.set (std::move (x));
        }

        const NervousSystemData::WakeTime_optional& NervousSystemData::
        WakeTime () const
        {
          return this->WakeTime_;
        }

        NervousSystemData::WakeTime_optional& NervousSystemData::
        WakeTime ()
        {
          return this->WakeTime_;
        }

        void NervousSystemData::
        WakeTime (const WakeTime_type& x)
        {
          this->WakeTime_.set (x);
        }

        void NervousSystemData::
        WakeTime (const WakeTime_optional& x)
        {
          this->WakeTime_ = x;
        }

        void NervousSystemData::
        WakeTime (::std::unique_ptr< WakeTime_type > x)
        {
          this->WakeTime_.set (std::move (x));
        }

        const NervousSystemData::BiologicalDebt_optional& NervousSystemData::
        BiologicalDebt () const
        {
          return this->BiologicalDebt_;
        }

        NervousSystemData::BiologicalDebt_optional& NervousSystemData::
        BiologicalDebt ()
        {
          return this->BiologicalDebt_;
        }

        void NervousSystemData::
        BiologicalDebt (const BiologicalDebt_type& x)
        {
          this->BiologicalDebt_.set (x);
        }

        void NervousSystemData::
        BiologicalDebt (const BiologicalDebt_optional& x)
        {
          this->BiologicalDebt_ = x;
        }

        void NervousSystemData::
        BiologicalDebt (::std::unique_ptr< BiologicalDebt_type > x)
        {
          this->BiologicalDebt_.set (std::move (x));
        }

        const NervousSystemData::ReactionTime_optional& NervousSystemData::
        ReactionTime () const
        {
          return this->ReactionTime_;
        }

        NervousSystemData::ReactionTime_optional& NervousSystemData::
        ReactionTime ()
        {
          return this->ReactionTime_;
        }

        void NervousSystemData::
        ReactionTime (const ReactionTime_type& x)
        {
          this->ReactionTime_.set (x);
        }

        void NervousSystemData::
        ReactionTime (const ReactionTime_optional& x)
        {
          this->ReactionTime_ = x;
        }

        void NervousSystemData::
        ReactionTime (::std::unique_ptr< ReactionTime_type > x)
        {
          this->ReactionTime_.set (std::move (x));
        }

        const NervousSystemData::AttentionLapses_optional& NervousSystemData::
        AttentionLapses () const
        {
          return this->AttentionLapses_;
        }

        NervousSystemData::AttentionLapses_optional& NervousSystemData::
        AttentionLapses ()
        {
          return this->AttentionLapses_;
        }

        void NervousSystemData::
        AttentionLapses (const AttentionLapses_type& x)
        {
          this->AttentionLapses_.set (x);
        }

        void NervousSystemData::
        AttentionLapses (const AttentionLapses_optional& x)
        {
          this->AttentionLapses_ = x;
        }

        void NervousSystemData::
        AttentionLapses (::std::unique_ptr< AttentionLapses_type > x)
        {
          this->AttentionLapses_.set (std::move (x));
        }


        // RenalSystemData
        // 

        const RenalSystemData::FiltrationFraction_optional& RenalSystemData::
        FiltrationFraction () const
        {
          return this->FiltrationFraction_;
        }

        RenalSystemData::FiltrationFraction_optional& RenalSystemData::
        FiltrationFraction ()
        {
          return this->FiltrationFraction_;
        }

        void RenalSystemData::
        FiltrationFraction (const FiltrationFraction_type& x)
        {
          this->FiltrationFraction_.set (x);
        }

        void RenalSystemData::
        FiltrationFraction (const FiltrationFraction_optional& x)
        {
          this->FiltrationFraction_ = x;
        }

        void RenalSystemData::
        FiltrationFraction (::std::unique_ptr< FiltrationFraction_type > x)
        {
          this->FiltrationFraction_.set (std::move (x));
        }

        const RenalSystemData::GlomerularFiltrationRate_optional& RenalSystemData::
        GlomerularFiltrationRate () const
        {
          return this->GlomerularFiltrationRate_;
        }

        RenalSystemData::GlomerularFiltrationRate_optional& RenalSystemData::
        GlomerularFiltrationRate ()
        {
          return this->GlomerularFiltrationRate_;
        }

        void RenalSystemData::
        GlomerularFiltrationRate (const GlomerularFiltrationRate_type& x)
        {
          this->GlomerularFiltrationRate_.set (x);
        }

        void RenalSystemData::
        GlomerularFiltrationRate (const GlomerularFiltrationRate_optional& x)
        {
          this->GlomerularFiltrationRate_ = x;
        }

        void RenalSystemData::
        GlomerularFiltrationRate (::std::unique_ptr< GlomerularFiltrationRate_type > x)
        {
          this->GlomerularFiltrationRate_.set (std::move (x));
        }

        const RenalSystemData::LeftAfferentArterioleResistance_optional& RenalSystemData::
        LeftAfferentArterioleResistance () const
        {
          return this->LeftAfferentArterioleResistance_;
        }

        RenalSystemData::LeftAfferentArterioleResistance_optional& RenalSystemData::
        LeftAfferentArterioleResistance ()
        {
          return this->LeftAfferentArterioleResistance_;
        }

        void RenalSystemData::
        LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_type& x)
        {
          this->LeftAfferentArterioleResistance_.set (x);
        }

        void RenalSystemData::
        LeftAfferentArterioleResistance (const LeftAfferentArterioleResistance_optional& x)
        {
          this->LeftAfferentArterioleResistance_ = x;
        }

        void RenalSystemData::
        LeftAfferentArterioleResistance (::std::unique_ptr< LeftAfferentArterioleResistance_type > x)
        {
          this->LeftAfferentArterioleResistance_.set (std::move (x));
        }

        const RenalSystemData::LeftBowmansCapsulesHydrostaticPressure_optional& RenalSystemData::
        LeftBowmansCapsulesHydrostaticPressure () const
        {
          return this->LeftBowmansCapsulesHydrostaticPressure_;
        }

        RenalSystemData::LeftBowmansCapsulesHydrostaticPressure_optional& RenalSystemData::
        LeftBowmansCapsulesHydrostaticPressure ()
        {
          return this->LeftBowmansCapsulesHydrostaticPressure_;
        }

        void RenalSystemData::
        LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_type& x)
        {
          this->LeftBowmansCapsulesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        LeftBowmansCapsulesHydrostaticPressure (const LeftBowmansCapsulesHydrostaticPressure_optional& x)
        {
          this->LeftBowmansCapsulesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        LeftBowmansCapsulesHydrostaticPressure (::std::unique_ptr< LeftBowmansCapsulesHydrostaticPressure_type > x)
        {
          this->LeftBowmansCapsulesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftBowmansCapsulesOsmoticPressure_optional& RenalSystemData::
        LeftBowmansCapsulesOsmoticPressure () const
        {
          return this->LeftBowmansCapsulesOsmoticPressure_;
        }

        RenalSystemData::LeftBowmansCapsulesOsmoticPressure_optional& RenalSystemData::
        LeftBowmansCapsulesOsmoticPressure ()
        {
          return this->LeftBowmansCapsulesOsmoticPressure_;
        }

        void RenalSystemData::
        LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_type& x)
        {
          this->LeftBowmansCapsulesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        LeftBowmansCapsulesOsmoticPressure (const LeftBowmansCapsulesOsmoticPressure_optional& x)
        {
          this->LeftBowmansCapsulesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        LeftBowmansCapsulesOsmoticPressure (::std::unique_ptr< LeftBowmansCapsulesOsmoticPressure_type > x)
        {
          this->LeftBowmansCapsulesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftEfferentArterioleResistance_optional& RenalSystemData::
        LeftEfferentArterioleResistance () const
        {
          return this->LeftEfferentArterioleResistance_;
        }

        RenalSystemData::LeftEfferentArterioleResistance_optional& RenalSystemData::
        LeftEfferentArterioleResistance ()
        {
          return this->LeftEfferentArterioleResistance_;
        }

        void RenalSystemData::
        LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_type& x)
        {
          this->LeftEfferentArterioleResistance_.set (x);
        }

        void RenalSystemData::
        LeftEfferentArterioleResistance (const LeftEfferentArterioleResistance_optional& x)
        {
          this->LeftEfferentArterioleResistance_ = x;
        }

        void RenalSystemData::
        LeftEfferentArterioleResistance (::std::unique_ptr< LeftEfferentArterioleResistance_type > x)
        {
          this->LeftEfferentArterioleResistance_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularCapillariesHydrostaticPressure_optional& RenalSystemData::
        LeftGlomerularCapillariesHydrostaticPressure () const
        {
          return this->LeftGlomerularCapillariesHydrostaticPressure_;
        }

        RenalSystemData::LeftGlomerularCapillariesHydrostaticPressure_optional& RenalSystemData::
        LeftGlomerularCapillariesHydrostaticPressure ()
        {
          return this->LeftGlomerularCapillariesHydrostaticPressure_;
        }

        void RenalSystemData::
        LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_type& x)
        {
          this->LeftGlomerularCapillariesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularCapillariesHydrostaticPressure (const LeftGlomerularCapillariesHydrostaticPressure_optional& x)
        {
          this->LeftGlomerularCapillariesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        LeftGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< LeftGlomerularCapillariesHydrostaticPressure_type > x)
        {
          this->LeftGlomerularCapillariesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularCapillariesOsmoticPressure_optional& RenalSystemData::
        LeftGlomerularCapillariesOsmoticPressure () const
        {
          return this->LeftGlomerularCapillariesOsmoticPressure_;
        }

        RenalSystemData::LeftGlomerularCapillariesOsmoticPressure_optional& RenalSystemData::
        LeftGlomerularCapillariesOsmoticPressure ()
        {
          return this->LeftGlomerularCapillariesOsmoticPressure_;
        }

        void RenalSystemData::
        LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_type& x)
        {
          this->LeftGlomerularCapillariesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularCapillariesOsmoticPressure (const LeftGlomerularCapillariesOsmoticPressure_optional& x)
        {
          this->LeftGlomerularCapillariesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        LeftGlomerularCapillariesOsmoticPressure (::std::unique_ptr< LeftGlomerularCapillariesOsmoticPressure_type > x)
        {
          this->LeftGlomerularCapillariesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularFiltrationCoefficient_optional& RenalSystemData::
        LeftGlomerularFiltrationCoefficient () const
        {
          return this->LeftGlomerularFiltrationCoefficient_;
        }

        RenalSystemData::LeftGlomerularFiltrationCoefficient_optional& RenalSystemData::
        LeftGlomerularFiltrationCoefficient ()
        {
          return this->LeftGlomerularFiltrationCoefficient_;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_type& x)
        {
          this->LeftGlomerularFiltrationCoefficient_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularFiltrationCoefficient (const LeftGlomerularFiltrationCoefficient_optional& x)
        {
          this->LeftGlomerularFiltrationCoefficient_ = x;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationCoefficient (::std::unique_ptr< LeftGlomerularFiltrationCoefficient_type > x)
        {
          this->LeftGlomerularFiltrationCoefficient_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularFiltrationRate_optional& RenalSystemData::
        LeftGlomerularFiltrationRate () const
        {
          return this->LeftGlomerularFiltrationRate_;
        }

        RenalSystemData::LeftGlomerularFiltrationRate_optional& RenalSystemData::
        LeftGlomerularFiltrationRate ()
        {
          return this->LeftGlomerularFiltrationRate_;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_type& x)
        {
          this->LeftGlomerularFiltrationRate_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularFiltrationRate (const LeftGlomerularFiltrationRate_optional& x)
        {
          this->LeftGlomerularFiltrationRate_ = x;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationRate (::std::unique_ptr< LeftGlomerularFiltrationRate_type > x)
        {
          this->LeftGlomerularFiltrationRate_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularFiltrationSurfaceArea_optional& RenalSystemData::
        LeftGlomerularFiltrationSurfaceArea () const
        {
          return this->LeftGlomerularFiltrationSurfaceArea_;
        }

        RenalSystemData::LeftGlomerularFiltrationSurfaceArea_optional& RenalSystemData::
        LeftGlomerularFiltrationSurfaceArea ()
        {
          return this->LeftGlomerularFiltrationSurfaceArea_;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_type& x)
        {
          this->LeftGlomerularFiltrationSurfaceArea_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularFiltrationSurfaceArea (const LeftGlomerularFiltrationSurfaceArea_optional& x)
        {
          this->LeftGlomerularFiltrationSurfaceArea_ = x;
        }

        void RenalSystemData::
        LeftGlomerularFiltrationSurfaceArea (::std::unique_ptr< LeftGlomerularFiltrationSurfaceArea_type > x)
        {
          this->LeftGlomerularFiltrationSurfaceArea_.set (std::move (x));
        }

        const RenalSystemData::LeftGlomerularFluidPermeability_optional& RenalSystemData::
        LeftGlomerularFluidPermeability () const
        {
          return this->LeftGlomerularFluidPermeability_;
        }

        RenalSystemData::LeftGlomerularFluidPermeability_optional& RenalSystemData::
        LeftGlomerularFluidPermeability ()
        {
          return this->LeftGlomerularFluidPermeability_;
        }

        void RenalSystemData::
        LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_type& x)
        {
          this->LeftGlomerularFluidPermeability_.set (x);
        }

        void RenalSystemData::
        LeftGlomerularFluidPermeability (const LeftGlomerularFluidPermeability_optional& x)
        {
          this->LeftGlomerularFluidPermeability_ = x;
        }

        void RenalSystemData::
        LeftGlomerularFluidPermeability (::std::unique_ptr< LeftGlomerularFluidPermeability_type > x)
        {
          this->LeftGlomerularFluidPermeability_.set (std::move (x));
        }

        const RenalSystemData::LeftFiltrationFraction_optional& RenalSystemData::
        LeftFiltrationFraction () const
        {
          return this->LeftFiltrationFraction_;
        }

        RenalSystemData::LeftFiltrationFraction_optional& RenalSystemData::
        LeftFiltrationFraction ()
        {
          return this->LeftFiltrationFraction_;
        }

        void RenalSystemData::
        LeftFiltrationFraction (const LeftFiltrationFraction_type& x)
        {
          this->LeftFiltrationFraction_.set (x);
        }

        void RenalSystemData::
        LeftFiltrationFraction (const LeftFiltrationFraction_optional& x)
        {
          this->LeftFiltrationFraction_ = x;
        }

        void RenalSystemData::
        LeftFiltrationFraction (::std::unique_ptr< LeftFiltrationFraction_type > x)
        {
          this->LeftFiltrationFraction_.set (std::move (x));
        }

        const RenalSystemData::LeftNetFiltrationPressure_optional& RenalSystemData::
        LeftNetFiltrationPressure () const
        {
          return this->LeftNetFiltrationPressure_;
        }

        RenalSystemData::LeftNetFiltrationPressure_optional& RenalSystemData::
        LeftNetFiltrationPressure ()
        {
          return this->LeftNetFiltrationPressure_;
        }

        void RenalSystemData::
        LeftNetFiltrationPressure (const LeftNetFiltrationPressure_type& x)
        {
          this->LeftNetFiltrationPressure_.set (x);
        }

        void RenalSystemData::
        LeftNetFiltrationPressure (const LeftNetFiltrationPressure_optional& x)
        {
          this->LeftNetFiltrationPressure_ = x;
        }

        void RenalSystemData::
        LeftNetFiltrationPressure (::std::unique_ptr< LeftNetFiltrationPressure_type > x)
        {
          this->LeftNetFiltrationPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftNetReabsorptionPressure_optional& RenalSystemData::
        LeftNetReabsorptionPressure () const
        {
          return this->LeftNetReabsorptionPressure_;
        }

        RenalSystemData::LeftNetReabsorptionPressure_optional& RenalSystemData::
        LeftNetReabsorptionPressure ()
        {
          return this->LeftNetReabsorptionPressure_;
        }

        void RenalSystemData::
        LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_type& x)
        {
          this->LeftNetReabsorptionPressure_.set (x);
        }

        void RenalSystemData::
        LeftNetReabsorptionPressure (const LeftNetReabsorptionPressure_optional& x)
        {
          this->LeftNetReabsorptionPressure_ = x;
        }

        void RenalSystemData::
        LeftNetReabsorptionPressure (::std::unique_ptr< LeftNetReabsorptionPressure_type > x)
        {
          this->LeftNetReabsorptionPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftPeritubularCapillariesHydrostaticPressure_optional& RenalSystemData::
        LeftPeritubularCapillariesHydrostaticPressure () const
        {
          return this->LeftPeritubularCapillariesHydrostaticPressure_;
        }

        RenalSystemData::LeftPeritubularCapillariesHydrostaticPressure_optional& RenalSystemData::
        LeftPeritubularCapillariesHydrostaticPressure ()
        {
          return this->LeftPeritubularCapillariesHydrostaticPressure_;
        }

        void RenalSystemData::
        LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_type& x)
        {
          this->LeftPeritubularCapillariesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        LeftPeritubularCapillariesHydrostaticPressure (const LeftPeritubularCapillariesHydrostaticPressure_optional& x)
        {
          this->LeftPeritubularCapillariesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        LeftPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< LeftPeritubularCapillariesHydrostaticPressure_type > x)
        {
          this->LeftPeritubularCapillariesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftPeritubularCapillariesOsmoticPressure_optional& RenalSystemData::
        LeftPeritubularCapillariesOsmoticPressure () const
        {
          return this->LeftPeritubularCapillariesOsmoticPressure_;
        }

        RenalSystemData::LeftPeritubularCapillariesOsmoticPressure_optional& RenalSystemData::
        LeftPeritubularCapillariesOsmoticPressure ()
        {
          return this->LeftPeritubularCapillariesOsmoticPressure_;
        }

        void RenalSystemData::
        LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_type& x)
        {
          this->LeftPeritubularCapillariesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        LeftPeritubularCapillariesOsmoticPressure (const LeftPeritubularCapillariesOsmoticPressure_optional& x)
        {
          this->LeftPeritubularCapillariesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        LeftPeritubularCapillariesOsmoticPressure (::std::unique_ptr< LeftPeritubularCapillariesOsmoticPressure_type > x)
        {
          this->LeftPeritubularCapillariesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftReabsorptionFiltrationCoefficient_optional& RenalSystemData::
        LeftReabsorptionFiltrationCoefficient () const
        {
          return this->LeftReabsorptionFiltrationCoefficient_;
        }

        RenalSystemData::LeftReabsorptionFiltrationCoefficient_optional& RenalSystemData::
        LeftReabsorptionFiltrationCoefficient ()
        {
          return this->LeftReabsorptionFiltrationCoefficient_;
        }

        void RenalSystemData::
        LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_type& x)
        {
          this->LeftReabsorptionFiltrationCoefficient_.set (x);
        }

        void RenalSystemData::
        LeftReabsorptionFiltrationCoefficient (const LeftReabsorptionFiltrationCoefficient_optional& x)
        {
          this->LeftReabsorptionFiltrationCoefficient_ = x;
        }

        void RenalSystemData::
        LeftReabsorptionFiltrationCoefficient (::std::unique_ptr< LeftReabsorptionFiltrationCoefficient_type > x)
        {
          this->LeftReabsorptionFiltrationCoefficient_.set (std::move (x));
        }

        const RenalSystemData::LeftReabsorptionRate_optional& RenalSystemData::
        LeftReabsorptionRate () const
        {
          return this->LeftReabsorptionRate_;
        }

        RenalSystemData::LeftReabsorptionRate_optional& RenalSystemData::
        LeftReabsorptionRate ()
        {
          return this->LeftReabsorptionRate_;
        }

        void RenalSystemData::
        LeftReabsorptionRate (const LeftReabsorptionRate_type& x)
        {
          this->LeftReabsorptionRate_.set (x);
        }

        void RenalSystemData::
        LeftReabsorptionRate (const LeftReabsorptionRate_optional& x)
        {
          this->LeftReabsorptionRate_ = x;
        }

        void RenalSystemData::
        LeftReabsorptionRate (::std::unique_ptr< LeftReabsorptionRate_type > x)
        {
          this->LeftReabsorptionRate_.set (std::move (x));
        }

        const RenalSystemData::LeftTubularOsmoticPressure_optional& RenalSystemData::
        LeftTubularOsmoticPressure () const
        {
          return this->LeftTubularOsmoticPressure_;
        }

        RenalSystemData::LeftTubularOsmoticPressure_optional& RenalSystemData::
        LeftTubularOsmoticPressure ()
        {
          return this->LeftTubularOsmoticPressure_;
        }

        void RenalSystemData::
        LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_type& x)
        {
          this->LeftTubularOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        LeftTubularOsmoticPressure (const LeftTubularOsmoticPressure_optional& x)
        {
          this->LeftTubularOsmoticPressure_ = x;
        }

        void RenalSystemData::
        LeftTubularOsmoticPressure (::std::unique_ptr< LeftTubularOsmoticPressure_type > x)
        {
          this->LeftTubularOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftTubularHydrostaticPressure_optional& RenalSystemData::
        LeftTubularHydrostaticPressure () const
        {
          return this->LeftTubularHydrostaticPressure_;
        }

        RenalSystemData::LeftTubularHydrostaticPressure_optional& RenalSystemData::
        LeftTubularHydrostaticPressure ()
        {
          return this->LeftTubularHydrostaticPressure_;
        }

        void RenalSystemData::
        LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_type& x)
        {
          this->LeftTubularHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        LeftTubularHydrostaticPressure (const LeftTubularHydrostaticPressure_optional& x)
        {
          this->LeftTubularHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        LeftTubularHydrostaticPressure (::std::unique_ptr< LeftTubularHydrostaticPressure_type > x)
        {
          this->LeftTubularHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::LeftTubularReabsorptionFiltrationSurfaceArea_optional& RenalSystemData::
        LeftTubularReabsorptionFiltrationSurfaceArea () const
        {
          return this->LeftTubularReabsorptionFiltrationSurfaceArea_;
        }

        RenalSystemData::LeftTubularReabsorptionFiltrationSurfaceArea_optional& RenalSystemData::
        LeftTubularReabsorptionFiltrationSurfaceArea ()
        {
          return this->LeftTubularReabsorptionFiltrationSurfaceArea_;
        }

        void RenalSystemData::
        LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_type& x)
        {
          this->LeftTubularReabsorptionFiltrationSurfaceArea_.set (x);
        }

        void RenalSystemData::
        LeftTubularReabsorptionFiltrationSurfaceArea (const LeftTubularReabsorptionFiltrationSurfaceArea_optional& x)
        {
          this->LeftTubularReabsorptionFiltrationSurfaceArea_ = x;
        }

        void RenalSystemData::
        LeftTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< LeftTubularReabsorptionFiltrationSurfaceArea_type > x)
        {
          this->LeftTubularReabsorptionFiltrationSurfaceArea_.set (std::move (x));
        }

        const RenalSystemData::LeftTubularReabsorptionFluidPermeability_optional& RenalSystemData::
        LeftTubularReabsorptionFluidPermeability () const
        {
          return this->LeftTubularReabsorptionFluidPermeability_;
        }

        RenalSystemData::LeftTubularReabsorptionFluidPermeability_optional& RenalSystemData::
        LeftTubularReabsorptionFluidPermeability ()
        {
          return this->LeftTubularReabsorptionFluidPermeability_;
        }

        void RenalSystemData::
        LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_type& x)
        {
          this->LeftTubularReabsorptionFluidPermeability_.set (x);
        }

        void RenalSystemData::
        LeftTubularReabsorptionFluidPermeability (const LeftTubularReabsorptionFluidPermeability_optional& x)
        {
          this->LeftTubularReabsorptionFluidPermeability_ = x;
        }

        void RenalSystemData::
        LeftTubularReabsorptionFluidPermeability (::std::unique_ptr< LeftTubularReabsorptionFluidPermeability_type > x)
        {
          this->LeftTubularReabsorptionFluidPermeability_.set (std::move (x));
        }

        const RenalSystemData::RenalBloodFlow_optional& RenalSystemData::
        RenalBloodFlow () const
        {
          return this->RenalBloodFlow_;
        }

        RenalSystemData::RenalBloodFlow_optional& RenalSystemData::
        RenalBloodFlow ()
        {
          return this->RenalBloodFlow_;
        }

        void RenalSystemData::
        RenalBloodFlow (const RenalBloodFlow_type& x)
        {
          this->RenalBloodFlow_.set (x);
        }

        void RenalSystemData::
        RenalBloodFlow (const RenalBloodFlow_optional& x)
        {
          this->RenalBloodFlow_ = x;
        }

        void RenalSystemData::
        RenalBloodFlow (::std::unique_ptr< RenalBloodFlow_type > x)
        {
          this->RenalBloodFlow_.set (std::move (x));
        }

        const RenalSystemData::RenalPlasmaFlow_optional& RenalSystemData::
        RenalPlasmaFlow () const
        {
          return this->RenalPlasmaFlow_;
        }

        RenalSystemData::RenalPlasmaFlow_optional& RenalSystemData::
        RenalPlasmaFlow ()
        {
          return this->RenalPlasmaFlow_;
        }

        void RenalSystemData::
        RenalPlasmaFlow (const RenalPlasmaFlow_type& x)
        {
          this->RenalPlasmaFlow_.set (x);
        }

        void RenalSystemData::
        RenalPlasmaFlow (const RenalPlasmaFlow_optional& x)
        {
          this->RenalPlasmaFlow_ = x;
        }

        void RenalSystemData::
        RenalPlasmaFlow (::std::unique_ptr< RenalPlasmaFlow_type > x)
        {
          this->RenalPlasmaFlow_.set (std::move (x));
        }

        const RenalSystemData::RenalVascularResistance_optional& RenalSystemData::
        RenalVascularResistance () const
        {
          return this->RenalVascularResistance_;
        }

        RenalSystemData::RenalVascularResistance_optional& RenalSystemData::
        RenalVascularResistance ()
        {
          return this->RenalVascularResistance_;
        }

        void RenalSystemData::
        RenalVascularResistance (const RenalVascularResistance_type& x)
        {
          this->RenalVascularResistance_.set (x);
        }

        void RenalSystemData::
        RenalVascularResistance (const RenalVascularResistance_optional& x)
        {
          this->RenalVascularResistance_ = x;
        }

        void RenalSystemData::
        RenalVascularResistance (::std::unique_ptr< RenalVascularResistance_type > x)
        {
          this->RenalVascularResistance_.set (std::move (x));
        }

        const RenalSystemData::RightAfferentArterioleResistance_optional& RenalSystemData::
        RightAfferentArterioleResistance () const
        {
          return this->RightAfferentArterioleResistance_;
        }

        RenalSystemData::RightAfferentArterioleResistance_optional& RenalSystemData::
        RightAfferentArterioleResistance ()
        {
          return this->RightAfferentArterioleResistance_;
        }

        void RenalSystemData::
        RightAfferentArterioleResistance (const RightAfferentArterioleResistance_type& x)
        {
          this->RightAfferentArterioleResistance_.set (x);
        }

        void RenalSystemData::
        RightAfferentArterioleResistance (const RightAfferentArterioleResistance_optional& x)
        {
          this->RightAfferentArterioleResistance_ = x;
        }

        void RenalSystemData::
        RightAfferentArterioleResistance (::std::unique_ptr< RightAfferentArterioleResistance_type > x)
        {
          this->RightAfferentArterioleResistance_.set (std::move (x));
        }

        const RenalSystemData::RightBowmansCapsulesHydrostaticPressure_optional& RenalSystemData::
        RightBowmansCapsulesHydrostaticPressure () const
        {
          return this->RightBowmansCapsulesHydrostaticPressure_;
        }

        RenalSystemData::RightBowmansCapsulesHydrostaticPressure_optional& RenalSystemData::
        RightBowmansCapsulesHydrostaticPressure ()
        {
          return this->RightBowmansCapsulesHydrostaticPressure_;
        }

        void RenalSystemData::
        RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_type& x)
        {
          this->RightBowmansCapsulesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        RightBowmansCapsulesHydrostaticPressure (const RightBowmansCapsulesHydrostaticPressure_optional& x)
        {
          this->RightBowmansCapsulesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        RightBowmansCapsulesHydrostaticPressure (::std::unique_ptr< RightBowmansCapsulesHydrostaticPressure_type > x)
        {
          this->RightBowmansCapsulesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightBowmansCapsulesOsmoticPressure_optional& RenalSystemData::
        RightBowmansCapsulesOsmoticPressure () const
        {
          return this->RightBowmansCapsulesOsmoticPressure_;
        }

        RenalSystemData::RightBowmansCapsulesOsmoticPressure_optional& RenalSystemData::
        RightBowmansCapsulesOsmoticPressure ()
        {
          return this->RightBowmansCapsulesOsmoticPressure_;
        }

        void RenalSystemData::
        RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_type& x)
        {
          this->RightBowmansCapsulesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        RightBowmansCapsulesOsmoticPressure (const RightBowmansCapsulesOsmoticPressure_optional& x)
        {
          this->RightBowmansCapsulesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        RightBowmansCapsulesOsmoticPressure (::std::unique_ptr< RightBowmansCapsulesOsmoticPressure_type > x)
        {
          this->RightBowmansCapsulesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightEfferentArterioleResistance_optional& RenalSystemData::
        RightEfferentArterioleResistance () const
        {
          return this->RightEfferentArterioleResistance_;
        }

        RenalSystemData::RightEfferentArterioleResistance_optional& RenalSystemData::
        RightEfferentArterioleResistance ()
        {
          return this->RightEfferentArterioleResistance_;
        }

        void RenalSystemData::
        RightEfferentArterioleResistance (const RightEfferentArterioleResistance_type& x)
        {
          this->RightEfferentArterioleResistance_.set (x);
        }

        void RenalSystemData::
        RightEfferentArterioleResistance (const RightEfferentArterioleResistance_optional& x)
        {
          this->RightEfferentArterioleResistance_ = x;
        }

        void RenalSystemData::
        RightEfferentArterioleResistance (::std::unique_ptr< RightEfferentArterioleResistance_type > x)
        {
          this->RightEfferentArterioleResistance_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularCapillariesHydrostaticPressure_optional& RenalSystemData::
        RightGlomerularCapillariesHydrostaticPressure () const
        {
          return this->RightGlomerularCapillariesHydrostaticPressure_;
        }

        RenalSystemData::RightGlomerularCapillariesHydrostaticPressure_optional& RenalSystemData::
        RightGlomerularCapillariesHydrostaticPressure ()
        {
          return this->RightGlomerularCapillariesHydrostaticPressure_;
        }

        void RenalSystemData::
        RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_type& x)
        {
          this->RightGlomerularCapillariesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        RightGlomerularCapillariesHydrostaticPressure (const RightGlomerularCapillariesHydrostaticPressure_optional& x)
        {
          this->RightGlomerularCapillariesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        RightGlomerularCapillariesHydrostaticPressure (::std::unique_ptr< RightGlomerularCapillariesHydrostaticPressure_type > x)
        {
          this->RightGlomerularCapillariesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularCapillariesOsmoticPressure_optional& RenalSystemData::
        RightGlomerularCapillariesOsmoticPressure () const
        {
          return this->RightGlomerularCapillariesOsmoticPressure_;
        }

        RenalSystemData::RightGlomerularCapillariesOsmoticPressure_optional& RenalSystemData::
        RightGlomerularCapillariesOsmoticPressure ()
        {
          return this->RightGlomerularCapillariesOsmoticPressure_;
        }

        void RenalSystemData::
        RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_type& x)
        {
          this->RightGlomerularCapillariesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        RightGlomerularCapillariesOsmoticPressure (const RightGlomerularCapillariesOsmoticPressure_optional& x)
        {
          this->RightGlomerularCapillariesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        RightGlomerularCapillariesOsmoticPressure (::std::unique_ptr< RightGlomerularCapillariesOsmoticPressure_type > x)
        {
          this->RightGlomerularCapillariesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularFiltrationCoefficient_optional& RenalSystemData::
        RightGlomerularFiltrationCoefficient () const
        {
          return this->RightGlomerularFiltrationCoefficient_;
        }

        RenalSystemData::RightGlomerularFiltrationCoefficient_optional& RenalSystemData::
        RightGlomerularFiltrationCoefficient ()
        {
          return this->RightGlomerularFiltrationCoefficient_;
        }

        void RenalSystemData::
        RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_type& x)
        {
          this->RightGlomerularFiltrationCoefficient_.set (x);
        }

        void RenalSystemData::
        RightGlomerularFiltrationCoefficient (const RightGlomerularFiltrationCoefficient_optional& x)
        {
          this->RightGlomerularFiltrationCoefficient_ = x;
        }

        void RenalSystemData::
        RightGlomerularFiltrationCoefficient (::std::unique_ptr< RightGlomerularFiltrationCoefficient_type > x)
        {
          this->RightGlomerularFiltrationCoefficient_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularFiltrationRate_optional& RenalSystemData::
        RightGlomerularFiltrationRate () const
        {
          return this->RightGlomerularFiltrationRate_;
        }

        RenalSystemData::RightGlomerularFiltrationRate_optional& RenalSystemData::
        RightGlomerularFiltrationRate ()
        {
          return this->RightGlomerularFiltrationRate_;
        }

        void RenalSystemData::
        RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_type& x)
        {
          this->RightGlomerularFiltrationRate_.set (x);
        }

        void RenalSystemData::
        RightGlomerularFiltrationRate (const RightGlomerularFiltrationRate_optional& x)
        {
          this->RightGlomerularFiltrationRate_ = x;
        }

        void RenalSystemData::
        RightGlomerularFiltrationRate (::std::unique_ptr< RightGlomerularFiltrationRate_type > x)
        {
          this->RightGlomerularFiltrationRate_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularFiltrationSurfaceArea_optional& RenalSystemData::
        RightGlomerularFiltrationSurfaceArea () const
        {
          return this->RightGlomerularFiltrationSurfaceArea_;
        }

        RenalSystemData::RightGlomerularFiltrationSurfaceArea_optional& RenalSystemData::
        RightGlomerularFiltrationSurfaceArea ()
        {
          return this->RightGlomerularFiltrationSurfaceArea_;
        }

        void RenalSystemData::
        RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_type& x)
        {
          this->RightGlomerularFiltrationSurfaceArea_.set (x);
        }

        void RenalSystemData::
        RightGlomerularFiltrationSurfaceArea (const RightGlomerularFiltrationSurfaceArea_optional& x)
        {
          this->RightGlomerularFiltrationSurfaceArea_ = x;
        }

        void RenalSystemData::
        RightGlomerularFiltrationSurfaceArea (::std::unique_ptr< RightGlomerularFiltrationSurfaceArea_type > x)
        {
          this->RightGlomerularFiltrationSurfaceArea_.set (std::move (x));
        }

        const RenalSystemData::RightGlomerularFluidPermeability_optional& RenalSystemData::
        RightGlomerularFluidPermeability () const
        {
          return this->RightGlomerularFluidPermeability_;
        }

        RenalSystemData::RightGlomerularFluidPermeability_optional& RenalSystemData::
        RightGlomerularFluidPermeability ()
        {
          return this->RightGlomerularFluidPermeability_;
        }

        void RenalSystemData::
        RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_type& x)
        {
          this->RightGlomerularFluidPermeability_.set (x);
        }

        void RenalSystemData::
        RightGlomerularFluidPermeability (const RightGlomerularFluidPermeability_optional& x)
        {
          this->RightGlomerularFluidPermeability_ = x;
        }

        void RenalSystemData::
        RightGlomerularFluidPermeability (::std::unique_ptr< RightGlomerularFluidPermeability_type > x)
        {
          this->RightGlomerularFluidPermeability_.set (std::move (x));
        }

        const RenalSystemData::RightFiltrationFraction_optional& RenalSystemData::
        RightFiltrationFraction () const
        {
          return this->RightFiltrationFraction_;
        }

        RenalSystemData::RightFiltrationFraction_optional& RenalSystemData::
        RightFiltrationFraction ()
        {
          return this->RightFiltrationFraction_;
        }

        void RenalSystemData::
        RightFiltrationFraction (const RightFiltrationFraction_type& x)
        {
          this->RightFiltrationFraction_.set (x);
        }

        void RenalSystemData::
        RightFiltrationFraction (const RightFiltrationFraction_optional& x)
        {
          this->RightFiltrationFraction_ = x;
        }

        void RenalSystemData::
        RightFiltrationFraction (::std::unique_ptr< RightFiltrationFraction_type > x)
        {
          this->RightFiltrationFraction_.set (std::move (x));
        }

        const RenalSystemData::RightNetFiltrationPressure_optional& RenalSystemData::
        RightNetFiltrationPressure () const
        {
          return this->RightNetFiltrationPressure_;
        }

        RenalSystemData::RightNetFiltrationPressure_optional& RenalSystemData::
        RightNetFiltrationPressure ()
        {
          return this->RightNetFiltrationPressure_;
        }

        void RenalSystemData::
        RightNetFiltrationPressure (const RightNetFiltrationPressure_type& x)
        {
          this->RightNetFiltrationPressure_.set (x);
        }

        void RenalSystemData::
        RightNetFiltrationPressure (const RightNetFiltrationPressure_optional& x)
        {
          this->RightNetFiltrationPressure_ = x;
        }

        void RenalSystemData::
        RightNetFiltrationPressure (::std::unique_ptr< RightNetFiltrationPressure_type > x)
        {
          this->RightNetFiltrationPressure_.set (std::move (x));
        }

        const RenalSystemData::RightNetReabsorptionPressure_optional& RenalSystemData::
        RightNetReabsorptionPressure () const
        {
          return this->RightNetReabsorptionPressure_;
        }

        RenalSystemData::RightNetReabsorptionPressure_optional& RenalSystemData::
        RightNetReabsorptionPressure ()
        {
          return this->RightNetReabsorptionPressure_;
        }

        void RenalSystemData::
        RightNetReabsorptionPressure (const RightNetReabsorptionPressure_type& x)
        {
          this->RightNetReabsorptionPressure_.set (x);
        }

        void RenalSystemData::
        RightNetReabsorptionPressure (const RightNetReabsorptionPressure_optional& x)
        {
          this->RightNetReabsorptionPressure_ = x;
        }

        void RenalSystemData::
        RightNetReabsorptionPressure (::std::unique_ptr< RightNetReabsorptionPressure_type > x)
        {
          this->RightNetReabsorptionPressure_.set (std::move (x));
        }

        const RenalSystemData::RightPeritubularCapillariesHydrostaticPressure_optional& RenalSystemData::
        RightPeritubularCapillariesHydrostaticPressure () const
        {
          return this->RightPeritubularCapillariesHydrostaticPressure_;
        }

        RenalSystemData::RightPeritubularCapillariesHydrostaticPressure_optional& RenalSystemData::
        RightPeritubularCapillariesHydrostaticPressure ()
        {
          return this->RightPeritubularCapillariesHydrostaticPressure_;
        }

        void RenalSystemData::
        RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_type& x)
        {
          this->RightPeritubularCapillariesHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        RightPeritubularCapillariesHydrostaticPressure (const RightPeritubularCapillariesHydrostaticPressure_optional& x)
        {
          this->RightPeritubularCapillariesHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        RightPeritubularCapillariesHydrostaticPressure (::std::unique_ptr< RightPeritubularCapillariesHydrostaticPressure_type > x)
        {
          this->RightPeritubularCapillariesHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightPeritubularCapillariesOsmoticPressure_optional& RenalSystemData::
        RightPeritubularCapillariesOsmoticPressure () const
        {
          return this->RightPeritubularCapillariesOsmoticPressure_;
        }

        RenalSystemData::RightPeritubularCapillariesOsmoticPressure_optional& RenalSystemData::
        RightPeritubularCapillariesOsmoticPressure ()
        {
          return this->RightPeritubularCapillariesOsmoticPressure_;
        }

        void RenalSystemData::
        RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_type& x)
        {
          this->RightPeritubularCapillariesOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        RightPeritubularCapillariesOsmoticPressure (const RightPeritubularCapillariesOsmoticPressure_optional& x)
        {
          this->RightPeritubularCapillariesOsmoticPressure_ = x;
        }

        void RenalSystemData::
        RightPeritubularCapillariesOsmoticPressure (::std::unique_ptr< RightPeritubularCapillariesOsmoticPressure_type > x)
        {
          this->RightPeritubularCapillariesOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightReabsorptionFiltrationCoefficient_optional& RenalSystemData::
        RightReabsorptionFiltrationCoefficient () const
        {
          return this->RightReabsorptionFiltrationCoefficient_;
        }

        RenalSystemData::RightReabsorptionFiltrationCoefficient_optional& RenalSystemData::
        RightReabsorptionFiltrationCoefficient ()
        {
          return this->RightReabsorptionFiltrationCoefficient_;
        }

        void RenalSystemData::
        RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_type& x)
        {
          this->RightReabsorptionFiltrationCoefficient_.set (x);
        }

        void RenalSystemData::
        RightReabsorptionFiltrationCoefficient (const RightReabsorptionFiltrationCoefficient_optional& x)
        {
          this->RightReabsorptionFiltrationCoefficient_ = x;
        }

        void RenalSystemData::
        RightReabsorptionFiltrationCoefficient (::std::unique_ptr< RightReabsorptionFiltrationCoefficient_type > x)
        {
          this->RightReabsorptionFiltrationCoefficient_.set (std::move (x));
        }

        const RenalSystemData::RightReabsorptionRate_optional& RenalSystemData::
        RightReabsorptionRate () const
        {
          return this->RightReabsorptionRate_;
        }

        RenalSystemData::RightReabsorptionRate_optional& RenalSystemData::
        RightReabsorptionRate ()
        {
          return this->RightReabsorptionRate_;
        }

        void RenalSystemData::
        RightReabsorptionRate (const RightReabsorptionRate_type& x)
        {
          this->RightReabsorptionRate_.set (x);
        }

        void RenalSystemData::
        RightReabsorptionRate (const RightReabsorptionRate_optional& x)
        {
          this->RightReabsorptionRate_ = x;
        }

        void RenalSystemData::
        RightReabsorptionRate (::std::unique_ptr< RightReabsorptionRate_type > x)
        {
          this->RightReabsorptionRate_.set (std::move (x));
        }

        const RenalSystemData::RightTubularOsmoticPressure_optional& RenalSystemData::
        RightTubularOsmoticPressure () const
        {
          return this->RightTubularOsmoticPressure_;
        }

        RenalSystemData::RightTubularOsmoticPressure_optional& RenalSystemData::
        RightTubularOsmoticPressure ()
        {
          return this->RightTubularOsmoticPressure_;
        }

        void RenalSystemData::
        RightTubularOsmoticPressure (const RightTubularOsmoticPressure_type& x)
        {
          this->RightTubularOsmoticPressure_.set (x);
        }

        void RenalSystemData::
        RightTubularOsmoticPressure (const RightTubularOsmoticPressure_optional& x)
        {
          this->RightTubularOsmoticPressure_ = x;
        }

        void RenalSystemData::
        RightTubularOsmoticPressure (::std::unique_ptr< RightTubularOsmoticPressure_type > x)
        {
          this->RightTubularOsmoticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightTubularHydrostaticPressure_optional& RenalSystemData::
        RightTubularHydrostaticPressure () const
        {
          return this->RightTubularHydrostaticPressure_;
        }

        RenalSystemData::RightTubularHydrostaticPressure_optional& RenalSystemData::
        RightTubularHydrostaticPressure ()
        {
          return this->RightTubularHydrostaticPressure_;
        }

        void RenalSystemData::
        RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_type& x)
        {
          this->RightTubularHydrostaticPressure_.set (x);
        }

        void RenalSystemData::
        RightTubularHydrostaticPressure (const RightTubularHydrostaticPressure_optional& x)
        {
          this->RightTubularHydrostaticPressure_ = x;
        }

        void RenalSystemData::
        RightTubularHydrostaticPressure (::std::unique_ptr< RightTubularHydrostaticPressure_type > x)
        {
          this->RightTubularHydrostaticPressure_.set (std::move (x));
        }

        const RenalSystemData::RightTubularReabsorptionFiltrationSurfaceArea_optional& RenalSystemData::
        RightTubularReabsorptionFiltrationSurfaceArea () const
        {
          return this->RightTubularReabsorptionFiltrationSurfaceArea_;
        }

        RenalSystemData::RightTubularReabsorptionFiltrationSurfaceArea_optional& RenalSystemData::
        RightTubularReabsorptionFiltrationSurfaceArea ()
        {
          return this->RightTubularReabsorptionFiltrationSurfaceArea_;
        }

        void RenalSystemData::
        RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_type& x)
        {
          this->RightTubularReabsorptionFiltrationSurfaceArea_.set (x);
        }

        void RenalSystemData::
        RightTubularReabsorptionFiltrationSurfaceArea (const RightTubularReabsorptionFiltrationSurfaceArea_optional& x)
        {
          this->RightTubularReabsorptionFiltrationSurfaceArea_ = x;
        }

        void RenalSystemData::
        RightTubularReabsorptionFiltrationSurfaceArea (::std::unique_ptr< RightTubularReabsorptionFiltrationSurfaceArea_type > x)
        {
          this->RightTubularReabsorptionFiltrationSurfaceArea_.set (std::move (x));
        }

        const RenalSystemData::RightTubularReabsorptionFluidPermeability_optional& RenalSystemData::
        RightTubularReabsorptionFluidPermeability () const
        {
          return this->RightTubularReabsorptionFluidPermeability_;
        }

        RenalSystemData::RightTubularReabsorptionFluidPermeability_optional& RenalSystemData::
        RightTubularReabsorptionFluidPermeability ()
        {
          return this->RightTubularReabsorptionFluidPermeability_;
        }

        void RenalSystemData::
        RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_type& x)
        {
          this->RightTubularReabsorptionFluidPermeability_.set (x);
        }

        void RenalSystemData::
        RightTubularReabsorptionFluidPermeability (const RightTubularReabsorptionFluidPermeability_optional& x)
        {
          this->RightTubularReabsorptionFluidPermeability_ = x;
        }

        void RenalSystemData::
        RightTubularReabsorptionFluidPermeability (::std::unique_ptr< RightTubularReabsorptionFluidPermeability_type > x)
        {
          this->RightTubularReabsorptionFluidPermeability_.set (std::move (x));
        }

        const RenalSystemData::UrinationRate_optional& RenalSystemData::
        UrinationRate () const
        {
          return this->UrinationRate_;
        }

        RenalSystemData::UrinationRate_optional& RenalSystemData::
        UrinationRate ()
        {
          return this->UrinationRate_;
        }

        void RenalSystemData::
        UrinationRate (const UrinationRate_type& x)
        {
          this->UrinationRate_.set (x);
        }

        void RenalSystemData::
        UrinationRate (const UrinationRate_optional& x)
        {
          this->UrinationRate_ = x;
        }

        void RenalSystemData::
        UrinationRate (::std::unique_ptr< UrinationRate_type > x)
        {
          this->UrinationRate_.set (std::move (x));
        }

        const RenalSystemData::UrineOsmolality_optional& RenalSystemData::
        UrineOsmolality () const
        {
          return this->UrineOsmolality_;
        }

        RenalSystemData::UrineOsmolality_optional& RenalSystemData::
        UrineOsmolality ()
        {
          return this->UrineOsmolality_;
        }

        void RenalSystemData::
        UrineOsmolality (const UrineOsmolality_type& x)
        {
          this->UrineOsmolality_.set (x);
        }

        void RenalSystemData::
        UrineOsmolality (const UrineOsmolality_optional& x)
        {
          this->UrineOsmolality_ = x;
        }

        void RenalSystemData::
        UrineOsmolality (::std::unique_ptr< UrineOsmolality_type > x)
        {
          this->UrineOsmolality_.set (std::move (x));
        }

        const RenalSystemData::UrineOsmolarity_optional& RenalSystemData::
        UrineOsmolarity () const
        {
          return this->UrineOsmolarity_;
        }

        RenalSystemData::UrineOsmolarity_optional& RenalSystemData::
        UrineOsmolarity ()
        {
          return this->UrineOsmolarity_;
        }

        void RenalSystemData::
        UrineOsmolarity (const UrineOsmolarity_type& x)
        {
          this->UrineOsmolarity_.set (x);
        }

        void RenalSystemData::
        UrineOsmolarity (const UrineOsmolarity_optional& x)
        {
          this->UrineOsmolarity_ = x;
        }

        void RenalSystemData::
        UrineOsmolarity (::std::unique_ptr< UrineOsmolarity_type > x)
        {
          this->UrineOsmolarity_.set (std::move (x));
        }

        const RenalSystemData::UrineProductionRate_optional& RenalSystemData::
        UrineProductionRate () const
        {
          return this->UrineProductionRate_;
        }

        RenalSystemData::UrineProductionRate_optional& RenalSystemData::
        UrineProductionRate ()
        {
          return this->UrineProductionRate_;
        }

        void RenalSystemData::
        UrineProductionRate (const UrineProductionRate_type& x)
        {
          this->UrineProductionRate_.set (x);
        }

        void RenalSystemData::
        UrineProductionRate (const UrineProductionRate_optional& x)
        {
          this->UrineProductionRate_ = x;
        }

        void RenalSystemData::
        UrineProductionRate (::std::unique_ptr< UrineProductionRate_type > x)
        {
          this->UrineProductionRate_.set (std::move (x));
        }

        const RenalSystemData::MeanUrineOutput_optional& RenalSystemData::
        MeanUrineOutput () const
        {
          return this->MeanUrineOutput_;
        }

        RenalSystemData::MeanUrineOutput_optional& RenalSystemData::
        MeanUrineOutput ()
        {
          return this->MeanUrineOutput_;
        }

        void RenalSystemData::
        MeanUrineOutput (const MeanUrineOutput_type& x)
        {
          this->MeanUrineOutput_.set (x);
        }

        void RenalSystemData::
        MeanUrineOutput (const MeanUrineOutput_optional& x)
        {
          this->MeanUrineOutput_ = x;
        }

        void RenalSystemData::
        MeanUrineOutput (::std::unique_ptr< MeanUrineOutput_type > x)
        {
          this->MeanUrineOutput_.set (std::move (x));
        }

        const RenalSystemData::UrineSpecificGravity_optional& RenalSystemData::
        UrineSpecificGravity () const
        {
          return this->UrineSpecificGravity_;
        }

        RenalSystemData::UrineSpecificGravity_optional& RenalSystemData::
        UrineSpecificGravity ()
        {
          return this->UrineSpecificGravity_;
        }

        void RenalSystemData::
        UrineSpecificGravity (const UrineSpecificGravity_type& x)
        {
          this->UrineSpecificGravity_.set (x);
        }

        void RenalSystemData::
        UrineSpecificGravity (const UrineSpecificGravity_optional& x)
        {
          this->UrineSpecificGravity_ = x;
        }

        void RenalSystemData::
        UrineSpecificGravity (::std::unique_ptr< UrineSpecificGravity_type > x)
        {
          this->UrineSpecificGravity_.set (std::move (x));
        }

        const RenalSystemData::UrineVolume_optional& RenalSystemData::
        UrineVolume () const
        {
          return this->UrineVolume_;
        }

        RenalSystemData::UrineVolume_optional& RenalSystemData::
        UrineVolume ()
        {
          return this->UrineVolume_;
        }

        void RenalSystemData::
        UrineVolume (const UrineVolume_type& x)
        {
          this->UrineVolume_.set (x);
        }

        void RenalSystemData::
        UrineVolume (const UrineVolume_optional& x)
        {
          this->UrineVolume_ = x;
        }

        void RenalSystemData::
        UrineVolume (::std::unique_ptr< UrineVolume_type > x)
        {
          this->UrineVolume_.set (std::move (x));
        }

        const RenalSystemData::UrineUreaNitrogenConcentration_optional& RenalSystemData::
        UrineUreaNitrogenConcentration () const
        {
          return this->UrineUreaNitrogenConcentration_;
        }

        RenalSystemData::UrineUreaNitrogenConcentration_optional& RenalSystemData::
        UrineUreaNitrogenConcentration ()
        {
          return this->UrineUreaNitrogenConcentration_;
        }

        void RenalSystemData::
        UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_type& x)
        {
          this->UrineUreaNitrogenConcentration_.set (x);
        }

        void RenalSystemData::
        UrineUreaNitrogenConcentration (const UrineUreaNitrogenConcentration_optional& x)
        {
          this->UrineUreaNitrogenConcentration_ = x;
        }

        void RenalSystemData::
        UrineUreaNitrogenConcentration (::std::unique_ptr< UrineUreaNitrogenConcentration_type > x)
        {
          this->UrineUreaNitrogenConcentration_.set (std::move (x));
        }


        // RespiratorySystemData
        // 

        const RespiratorySystemData::AlveolarArterialGradient_optional& RespiratorySystemData::
        AlveolarArterialGradient () const
        {
          return this->AlveolarArterialGradient_;
        }

        RespiratorySystemData::AlveolarArterialGradient_optional& RespiratorySystemData::
        AlveolarArterialGradient ()
        {
          return this->AlveolarArterialGradient_;
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (const AlveolarArterialGradient_type& x)
        {
          this->AlveolarArterialGradient_.set (x);
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (const AlveolarArterialGradient_optional& x)
        {
          this->AlveolarArterialGradient_ = x;
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (::std::unique_ptr< AlveolarArterialGradient_type > x)
        {
          this->AlveolarArterialGradient_.set (std::move (x));
        }

        const RespiratorySystemData::CarricoIndex_optional& RespiratorySystemData::
        CarricoIndex () const
        {
          return this->CarricoIndex_;
        }

        RespiratorySystemData::CarricoIndex_optional& RespiratorySystemData::
        CarricoIndex ()
        {
          return this->CarricoIndex_;
        }

        void RespiratorySystemData::
        CarricoIndex (const CarricoIndex_type& x)
        {
          this->CarricoIndex_.set (x);
        }

        void RespiratorySystemData::
        CarricoIndex (const CarricoIndex_optional& x)
        {
          this->CarricoIndex_ = x;
        }

        void RespiratorySystemData::
        CarricoIndex (::std::unique_ptr< CarricoIndex_type > x)
        {
          this->CarricoIndex_.set (std::move (x));
        }

        const RespiratorySystemData::EndTidalCarbonDioxideFraction_optional& RespiratorySystemData::
        EndTidalCarbonDioxideFraction () const
        {
          return this->EndTidalCarbonDioxideFraction_;
        }

        RespiratorySystemData::EndTidalCarbonDioxideFraction_optional& RespiratorySystemData::
        EndTidalCarbonDioxideFraction ()
        {
          return this->EndTidalCarbonDioxideFraction_;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_type& x)
        {
          this->EndTidalCarbonDioxideFraction_.set (x);
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_optional& x)
        {
          this->EndTidalCarbonDioxideFraction_ = x;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (::std::unique_ptr< EndTidalCarbonDioxideFraction_type > x)
        {
          this->EndTidalCarbonDioxideFraction_.set (std::move (x));
        }

        const RespiratorySystemData::EndTidalCarbonDioxidePressure_optional& RespiratorySystemData::
        EndTidalCarbonDioxidePressure () const
        {
          return this->EndTidalCarbonDioxidePressure_;
        }

        RespiratorySystemData::EndTidalCarbonDioxidePressure_optional& RespiratorySystemData::
        EndTidalCarbonDioxidePressure ()
        {
          return this->EndTidalCarbonDioxidePressure_;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_type& x)
        {
          this->EndTidalCarbonDioxidePressure_.set (x);
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_optional& x)
        {
          this->EndTidalCarbonDioxidePressure_ = x;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (::std::unique_ptr< EndTidalCarbonDioxidePressure_type > x)
        {
          this->EndTidalCarbonDioxidePressure_.set (std::move (x));
        }

        const RespiratorySystemData::ExpiratoryFlow_optional& RespiratorySystemData::
        ExpiratoryFlow () const
        {
          return this->ExpiratoryFlow_;
        }

        RespiratorySystemData::ExpiratoryFlow_optional& RespiratorySystemData::
        ExpiratoryFlow ()
        {
          return this->ExpiratoryFlow_;
        }

        void RespiratorySystemData::
        ExpiratoryFlow (const ExpiratoryFlow_type& x)
        {
          this->ExpiratoryFlow_.set (x);
        }

        void RespiratorySystemData::
        ExpiratoryFlow (const ExpiratoryFlow_optional& x)
        {
          this->ExpiratoryFlow_ = x;
        }

        void RespiratorySystemData::
        ExpiratoryFlow (::std::unique_ptr< ExpiratoryFlow_type > x)
        {
          this->ExpiratoryFlow_.set (std::move (x));
        }

        const RespiratorySystemData::InspiratoryExpiratoryRatio_optional& RespiratorySystemData::
        InspiratoryExpiratoryRatio () const
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        RespiratorySystemData::InspiratoryExpiratoryRatio_optional& RespiratorySystemData::
        InspiratoryExpiratoryRatio ()
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_type& x)
        {
          this->InspiratoryExpiratoryRatio_.set (x);
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_optional& x)
        {
          this->InspiratoryExpiratoryRatio_ = x;
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (::std::unique_ptr< InspiratoryExpiratoryRatio_type > x)
        {
          this->InspiratoryExpiratoryRatio_.set (std::move (x));
        }

        const RespiratorySystemData::InspiratoryFlow_optional& RespiratorySystemData::
        InspiratoryFlow () const
        {
          return this->InspiratoryFlow_;
        }

        RespiratorySystemData::InspiratoryFlow_optional& RespiratorySystemData::
        InspiratoryFlow ()
        {
          return this->InspiratoryFlow_;
        }

        void RespiratorySystemData::
        InspiratoryFlow (const InspiratoryFlow_type& x)
        {
          this->InspiratoryFlow_.set (x);
        }

        void RespiratorySystemData::
        InspiratoryFlow (const InspiratoryFlow_optional& x)
        {
          this->InspiratoryFlow_ = x;
        }

        void RespiratorySystemData::
        InspiratoryFlow (::std::unique_ptr< InspiratoryFlow_type > x)
        {
          this->InspiratoryFlow_.set (std::move (x));
        }

        const RespiratorySystemData::MeanPleuralPressure_optional& RespiratorySystemData::
        MeanPleuralPressure () const
        {
          return this->MeanPleuralPressure_;
        }

        RespiratorySystemData::MeanPleuralPressure_optional& RespiratorySystemData::
        MeanPleuralPressure ()
        {
          return this->MeanPleuralPressure_;
        }

        void RespiratorySystemData::
        MeanPleuralPressure (const MeanPleuralPressure_type& x)
        {
          this->MeanPleuralPressure_.set (x);
        }

        void RespiratorySystemData::
        MeanPleuralPressure (const MeanPleuralPressure_optional& x)
        {
          this->MeanPleuralPressure_ = x;
        }

        void RespiratorySystemData::
        MeanPleuralPressure (::std::unique_ptr< MeanPleuralPressure_type > x)
        {
          this->MeanPleuralPressure_.set (std::move (x));
        }

        const RespiratorySystemData::PulmonaryCompliance_optional& RespiratorySystemData::
        PulmonaryCompliance () const
        {
          return this->PulmonaryCompliance_;
        }

        RespiratorySystemData::PulmonaryCompliance_optional& RespiratorySystemData::
        PulmonaryCompliance ()
        {
          return this->PulmonaryCompliance_;
        }

        void RespiratorySystemData::
        PulmonaryCompliance (const PulmonaryCompliance_type& x)
        {
          this->PulmonaryCompliance_.set (x);
        }

        void RespiratorySystemData::
        PulmonaryCompliance (const PulmonaryCompliance_optional& x)
        {
          this->PulmonaryCompliance_ = x;
        }

        void RespiratorySystemData::
        PulmonaryCompliance (::std::unique_ptr< PulmonaryCompliance_type > x)
        {
          this->PulmonaryCompliance_.set (std::move (x));
        }

        const RespiratorySystemData::PulmonaryResistance_optional& RespiratorySystemData::
        PulmonaryResistance () const
        {
          return this->PulmonaryResistance_;
        }

        RespiratorySystemData::PulmonaryResistance_optional& RespiratorySystemData::
        PulmonaryResistance ()
        {
          return this->PulmonaryResistance_;
        }

        void RespiratorySystemData::
        PulmonaryResistance (const PulmonaryResistance_type& x)
        {
          this->PulmonaryResistance_.set (x);
        }

        void RespiratorySystemData::
        PulmonaryResistance (const PulmonaryResistance_optional& x)
        {
          this->PulmonaryResistance_ = x;
        }

        void RespiratorySystemData::
        PulmonaryResistance (::std::unique_ptr< PulmonaryResistance_type > x)
        {
          this->PulmonaryResistance_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationDriverFrequency_optional& RespiratorySystemData::
        RespirationDriverFrequency () const
        {
          return this->RespirationDriverFrequency_;
        }

        RespiratorySystemData::RespirationDriverFrequency_optional& RespiratorySystemData::
        RespirationDriverFrequency ()
        {
          return this->RespirationDriverFrequency_;
        }

        void RespiratorySystemData::
        RespirationDriverFrequency (const RespirationDriverFrequency_type& x)
        {
          this->RespirationDriverFrequency_.set (x);
        }

        void RespiratorySystemData::
        RespirationDriverFrequency (const RespirationDriverFrequency_optional& x)
        {
          this->RespirationDriverFrequency_ = x;
        }

        void RespiratorySystemData::
        RespirationDriverFrequency (::std::unique_ptr< RespirationDriverFrequency_type > x)
        {
          this->RespirationDriverFrequency_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationDriverPressure_optional& RespiratorySystemData::
        RespirationDriverPressure () const
        {
          return this->RespirationDriverPressure_;
        }

        RespiratorySystemData::RespirationDriverPressure_optional& RespiratorySystemData::
        RespirationDriverPressure ()
        {
          return this->RespirationDriverPressure_;
        }

        void RespiratorySystemData::
        RespirationDriverPressure (const RespirationDriverPressure_type& x)
        {
          this->RespirationDriverPressure_.set (x);
        }

        void RespiratorySystemData::
        RespirationDriverPressure (const RespirationDriverPressure_optional& x)
        {
          this->RespirationDriverPressure_ = x;
        }

        void RespiratorySystemData::
        RespirationDriverPressure (::std::unique_ptr< RespirationDriverPressure_type > x)
        {
          this->RespirationDriverPressure_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationMusclePressure_optional& RespiratorySystemData::
        RespirationMusclePressure () const
        {
          return this->RespirationMusclePressure_;
        }

        RespiratorySystemData::RespirationMusclePressure_optional& RespiratorySystemData::
        RespirationMusclePressure ()
        {
          return this->RespirationMusclePressure_;
        }

        void RespiratorySystemData::
        RespirationMusclePressure (const RespirationMusclePressure_type& x)
        {
          this->RespirationMusclePressure_.set (x);
        }

        void RespiratorySystemData::
        RespirationMusclePressure (const RespirationMusclePressure_optional& x)
        {
          this->RespirationMusclePressure_ = x;
        }

        void RespiratorySystemData::
        RespirationMusclePressure (::std::unique_ptr< RespirationMusclePressure_type > x)
        {
          this->RespirationMusclePressure_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationRate_optional& RespiratorySystemData::
        RespirationRate () const
        {
          return this->RespirationRate_;
        }

        RespiratorySystemData::RespirationRate_optional& RespiratorySystemData::
        RespirationRate ()
        {
          return this->RespirationRate_;
        }

        void RespiratorySystemData::
        RespirationRate (const RespirationRate_type& x)
        {
          this->RespirationRate_.set (x);
        }

        void RespiratorySystemData::
        RespirationRate (const RespirationRate_optional& x)
        {
          this->RespirationRate_ = x;
        }

        void RespiratorySystemData::
        RespirationRate (::std::unique_ptr< RespirationRate_type > x)
        {
          this->RespirationRate_.set (std::move (x));
        }

        const RespiratorySystemData::SpecificVentilation_optional& RespiratorySystemData::
        SpecificVentilation () const
        {
          return this->SpecificVentilation_;
        }

        RespiratorySystemData::SpecificVentilation_optional& RespiratorySystemData::
        SpecificVentilation ()
        {
          return this->SpecificVentilation_;
        }

        void RespiratorySystemData::
        SpecificVentilation (const SpecificVentilation_type& x)
        {
          this->SpecificVentilation_.set (x);
        }

        void RespiratorySystemData::
        SpecificVentilation (const SpecificVentilation_optional& x)
        {
          this->SpecificVentilation_ = x;
        }

        void RespiratorySystemData::
        SpecificVentilation (::std::unique_ptr< SpecificVentilation_type > x)
        {
          this->SpecificVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TidalVolume_optional& RespiratorySystemData::
        TidalVolume () const
        {
          return this->TidalVolume_;
        }

        RespiratorySystemData::TidalVolume_optional& RespiratorySystemData::
        TidalVolume ()
        {
          return this->TidalVolume_;
        }

        void RespiratorySystemData::
        TidalVolume (const TidalVolume_type& x)
        {
          this->TidalVolume_.set (x);
        }

        void RespiratorySystemData::
        TidalVolume (const TidalVolume_optional& x)
        {
          this->TidalVolume_ = x;
        }

        void RespiratorySystemData::
        TidalVolume (::std::unique_ptr< TidalVolume_type > x)
        {
          this->TidalVolume_.set (std::move (x));
        }

        const RespiratorySystemData::TargetPulmonaryVentilation_optional& RespiratorySystemData::
        TargetPulmonaryVentilation () const
        {
          return this->TargetPulmonaryVentilation_;
        }

        RespiratorySystemData::TargetPulmonaryVentilation_optional& RespiratorySystemData::
        TargetPulmonaryVentilation ()
        {
          return this->TargetPulmonaryVentilation_;
        }

        void RespiratorySystemData::
        TargetPulmonaryVentilation (const TargetPulmonaryVentilation_type& x)
        {
          this->TargetPulmonaryVentilation_.set (x);
        }

        void RespiratorySystemData::
        TargetPulmonaryVentilation (const TargetPulmonaryVentilation_optional& x)
        {
          this->TargetPulmonaryVentilation_ = x;
        }

        void RespiratorySystemData::
        TargetPulmonaryVentilation (::std::unique_ptr< TargetPulmonaryVentilation_type > x)
        {
          this->TargetPulmonaryVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TotalAlveolarVentilation_optional& RespiratorySystemData::
        TotalAlveolarVentilation () const
        {
          return this->TotalAlveolarVentilation_;
        }

        RespiratorySystemData::TotalAlveolarVentilation_optional& RespiratorySystemData::
        TotalAlveolarVentilation ()
        {
          return this->TotalAlveolarVentilation_;
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (const TotalAlveolarVentilation_type& x)
        {
          this->TotalAlveolarVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (const TotalAlveolarVentilation_optional& x)
        {
          this->TotalAlveolarVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (::std::unique_ptr< TotalAlveolarVentilation_type > x)
        {
          this->TotalAlveolarVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TotalDeadSpaceVentilation_optional& RespiratorySystemData::
        TotalDeadSpaceVentilation () const
        {
          return this->TotalDeadSpaceVentilation_;
        }

        RespiratorySystemData::TotalDeadSpaceVentilation_optional& RespiratorySystemData::
        TotalDeadSpaceVentilation ()
        {
          return this->TotalDeadSpaceVentilation_;
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_type& x)
        {
          this->TotalDeadSpaceVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_optional& x)
        {
          this->TotalDeadSpaceVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (::std::unique_ptr< TotalDeadSpaceVentilation_type > x)
        {
          this->TotalDeadSpaceVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TotalLungVolume_optional& RespiratorySystemData::
        TotalLungVolume () const
        {
          return this->TotalLungVolume_;
        }

        RespiratorySystemData::TotalLungVolume_optional& RespiratorySystemData::
        TotalLungVolume ()
        {
          return this->TotalLungVolume_;
        }

        void RespiratorySystemData::
        TotalLungVolume (const TotalLungVolume_type& x)
        {
          this->TotalLungVolume_.set (x);
        }

        void RespiratorySystemData::
        TotalLungVolume (const TotalLungVolume_optional& x)
        {
          this->TotalLungVolume_ = x;
        }

        void RespiratorySystemData::
        TotalLungVolume (::std::unique_ptr< TotalLungVolume_type > x)
        {
          this->TotalLungVolume_.set (std::move (x));
        }

        const RespiratorySystemData::TotalPulmonaryVentilation_optional& RespiratorySystemData::
        TotalPulmonaryVentilation () const
        {
          return this->TotalPulmonaryVentilation_;
        }

        RespiratorySystemData::TotalPulmonaryVentilation_optional& RespiratorySystemData::
        TotalPulmonaryVentilation ()
        {
          return this->TotalPulmonaryVentilation_;
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (const TotalPulmonaryVentilation_type& x)
        {
          this->TotalPulmonaryVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (const TotalPulmonaryVentilation_optional& x)
        {
          this->TotalPulmonaryVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (::std::unique_ptr< TotalPulmonaryVentilation_type > x)
        {
          this->TotalPulmonaryVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TranspulmonaryPressure_optional& RespiratorySystemData::
        TranspulmonaryPressure () const
        {
          return this->TranspulmonaryPressure_;
        }

        RespiratorySystemData::TranspulmonaryPressure_optional& RespiratorySystemData::
        TranspulmonaryPressure ()
        {
          return this->TranspulmonaryPressure_;
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (const TranspulmonaryPressure_type& x)
        {
          this->TranspulmonaryPressure_.set (x);
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (const TranspulmonaryPressure_optional& x)
        {
          this->TranspulmonaryPressure_ = x;
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (::std::unique_ptr< TranspulmonaryPressure_type > x)
        {
          this->TranspulmonaryPressure_.set (std::move (x));
        }


        // TissueSystemData
        // 

        const TissueSystemData::CarbonDioxideProductionRate_optional& TissueSystemData::
        CarbonDioxideProductionRate () const
        {
          return this->CarbonDioxideProductionRate_;
        }

        TissueSystemData::CarbonDioxideProductionRate_optional& TissueSystemData::
        CarbonDioxideProductionRate ()
        {
          return this->CarbonDioxideProductionRate_;
        }

        void TissueSystemData::
        CarbonDioxideProductionRate (const CarbonDioxideProductionRate_type& x)
        {
          this->CarbonDioxideProductionRate_.set (x);
        }

        void TissueSystemData::
        CarbonDioxideProductionRate (const CarbonDioxideProductionRate_optional& x)
        {
          this->CarbonDioxideProductionRate_ = x;
        }

        void TissueSystemData::
        CarbonDioxideProductionRate (::std::unique_ptr< CarbonDioxideProductionRate_type > x)
        {
          this->CarbonDioxideProductionRate_.set (std::move (x));
        }

        const TissueSystemData::DehydrationFraction_optional& TissueSystemData::
        DehydrationFraction () const
        {
          return this->DehydrationFraction_;
        }

        TissueSystemData::DehydrationFraction_optional& TissueSystemData::
        DehydrationFraction ()
        {
          return this->DehydrationFraction_;
        }

        void TissueSystemData::
        DehydrationFraction (const DehydrationFraction_type& x)
        {
          this->DehydrationFraction_.set (x);
        }

        void TissueSystemData::
        DehydrationFraction (const DehydrationFraction_optional& x)
        {
          this->DehydrationFraction_ = x;
        }

        void TissueSystemData::
        DehydrationFraction (::std::unique_ptr< DehydrationFraction_type > x)
        {
          this->DehydrationFraction_.set (std::move (x));
        }

        const TissueSystemData::ExtracellularFluidVolume_optional& TissueSystemData::
        ExtracellularFluidVolume () const
        {
          return this->ExtracellularFluidVolume_;
        }

        TissueSystemData::ExtracellularFluidVolume_optional& TissueSystemData::
        ExtracellularFluidVolume ()
        {
          return this->ExtracellularFluidVolume_;
        }

        void TissueSystemData::
        ExtracellularFluidVolume (const ExtracellularFluidVolume_type& x)
        {
          this->ExtracellularFluidVolume_.set (x);
        }

        void TissueSystemData::
        ExtracellularFluidVolume (const ExtracellularFluidVolume_optional& x)
        {
          this->ExtracellularFluidVolume_ = x;
        }

        void TissueSystemData::
        ExtracellularFluidVolume (::std::unique_ptr< ExtracellularFluidVolume_type > x)
        {
          this->ExtracellularFluidVolume_.set (std::move (x));
        }

        const TissueSystemData::ExtravascularFluidVolume_optional& TissueSystemData::
        ExtravascularFluidVolume () const
        {
          return this->ExtravascularFluidVolume_;
        }

        TissueSystemData::ExtravascularFluidVolume_optional& TissueSystemData::
        ExtravascularFluidVolume ()
        {
          return this->ExtravascularFluidVolume_;
        }

        void TissueSystemData::
        ExtravascularFluidVolume (const ExtravascularFluidVolume_type& x)
        {
          this->ExtravascularFluidVolume_.set (x);
        }

        void TissueSystemData::
        ExtravascularFluidVolume (const ExtravascularFluidVolume_optional& x)
        {
          this->ExtravascularFluidVolume_ = x;
        }

        void TissueSystemData::
        ExtravascularFluidVolume (::std::unique_ptr< ExtravascularFluidVolume_type > x)
        {
          this->ExtravascularFluidVolume_.set (std::move (x));
        }

        const TissueSystemData::IntracellularFluidPH_optional& TissueSystemData::
        IntracellularFluidPH () const
        {
          return this->IntracellularFluidPH_;
        }

        TissueSystemData::IntracellularFluidPH_optional& TissueSystemData::
        IntracellularFluidPH ()
        {
          return this->IntracellularFluidPH_;
        }

        void TissueSystemData::
        IntracellularFluidPH (const IntracellularFluidPH_type& x)
        {
          this->IntracellularFluidPH_.set (x);
        }

        void TissueSystemData::
        IntracellularFluidPH (const IntracellularFluidPH_optional& x)
        {
          this->IntracellularFluidPH_ = x;
        }

        void TissueSystemData::
        IntracellularFluidPH (::std::unique_ptr< IntracellularFluidPH_type > x)
        {
          this->IntracellularFluidPH_.set (std::move (x));
        }

        const TissueSystemData::IntracellularFluidVolume_optional& TissueSystemData::
        IntracellularFluidVolume () const
        {
          return this->IntracellularFluidVolume_;
        }

        TissueSystemData::IntracellularFluidVolume_optional& TissueSystemData::
        IntracellularFluidVolume ()
        {
          return this->IntracellularFluidVolume_;
        }

        void TissueSystemData::
        IntracellularFluidVolume (const IntracellularFluidVolume_type& x)
        {
          this->IntracellularFluidVolume_.set (x);
        }

        void TissueSystemData::
        IntracellularFluidVolume (const IntracellularFluidVolume_optional& x)
        {
          this->IntracellularFluidVolume_ = x;
        }

        void TissueSystemData::
        IntracellularFluidVolume (::std::unique_ptr< IntracellularFluidVolume_type > x)
        {
          this->IntracellularFluidVolume_.set (std::move (x));
        }

        const TissueSystemData::TotalBodyFluidVolume_optional& TissueSystemData::
        TotalBodyFluidVolume () const
        {
          return this->TotalBodyFluidVolume_;
        }

        TissueSystemData::TotalBodyFluidVolume_optional& TissueSystemData::
        TotalBodyFluidVolume ()
        {
          return this->TotalBodyFluidVolume_;
        }

        void TissueSystemData::
        TotalBodyFluidVolume (const TotalBodyFluidVolume_type& x)
        {
          this->TotalBodyFluidVolume_.set (x);
        }

        void TissueSystemData::
        TotalBodyFluidVolume (const TotalBodyFluidVolume_optional& x)
        {
          this->TotalBodyFluidVolume_ = x;
        }

        void TissueSystemData::
        TotalBodyFluidVolume (::std::unique_ptr< TotalBodyFluidVolume_type > x)
        {
          this->TotalBodyFluidVolume_.set (std::move (x));
        }

        const TissueSystemData::OxygenConsumptionRate_optional& TissueSystemData::
        OxygenConsumptionRate () const
        {
          return this->OxygenConsumptionRate_;
        }

        TissueSystemData::OxygenConsumptionRate_optional& TissueSystemData::
        OxygenConsumptionRate ()
        {
          return this->OxygenConsumptionRate_;
        }

        void TissueSystemData::
        OxygenConsumptionRate (const OxygenConsumptionRate_type& x)
        {
          this->OxygenConsumptionRate_.set (x);
        }

        void TissueSystemData::
        OxygenConsumptionRate (const OxygenConsumptionRate_optional& x)
        {
          this->OxygenConsumptionRate_ = x;
        }

        void TissueSystemData::
        OxygenConsumptionRate (::std::unique_ptr< OxygenConsumptionRate_type > x)
        {
          this->OxygenConsumptionRate_.set (std::move (x));
        }

        const TissueSystemData::RespiratoryExchangeRatio_optional& TissueSystemData::
        RespiratoryExchangeRatio () const
        {
          return this->RespiratoryExchangeRatio_;
        }

        TissueSystemData::RespiratoryExchangeRatio_optional& TissueSystemData::
        RespiratoryExchangeRatio ()
        {
          return this->RespiratoryExchangeRatio_;
        }

        void TissueSystemData::
        RespiratoryExchangeRatio (const RespiratoryExchangeRatio_type& x)
        {
          this->RespiratoryExchangeRatio_.set (x);
        }

        void TissueSystemData::
        RespiratoryExchangeRatio (const RespiratoryExchangeRatio_optional& x)
        {
          this->RespiratoryExchangeRatio_ = x;
        }

        void TissueSystemData::
        RespiratoryExchangeRatio (::std::unique_ptr< RespiratoryExchangeRatio_type > x)
        {
          this->RespiratoryExchangeRatio_.set (std::move (x));
        }

        const TissueSystemData::LiverInsulinSetPoint_optional& TissueSystemData::
        LiverInsulinSetPoint () const
        {
          return this->LiverInsulinSetPoint_;
        }

        TissueSystemData::LiverInsulinSetPoint_optional& TissueSystemData::
        LiverInsulinSetPoint ()
        {
          return this->LiverInsulinSetPoint_;
        }

        void TissueSystemData::
        LiverInsulinSetPoint (const LiverInsulinSetPoint_type& x)
        {
          this->LiverInsulinSetPoint_.set (x);
        }

        void TissueSystemData::
        LiverInsulinSetPoint (const LiverInsulinSetPoint_optional& x)
        {
          this->LiverInsulinSetPoint_ = x;
        }

        void TissueSystemData::
        LiverInsulinSetPoint (::std::unique_ptr< LiverInsulinSetPoint_type > x)
        {
          this->LiverInsulinSetPoint_.set (std::move (x));
        }

        const TissueSystemData::LiverGlucagonSetPoint_optional& TissueSystemData::
        LiverGlucagonSetPoint () const
        {
          return this->LiverGlucagonSetPoint_;
        }

        TissueSystemData::LiverGlucagonSetPoint_optional& TissueSystemData::
        LiverGlucagonSetPoint ()
        {
          return this->LiverGlucagonSetPoint_;
        }

        void TissueSystemData::
        LiverGlucagonSetPoint (const LiverGlucagonSetPoint_type& x)
        {
          this->LiverGlucagonSetPoint_.set (x);
        }

        void TissueSystemData::
        LiverGlucagonSetPoint (const LiverGlucagonSetPoint_optional& x)
        {
          this->LiverGlucagonSetPoint_ = x;
        }

        void TissueSystemData::
        LiverGlucagonSetPoint (::std::unique_ptr< LiverGlucagonSetPoint_type > x)
        {
          this->LiverGlucagonSetPoint_.set (std::move (x));
        }

        const TissueSystemData::MuscleInsulinSetPoint_optional& TissueSystemData::
        MuscleInsulinSetPoint () const
        {
          return this->MuscleInsulinSetPoint_;
        }

        TissueSystemData::MuscleInsulinSetPoint_optional& TissueSystemData::
        MuscleInsulinSetPoint ()
        {
          return this->MuscleInsulinSetPoint_;
        }

        void TissueSystemData::
        MuscleInsulinSetPoint (const MuscleInsulinSetPoint_type& x)
        {
          this->MuscleInsulinSetPoint_.set (x);
        }

        void TissueSystemData::
        MuscleInsulinSetPoint (const MuscleInsulinSetPoint_optional& x)
        {
          this->MuscleInsulinSetPoint_ = x;
        }

        void TissueSystemData::
        MuscleInsulinSetPoint (::std::unique_ptr< MuscleInsulinSetPoint_type > x)
        {
          this->MuscleInsulinSetPoint_.set (std::move (x));
        }

        const TissueSystemData::MuscleGlucagonSetPoint_optional& TissueSystemData::
        MuscleGlucagonSetPoint () const
        {
          return this->MuscleGlucagonSetPoint_;
        }

        TissueSystemData::MuscleGlucagonSetPoint_optional& TissueSystemData::
        MuscleGlucagonSetPoint ()
        {
          return this->MuscleGlucagonSetPoint_;
        }

        void TissueSystemData::
        MuscleGlucagonSetPoint (const MuscleGlucagonSetPoint_type& x)
        {
          this->MuscleGlucagonSetPoint_.set (x);
        }

        void TissueSystemData::
        MuscleGlucagonSetPoint (const MuscleGlucagonSetPoint_optional& x)
        {
          this->MuscleGlucagonSetPoint_ = x;
        }

        void TissueSystemData::
        MuscleGlucagonSetPoint (::std::unique_ptr< MuscleGlucagonSetPoint_type > x)
        {
          this->MuscleGlucagonSetPoint_.set (std::move (x));
        }

        const TissueSystemData::FatInsulinSetPoint_optional& TissueSystemData::
        FatInsulinSetPoint () const
        {
          return this->FatInsulinSetPoint_;
        }

        TissueSystemData::FatInsulinSetPoint_optional& TissueSystemData::
        FatInsulinSetPoint ()
        {
          return this->FatInsulinSetPoint_;
        }

        void TissueSystemData::
        FatInsulinSetPoint (const FatInsulinSetPoint_type& x)
        {
          this->FatInsulinSetPoint_.set (x);
        }

        void TissueSystemData::
        FatInsulinSetPoint (const FatInsulinSetPoint_optional& x)
        {
          this->FatInsulinSetPoint_ = x;
        }

        void TissueSystemData::
        FatInsulinSetPoint (::std::unique_ptr< FatInsulinSetPoint_type > x)
        {
          this->FatInsulinSetPoint_.set (std::move (x));
        }

        const TissueSystemData::FatGlucagonSetPoint_optional& TissueSystemData::
        FatGlucagonSetPoint () const
        {
          return this->FatGlucagonSetPoint_;
        }

        TissueSystemData::FatGlucagonSetPoint_optional& TissueSystemData::
        FatGlucagonSetPoint ()
        {
          return this->FatGlucagonSetPoint_;
        }

        void TissueSystemData::
        FatGlucagonSetPoint (const FatGlucagonSetPoint_type& x)
        {
          this->FatGlucagonSetPoint_.set (x);
        }

        void TissueSystemData::
        FatGlucagonSetPoint (const FatGlucagonSetPoint_optional& x)
        {
          this->FatGlucagonSetPoint_ = x;
        }

        void TissueSystemData::
        FatGlucagonSetPoint (::std::unique_ptr< FatGlucagonSetPoint_type > x)
        {
          this->FatGlucagonSetPoint_.set (std::move (x));
        }

        const TissueSystemData::LiverGlycogen_optional& TissueSystemData::
        LiverGlycogen () const
        {
          return this->LiverGlycogen_;
        }

        TissueSystemData::LiverGlycogen_optional& TissueSystemData::
        LiverGlycogen ()
        {
          return this->LiverGlycogen_;
        }

        void TissueSystemData::
        LiverGlycogen (const LiverGlycogen_type& x)
        {
          this->LiverGlycogen_.set (x);
        }

        void TissueSystemData::
        LiverGlycogen (const LiverGlycogen_optional& x)
        {
          this->LiverGlycogen_ = x;
        }

        void TissueSystemData::
        LiverGlycogen (::std::unique_ptr< LiverGlycogen_type > x)
        {
          this->LiverGlycogen_.set (std::move (x));
        }

        const TissueSystemData::MuscleGlycogen_optional& TissueSystemData::
        MuscleGlycogen () const
        {
          return this->MuscleGlycogen_;
        }

        TissueSystemData::MuscleGlycogen_optional& TissueSystemData::
        MuscleGlycogen ()
        {
          return this->MuscleGlycogen_;
        }

        void TissueSystemData::
        MuscleGlycogen (const MuscleGlycogen_type& x)
        {
          this->MuscleGlycogen_.set (x);
        }

        void TissueSystemData::
        MuscleGlycogen (const MuscleGlycogen_optional& x)
        {
          this->MuscleGlycogen_ = x;
        }

        void TissueSystemData::
        MuscleGlycogen (::std::unique_ptr< MuscleGlycogen_type > x)
        {
          this->MuscleGlycogen_.set (std::move (x));
        }

        const TissueSystemData::StoredProtein_optional& TissueSystemData::
        StoredProtein () const
        {
          return this->StoredProtein_;
        }

        TissueSystemData::StoredProtein_optional& TissueSystemData::
        StoredProtein ()
        {
          return this->StoredProtein_;
        }

        void TissueSystemData::
        StoredProtein (const StoredProtein_type& x)
        {
          this->StoredProtein_.set (x);
        }

        void TissueSystemData::
        StoredProtein (const StoredProtein_optional& x)
        {
          this->StoredProtein_ = x;
        }

        void TissueSystemData::
        StoredProtein (::std::unique_ptr< StoredProtein_type > x)
        {
          this->StoredProtein_.set (std::move (x));
        }

        const TissueSystemData::StoredFat_optional& TissueSystemData::
        StoredFat () const
        {
          return this->StoredFat_;
        }

        TissueSystemData::StoredFat_optional& TissueSystemData::
        StoredFat ()
        {
          return this->StoredFat_;
        }

        void TissueSystemData::
        StoredFat (const StoredFat_type& x)
        {
          this->StoredFat_.set (x);
        }

        void TissueSystemData::
        StoredFat (const StoredFat_optional& x)
        {
          this->StoredFat_ = x;
        }

        void TissueSystemData::
        StoredFat (::std::unique_ptr< StoredFat_type > x)
        {
          this->StoredFat_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PupillaryResponseData
        //

        PupillaryResponseData::
        PupillaryResponseData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          ReactivityModifier_ (this),
          ShapeModifier_ (this),
          SizeModifier_ (this)
        {
        }

        PupillaryResponseData::
        PupillaryResponseData (const PupillaryResponseData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          ReactivityModifier_ (x.ReactivityModifier_, f, this),
          ShapeModifier_ (x.ShapeModifier_, f, this),
          SizeModifier_ (x.SizeModifier_, f, this)
        {
        }

        PupillaryResponseData::
        PupillaryResponseData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          ReactivityModifier_ (this),
          ShapeModifier_ (this),
          SizeModifier_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PupillaryResponseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ReactivityModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReactivityModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReactivityModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReactivityModifier_)
                {
                  ::std::unique_ptr< ReactivityModifier_type > r (
                    dynamic_cast< ReactivityModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReactivityModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ShapeModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ShapeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ShapeModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ShapeModifier_)
                {
                  ::std::unique_ptr< ShapeModifier_type > r (
                    dynamic_cast< ShapeModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ShapeModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SizeModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SizeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SizeModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SizeModifier_)
                {
                  ::std::unique_ptr< SizeModifier_type > r (
                    dynamic_cast< SizeModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SizeModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        PupillaryResponseData* PupillaryResponseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PupillaryResponseData (*this, f, c);
        }

        PupillaryResponseData& PupillaryResponseData::
        operator= (const PupillaryResponseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->ReactivityModifier_ = x.ReactivityModifier_;
            this->ShapeModifier_ = x.ShapeModifier_;
            this->SizeModifier_ = x.SizeModifier_;
          }

          return *this;
        }

        PupillaryResponseData::
        ~PupillaryResponseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PupillaryResponseData >
        _xsd_PupillaryResponseData_type_factory_init (
          "PupillaryResponseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumInflammationSource
        //

        enumInflammationSource::
        enumInflammationSource (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumInflammationSource_convert ();
        }

        enumInflammationSource::
        enumInflammationSource (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumInflammationSource_convert ();
        }

        enumInflammationSource::
        enumInflammationSource (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumInflammationSource_convert ();
        }

        enumInflammationSource* enumInflammationSource::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumInflammationSource (*this, f, c);
        }

        enumInflammationSource::value enumInflammationSource::
        _xsd_enumInflammationSource_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumInflammationSource_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumInflammationSource_indexes_,
                            _xsd_enumInflammationSource_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_enumInflammationSource_indexes_ + 3 || _xsd_enumInflammationSource_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumInflammationSource::
        _xsd_enumInflammationSource_literals_[3] =
        {
          "Burn",
          "Hemorrhage",
          "Infection"
        };

        const enumInflammationSource::value enumInflammationSource::
        _xsd_enumInflammationSource_indexes_[3] =
        {
          ::mil::tatrc::physiology::datamodel::enumInflammationSource::Burn,
          ::mil::tatrc::physiology::datamodel::enumInflammationSource::Hemorrhage,
          ::mil::tatrc::physiology::datamodel::enumInflammationSource::Infection
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumInflammationSource >
        _xsd_enumInflammationSource_type_factory_init (
          "enumInflammationSource",
          "uri:/mil/tatrc/physiology/datamodel");

        // InflammatoryResponseData
        //

        InflammatoryResponseData::
        InflammatoryResponseData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LocalPathogen_ (this),
          LocalMacrophage_ (this),
          LocalNeutrophil_ (this),
          LocalBarrier_ (this),
          ActiveTLR_ (this),
          AutonomicResponseLevel_ (this),
          BloodPathogen_ (this),
          Trauma_ (this),
          MacrophageResting_ (this),
          MacrophageActive_ (this),
          NeutrophilResting_ (this),
          NeutrophilActive_ (this),
          TumorNecrosisFactor_ (this),
          Interleukin6_ (this),
          Interleukin10_ (this),
          Interleukin12_ (this),
          InducibleNOSPre_ (this),
          InducibleNOS_ (this),
          ConstitutiveNOS_ (this),
          Nitrate_ (this),
          NitricOxide_ (this),
          TissueIntegrity_ (this),
          Catecholamines_ (this),
          InflammationTime_ (this),
          Source_ (this)
        {
        }

        InflammatoryResponseData::
        InflammatoryResponseData (const LocalPathogen_type& LocalPathogen,
                                  const LocalMacrophage_type& LocalMacrophage,
                                  const LocalNeutrophil_type& LocalNeutrophil,
                                  const LocalBarrier_type& LocalBarrier,
                                  const ActiveTLR_type& ActiveTLR,
                                  const AutonomicResponseLevel_type& AutonomicResponseLevel,
                                  const BloodPathogen_type& BloodPathogen,
                                  const Trauma_type& Trauma,
                                  const MacrophageResting_type& MacrophageResting,
                                  const MacrophageActive_type& MacrophageActive,
                                  const NeutrophilResting_type& NeutrophilResting,
                                  const NeutrophilActive_type& NeutrophilActive,
                                  const TumorNecrosisFactor_type& TumorNecrosisFactor,
                                  const Interleukin6_type& Interleukin6,
                                  const Interleukin10_type& Interleukin10,
                                  const Interleukin12_type& Interleukin12,
                                  const InducibleNOSPre_type& InducibleNOSPre,
                                  const InducibleNOS_type& InducibleNOS,
                                  const ConstitutiveNOS_type& ConstitutiveNOS,
                                  const Nitrate_type& Nitrate,
                                  const NitricOxide_type& NitricOxide,
                                  const TissueIntegrity_type& TissueIntegrity,
                                  const Catecholamines_type& Catecholamines,
                                  const InflammationTime_type& InflammationTime)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LocalPathogen_ (LocalPathogen, this),
          LocalMacrophage_ (LocalMacrophage, this),
          LocalNeutrophil_ (LocalNeutrophil, this),
          LocalBarrier_ (LocalBarrier, this),
          ActiveTLR_ (ActiveTLR, this),
          AutonomicResponseLevel_ (AutonomicResponseLevel, this),
          BloodPathogen_ (BloodPathogen, this),
          Trauma_ (Trauma, this),
          MacrophageResting_ (MacrophageResting, this),
          MacrophageActive_ (MacrophageActive, this),
          NeutrophilResting_ (NeutrophilResting, this),
          NeutrophilActive_ (NeutrophilActive, this),
          TumorNecrosisFactor_ (TumorNecrosisFactor, this),
          Interleukin6_ (Interleukin6, this),
          Interleukin10_ (Interleukin10, this),
          Interleukin12_ (Interleukin12, this),
          InducibleNOSPre_ (InducibleNOSPre, this),
          InducibleNOS_ (InducibleNOS, this),
          ConstitutiveNOS_ (ConstitutiveNOS, this),
          Nitrate_ (Nitrate, this),
          NitricOxide_ (NitricOxide, this),
          TissueIntegrity_ (TissueIntegrity, this),
          Catecholamines_ (Catecholamines, this),
          InflammationTime_ (InflammationTime, this),
          Source_ (this)
        {
        }

        InflammatoryResponseData::
        InflammatoryResponseData (::std::unique_ptr< LocalPathogen_type > LocalPathogen,
                                  ::std::unique_ptr< LocalMacrophage_type > LocalMacrophage,
                                  ::std::unique_ptr< LocalNeutrophil_type > LocalNeutrophil,
                                  ::std::unique_ptr< LocalBarrier_type > LocalBarrier,
                                  const ActiveTLR_type& ActiveTLR,
                                  ::std::unique_ptr< AutonomicResponseLevel_type > AutonomicResponseLevel,
                                  ::std::unique_ptr< BloodPathogen_type > BloodPathogen,
                                  ::std::unique_ptr< Trauma_type > Trauma,
                                  ::std::unique_ptr< MacrophageResting_type > MacrophageResting,
                                  ::std::unique_ptr< MacrophageActive_type > MacrophageActive,
                                  ::std::unique_ptr< NeutrophilResting_type > NeutrophilResting,
                                  ::std::unique_ptr< NeutrophilActive_type > NeutrophilActive,
                                  ::std::unique_ptr< TumorNecrosisFactor_type > TumorNecrosisFactor,
                                  ::std::unique_ptr< Interleukin6_type > Interleukin6,
                                  ::std::unique_ptr< Interleukin10_type > Interleukin10,
                                  ::std::unique_ptr< Interleukin12_type > Interleukin12,
                                  ::std::unique_ptr< InducibleNOSPre_type > InducibleNOSPre,
                                  ::std::unique_ptr< InducibleNOS_type > InducibleNOS,
                                  ::std::unique_ptr< ConstitutiveNOS_type > ConstitutiveNOS,
                                  ::std::unique_ptr< Nitrate_type > Nitrate,
                                  ::std::unique_ptr< NitricOxide_type > NitricOxide,
                                  ::std::unique_ptr< TissueIntegrity_type > TissueIntegrity,
                                  ::std::unique_ptr< Catecholamines_type > Catecholamines,
                                  ::std::unique_ptr< InflammationTime_type > InflammationTime)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LocalPathogen_ (std::move (LocalPathogen), this),
          LocalMacrophage_ (std::move (LocalMacrophage), this),
          LocalNeutrophil_ (std::move (LocalNeutrophil), this),
          LocalBarrier_ (std::move (LocalBarrier), this),
          ActiveTLR_ (ActiveTLR, this),
          AutonomicResponseLevel_ (std::move (AutonomicResponseLevel), this),
          BloodPathogen_ (std::move (BloodPathogen), this),
          Trauma_ (std::move (Trauma), this),
          MacrophageResting_ (std::move (MacrophageResting), this),
          MacrophageActive_ (std::move (MacrophageActive), this),
          NeutrophilResting_ (std::move (NeutrophilResting), this),
          NeutrophilActive_ (std::move (NeutrophilActive), this),
          TumorNecrosisFactor_ (std::move (TumorNecrosisFactor), this),
          Interleukin6_ (std::move (Interleukin6), this),
          Interleukin10_ (std::move (Interleukin10), this),
          Interleukin12_ (std::move (Interleukin12), this),
          InducibleNOSPre_ (std::move (InducibleNOSPre), this),
          InducibleNOS_ (std::move (InducibleNOS), this),
          ConstitutiveNOS_ (std::move (ConstitutiveNOS), this),
          Nitrate_ (std::move (Nitrate), this),
          NitricOxide_ (std::move (NitricOxide), this),
          TissueIntegrity_ (std::move (TissueIntegrity), this),
          Catecholamines_ (std::move (Catecholamines), this),
          InflammationTime_ (std::move (InflammationTime), this),
          Source_ (this)
        {
        }

        InflammatoryResponseData::
        InflammatoryResponseData (::std::unique_ptr< LocalPathogen_type > LocalPathogen,
                                  ::std::unique_ptr< LocalMacrophage_type > LocalMacrophage,
                                  ::std::unique_ptr< LocalNeutrophil_type > LocalNeutrophil,
                                  ::std::unique_ptr< LocalBarrier_type > LocalBarrier,
                                  ::std::unique_ptr< ActiveTLR_type > ActiveTLR,
                                  ::std::unique_ptr< AutonomicResponseLevel_type > AutonomicResponseLevel,
                                  ::std::unique_ptr< BloodPathogen_type > BloodPathogen,
                                  ::std::unique_ptr< Trauma_type > Trauma,
                                  ::std::unique_ptr< MacrophageResting_type > MacrophageResting,
                                  ::std::unique_ptr< MacrophageActive_type > MacrophageActive,
                                  ::std::unique_ptr< NeutrophilResting_type > NeutrophilResting,
                                  ::std::unique_ptr< NeutrophilActive_type > NeutrophilActive,
                                  ::std::unique_ptr< TumorNecrosisFactor_type > TumorNecrosisFactor,
                                  ::std::unique_ptr< Interleukin6_type > Interleukin6,
                                  ::std::unique_ptr< Interleukin10_type > Interleukin10,
                                  ::std::unique_ptr< Interleukin12_type > Interleukin12,
                                  ::std::unique_ptr< InducibleNOSPre_type > InducibleNOSPre,
                                  ::std::unique_ptr< InducibleNOS_type > InducibleNOS,
                                  ::std::unique_ptr< ConstitutiveNOS_type > ConstitutiveNOS,
                                  ::std::unique_ptr< Nitrate_type > Nitrate,
                                  ::std::unique_ptr< NitricOxide_type > NitricOxide,
                                  ::std::unique_ptr< TissueIntegrity_type > TissueIntegrity,
                                  ::std::unique_ptr< Catecholamines_type > Catecholamines,
                                  ::std::unique_ptr< InflammationTime_type > InflammationTime)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LocalPathogen_ (std::move (LocalPathogen), this),
          LocalMacrophage_ (std::move (LocalMacrophage), this),
          LocalNeutrophil_ (std::move (LocalNeutrophil), this),
          LocalBarrier_ (std::move (LocalBarrier), this),
          ActiveTLR_ (std::move (ActiveTLR), this),
          AutonomicResponseLevel_ (std::move (AutonomicResponseLevel), this),
          BloodPathogen_ (std::move (BloodPathogen), this),
          Trauma_ (std::move (Trauma), this),
          MacrophageResting_ (std::move (MacrophageResting), this),
          MacrophageActive_ (std::move (MacrophageActive), this),
          NeutrophilResting_ (std::move (NeutrophilResting), this),
          NeutrophilActive_ (std::move (NeutrophilActive), this),
          TumorNecrosisFactor_ (std::move (TumorNecrosisFactor), this),
          Interleukin6_ (std::move (Interleukin6), this),
          Interleukin10_ (std::move (Interleukin10), this),
          Interleukin12_ (std::move (Interleukin12), this),
          InducibleNOSPre_ (std::move (InducibleNOSPre), this),
          InducibleNOS_ (std::move (InducibleNOS), this),
          ConstitutiveNOS_ (std::move (ConstitutiveNOS), this),
          Nitrate_ (std::move (Nitrate), this),
          NitricOxide_ (std::move (NitricOxide), this),
          TissueIntegrity_ (std::move (TissueIntegrity), this),
          Catecholamines_ (std::move (Catecholamines), this),
          InflammationTime_ (std::move (InflammationTime), this),
          Source_ (this)
        {
        }

        InflammatoryResponseData::
        InflammatoryResponseData (const InflammatoryResponseData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          LocalPathogen_ (x.LocalPathogen_, f, this),
          LocalMacrophage_ (x.LocalMacrophage_, f, this),
          LocalNeutrophil_ (x.LocalNeutrophil_, f, this),
          LocalBarrier_ (x.LocalBarrier_, f, this),
          ActiveTLR_ (x.ActiveTLR_, f, this),
          AutonomicResponseLevel_ (x.AutonomicResponseLevel_, f, this),
          BloodPathogen_ (x.BloodPathogen_, f, this),
          Trauma_ (x.Trauma_, f, this),
          MacrophageResting_ (x.MacrophageResting_, f, this),
          MacrophageActive_ (x.MacrophageActive_, f, this),
          NeutrophilResting_ (x.NeutrophilResting_, f, this),
          NeutrophilActive_ (x.NeutrophilActive_, f, this),
          TumorNecrosisFactor_ (x.TumorNecrosisFactor_, f, this),
          Interleukin6_ (x.Interleukin6_, f, this),
          Interleukin10_ (x.Interleukin10_, f, this),
          Interleukin12_ (x.Interleukin12_, f, this),
          InducibleNOSPre_ (x.InducibleNOSPre_, f, this),
          InducibleNOS_ (x.InducibleNOS_, f, this),
          ConstitutiveNOS_ (x.ConstitutiveNOS_, f, this),
          Nitrate_ (x.Nitrate_, f, this),
          NitricOxide_ (x.NitricOxide_, f, this),
          TissueIntegrity_ (x.TissueIntegrity_, f, this),
          Catecholamines_ (x.Catecholamines_, f, this),
          InflammationTime_ (x.InflammationTime_, f, this),
          Source_ (x.Source_, f, this)
        {
        }

        InflammatoryResponseData::
        InflammatoryResponseData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          LocalPathogen_ (this),
          LocalMacrophage_ (this),
          LocalNeutrophil_ (this),
          LocalBarrier_ (this),
          ActiveTLR_ (this),
          AutonomicResponseLevel_ (this),
          BloodPathogen_ (this),
          Trauma_ (this),
          MacrophageResting_ (this),
          MacrophageActive_ (this),
          NeutrophilResting_ (this),
          NeutrophilActive_ (this),
          TumorNecrosisFactor_ (this),
          Interleukin6_ (this),
          Interleukin10_ (this),
          Interleukin12_ (this),
          InducibleNOSPre_ (this),
          InducibleNOS_ (this),
          ConstitutiveNOS_ (this),
          Nitrate_ (this),
          NitricOxide_ (this),
          TissueIntegrity_ (this),
          Catecholamines_ (this),
          InflammationTime_ (this),
          Source_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void InflammatoryResponseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LocalPathogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LocalPathogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LocalPathogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LocalPathogen_.present ())
                {
                  ::std::unique_ptr< LocalPathogen_type > r (
                    dynamic_cast< LocalPathogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LocalPathogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LocalMacrophage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LocalMacrophage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LocalMacrophage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LocalMacrophage_.present ())
                {
                  ::std::unique_ptr< LocalMacrophage_type > r (
                    dynamic_cast< LocalMacrophage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LocalMacrophage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LocalNeutrophil
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LocalNeutrophil",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LocalNeutrophil_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LocalNeutrophil_.present ())
                {
                  ::std::unique_ptr< LocalNeutrophil_type > r (
                    dynamic_cast< LocalNeutrophil_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LocalNeutrophil_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LocalBarrier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LocalBarrier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LocalBarrier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LocalBarrier_.present ())
                {
                  ::std::unique_ptr< LocalBarrier_type > r (
                    dynamic_cast< LocalBarrier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LocalBarrier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ActiveTLR
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveTLR",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveTLR_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ActiveTLR_.present ())
                {
                  ::std::unique_ptr< ActiveTLR_type > r (
                    dynamic_cast< ActiveTLR_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ActiveTLR_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AutonomicResponseLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AutonomicResponseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AutonomicResponseLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AutonomicResponseLevel_.present ())
                {
                  ::std::unique_ptr< AutonomicResponseLevel_type > r (
                    dynamic_cast< AutonomicResponseLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AutonomicResponseLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodPathogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodPathogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodPathogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BloodPathogen_.present ())
                {
                  ::std::unique_ptr< BloodPathogen_type > r (
                    dynamic_cast< BloodPathogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodPathogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Trauma
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Trauma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Trauma_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Trauma_.present ())
                {
                  ::std::unique_ptr< Trauma_type > r (
                    dynamic_cast< Trauma_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Trauma_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MacrophageResting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MacrophageResting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MacrophageResting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MacrophageResting_.present ())
                {
                  ::std::unique_ptr< MacrophageResting_type > r (
                    dynamic_cast< MacrophageResting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MacrophageResting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MacrophageActive
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MacrophageActive",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MacrophageActive_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MacrophageActive_.present ())
                {
                  ::std::unique_ptr< MacrophageActive_type > r (
                    dynamic_cast< MacrophageActive_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MacrophageActive_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutrophilResting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutrophilResting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutrophilResting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!NeutrophilResting_.present ())
                {
                  ::std::unique_ptr< NeutrophilResting_type > r (
                    dynamic_cast< NeutrophilResting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutrophilResting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutrophilActive
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutrophilActive",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutrophilActive_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!NeutrophilActive_.present ())
                {
                  ::std::unique_ptr< NeutrophilActive_type > r (
                    dynamic_cast< NeutrophilActive_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutrophilActive_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TumorNecrosisFactor
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TumorNecrosisFactor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TumorNecrosisFactor_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TumorNecrosisFactor_.present ())
                {
                  ::std::unique_ptr< TumorNecrosisFactor_type > r (
                    dynamic_cast< TumorNecrosisFactor_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TumorNecrosisFactor_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Interleukin6
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Interleukin6",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Interleukin6_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Interleukin6_.present ())
                {
                  ::std::unique_ptr< Interleukin6_type > r (
                    dynamic_cast< Interleukin6_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Interleukin6_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Interleukin10
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Interleukin10",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Interleukin10_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Interleukin10_.present ())
                {
                  ::std::unique_ptr< Interleukin10_type > r (
                    dynamic_cast< Interleukin10_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Interleukin10_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Interleukin12
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Interleukin12",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Interleukin12_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Interleukin12_.present ())
                {
                  ::std::unique_ptr< Interleukin12_type > r (
                    dynamic_cast< Interleukin12_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Interleukin12_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InducibleNOSPre
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InducibleNOSPre",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InducibleNOSPre_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InducibleNOSPre_.present ())
                {
                  ::std::unique_ptr< InducibleNOSPre_type > r (
                    dynamic_cast< InducibleNOSPre_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InducibleNOSPre_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InducibleNOS
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InducibleNOS",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InducibleNOS_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InducibleNOS_.present ())
                {
                  ::std::unique_ptr< InducibleNOS_type > r (
                    dynamic_cast< InducibleNOS_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InducibleNOS_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConstitutiveNOS
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConstitutiveNOS",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConstitutiveNOS_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ConstitutiveNOS_.present ())
                {
                  ::std::unique_ptr< ConstitutiveNOS_type > r (
                    dynamic_cast< ConstitutiveNOS_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConstitutiveNOS_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Nitrate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Nitrate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Nitrate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Nitrate_.present ())
                {
                  ::std::unique_ptr< Nitrate_type > r (
                    dynamic_cast< Nitrate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Nitrate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NitricOxide
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NitricOxide",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NitricOxide_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!NitricOxide_.present ())
                {
                  ::std::unique_ptr< NitricOxide_type > r (
                    dynamic_cast< NitricOxide_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NitricOxide_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueIntegrity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueIntegrity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueIntegrity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TissueIntegrity_.present ())
                {
                  ::std::unique_ptr< TissueIntegrity_type > r (
                    dynamic_cast< TissueIntegrity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueIntegrity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Catecholamines
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Catecholamines",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Catecholamines_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Catecholamines_.present ())
                {
                  ::std::unique_ptr< Catecholamines_type > r (
                    dynamic_cast< Catecholamines_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Catecholamines_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InflammationTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InflammationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InflammationTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InflammationTime_.present ())
                {
                  ::std::unique_ptr< InflammationTime_type > r (
                    dynamic_cast< InflammationTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InflammationTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Source
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Source",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Source_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Source_type > r (
                  dynamic_cast< Source_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Source_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!LocalPathogen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LocalPathogen",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LocalMacrophage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LocalMacrophage",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LocalNeutrophil_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LocalNeutrophil",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LocalBarrier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LocalBarrier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ActiveTLR_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActiveTLR",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AutonomicResponseLevel_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AutonomicResponseLevel",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BloodPathogen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BloodPathogen",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Trauma_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Trauma",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MacrophageResting_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MacrophageResting",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MacrophageActive_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MacrophageActive",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NeutrophilResting_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NeutrophilResting",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NeutrophilActive_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NeutrophilActive",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TumorNecrosisFactor_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TumorNecrosisFactor",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Interleukin6_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Interleukin6",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Interleukin10_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Interleukin10",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Interleukin12_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Interleukin12",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InducibleNOSPre_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InducibleNOSPre",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InducibleNOS_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InducibleNOS",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConstitutiveNOS_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConstitutiveNOS",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Nitrate_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Nitrate",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NitricOxide_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NitricOxide",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TissueIntegrity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TissueIntegrity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Catecholamines_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Catecholamines",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InflammationTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InflammationTime",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        InflammatoryResponseData* InflammatoryResponseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class InflammatoryResponseData (*this, f, c);
        }

        InflammatoryResponseData& InflammatoryResponseData::
        operator= (const InflammatoryResponseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->LocalPathogen_ = x.LocalPathogen_;
            this->LocalMacrophage_ = x.LocalMacrophage_;
            this->LocalNeutrophil_ = x.LocalNeutrophil_;
            this->LocalBarrier_ = x.LocalBarrier_;
            this->ActiveTLR_ = x.ActiveTLR_;
            this->AutonomicResponseLevel_ = x.AutonomicResponseLevel_;
            this->BloodPathogen_ = x.BloodPathogen_;
            this->Trauma_ = x.Trauma_;
            this->MacrophageResting_ = x.MacrophageResting_;
            this->MacrophageActive_ = x.MacrophageActive_;
            this->NeutrophilResting_ = x.NeutrophilResting_;
            this->NeutrophilActive_ = x.NeutrophilActive_;
            this->TumorNecrosisFactor_ = x.TumorNecrosisFactor_;
            this->Interleukin6_ = x.Interleukin6_;
            this->Interleukin10_ = x.Interleukin10_;
            this->Interleukin12_ = x.Interleukin12_;
            this->InducibleNOSPre_ = x.InducibleNOSPre_;
            this->InducibleNOS_ = x.InducibleNOS_;
            this->ConstitutiveNOS_ = x.ConstitutiveNOS_;
            this->Nitrate_ = x.Nitrate_;
            this->NitricOxide_ = x.NitricOxide_;
            this->TissueIntegrity_ = x.TissueIntegrity_;
            this->Catecholamines_ = x.Catecholamines_;
            this->InflammationTime_ = x.InflammationTime_;
            this->Source_ = x.Source_;
          }

          return *this;
        }

        InflammatoryResponseData::
        ~InflammatoryResponseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, InflammatoryResponseData >
        _xsd_InflammatoryResponseData_type_factory_init (
          "InflammatoryResponseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // BloodChemistrySystemData
        //

        BloodChemistrySystemData::
        BloodChemistrySystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          BloodDensity_ (this),
          ArterialBloodPH_ (this),
          ArterialBloodPHBaseline_ (this),
          VenousBloodPH_ (this),
          BloodSpecificHeat_ (this),
          BloodUreaNitrogenConcentration_ (this),
          CarbonDioxideSaturation_ (this),
          CarbonMonoxideSaturation_ (this),
          Hematocrit_ (this),
          HemoglobinContent_ (this),
          HemoglobinLostToUrine_ (this),
          OxygenSaturation_ (this),
          OxygenVenousSaturation_ (this),
          Phosphate_ (this),
          PlasmaVolume_ (this),
          PulseOximetry_ (this),
          RedBloodCellCount_ (this),
          RhTransfusionReactionVolume_ (this),
          ShuntFraction_ (this),
          StrongIonDifference_ (this),
          TotalProteinConcentration_ (this),
          VolumeFractionNeutralLipidInPlasma_ (this),
          VolumeFractionNeutralPhospholipidInPlasma_ (this),
          WhiteBloodCellCount_ (this),
          RedBloodCellAcetylcholinesterase_ (this),
          TotalBilirubin_ (this),
          InflammatoryResponse_ (this),
          ArterialCarbonDioxidePressure_ (this),
          ArterialOxygenPressure_ (this),
          PulmonaryArterialCarbonDioxidePressure_ (this),
          PulmonaryArterialOxygenPressure_ (this),
          PulmonaryVenousCarbonDioxidePressure_ (this),
          PulmonaryVenousOxygenPressure_ (this),
          VenousCarbonDioxidePressure_ (this),
          VenousOxygenPressure_ (this)
        {
        }

        BloodChemistrySystemData::
        BloodChemistrySystemData (const BloodChemistrySystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          BloodDensity_ (x.BloodDensity_, f, this),
          ArterialBloodPH_ (x.ArterialBloodPH_, f, this),
          ArterialBloodPHBaseline_ (x.ArterialBloodPHBaseline_, f, this),
          VenousBloodPH_ (x.VenousBloodPH_, f, this),
          BloodSpecificHeat_ (x.BloodSpecificHeat_, f, this),
          BloodUreaNitrogenConcentration_ (x.BloodUreaNitrogenConcentration_, f, this),
          CarbonDioxideSaturation_ (x.CarbonDioxideSaturation_, f, this),
          CarbonMonoxideSaturation_ (x.CarbonMonoxideSaturation_, f, this),
          Hematocrit_ (x.Hematocrit_, f, this),
          HemoglobinContent_ (x.HemoglobinContent_, f, this),
          HemoglobinLostToUrine_ (x.HemoglobinLostToUrine_, f, this),
          OxygenSaturation_ (x.OxygenSaturation_, f, this),
          OxygenVenousSaturation_ (x.OxygenVenousSaturation_, f, this),
          Phosphate_ (x.Phosphate_, f, this),
          PlasmaVolume_ (x.PlasmaVolume_, f, this),
          PulseOximetry_ (x.PulseOximetry_, f, this),
          RedBloodCellCount_ (x.RedBloodCellCount_, f, this),
          RhTransfusionReactionVolume_ (x.RhTransfusionReactionVolume_, f, this),
          ShuntFraction_ (x.ShuntFraction_, f, this),
          StrongIonDifference_ (x.StrongIonDifference_, f, this),
          TotalProteinConcentration_ (x.TotalProteinConcentration_, f, this),
          VolumeFractionNeutralLipidInPlasma_ (x.VolumeFractionNeutralLipidInPlasma_, f, this),
          VolumeFractionNeutralPhospholipidInPlasma_ (x.VolumeFractionNeutralPhospholipidInPlasma_, f, this),
          WhiteBloodCellCount_ (x.WhiteBloodCellCount_, f, this),
          RedBloodCellAcetylcholinesterase_ (x.RedBloodCellAcetylcholinesterase_, f, this),
          TotalBilirubin_ (x.TotalBilirubin_, f, this),
          InflammatoryResponse_ (x.InflammatoryResponse_, f, this),
          ArterialCarbonDioxidePressure_ (x.ArterialCarbonDioxidePressure_, f, this),
          ArterialOxygenPressure_ (x.ArterialOxygenPressure_, f, this),
          PulmonaryArterialCarbonDioxidePressure_ (x.PulmonaryArterialCarbonDioxidePressure_, f, this),
          PulmonaryArterialOxygenPressure_ (x.PulmonaryArterialOxygenPressure_, f, this),
          PulmonaryVenousCarbonDioxidePressure_ (x.PulmonaryVenousCarbonDioxidePressure_, f, this),
          PulmonaryVenousOxygenPressure_ (x.PulmonaryVenousOxygenPressure_, f, this),
          VenousCarbonDioxidePressure_ (x.VenousCarbonDioxidePressure_, f, this),
          VenousOxygenPressure_ (x.VenousOxygenPressure_, f, this)
        {
        }

        BloodChemistrySystemData::
        BloodChemistrySystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          BloodDensity_ (this),
          ArterialBloodPH_ (this),
          ArterialBloodPHBaseline_ (this),
          VenousBloodPH_ (this),
          BloodSpecificHeat_ (this),
          BloodUreaNitrogenConcentration_ (this),
          CarbonDioxideSaturation_ (this),
          CarbonMonoxideSaturation_ (this),
          Hematocrit_ (this),
          HemoglobinContent_ (this),
          HemoglobinLostToUrine_ (this),
          OxygenSaturation_ (this),
          OxygenVenousSaturation_ (this),
          Phosphate_ (this),
          PlasmaVolume_ (this),
          PulseOximetry_ (this),
          RedBloodCellCount_ (this),
          RhTransfusionReactionVolume_ (this),
          ShuntFraction_ (this),
          StrongIonDifference_ (this),
          TotalProteinConcentration_ (this),
          VolumeFractionNeutralLipidInPlasma_ (this),
          VolumeFractionNeutralPhospholipidInPlasma_ (this),
          WhiteBloodCellCount_ (this),
          RedBloodCellAcetylcholinesterase_ (this),
          TotalBilirubin_ (this),
          InflammatoryResponse_ (this),
          ArterialCarbonDioxidePressure_ (this),
          ArterialOxygenPressure_ (this),
          PulmonaryArterialCarbonDioxidePressure_ (this),
          PulmonaryArterialOxygenPressure_ (this),
          PulmonaryVenousCarbonDioxidePressure_ (this),
          PulmonaryVenousOxygenPressure_ (this),
          VenousCarbonDioxidePressure_ (this),
          VenousOxygenPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BloodChemistrySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BloodDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodDensity_)
                {
                  ::std::unique_ptr< BloodDensity_type > r (
                    dynamic_cast< BloodDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialBloodPH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialBloodPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialBloodPH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialBloodPH_)
                {
                  ::std::unique_ptr< ArterialBloodPH_type > r (
                    dynamic_cast< ArterialBloodPH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialBloodPH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialBloodPHBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialBloodPHBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialBloodPHBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialBloodPHBaseline_)
                {
                  ::std::unique_ptr< ArterialBloodPHBaseline_type > r (
                    dynamic_cast< ArterialBloodPHBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialBloodPHBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VenousBloodPH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VenousBloodPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VenousBloodPH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VenousBloodPH_)
                {
                  ::std::unique_ptr< VenousBloodPH_type > r (
                    dynamic_cast< VenousBloodPH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VenousBloodPH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodSpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodSpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodSpecificHeat_)
                {
                  ::std::unique_ptr< BloodSpecificHeat_type > r (
                    dynamic_cast< BloodSpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodSpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodUreaNitrogenConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodUreaNitrogenConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodUreaNitrogenConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodUreaNitrogenConcentration_)
                {
                  ::std::unique_ptr< BloodUreaNitrogenConcentration_type > r (
                    dynamic_cast< BloodUreaNitrogenConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodUreaNitrogenConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarbonDioxideSaturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbonDioxideSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbonDioxideSaturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbonDioxideSaturation_)
                {
                  ::std::unique_ptr< CarbonDioxideSaturation_type > r (
                    dynamic_cast< CarbonDioxideSaturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbonDioxideSaturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarbonMonoxideSaturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbonMonoxideSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbonMonoxideSaturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbonMonoxideSaturation_)
                {
                  ::std::unique_ptr< CarbonMonoxideSaturation_type > r (
                    dynamic_cast< CarbonMonoxideSaturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbonMonoxideSaturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Hematocrit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Hematocrit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Hematocrit_)
                {
                  ::std::unique_ptr< Hematocrit_type > r (
                    dynamic_cast< Hematocrit_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Hematocrit_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HemoglobinContent
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HemoglobinContent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HemoglobinContent_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HemoglobinContent_)
                {
                  ::std::unique_ptr< HemoglobinContent_type > r (
                    dynamic_cast< HemoglobinContent_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HemoglobinContent_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HemoglobinLostToUrine
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HemoglobinLostToUrine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HemoglobinLostToUrine_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HemoglobinLostToUrine_)
                {
                  ::std::unique_ptr< HemoglobinLostToUrine_type > r (
                    dynamic_cast< HemoglobinLostToUrine_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HemoglobinLostToUrine_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenSaturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenSaturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenSaturation_)
                {
                  ::std::unique_ptr< OxygenSaturation_type > r (
                    dynamic_cast< OxygenSaturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenSaturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenVenousSaturation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenVenousSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenVenousSaturation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenVenousSaturation_)
                {
                  ::std::unique_ptr< OxygenVenousSaturation_type > r (
                    dynamic_cast< OxygenVenousSaturation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenVenousSaturation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Phosphate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Phosphate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Phosphate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Phosphate_)
                {
                  ::std::unique_ptr< Phosphate_type > r (
                    dynamic_cast< Phosphate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Phosphate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlasmaVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlasmaVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlasmaVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlasmaVolume_)
                {
                  ::std::unique_ptr< PlasmaVolume_type > r (
                    dynamic_cast< PlasmaVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlasmaVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulseOximetry
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulseOximetry",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulseOximetry_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulseOximetry_)
                {
                  ::std::unique_ptr< PulseOximetry_type > r (
                    dynamic_cast< PulseOximetry_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulseOximetry_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCellCount_)
                {
                  ::std::unique_ptr< RedBloodCellCount_type > r (
                    dynamic_cast< RedBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RhTransfusionReactionVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RhTransfusionReactionVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RhTransfusionReactionVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RhTransfusionReactionVolume_)
                {
                  ::std::unique_ptr< RhTransfusionReactionVolume_type > r (
                    dynamic_cast< RhTransfusionReactionVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RhTransfusionReactionVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ShuntFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ShuntFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ShuntFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ShuntFraction_)
                {
                  ::std::unique_ptr< ShuntFraction_type > r (
                    dynamic_cast< ShuntFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ShuntFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StrongIonDifference
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StrongIonDifference",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StrongIonDifference_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StrongIonDifference_)
                {
                  ::std::unique_ptr< StrongIonDifference_type > r (
                    dynamic_cast< StrongIonDifference_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StrongIonDifference_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalProteinConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalProteinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalProteinConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalProteinConcentration_)
                {
                  ::std::unique_ptr< TotalProteinConcentration_type > r (
                    dynamic_cast< TotalProteinConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalProteinConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VolumeFractionNeutralLipidInPlasma
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VolumeFractionNeutralLipidInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VolumeFractionNeutralLipidInPlasma_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VolumeFractionNeutralLipidInPlasma_)
                {
                  ::std::unique_ptr< VolumeFractionNeutralLipidInPlasma_type > r (
                    dynamic_cast< VolumeFractionNeutralLipidInPlasma_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VolumeFractionNeutralLipidInPlasma_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VolumeFractionNeutralPhospholipidInPlasma
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VolumeFractionNeutralPhospholipidInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VolumeFractionNeutralPhospholipidInPlasma_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VolumeFractionNeutralPhospholipidInPlasma_)
                {
                  ::std::unique_ptr< VolumeFractionNeutralPhospholipidInPlasma_type > r (
                    dynamic_cast< VolumeFractionNeutralPhospholipidInPlasma_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VolumeFractionNeutralPhospholipidInPlasma_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCellCount_)
                {
                  ::std::unique_ptr< WhiteBloodCellCount_type > r (
                    dynamic_cast< WhiteBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCellAcetylcholinesterase
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCellAcetylcholinesterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCellAcetylcholinesterase_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCellAcetylcholinesterase_)
                {
                  ::std::unique_ptr< RedBloodCellAcetylcholinesterase_type > r (
                    dynamic_cast< RedBloodCellAcetylcholinesterase_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCellAcetylcholinesterase_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalBilirubin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBilirubin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalBilirubin_)
                {
                  ::std::unique_ptr< TotalBilirubin_type > r (
                    dynamic_cast< TotalBilirubin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBilirubin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InflammatoryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InflammatoryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InflammatoryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InflammatoryResponse_)
                {
                  ::std::unique_ptr< InflammatoryResponse_type > r (
                    dynamic_cast< InflammatoryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InflammatoryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< ArterialCarbonDioxidePressure_type > r (
                    dynamic_cast< ArterialCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialOxygenPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialOxygenPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialOxygenPressure_)
                {
                  ::std::unique_ptr< ArterialOxygenPressure_type > r (
                    dynamic_cast< ArterialOxygenPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialOxygenPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryArterialCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryArterialCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryArterialCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryArterialCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< PulmonaryArterialCarbonDioxidePressure_type > r (
                    dynamic_cast< PulmonaryArterialCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryArterialCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryArterialOxygenPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryArterialOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryArterialOxygenPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryArterialOxygenPressure_)
                {
                  ::std::unique_ptr< PulmonaryArterialOxygenPressure_type > r (
                    dynamic_cast< PulmonaryArterialOxygenPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryArterialOxygenPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVenousCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVenousCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVenousCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVenousCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< PulmonaryVenousCarbonDioxidePressure_type > r (
                    dynamic_cast< PulmonaryVenousCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVenousCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVenousOxygenPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVenousOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVenousOxygenPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVenousOxygenPressure_)
                {
                  ::std::unique_ptr< PulmonaryVenousOxygenPressure_type > r (
                    dynamic_cast< PulmonaryVenousOxygenPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVenousOxygenPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VenousCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VenousCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VenousCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VenousCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< VenousCarbonDioxidePressure_type > r (
                    dynamic_cast< VenousCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VenousCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VenousOxygenPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VenousOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VenousOxygenPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VenousOxygenPressure_)
                {
                  ::std::unique_ptr< VenousOxygenPressure_type > r (
                    dynamic_cast< VenousOxygenPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VenousOxygenPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        BloodChemistrySystemData* BloodChemistrySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BloodChemistrySystemData (*this, f, c);
        }

        BloodChemistrySystemData& BloodChemistrySystemData::
        operator= (const BloodChemistrySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->BloodDensity_ = x.BloodDensity_;
            this->ArterialBloodPH_ = x.ArterialBloodPH_;
            this->ArterialBloodPHBaseline_ = x.ArterialBloodPHBaseline_;
            this->VenousBloodPH_ = x.VenousBloodPH_;
            this->BloodSpecificHeat_ = x.BloodSpecificHeat_;
            this->BloodUreaNitrogenConcentration_ = x.BloodUreaNitrogenConcentration_;
            this->CarbonDioxideSaturation_ = x.CarbonDioxideSaturation_;
            this->CarbonMonoxideSaturation_ = x.CarbonMonoxideSaturation_;
            this->Hematocrit_ = x.Hematocrit_;
            this->HemoglobinContent_ = x.HemoglobinContent_;
            this->HemoglobinLostToUrine_ = x.HemoglobinLostToUrine_;
            this->OxygenSaturation_ = x.OxygenSaturation_;
            this->OxygenVenousSaturation_ = x.OxygenVenousSaturation_;
            this->Phosphate_ = x.Phosphate_;
            this->PlasmaVolume_ = x.PlasmaVolume_;
            this->PulseOximetry_ = x.PulseOximetry_;
            this->RedBloodCellCount_ = x.RedBloodCellCount_;
            this->RhTransfusionReactionVolume_ = x.RhTransfusionReactionVolume_;
            this->ShuntFraction_ = x.ShuntFraction_;
            this->StrongIonDifference_ = x.StrongIonDifference_;
            this->TotalProteinConcentration_ = x.TotalProteinConcentration_;
            this->VolumeFractionNeutralLipidInPlasma_ = x.VolumeFractionNeutralLipidInPlasma_;
            this->VolumeFractionNeutralPhospholipidInPlasma_ = x.VolumeFractionNeutralPhospholipidInPlasma_;
            this->WhiteBloodCellCount_ = x.WhiteBloodCellCount_;
            this->RedBloodCellAcetylcholinesterase_ = x.RedBloodCellAcetylcholinesterase_;
            this->TotalBilirubin_ = x.TotalBilirubin_;
            this->InflammatoryResponse_ = x.InflammatoryResponse_;
            this->ArterialCarbonDioxidePressure_ = x.ArterialCarbonDioxidePressure_;
            this->ArterialOxygenPressure_ = x.ArterialOxygenPressure_;
            this->PulmonaryArterialCarbonDioxidePressure_ = x.PulmonaryArterialCarbonDioxidePressure_;
            this->PulmonaryArterialOxygenPressure_ = x.PulmonaryArterialOxygenPressure_;
            this->PulmonaryVenousCarbonDioxidePressure_ = x.PulmonaryVenousCarbonDioxidePressure_;
            this->PulmonaryVenousOxygenPressure_ = x.PulmonaryVenousOxygenPressure_;
            this->VenousCarbonDioxidePressure_ = x.VenousCarbonDioxidePressure_;
            this->VenousOxygenPressure_ = x.VenousOxygenPressure_;
          }

          return *this;
        }

        BloodChemistrySystemData::
        ~BloodChemistrySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BloodChemistrySystemData >
        _xsd_BloodChemistrySystemData_type_factory_init (
          "BloodChemistrySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumHeartRhythm
        //

        enumHeartRhythm::
        enumHeartRhythm (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumHeartRhythm_convert ();
        }

        enumHeartRhythm::
        enumHeartRhythm (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumHeartRhythm_convert ();
        }

        enumHeartRhythm::
        enumHeartRhythm (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumHeartRhythm_convert ();
        }

        enumHeartRhythm* enumHeartRhythm::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumHeartRhythm (*this, f, c);
        }

        enumHeartRhythm::value enumHeartRhythm::
        _xsd_enumHeartRhythm_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumHeartRhythm_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumHeartRhythm_indexes_,
                            _xsd_enumHeartRhythm_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumHeartRhythm_indexes_ + 2 || _xsd_enumHeartRhythm_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumHeartRhythm::
        _xsd_enumHeartRhythm_literals_[2] =
        {
          "Asystole",
          "NormalSinus"
        };

        const enumHeartRhythm::value enumHeartRhythm::
        _xsd_enumHeartRhythm_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumHeartRhythm::Asystole,
          ::mil::tatrc::physiology::datamodel::enumHeartRhythm::NormalSinus
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumHeartRhythm >
        _xsd_enumHeartRhythm_type_factory_init (
          "enumHeartRhythm",
          "uri:/mil/tatrc/physiology/datamodel");

        // CardiovascularSystemData
        //

        CardiovascularSystemData::
        CardiovascularSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          ArterialPressure_ (this),
          BloodVolume_ (this),
          CardiacIndex_ (this),
          CardiacOutput_ (this),
          CentralVenousPressure_ (this),
          CerebralBloodFlow_ (this),
          CerebralPerfusionPressure_ (this),
          DiastolicArterialPressure_ (this),
          HeartEjectionFraction_ (this),
          HeartRate_ (this),
          HeartRhythm_ (this),
          HeartStrokeVolume_ (this),
          IntracranialPressure_ (this),
          MeanArterialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (this),
          MeanCentralVenousPressure_ (this),
          MeanSkinFlow_ (this),
          PulmonaryArterialPressure_ (this),
          PulmonaryCapillariesWedgePressure_ (this),
          PulmonaryDiastolicArterialPressure_ (this),
          PulmonaryMeanArterialPressure_ (this),
          PulmonaryMeanCapillaryFlow_ (this),
          PulmonaryMeanShuntFlow_ (this),
          PulmonarySystolicArterialPressure_ (this),
          PulmonaryVascularResistance_ (this),
          PulmonaryVascularResistanceIndex_ (this),
          PulsePressure_ (this),
          SystemicVascularResistance_ (this),
          SystolicArterialPressure_ (this)
        {
        }

        CardiovascularSystemData::
        CardiovascularSystemData (const CardiovascularSystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          ArterialPressure_ (x.ArterialPressure_, f, this),
          BloodVolume_ (x.BloodVolume_, f, this),
          CardiacIndex_ (x.CardiacIndex_, f, this),
          CardiacOutput_ (x.CardiacOutput_, f, this),
          CentralVenousPressure_ (x.CentralVenousPressure_, f, this),
          CerebralBloodFlow_ (x.CerebralBloodFlow_, f, this),
          CerebralPerfusionPressure_ (x.CerebralPerfusionPressure_, f, this),
          DiastolicArterialPressure_ (x.DiastolicArterialPressure_, f, this),
          HeartEjectionFraction_ (x.HeartEjectionFraction_, f, this),
          HeartRate_ (x.HeartRate_, f, this),
          HeartRhythm_ (x.HeartRhythm_, f, this),
          HeartStrokeVolume_ (x.HeartStrokeVolume_, f, this),
          IntracranialPressure_ (x.IntracranialPressure_, f, this),
          MeanArterialPressure_ (x.MeanArterialPressure_, f, this),
          MeanArterialCarbonDioxidePartialPressure_ (x.MeanArterialCarbonDioxidePartialPressure_, f, this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (x.MeanArterialCarbonDioxidePartialPressureDelta_, f, this),
          MeanCentralVenousPressure_ (x.MeanCentralVenousPressure_, f, this),
          MeanSkinFlow_ (x.MeanSkinFlow_, f, this),
          PulmonaryArterialPressure_ (x.PulmonaryArterialPressure_, f, this),
          PulmonaryCapillariesWedgePressure_ (x.PulmonaryCapillariesWedgePressure_, f, this),
          PulmonaryDiastolicArterialPressure_ (x.PulmonaryDiastolicArterialPressure_, f, this),
          PulmonaryMeanArterialPressure_ (x.PulmonaryMeanArterialPressure_, f, this),
          PulmonaryMeanCapillaryFlow_ (x.PulmonaryMeanCapillaryFlow_, f, this),
          PulmonaryMeanShuntFlow_ (x.PulmonaryMeanShuntFlow_, f, this),
          PulmonarySystolicArterialPressure_ (x.PulmonarySystolicArterialPressure_, f, this),
          PulmonaryVascularResistance_ (x.PulmonaryVascularResistance_, f, this),
          PulmonaryVascularResistanceIndex_ (x.PulmonaryVascularResistanceIndex_, f, this),
          PulsePressure_ (x.PulsePressure_, f, this),
          SystemicVascularResistance_ (x.SystemicVascularResistance_, f, this),
          SystolicArterialPressure_ (x.SystolicArterialPressure_, f, this)
        {
        }

        CardiovascularSystemData::
        CardiovascularSystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          ArterialPressure_ (this),
          BloodVolume_ (this),
          CardiacIndex_ (this),
          CardiacOutput_ (this),
          CentralVenousPressure_ (this),
          CerebralBloodFlow_ (this),
          CerebralPerfusionPressure_ (this),
          DiastolicArterialPressure_ (this),
          HeartEjectionFraction_ (this),
          HeartRate_ (this),
          HeartRhythm_ (this),
          HeartStrokeVolume_ (this),
          IntracranialPressure_ (this),
          MeanArterialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (this),
          MeanCentralVenousPressure_ (this),
          MeanSkinFlow_ (this),
          PulmonaryArterialPressure_ (this),
          PulmonaryCapillariesWedgePressure_ (this),
          PulmonaryDiastolicArterialPressure_ (this),
          PulmonaryMeanArterialPressure_ (this),
          PulmonaryMeanCapillaryFlow_ (this),
          PulmonaryMeanShuntFlow_ (this),
          PulmonarySystolicArterialPressure_ (this),
          PulmonaryVascularResistance_ (this),
          PulmonaryVascularResistanceIndex_ (this),
          PulsePressure_ (this),
          SystemicVascularResistance_ (this),
          SystolicArterialPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CardiovascularSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialPressure_)
                {
                  ::std::unique_ptr< ArterialPressure_type > r (
                    dynamic_cast< ArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodVolume_)
                {
                  ::std::unique_ptr< BloodVolume_type > r (
                    dynamic_cast< BloodVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiacIndex_)
                {
                  ::std::unique_ptr< CardiacIndex_type > r (
                    dynamic_cast< CardiacIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacOutput
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacOutput_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiacOutput_)
                {
                  ::std::unique_ptr< CardiacOutput_type > r (
                    dynamic_cast< CardiacOutput_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacOutput_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralVenousPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralVenousPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralVenousPressure_)
                {
                  ::std::unique_ptr< CentralVenousPressure_type > r (
                    dynamic_cast< CentralVenousPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralVenousPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CerebralBloodFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CerebralBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CerebralBloodFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CerebralBloodFlow_)
                {
                  ::std::unique_ptr< CerebralBloodFlow_type > r (
                    dynamic_cast< CerebralBloodFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CerebralBloodFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CerebralPerfusionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CerebralPerfusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CerebralPerfusionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CerebralPerfusionPressure_)
                {
                  ::std::unique_ptr< CerebralPerfusionPressure_type > r (
                    dynamic_cast< CerebralPerfusionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CerebralPerfusionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DiastolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DiastolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DiastolicArterialPressure_)
                {
                  ::std::unique_ptr< DiastolicArterialPressure_type > r (
                    dynamic_cast< DiastolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DiastolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartEjectionFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartEjectionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartEjectionFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartEjectionFraction_)
                {
                  ::std::unique_ptr< HeartEjectionFraction_type > r (
                    dynamic_cast< HeartEjectionFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartEjectionFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRate_)
                {
                  ::std::unique_ptr< HeartRate_type > r (
                    dynamic_cast< HeartRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRhythm
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRhythm",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRhythm_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRhythm_)
                {
                  ::std::unique_ptr< HeartRhythm_type > r (
                    dynamic_cast< HeartRhythm_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRhythm_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartStrokeVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartStrokeVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartStrokeVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartStrokeVolume_)
                {
                  ::std::unique_ptr< HeartStrokeVolume_type > r (
                    dynamic_cast< HeartStrokeVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartStrokeVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntracranialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntracranialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntracranialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->IntracranialPressure_)
                {
                  ::std::unique_ptr< IntracranialPressure_type > r (
                    dynamic_cast< IntracranialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntracranialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialPressure_)
                {
                  ::std::unique_ptr< MeanArterialPressure_type > r (
                    dynamic_cast< MeanArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialCarbonDioxidePartialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialCarbonDioxidePartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialCarbonDioxidePartialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialCarbonDioxidePartialPressure_)
                {
                  ::std::unique_ptr< MeanArterialCarbonDioxidePartialPressure_type > r (
                    dynamic_cast< MeanArterialCarbonDioxidePartialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialCarbonDioxidePartialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialCarbonDioxidePartialPressureDelta
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialCarbonDioxidePartialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialCarbonDioxidePartialPressureDelta_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialCarbonDioxidePartialPressureDelta_)
                {
                  ::std::unique_ptr< MeanArterialCarbonDioxidePartialPressureDelta_type > r (
                    dynamic_cast< MeanArterialCarbonDioxidePartialPressureDelta_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialCarbonDioxidePartialPressureDelta_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCentralVenousPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCentralVenousPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCentralVenousPressure_)
                {
                  ::std::unique_ptr< MeanCentralVenousPressure_type > r (
                    dynamic_cast< MeanCentralVenousPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCentralVenousPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanSkinFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanSkinFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanSkinFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanSkinFlow_)
                {
                  ::std::unique_ptr< MeanSkinFlow_type > r (
                    dynamic_cast< MeanSkinFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanSkinFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryArterialPressure_type > r (
                    dynamic_cast< PulmonaryArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryCapillariesWedgePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryCapillariesWedgePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryCapillariesWedgePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryCapillariesWedgePressure_)
                {
                  ::std::unique_ptr< PulmonaryCapillariesWedgePressure_type > r (
                    dynamic_cast< PulmonaryCapillariesWedgePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryCapillariesWedgePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryDiastolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryDiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryDiastolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryDiastolicArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryDiastolicArterialPressure_type > r (
                    dynamic_cast< PulmonaryDiastolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryDiastolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryMeanArterialPressure_type > r (
                    dynamic_cast< PulmonaryMeanArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanCapillaryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanCapillaryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanCapillaryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanCapillaryFlow_)
                {
                  ::std::unique_ptr< PulmonaryMeanCapillaryFlow_type > r (
                    dynamic_cast< PulmonaryMeanCapillaryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanCapillaryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanShuntFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanShuntFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanShuntFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanShuntFlow_)
                {
                  ::std::unique_ptr< PulmonaryMeanShuntFlow_type > r (
                    dynamic_cast< PulmonaryMeanShuntFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanShuntFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonarySystolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonarySystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonarySystolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonarySystolicArterialPressure_)
                {
                  ::std::unique_ptr< PulmonarySystolicArterialPressure_type > r (
                    dynamic_cast< PulmonarySystolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonarySystolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVascularResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVascularResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVascularResistance_)
                {
                  ::std::unique_ptr< PulmonaryVascularResistance_type > r (
                    dynamic_cast< PulmonaryVascularResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVascularResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVascularResistanceIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVascularResistanceIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVascularResistanceIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVascularResistanceIndex_)
                {
                  ::std::unique_ptr< PulmonaryVascularResistanceIndex_type > r (
                    dynamic_cast< PulmonaryVascularResistanceIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVascularResistanceIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulsePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulsePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulsePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulsePressure_)
                {
                  ::std::unique_ptr< PulsePressure_type > r (
                    dynamic_cast< PulsePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulsePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystemicVascularResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystemicVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystemicVascularResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystemicVascularResistance_)
                {
                  ::std::unique_ptr< SystemicVascularResistance_type > r (
                    dynamic_cast< SystemicVascularResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystemicVascularResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystolicArterialPressure_)
                {
                  ::std::unique_ptr< SystolicArterialPressure_type > r (
                    dynamic_cast< SystolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CardiovascularSystemData* CardiovascularSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CardiovascularSystemData (*this, f, c);
        }

        CardiovascularSystemData& CardiovascularSystemData::
        operator= (const CardiovascularSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->ArterialPressure_ = x.ArterialPressure_;
            this->BloodVolume_ = x.BloodVolume_;
            this->CardiacIndex_ = x.CardiacIndex_;
            this->CardiacOutput_ = x.CardiacOutput_;
            this->CentralVenousPressure_ = x.CentralVenousPressure_;
            this->CerebralBloodFlow_ = x.CerebralBloodFlow_;
            this->CerebralPerfusionPressure_ = x.CerebralPerfusionPressure_;
            this->DiastolicArterialPressure_ = x.DiastolicArterialPressure_;
            this->HeartEjectionFraction_ = x.HeartEjectionFraction_;
            this->HeartRate_ = x.HeartRate_;
            this->HeartRhythm_ = x.HeartRhythm_;
            this->HeartStrokeVolume_ = x.HeartStrokeVolume_;
            this->IntracranialPressure_ = x.IntracranialPressure_;
            this->MeanArterialPressure_ = x.MeanArterialPressure_;
            this->MeanArterialCarbonDioxidePartialPressure_ = x.MeanArterialCarbonDioxidePartialPressure_;
            this->MeanArterialCarbonDioxidePartialPressureDelta_ = x.MeanArterialCarbonDioxidePartialPressureDelta_;
            this->MeanCentralVenousPressure_ = x.MeanCentralVenousPressure_;
            this->MeanSkinFlow_ = x.MeanSkinFlow_;
            this->PulmonaryArterialPressure_ = x.PulmonaryArterialPressure_;
            this->PulmonaryCapillariesWedgePressure_ = x.PulmonaryCapillariesWedgePressure_;
            this->PulmonaryDiastolicArterialPressure_ = x.PulmonaryDiastolicArterialPressure_;
            this->PulmonaryMeanArterialPressure_ = x.PulmonaryMeanArterialPressure_;
            this->PulmonaryMeanCapillaryFlow_ = x.PulmonaryMeanCapillaryFlow_;
            this->PulmonaryMeanShuntFlow_ = x.PulmonaryMeanShuntFlow_;
            this->PulmonarySystolicArterialPressure_ = x.PulmonarySystolicArterialPressure_;
            this->PulmonaryVascularResistance_ = x.PulmonaryVascularResistance_;
            this->PulmonaryVascularResistanceIndex_ = x.PulmonaryVascularResistanceIndex_;
            this->PulsePressure_ = x.PulsePressure_;
            this->SystemicVascularResistance_ = x.SystemicVascularResistance_;
            this->SystolicArterialPressure_ = x.SystolicArterialPressure_;
          }

          return *this;
        }

        CardiovascularSystemData::
        ~CardiovascularSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_type_factory_init (
          "CardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DrugSystemData
        //

        DrugSystemData::
        DrugSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          AntibioticActivity_ (this),
          BronchodilationLevel_ (this),
          FeverChange_ (this),
          HeartRateChange_ (this),
          HemorrhageChange_ (this),
          MeanBloodPressureChange_ (this),
          NeuromuscularBlockLevel_ (this),
          PainToleranceChange_ (this),
          PulsePressureChange_ (this),
          RespirationRateChange_ (this),
          SedationLevel_ (this),
          TidalVolumeChange_ (this),
          TubularPermeabilityChange_ (this),
          CentralNervousResponse_ (this)
        {
        }

        DrugSystemData::
        DrugSystemData (const DrugSystemData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          AntibioticActivity_ (x.AntibioticActivity_, f, this),
          BronchodilationLevel_ (x.BronchodilationLevel_, f, this),
          FeverChange_ (x.FeverChange_, f, this),
          HeartRateChange_ (x.HeartRateChange_, f, this),
          HemorrhageChange_ (x.HemorrhageChange_, f, this),
          MeanBloodPressureChange_ (x.MeanBloodPressureChange_, f, this),
          NeuromuscularBlockLevel_ (x.NeuromuscularBlockLevel_, f, this),
          PainToleranceChange_ (x.PainToleranceChange_, f, this),
          PulsePressureChange_ (x.PulsePressureChange_, f, this),
          RespirationRateChange_ (x.RespirationRateChange_, f, this),
          SedationLevel_ (x.SedationLevel_, f, this),
          TidalVolumeChange_ (x.TidalVolumeChange_, f, this),
          TubularPermeabilityChange_ (x.TubularPermeabilityChange_, f, this),
          CentralNervousResponse_ (x.CentralNervousResponse_, f, this)
        {
        }

        DrugSystemData::
        DrugSystemData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          AntibioticActivity_ (this),
          BronchodilationLevel_ (this),
          FeverChange_ (this),
          HeartRateChange_ (this),
          HemorrhageChange_ (this),
          MeanBloodPressureChange_ (this),
          NeuromuscularBlockLevel_ (this),
          PainToleranceChange_ (this),
          PulsePressureChange_ (this),
          RespirationRateChange_ (this),
          SedationLevel_ (this),
          TidalVolumeChange_ (this),
          TubularPermeabilityChange_ (this),
          CentralNervousResponse_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DrugSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AntibioticActivity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AntibioticActivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AntibioticActivity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AntibioticActivity_)
                {
                  ::std::unique_ptr< AntibioticActivity_type > r (
                    dynamic_cast< AntibioticActivity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AntibioticActivity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BronchodilationLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BronchodilationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BronchodilationLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BronchodilationLevel_)
                {
                  ::std::unique_ptr< BronchodilationLevel_type > r (
                    dynamic_cast< BronchodilationLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BronchodilationLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FeverChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FeverChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FeverChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FeverChange_)
                {
                  ::std::unique_ptr< FeverChange_type > r (
                    dynamic_cast< FeverChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FeverChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRateChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRateChange_)
                {
                  ::std::unique_ptr< HeartRateChange_type > r (
                    dynamic_cast< HeartRateChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HemorrhageChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HemorrhageChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HemorrhageChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HemorrhageChange_)
                {
                  ::std::unique_ptr< HemorrhageChange_type > r (
                    dynamic_cast< HemorrhageChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HemorrhageChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanBloodPressureChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanBloodPressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanBloodPressureChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanBloodPressureChange_)
                {
                  ::std::unique_ptr< MeanBloodPressureChange_type > r (
                    dynamic_cast< MeanBloodPressureChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanBloodPressureChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeuromuscularBlockLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeuromuscularBlockLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeuromuscularBlockLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeuromuscularBlockLevel_)
                {
                  ::std::unique_ptr< NeuromuscularBlockLevel_type > r (
                    dynamic_cast< NeuromuscularBlockLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeuromuscularBlockLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PainToleranceChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PainToleranceChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PainToleranceChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PainToleranceChange_)
                {
                  ::std::unique_ptr< PainToleranceChange_type > r (
                    dynamic_cast< PainToleranceChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PainToleranceChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulsePressureChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulsePressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulsePressureChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulsePressureChange_)
                {
                  ::std::unique_ptr< PulsePressureChange_type > r (
                    dynamic_cast< PulsePressureChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulsePressureChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRateChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRateChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationRateChange_)
                {
                  ::std::unique_ptr< RespirationRateChange_type > r (
                    dynamic_cast< RespirationRateChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRateChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SedationLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SedationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SedationLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SedationLevel_)
                {
                  ::std::unique_ptr< SedationLevel_type > r (
                    dynamic_cast< SedationLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SedationLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolumeChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolumeChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolumeChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TidalVolumeChange_)
                {
                  ::std::unique_ptr< TidalVolumeChange_type > r (
                    dynamic_cast< TidalVolumeChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolumeChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TubularPermeabilityChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TubularPermeabilityChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TubularPermeabilityChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TubularPermeabilityChange_)
                {
                  ::std::unique_ptr< TubularPermeabilityChange_type > r (
                    dynamic_cast< TubularPermeabilityChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TubularPermeabilityChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralNervousResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralNervousResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralNervousResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralNervousResponse_)
                {
                  ::std::unique_ptr< CentralNervousResponse_type > r (
                    dynamic_cast< CentralNervousResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralNervousResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        DrugSystemData* DrugSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DrugSystemData (*this, f, c);
        }

        DrugSystemData& DrugSystemData::
        operator= (const DrugSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->AntibioticActivity_ = x.AntibioticActivity_;
            this->BronchodilationLevel_ = x.BronchodilationLevel_;
            this->FeverChange_ = x.FeverChange_;
            this->HeartRateChange_ = x.HeartRateChange_;
            this->HemorrhageChange_ = x.HemorrhageChange_;
            this->MeanBloodPressureChange_ = x.MeanBloodPressureChange_;
            this->NeuromuscularBlockLevel_ = x.NeuromuscularBlockLevel_;
            this->PainToleranceChange_ = x.PainToleranceChange_;
            this->PulsePressureChange_ = x.PulsePressureChange_;
            this->RespirationRateChange_ = x.RespirationRateChange_;
            this->SedationLevel_ = x.SedationLevel_;
            this->TidalVolumeChange_ = x.TidalVolumeChange_;
            this->TubularPermeabilityChange_ = x.TubularPermeabilityChange_;
            this->CentralNervousResponse_ = x.CentralNervousResponse_;
          }

          return *this;
        }

        DrugSystemData::
        ~DrugSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_type_factory_init (
          "DrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EndocrineSystemData
        //

        EndocrineSystemData::
        EndocrineSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          InsulinSynthesisRate_ (this),
          GlucagonSynthesisRate_ (this)
        {
        }

        EndocrineSystemData::
        EndocrineSystemData (const EndocrineSystemData& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          InsulinSynthesisRate_ (x.InsulinSynthesisRate_, f, this),
          GlucagonSynthesisRate_ (x.GlucagonSynthesisRate_, f, this)
        {
        }

        EndocrineSystemData::
        EndocrineSystemData (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          InsulinSynthesisRate_ (this),
          GlucagonSynthesisRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EndocrineSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InsulinSynthesisRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InsulinSynthesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InsulinSynthesisRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InsulinSynthesisRate_)
                {
                  ::std::unique_ptr< InsulinSynthesisRate_type > r (
                    dynamic_cast< InsulinSynthesisRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InsulinSynthesisRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GlucagonSynthesisRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GlucagonSynthesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GlucagonSynthesisRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GlucagonSynthesisRate_)
                {
                  ::std::unique_ptr< GlucagonSynthesisRate_type > r (
                    dynamic_cast< GlucagonSynthesisRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GlucagonSynthesisRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EndocrineSystemData* EndocrineSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EndocrineSystemData (*this, f, c);
        }

        EndocrineSystemData& EndocrineSystemData::
        operator= (const EndocrineSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->InsulinSynthesisRate_ = x.InsulinSynthesisRate_;
            this->GlucagonSynthesisRate_ = x.GlucagonSynthesisRate_;
          }

          return *this;
        }

        EndocrineSystemData::
        ~EndocrineSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EndocrineSystemData >
        _xsd_EndocrineSystemData_type_factory_init (
          "EndocrineSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnergySystemData
        //

        EnergySystemData::
        EnergySystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          AchievedExerciseLevel_ (this),
          CoreTemperature_ (this),
          CreatinineProductionRate_ (this),
          ExerciseEnergyDemand_ (this),
          ExerciseMeanArterialPressureDelta_ (this),
          FatigueLevel_ (this),
          LactateProductionRate_ (this),
          SkinTemperature_ (this),
          SweatRate_ (this),
          TotalMetabolicRate_ (this),
          TotalWorkRateLevel_ (this),
          SodiumLostToSweat_ (this),
          PotassiumLostToSweat_ (this),
          ChlorideLostToSweat_ (this),
          EnergyDeficit_ (this)
        {
        }

        EnergySystemData::
        EnergySystemData (const EnergySystemData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          AchievedExerciseLevel_ (x.AchievedExerciseLevel_, f, this),
          CoreTemperature_ (x.CoreTemperature_, f, this),
          CreatinineProductionRate_ (x.CreatinineProductionRate_, f, this),
          ExerciseEnergyDemand_ (x.ExerciseEnergyDemand_, f, this),
          ExerciseMeanArterialPressureDelta_ (x.ExerciseMeanArterialPressureDelta_, f, this),
          FatigueLevel_ (x.FatigueLevel_, f, this),
          LactateProductionRate_ (x.LactateProductionRate_, f, this),
          SkinTemperature_ (x.SkinTemperature_, f, this),
          SweatRate_ (x.SweatRate_, f, this),
          TotalMetabolicRate_ (x.TotalMetabolicRate_, f, this),
          TotalWorkRateLevel_ (x.TotalWorkRateLevel_, f, this),
          SodiumLostToSweat_ (x.SodiumLostToSweat_, f, this),
          PotassiumLostToSweat_ (x.PotassiumLostToSweat_, f, this),
          ChlorideLostToSweat_ (x.ChlorideLostToSweat_, f, this),
          EnergyDeficit_ (x.EnergyDeficit_, f, this)
        {
        }

        EnergySystemData::
        EnergySystemData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          AchievedExerciseLevel_ (this),
          CoreTemperature_ (this),
          CreatinineProductionRate_ (this),
          ExerciseEnergyDemand_ (this),
          ExerciseMeanArterialPressureDelta_ (this),
          FatigueLevel_ (this),
          LactateProductionRate_ (this),
          SkinTemperature_ (this),
          SweatRate_ (this),
          TotalMetabolicRate_ (this),
          TotalWorkRateLevel_ (this),
          SodiumLostToSweat_ (this),
          PotassiumLostToSweat_ (this),
          ChlorideLostToSweat_ (this),
          EnergyDeficit_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnergySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AchievedExerciseLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AchievedExerciseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AchievedExerciseLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AchievedExerciseLevel_)
                {
                  ::std::unique_ptr< AchievedExerciseLevel_type > r (
                    dynamic_cast< AchievedExerciseLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AchievedExerciseLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperature_)
                {
                  ::std::unique_ptr< CoreTemperature_type > r (
                    dynamic_cast< CoreTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CreatinineProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CreatinineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CreatinineProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CreatinineProductionRate_)
                {
                  ::std::unique_ptr< CreatinineProductionRate_type > r (
                    dynamic_cast< CreatinineProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CreatinineProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExerciseEnergyDemand
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExerciseEnergyDemand",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExerciseEnergyDemand_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExerciseEnergyDemand_)
                {
                  ::std::unique_ptr< ExerciseEnergyDemand_type > r (
                    dynamic_cast< ExerciseEnergyDemand_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExerciseEnergyDemand_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExerciseMeanArterialPressureDelta
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExerciseMeanArterialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExerciseMeanArterialPressureDelta_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExerciseMeanArterialPressureDelta_)
                {
                  ::std::unique_ptr< ExerciseMeanArterialPressureDelta_type > r (
                    dynamic_cast< ExerciseMeanArterialPressureDelta_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExerciseMeanArterialPressureDelta_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatigueLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatigueLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatigueLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatigueLevel_)
                {
                  ::std::unique_ptr< FatigueLevel_type > r (
                    dynamic_cast< FatigueLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatigueLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LactateProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LactateProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LactateProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LactateProductionRate_)
                {
                  ::std::unique_ptr< LactateProductionRate_type > r (
                    dynamic_cast< LactateProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LactateProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SkinTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SkinTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SkinTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SkinTemperature_)
                {
                  ::std::unique_ptr< SkinTemperature_type > r (
                    dynamic_cast< SkinTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SkinTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SweatRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SweatRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SweatRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SweatRate_)
                {
                  ::std::unique_ptr< SweatRate_type > r (
                    dynamic_cast< SweatRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SweatRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalMetabolicRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalMetabolicRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalMetabolicRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalMetabolicRate_)
                {
                  ::std::unique_ptr< TotalMetabolicRate_type > r (
                    dynamic_cast< TotalMetabolicRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalMetabolicRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalWorkRateLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalWorkRateLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalWorkRateLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalWorkRateLevel_)
                {
                  ::std::unique_ptr< TotalWorkRateLevel_type > r (
                    dynamic_cast< TotalWorkRateLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalWorkRateLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SodiumLostToSweat_)
                {
                  ::std::unique_ptr< SodiumLostToSweat_type > r (
                    dynamic_cast< SodiumLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PotassiumLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PotassiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PotassiumLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PotassiumLostToSweat_)
                {
                  ::std::unique_ptr< PotassiumLostToSweat_type > r (
                    dynamic_cast< PotassiumLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PotassiumLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChlorideLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChlorideLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChlorideLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChlorideLostToSweat_)
                {
                  ::std::unique_ptr< ChlorideLostToSweat_type > r (
                    dynamic_cast< ChlorideLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChlorideLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EnergyDeficit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnergyDeficit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnergyDeficit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnergyDeficit_)
                {
                  ::std::unique_ptr< EnergyDeficit_type > r (
                    dynamic_cast< EnergyDeficit_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnergyDeficit_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnergySystemData* EnergySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnergySystemData (*this, f, c);
        }

        EnergySystemData& EnergySystemData::
        operator= (const EnergySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->AchievedExerciseLevel_ = x.AchievedExerciseLevel_;
            this->CoreTemperature_ = x.CoreTemperature_;
            this->CreatinineProductionRate_ = x.CreatinineProductionRate_;
            this->ExerciseEnergyDemand_ = x.ExerciseEnergyDemand_;
            this->ExerciseMeanArterialPressureDelta_ = x.ExerciseMeanArterialPressureDelta_;
            this->FatigueLevel_ = x.FatigueLevel_;
            this->LactateProductionRate_ = x.LactateProductionRate_;
            this->SkinTemperature_ = x.SkinTemperature_;
            this->SweatRate_ = x.SweatRate_;
            this->TotalMetabolicRate_ = x.TotalMetabolicRate_;
            this->TotalWorkRateLevel_ = x.TotalWorkRateLevel_;
            this->SodiumLostToSweat_ = x.SodiumLostToSweat_;
            this->PotassiumLostToSweat_ = x.PotassiumLostToSweat_;
            this->ChlorideLostToSweat_ = x.ChlorideLostToSweat_;
            this->EnergyDeficit_ = x.EnergyDeficit_;
          }

          return *this;
        }

        EnergySystemData::
        ~EnergySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_type_factory_init (
          "EnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DrugTransitStateData
        //

        DrugTransitStateData::
        DrugTransitStateData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LumenSolidMasses_ (this),
          LumenDissolvedMasses_ (this),
          EnterocyteMasses_ (this),
          MassMetabolized_ (this),
          MassExcreted_ (this),
          Substance_ (this)
        {
        }

        DrugTransitStateData::
        DrugTransitStateData (const MassMetabolized_type& MassMetabolized,
                              const MassExcreted_type& MassExcreted,
                              const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LumenSolidMasses_ (this),
          LumenDissolvedMasses_ (this),
          EnterocyteMasses_ (this),
          MassMetabolized_ (MassMetabolized, this),
          MassExcreted_ (MassExcreted, this),
          Substance_ (Substance, this)
        {
        }

        DrugTransitStateData::
        DrugTransitStateData (::std::unique_ptr< MassMetabolized_type > MassMetabolized,
                              ::std::unique_ptr< MassExcreted_type > MassExcreted,
                              const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LumenSolidMasses_ (this),
          LumenDissolvedMasses_ (this),
          EnterocyteMasses_ (this),
          MassMetabolized_ (std::move (MassMetabolized), this),
          MassExcreted_ (std::move (MassExcreted), this),
          Substance_ (Substance, this)
        {
        }

        DrugTransitStateData::
        DrugTransitStateData (const DrugTransitStateData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          LumenSolidMasses_ (x.LumenSolidMasses_, f, this),
          LumenDissolvedMasses_ (x.LumenDissolvedMasses_, f, this),
          EnterocyteMasses_ (x.EnterocyteMasses_, f, this),
          MassMetabolized_ (x.MassMetabolized_, f, this),
          MassExcreted_ (x.MassExcreted_, f, this),
          Substance_ (x.Substance_, f, this)
        {
        }

        DrugTransitStateData::
        DrugTransitStateData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          LumenSolidMasses_ (this),
          LumenDissolvedMasses_ (this),
          EnterocyteMasses_ (this),
          MassMetabolized_ (this),
          MassExcreted_ (this),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DrugTransitStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LumenSolidMasses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LumenSolidMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LumenSolidMasses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LumenSolidMasses_type > r (
                  dynamic_cast< LumenSolidMasses_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LumenSolidMasses_.push_back (::std::move (r));
                continue;
              }
            }

            // LumenDissolvedMasses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LumenDissolvedMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LumenDissolvedMasses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LumenDissolvedMasses_type > r (
                  dynamic_cast< LumenDissolvedMasses_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LumenDissolvedMasses_.push_back (::std::move (r));
                continue;
              }
            }

            // EnterocyteMasses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnterocyteMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnterocyteMasses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< EnterocyteMasses_type > r (
                  dynamic_cast< EnterocyteMasses_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->EnterocyteMasses_.push_back (::std::move (r));
                continue;
              }
            }

            // MassMetabolized
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassMetabolized",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassMetabolized_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MassMetabolized_.present ())
                {
                  ::std::unique_ptr< MassMetabolized_type > r (
                    dynamic_cast< MassMetabolized_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassMetabolized_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassExcreted
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassExcreted",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassExcreted_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MassExcreted_.present ())
                {
                  ::std::unique_ptr< MassExcreted_type > r (
                    dynamic_cast< MassExcreted_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassExcreted_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!MassMetabolized_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MassMetabolized",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MassExcreted_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MassExcreted",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Substance",
              "");
          }
        }

        DrugTransitStateData* DrugTransitStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DrugTransitStateData (*this, f, c);
        }

        DrugTransitStateData& DrugTransitStateData::
        operator= (const DrugTransitStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->LumenSolidMasses_ = x.LumenSolidMasses_;
            this->LumenDissolvedMasses_ = x.LumenDissolvedMasses_;
            this->EnterocyteMasses_ = x.EnterocyteMasses_;
            this->MassMetabolized_ = x.MassMetabolized_;
            this->MassExcreted_ = x.MassExcreted_;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        DrugTransitStateData::
        ~DrugTransitStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DrugTransitStateData >
        _xsd_DrugTransitStateData_type_factory_init (
          "DrugTransitStateData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GastrointestinalSystemData
        //

        GastrointestinalSystemData::
        GastrointestinalSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          ChymeAbsorptionRate_ (this),
          StomachContents_ (this),
          DrugTransitStates_ (this)
        {
        }

        GastrointestinalSystemData::
        GastrointestinalSystemData (const GastrointestinalSystemData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          ChymeAbsorptionRate_ (x.ChymeAbsorptionRate_, f, this),
          StomachContents_ (x.StomachContents_, f, this),
          DrugTransitStates_ (x.DrugTransitStates_, f, this)
        {
        }

        GastrointestinalSystemData::
        GastrointestinalSystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          ChymeAbsorptionRate_ (this),
          StomachContents_ (this),
          DrugTransitStates_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void GastrointestinalSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ChymeAbsorptionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChymeAbsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChymeAbsorptionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChymeAbsorptionRate_)
                {
                  ::std::unique_ptr< ChymeAbsorptionRate_type > r (
                    dynamic_cast< ChymeAbsorptionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChymeAbsorptionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StomachContents
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StomachContents",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StomachContents_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StomachContents_)
                {
                  ::std::unique_ptr< StomachContents_type > r (
                    dynamic_cast< StomachContents_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StomachContents_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DrugTransitStates
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DrugTransitStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DrugTransitStates_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< DrugTransitStates_type > r (
                  dynamic_cast< DrugTransitStates_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->DrugTransitStates_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        GastrointestinalSystemData* GastrointestinalSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GastrointestinalSystemData (*this, f, c);
        }

        GastrointestinalSystemData& GastrointestinalSystemData::
        operator= (const GastrointestinalSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->ChymeAbsorptionRate_ = x.ChymeAbsorptionRate_;
            this->StomachContents_ = x.StomachContents_;
            this->DrugTransitStates_ = x.DrugTransitStates_;
          }

          return *this;
        }

        GastrointestinalSystemData::
        ~GastrointestinalSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GastrointestinalSystemData >
        _xsd_GastrointestinalSystemData_type_factory_init (
          "GastrointestinalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // HepaticSystemData
        //

        HepaticSystemData::
        HepaticSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          KetoneProductionRate_ (this),
          HepaticGluconeogenesisRate_ (this)
        {
        }

        HepaticSystemData::
        HepaticSystemData (const HepaticSystemData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          KetoneProductionRate_ (x.KetoneProductionRate_, f, this),
          HepaticGluconeogenesisRate_ (x.HepaticGluconeogenesisRate_, f, this)
        {
        }

        HepaticSystemData::
        HepaticSystemData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          KetoneProductionRate_ (this),
          HepaticGluconeogenesisRate_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void HepaticSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // KetoneProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "KetoneProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< KetoneProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->KetoneProductionRate_)
                {
                  ::std::unique_ptr< KetoneProductionRate_type > r (
                    dynamic_cast< KetoneProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->KetoneProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HepaticGluconeogenesisRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HepaticGluconeogenesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HepaticGluconeogenesisRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HepaticGluconeogenesisRate_)
                {
                  ::std::unique_ptr< HepaticGluconeogenesisRate_type > r (
                    dynamic_cast< HepaticGluconeogenesisRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HepaticGluconeogenesisRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        HepaticSystemData* HepaticSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class HepaticSystemData (*this, f, c);
        }

        HepaticSystemData& HepaticSystemData::
        operator= (const HepaticSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->KetoneProductionRate_ = x.KetoneProductionRate_;
            this->HepaticGluconeogenesisRate_ = x.HepaticGluconeogenesisRate_;
          }

          return *this;
        }

        HepaticSystemData::
        ~HepaticSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, HepaticSystemData >
        _xsd_HepaticSystemData_type_factory_init (
          "HepaticSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumSleepState
        //

        enumSleepState::
        enumSleepState (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumSleepState_convert ();
        }

        enumSleepState::
        enumSleepState (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumSleepState_convert ();
        }

        enumSleepState::
        enumSleepState (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumSleepState_convert ();
        }

        enumSleepState* enumSleepState::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumSleepState (*this, f, c);
        }

        enumSleepState::value enumSleepState::
        _xsd_enumSleepState_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSleepState_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumSleepState_indexes_,
                            _xsd_enumSleepState_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumSleepState_indexes_ + 2 || _xsd_enumSleepState_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumSleepState::
        _xsd_enumSleepState_literals_[2] =
        {
          "Awake",
          "Asleep"
        };

        const enumSleepState::value enumSleepState::
        _xsd_enumSleepState_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumSleepState::Asleep,
          ::mil::tatrc::physiology::datamodel::enumSleepState::Awake
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSleepState >
        _xsd_enumSleepState_type_factory_init (
          "enumSleepState",
          "uri:/mil/tatrc/physiology/datamodel");

        // NervousSystemData
        //

        NervousSystemData::
        NervousSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          HeartRateScale_ (this),
          HeartElastanceScale_ (this),
          ResistanceScaleExtrasplanchnic_ (this),
          ResistanceScaleMuscle_ (this),
          ResistanceScaleMyocardium_ (this),
          ResistanceScaleSplanchnic_ (this),
          ComplianceScale_ (this),
          LeftEyePupillaryResponse_ (this),
          PainVisualAnalogueScale_ (this),
          RichmondAgitationSedationScale_ (this),
          RightEyePupillaryResponse_ (this),
          SleepTime_ (this),
          SleepState_ (this),
          WakeTime_ (this),
          BiologicalDebt_ (this),
          ReactionTime_ (this),
          AttentionLapses_ (this)
        {
        }

        NervousSystemData::
        NervousSystemData (const NervousSystemData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          HeartRateScale_ (x.HeartRateScale_, f, this),
          HeartElastanceScale_ (x.HeartElastanceScale_, f, this),
          ResistanceScaleExtrasplanchnic_ (x.ResistanceScaleExtrasplanchnic_, f, this),
          ResistanceScaleMuscle_ (x.ResistanceScaleMuscle_, f, this),
          ResistanceScaleMyocardium_ (x.ResistanceScaleMyocardium_, f, this),
          ResistanceScaleSplanchnic_ (x.ResistanceScaleSplanchnic_, f, this),
          ComplianceScale_ (x.ComplianceScale_, f, this),
          LeftEyePupillaryResponse_ (x.LeftEyePupillaryResponse_, f, this),
          PainVisualAnalogueScale_ (x.PainVisualAnalogueScale_, f, this),
          RichmondAgitationSedationScale_ (x.RichmondAgitationSedationScale_, f, this),
          RightEyePupillaryResponse_ (x.RightEyePupillaryResponse_, f, this),
          SleepTime_ (x.SleepTime_, f, this),
          SleepState_ (x.SleepState_, f, this),
          WakeTime_ (x.WakeTime_, f, this),
          BiologicalDebt_ (x.BiologicalDebt_, f, this),
          ReactionTime_ (x.ReactionTime_, f, this),
          AttentionLapses_ (x.AttentionLapses_, f, this)
        {
        }

        NervousSystemData::
        NervousSystemData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          HeartRateScale_ (this),
          HeartElastanceScale_ (this),
          ResistanceScaleExtrasplanchnic_ (this),
          ResistanceScaleMuscle_ (this),
          ResistanceScaleMyocardium_ (this),
          ResistanceScaleSplanchnic_ (this),
          ComplianceScale_ (this),
          LeftEyePupillaryResponse_ (this),
          PainVisualAnalogueScale_ (this),
          RichmondAgitationSedationScale_ (this),
          RightEyePupillaryResponse_ (this),
          SleepTime_ (this),
          SleepState_ (this),
          WakeTime_ (this),
          BiologicalDebt_ (this),
          ReactionTime_ (this),
          AttentionLapses_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NervousSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // HeartRateScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRateScale_)
                {
                  ::std::unique_ptr< HeartRateScale_type > r (
                    dynamic_cast< HeartRateScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartElastanceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartElastanceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartElastanceScale_)
                {
                  ::std::unique_ptr< HeartElastanceScale_type > r (
                    dynamic_cast< HeartElastanceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartElastanceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResistanceScaleExtrasplanchnic
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResistanceScaleExtrasplanchnic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResistanceScaleExtrasplanchnic_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResistanceScaleExtrasplanchnic_)
                {
                  ::std::unique_ptr< ResistanceScaleExtrasplanchnic_type > r (
                    dynamic_cast< ResistanceScaleExtrasplanchnic_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResistanceScaleExtrasplanchnic_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResistanceScaleMuscle
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResistanceScaleMuscle",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResistanceScaleMuscle_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResistanceScaleMuscle_)
                {
                  ::std::unique_ptr< ResistanceScaleMuscle_type > r (
                    dynamic_cast< ResistanceScaleMuscle_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResistanceScaleMuscle_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResistanceScaleMyocardium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResistanceScaleMyocardium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResistanceScaleMyocardium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResistanceScaleMyocardium_)
                {
                  ::std::unique_ptr< ResistanceScaleMyocardium_type > r (
                    dynamic_cast< ResistanceScaleMyocardium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResistanceScaleMyocardium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResistanceScaleSplanchnic
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResistanceScaleSplanchnic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResistanceScaleSplanchnic_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResistanceScaleSplanchnic_)
                {
                  ::std::unique_ptr< ResistanceScaleSplanchnic_type > r (
                    dynamic_cast< ResistanceScaleSplanchnic_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResistanceScaleSplanchnic_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ComplianceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ComplianceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ComplianceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ComplianceScale_)
                {
                  ::std::unique_ptr< ComplianceScale_type > r (
                    dynamic_cast< ComplianceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ComplianceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftEyePupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftEyePupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftEyePupillaryResponse_)
                {
                  ::std::unique_ptr< LeftEyePupillaryResponse_type > r (
                    dynamic_cast< LeftEyePupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftEyePupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PainVisualAnalogueScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PainVisualAnalogueScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PainVisualAnalogueScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PainVisualAnalogueScale_)
                {
                  ::std::unique_ptr< PainVisualAnalogueScale_type > r (
                    dynamic_cast< PainVisualAnalogueScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PainVisualAnalogueScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RichmondAgitationSedationScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RichmondAgitationSedationScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RichmondAgitationSedationScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RichmondAgitationSedationScale_)
                {
                  ::std::unique_ptr< RichmondAgitationSedationScale_type > r (
                    dynamic_cast< RichmondAgitationSedationScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RichmondAgitationSedationScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightEyePupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightEyePupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightEyePupillaryResponse_)
                {
                  ::std::unique_ptr< RightEyePupillaryResponse_type > r (
                    dynamic_cast< RightEyePupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightEyePupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SleepTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SleepTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SleepTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SleepTime_)
                {
                  ::std::unique_ptr< SleepTime_type > r (
                    dynamic_cast< SleepTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SleepTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SleepState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SleepState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SleepState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SleepState_)
                {
                  ::std::unique_ptr< SleepState_type > r (
                    dynamic_cast< SleepState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SleepState_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WakeTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WakeTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WakeTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WakeTime_)
                {
                  ::std::unique_ptr< WakeTime_type > r (
                    dynamic_cast< WakeTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WakeTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BiologicalDebt
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BiologicalDebt",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BiologicalDebt_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BiologicalDebt_)
                {
                  ::std::unique_ptr< BiologicalDebt_type > r (
                    dynamic_cast< BiologicalDebt_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BiologicalDebt_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReactionTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReactionTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReactionTime_)
                {
                  ::std::unique_ptr< ReactionTime_type > r (
                    dynamic_cast< ReactionTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReactionTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AttentionLapses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AttentionLapses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AttentionLapses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AttentionLapses_)
                {
                  ::std::unique_ptr< AttentionLapses_type > r (
                    dynamic_cast< AttentionLapses_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AttentionLapses_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        NervousSystemData* NervousSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NervousSystemData (*this, f, c);
        }

        NervousSystemData& NervousSystemData::
        operator= (const NervousSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->HeartRateScale_ = x.HeartRateScale_;
            this->HeartElastanceScale_ = x.HeartElastanceScale_;
            this->ResistanceScaleExtrasplanchnic_ = x.ResistanceScaleExtrasplanchnic_;
            this->ResistanceScaleMuscle_ = x.ResistanceScaleMuscle_;
            this->ResistanceScaleMyocardium_ = x.ResistanceScaleMyocardium_;
            this->ResistanceScaleSplanchnic_ = x.ResistanceScaleSplanchnic_;
            this->ComplianceScale_ = x.ComplianceScale_;
            this->LeftEyePupillaryResponse_ = x.LeftEyePupillaryResponse_;
            this->PainVisualAnalogueScale_ = x.PainVisualAnalogueScale_;
            this->RichmondAgitationSedationScale_ = x.RichmondAgitationSedationScale_;
            this->RightEyePupillaryResponse_ = x.RightEyePupillaryResponse_;
            this->SleepTime_ = x.SleepTime_;
            this->SleepState_ = x.SleepState_;
            this->WakeTime_ = x.WakeTime_;
            this->BiologicalDebt_ = x.BiologicalDebt_;
            this->ReactionTime_ = x.ReactionTime_;
            this->AttentionLapses_ = x.AttentionLapses_;
          }

          return *this;
        }

        NervousSystemData::
        ~NervousSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_type_factory_init (
          "NervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // RenalSystemData
        //

        RenalSystemData::
        RenalSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          FiltrationFraction_ (this),
          GlomerularFiltrationRate_ (this),
          LeftAfferentArterioleResistance_ (this),
          LeftBowmansCapsulesHydrostaticPressure_ (this),
          LeftBowmansCapsulesOsmoticPressure_ (this),
          LeftEfferentArterioleResistance_ (this),
          LeftGlomerularCapillariesHydrostaticPressure_ (this),
          LeftGlomerularCapillariesOsmoticPressure_ (this),
          LeftGlomerularFiltrationCoefficient_ (this),
          LeftGlomerularFiltrationRate_ (this),
          LeftGlomerularFiltrationSurfaceArea_ (this),
          LeftGlomerularFluidPermeability_ (this),
          LeftFiltrationFraction_ (this),
          LeftNetFiltrationPressure_ (this),
          LeftNetReabsorptionPressure_ (this),
          LeftPeritubularCapillariesHydrostaticPressure_ (this),
          LeftPeritubularCapillariesOsmoticPressure_ (this),
          LeftReabsorptionFiltrationCoefficient_ (this),
          LeftReabsorptionRate_ (this),
          LeftTubularOsmoticPressure_ (this),
          LeftTubularHydrostaticPressure_ (this),
          LeftTubularReabsorptionFiltrationSurfaceArea_ (this),
          LeftTubularReabsorptionFluidPermeability_ (this),
          RenalBloodFlow_ (this),
          RenalPlasmaFlow_ (this),
          RenalVascularResistance_ (this),
          RightAfferentArterioleResistance_ (this),
          RightBowmansCapsulesHydrostaticPressure_ (this),
          RightBowmansCapsulesOsmoticPressure_ (this),
          RightEfferentArterioleResistance_ (this),
          RightGlomerularCapillariesHydrostaticPressure_ (this),
          RightGlomerularCapillariesOsmoticPressure_ (this),
          RightGlomerularFiltrationCoefficient_ (this),
          RightGlomerularFiltrationRate_ (this),
          RightGlomerularFiltrationSurfaceArea_ (this),
          RightGlomerularFluidPermeability_ (this),
          RightFiltrationFraction_ (this),
          RightNetFiltrationPressure_ (this),
          RightNetReabsorptionPressure_ (this),
          RightPeritubularCapillariesHydrostaticPressure_ (this),
          RightPeritubularCapillariesOsmoticPressure_ (this),
          RightReabsorptionFiltrationCoefficient_ (this),
          RightReabsorptionRate_ (this),
          RightTubularOsmoticPressure_ (this),
          RightTubularHydrostaticPressure_ (this),
          RightTubularReabsorptionFiltrationSurfaceArea_ (this),
          RightTubularReabsorptionFluidPermeability_ (this),
          UrinationRate_ (this),
          UrineOsmolality_ (this),
          UrineOsmolarity_ (this),
          UrineProductionRate_ (this),
          MeanUrineOutput_ (this),
          UrineSpecificGravity_ (this),
          UrineVolume_ (this),
          UrineUreaNitrogenConcentration_ (this)
        {
        }

        RenalSystemData::
        RenalSystemData (const RenalSystemData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          FiltrationFraction_ (x.FiltrationFraction_, f, this),
          GlomerularFiltrationRate_ (x.GlomerularFiltrationRate_, f, this),
          LeftAfferentArterioleResistance_ (x.LeftAfferentArterioleResistance_, f, this),
          LeftBowmansCapsulesHydrostaticPressure_ (x.LeftBowmansCapsulesHydrostaticPressure_, f, this),
          LeftBowmansCapsulesOsmoticPressure_ (x.LeftBowmansCapsulesOsmoticPressure_, f, this),
          LeftEfferentArterioleResistance_ (x.LeftEfferentArterioleResistance_, f, this),
          LeftGlomerularCapillariesHydrostaticPressure_ (x.LeftGlomerularCapillariesHydrostaticPressure_, f, this),
          LeftGlomerularCapillariesOsmoticPressure_ (x.LeftGlomerularCapillariesOsmoticPressure_, f, this),
          LeftGlomerularFiltrationCoefficient_ (x.LeftGlomerularFiltrationCoefficient_, f, this),
          LeftGlomerularFiltrationRate_ (x.LeftGlomerularFiltrationRate_, f, this),
          LeftGlomerularFiltrationSurfaceArea_ (x.LeftGlomerularFiltrationSurfaceArea_, f, this),
          LeftGlomerularFluidPermeability_ (x.LeftGlomerularFluidPermeability_, f, this),
          LeftFiltrationFraction_ (x.LeftFiltrationFraction_, f, this),
          LeftNetFiltrationPressure_ (x.LeftNetFiltrationPressure_, f, this),
          LeftNetReabsorptionPressure_ (x.LeftNetReabsorptionPressure_, f, this),
          LeftPeritubularCapillariesHydrostaticPressure_ (x.LeftPeritubularCapillariesHydrostaticPressure_, f, this),
          LeftPeritubularCapillariesOsmoticPressure_ (x.LeftPeritubularCapillariesOsmoticPressure_, f, this),
          LeftReabsorptionFiltrationCoefficient_ (x.LeftReabsorptionFiltrationCoefficient_, f, this),
          LeftReabsorptionRate_ (x.LeftReabsorptionRate_, f, this),
          LeftTubularOsmoticPressure_ (x.LeftTubularOsmoticPressure_, f, this),
          LeftTubularHydrostaticPressure_ (x.LeftTubularHydrostaticPressure_, f, this),
          LeftTubularReabsorptionFiltrationSurfaceArea_ (x.LeftTubularReabsorptionFiltrationSurfaceArea_, f, this),
          LeftTubularReabsorptionFluidPermeability_ (x.LeftTubularReabsorptionFluidPermeability_, f, this),
          RenalBloodFlow_ (x.RenalBloodFlow_, f, this),
          RenalPlasmaFlow_ (x.RenalPlasmaFlow_, f, this),
          RenalVascularResistance_ (x.RenalVascularResistance_, f, this),
          RightAfferentArterioleResistance_ (x.RightAfferentArterioleResistance_, f, this),
          RightBowmansCapsulesHydrostaticPressure_ (x.RightBowmansCapsulesHydrostaticPressure_, f, this),
          RightBowmansCapsulesOsmoticPressure_ (x.RightBowmansCapsulesOsmoticPressure_, f, this),
          RightEfferentArterioleResistance_ (x.RightEfferentArterioleResistance_, f, this),
          RightGlomerularCapillariesHydrostaticPressure_ (x.RightGlomerularCapillariesHydrostaticPressure_, f, this),
          RightGlomerularCapillariesOsmoticPressure_ (x.RightGlomerularCapillariesOsmoticPressure_, f, this),
          RightGlomerularFiltrationCoefficient_ (x.RightGlomerularFiltrationCoefficient_, f, this),
          RightGlomerularFiltrationRate_ (x.RightGlomerularFiltrationRate_, f, this),
          RightGlomerularFiltrationSurfaceArea_ (x.RightGlomerularFiltrationSurfaceArea_, f, this),
          RightGlomerularFluidPermeability_ (x.RightGlomerularFluidPermeability_, f, this),
          RightFiltrationFraction_ (x.RightFiltrationFraction_, f, this),
          RightNetFiltrationPressure_ (x.RightNetFiltrationPressure_, f, this),
          RightNetReabsorptionPressure_ (x.RightNetReabsorptionPressure_, f, this),
          RightPeritubularCapillariesHydrostaticPressure_ (x.RightPeritubularCapillariesHydrostaticPressure_, f, this),
          RightPeritubularCapillariesOsmoticPressure_ (x.RightPeritubularCapillariesOsmoticPressure_, f, this),
          RightReabsorptionFiltrationCoefficient_ (x.RightReabsorptionFiltrationCoefficient_, f, this),
          RightReabsorptionRate_ (x.RightReabsorptionRate_, f, this),
          RightTubularOsmoticPressure_ (x.RightTubularOsmoticPressure_, f, this),
          RightTubularHydrostaticPressure_ (x.RightTubularHydrostaticPressure_, f, this),
          RightTubularReabsorptionFiltrationSurfaceArea_ (x.RightTubularReabsorptionFiltrationSurfaceArea_, f, this),
          RightTubularReabsorptionFluidPermeability_ (x.RightTubularReabsorptionFluidPermeability_, f, this),
          UrinationRate_ (x.UrinationRate_, f, this),
          UrineOsmolality_ (x.UrineOsmolality_, f, this),
          UrineOsmolarity_ (x.UrineOsmolarity_, f, this),
          UrineProductionRate_ (x.UrineProductionRate_, f, this),
          MeanUrineOutput_ (x.MeanUrineOutput_, f, this),
          UrineSpecificGravity_ (x.UrineSpecificGravity_, f, this),
          UrineVolume_ (x.UrineVolume_, f, this),
          UrineUreaNitrogenConcentration_ (x.UrineUreaNitrogenConcentration_, f, this)
        {
        }

        RenalSystemData::
        RenalSystemData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          FiltrationFraction_ (this),
          GlomerularFiltrationRate_ (this),
          LeftAfferentArterioleResistance_ (this),
          LeftBowmansCapsulesHydrostaticPressure_ (this),
          LeftBowmansCapsulesOsmoticPressure_ (this),
          LeftEfferentArterioleResistance_ (this),
          LeftGlomerularCapillariesHydrostaticPressure_ (this),
          LeftGlomerularCapillariesOsmoticPressure_ (this),
          LeftGlomerularFiltrationCoefficient_ (this),
          LeftGlomerularFiltrationRate_ (this),
          LeftGlomerularFiltrationSurfaceArea_ (this),
          LeftGlomerularFluidPermeability_ (this),
          LeftFiltrationFraction_ (this),
          LeftNetFiltrationPressure_ (this),
          LeftNetReabsorptionPressure_ (this),
          LeftPeritubularCapillariesHydrostaticPressure_ (this),
          LeftPeritubularCapillariesOsmoticPressure_ (this),
          LeftReabsorptionFiltrationCoefficient_ (this),
          LeftReabsorptionRate_ (this),
          LeftTubularOsmoticPressure_ (this),
          LeftTubularHydrostaticPressure_ (this),
          LeftTubularReabsorptionFiltrationSurfaceArea_ (this),
          LeftTubularReabsorptionFluidPermeability_ (this),
          RenalBloodFlow_ (this),
          RenalPlasmaFlow_ (this),
          RenalVascularResistance_ (this),
          RightAfferentArterioleResistance_ (this),
          RightBowmansCapsulesHydrostaticPressure_ (this),
          RightBowmansCapsulesOsmoticPressure_ (this),
          RightEfferentArterioleResistance_ (this),
          RightGlomerularCapillariesHydrostaticPressure_ (this),
          RightGlomerularCapillariesOsmoticPressure_ (this),
          RightGlomerularFiltrationCoefficient_ (this),
          RightGlomerularFiltrationRate_ (this),
          RightGlomerularFiltrationSurfaceArea_ (this),
          RightGlomerularFluidPermeability_ (this),
          RightFiltrationFraction_ (this),
          RightNetFiltrationPressure_ (this),
          RightNetReabsorptionPressure_ (this),
          RightPeritubularCapillariesHydrostaticPressure_ (this),
          RightPeritubularCapillariesOsmoticPressure_ (this),
          RightReabsorptionFiltrationCoefficient_ (this),
          RightReabsorptionRate_ (this),
          RightTubularOsmoticPressure_ (this),
          RightTubularHydrostaticPressure_ (this),
          RightTubularReabsorptionFiltrationSurfaceArea_ (this),
          RightTubularReabsorptionFluidPermeability_ (this),
          UrinationRate_ (this),
          UrineOsmolality_ (this),
          UrineOsmolarity_ (this),
          UrineProductionRate_ (this),
          MeanUrineOutput_ (this),
          UrineSpecificGravity_ (this),
          UrineVolume_ (this),
          UrineUreaNitrogenConcentration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RenalSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // FiltrationFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FiltrationFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FiltrationFraction_)
                {
                  ::std::unique_ptr< FiltrationFraction_type > r (
                    dynamic_cast< FiltrationFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FiltrationFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GlomerularFiltrationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GlomerularFiltrationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GlomerularFiltrationRate_)
                {
                  ::std::unique_ptr< GlomerularFiltrationRate_type > r (
                    dynamic_cast< GlomerularFiltrationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GlomerularFiltrationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftAfferentArterioleResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftAfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftAfferentArterioleResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftAfferentArterioleResistance_)
                {
                  ::std::unique_ptr< LeftAfferentArterioleResistance_type > r (
                    dynamic_cast< LeftAfferentArterioleResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftAfferentArterioleResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftBowmansCapsulesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftBowmansCapsulesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftBowmansCapsulesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftBowmansCapsulesHydrostaticPressure_)
                {
                  ::std::unique_ptr< LeftBowmansCapsulesHydrostaticPressure_type > r (
                    dynamic_cast< LeftBowmansCapsulesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftBowmansCapsulesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftBowmansCapsulesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftBowmansCapsulesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftBowmansCapsulesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftBowmansCapsulesOsmoticPressure_)
                {
                  ::std::unique_ptr< LeftBowmansCapsulesOsmoticPressure_type > r (
                    dynamic_cast< LeftBowmansCapsulesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftBowmansCapsulesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftEfferentArterioleResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftEfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftEfferentArterioleResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftEfferentArterioleResistance_)
                {
                  ::std::unique_ptr< LeftEfferentArterioleResistance_type > r (
                    dynamic_cast< LeftEfferentArterioleResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftEfferentArterioleResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularCapillariesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularCapillariesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularCapillariesHydrostaticPressure_)
                {
                  ::std::unique_ptr< LeftGlomerularCapillariesHydrostaticPressure_type > r (
                    dynamic_cast< LeftGlomerularCapillariesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularCapillariesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularCapillariesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularCapillariesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularCapillariesOsmoticPressure_)
                {
                  ::std::unique_ptr< LeftGlomerularCapillariesOsmoticPressure_type > r (
                    dynamic_cast< LeftGlomerularCapillariesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularCapillariesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFiltrationCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFiltrationCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFiltrationCoefficient_)
                {
                  ::std::unique_ptr< LeftGlomerularFiltrationCoefficient_type > r (
                    dynamic_cast< LeftGlomerularFiltrationCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFiltrationCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFiltrationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFiltrationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFiltrationRate_)
                {
                  ::std::unique_ptr< LeftGlomerularFiltrationRate_type > r (
                    dynamic_cast< LeftGlomerularFiltrationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFiltrationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFiltrationSurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFiltrationSurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFiltrationSurfaceArea_)
                {
                  ::std::unique_ptr< LeftGlomerularFiltrationSurfaceArea_type > r (
                    dynamic_cast< LeftGlomerularFiltrationSurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFiltrationSurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFluidPermeability
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFluidPermeability_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFluidPermeability_)
                {
                  ::std::unique_ptr< LeftGlomerularFluidPermeability_type > r (
                    dynamic_cast< LeftGlomerularFluidPermeability_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFluidPermeability_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftFiltrationFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftFiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftFiltrationFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftFiltrationFraction_)
                {
                  ::std::unique_ptr< LeftFiltrationFraction_type > r (
                    dynamic_cast< LeftFiltrationFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftFiltrationFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftNetFiltrationPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftNetFiltrationPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftNetFiltrationPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftNetFiltrationPressure_)
                {
                  ::std::unique_ptr< LeftNetFiltrationPressure_type > r (
                    dynamic_cast< LeftNetFiltrationPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftNetFiltrationPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftNetReabsorptionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftNetReabsorptionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftNetReabsorptionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftNetReabsorptionPressure_)
                {
                  ::std::unique_ptr< LeftNetReabsorptionPressure_type > r (
                    dynamic_cast< LeftNetReabsorptionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftNetReabsorptionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftPeritubularCapillariesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftPeritubularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftPeritubularCapillariesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftPeritubularCapillariesHydrostaticPressure_)
                {
                  ::std::unique_ptr< LeftPeritubularCapillariesHydrostaticPressure_type > r (
                    dynamic_cast< LeftPeritubularCapillariesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftPeritubularCapillariesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftPeritubularCapillariesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftPeritubularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftPeritubularCapillariesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftPeritubularCapillariesOsmoticPressure_)
                {
                  ::std::unique_ptr< LeftPeritubularCapillariesOsmoticPressure_type > r (
                    dynamic_cast< LeftPeritubularCapillariesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftPeritubularCapillariesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftReabsorptionFiltrationCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftReabsorptionFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftReabsorptionFiltrationCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftReabsorptionFiltrationCoefficient_)
                {
                  ::std::unique_ptr< LeftReabsorptionFiltrationCoefficient_type > r (
                    dynamic_cast< LeftReabsorptionFiltrationCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftReabsorptionFiltrationCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftReabsorptionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftReabsorptionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftReabsorptionRate_)
                {
                  ::std::unique_ptr< LeftReabsorptionRate_type > r (
                    dynamic_cast< LeftReabsorptionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftReabsorptionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularOsmoticPressure_)
                {
                  ::std::unique_ptr< LeftTubularOsmoticPressure_type > r (
                    dynamic_cast< LeftTubularOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularHydrostaticPressure_)
                {
                  ::std::unique_ptr< LeftTubularHydrostaticPressure_type > r (
                    dynamic_cast< LeftTubularHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFiltrationSurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFiltrationSurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFiltrationSurfaceArea_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFiltrationSurfaceArea_type > r (
                    dynamic_cast< LeftTubularReabsorptionFiltrationSurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFiltrationSurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFluidPermeability
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFluidPermeability_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFluidPermeability_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFluidPermeability_type > r (
                    dynamic_cast< LeftTubularReabsorptionFluidPermeability_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFluidPermeability_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalBloodFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalBloodFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalBloodFlow_)
                {
                  ::std::unique_ptr< RenalBloodFlow_type > r (
                    dynamic_cast< RenalBloodFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalBloodFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalPlasmaFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalPlasmaFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalPlasmaFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalPlasmaFlow_)
                {
                  ::std::unique_ptr< RenalPlasmaFlow_type > r (
                    dynamic_cast< RenalPlasmaFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalPlasmaFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalVascularResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalVascularResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RenalVascularResistance_)
                {
                  ::std::unique_ptr< RenalVascularResistance_type > r (
                    dynamic_cast< RenalVascularResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalVascularResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightAfferentArterioleResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightAfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightAfferentArterioleResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightAfferentArterioleResistance_)
                {
                  ::std::unique_ptr< RightAfferentArterioleResistance_type > r (
                    dynamic_cast< RightAfferentArterioleResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightAfferentArterioleResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightBowmansCapsulesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightBowmansCapsulesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightBowmansCapsulesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightBowmansCapsulesHydrostaticPressure_)
                {
                  ::std::unique_ptr< RightBowmansCapsulesHydrostaticPressure_type > r (
                    dynamic_cast< RightBowmansCapsulesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightBowmansCapsulesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightBowmansCapsulesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightBowmansCapsulesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightBowmansCapsulesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightBowmansCapsulesOsmoticPressure_)
                {
                  ::std::unique_ptr< RightBowmansCapsulesOsmoticPressure_type > r (
                    dynamic_cast< RightBowmansCapsulesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightBowmansCapsulesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightEfferentArterioleResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightEfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightEfferentArterioleResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightEfferentArterioleResistance_)
                {
                  ::std::unique_ptr< RightEfferentArterioleResistance_type > r (
                    dynamic_cast< RightEfferentArterioleResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightEfferentArterioleResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularCapillariesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularCapillariesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularCapillariesHydrostaticPressure_)
                {
                  ::std::unique_ptr< RightGlomerularCapillariesHydrostaticPressure_type > r (
                    dynamic_cast< RightGlomerularCapillariesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularCapillariesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularCapillariesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularCapillariesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularCapillariesOsmoticPressure_)
                {
                  ::std::unique_ptr< RightGlomerularCapillariesOsmoticPressure_type > r (
                    dynamic_cast< RightGlomerularCapillariesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularCapillariesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFiltrationCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFiltrationCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFiltrationCoefficient_)
                {
                  ::std::unique_ptr< RightGlomerularFiltrationCoefficient_type > r (
                    dynamic_cast< RightGlomerularFiltrationCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFiltrationCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFiltrationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFiltrationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFiltrationRate_)
                {
                  ::std::unique_ptr< RightGlomerularFiltrationRate_type > r (
                    dynamic_cast< RightGlomerularFiltrationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFiltrationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFiltrationSurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFiltrationSurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFiltrationSurfaceArea_)
                {
                  ::std::unique_ptr< RightGlomerularFiltrationSurfaceArea_type > r (
                    dynamic_cast< RightGlomerularFiltrationSurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFiltrationSurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFluidPermeability
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFluidPermeability_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFluidPermeability_)
                {
                  ::std::unique_ptr< RightGlomerularFluidPermeability_type > r (
                    dynamic_cast< RightGlomerularFluidPermeability_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFluidPermeability_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightFiltrationFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightFiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightFiltrationFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightFiltrationFraction_)
                {
                  ::std::unique_ptr< RightFiltrationFraction_type > r (
                    dynamic_cast< RightFiltrationFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightFiltrationFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightNetFiltrationPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightNetFiltrationPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightNetFiltrationPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightNetFiltrationPressure_)
                {
                  ::std::unique_ptr< RightNetFiltrationPressure_type > r (
                    dynamic_cast< RightNetFiltrationPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightNetFiltrationPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightNetReabsorptionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightNetReabsorptionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightNetReabsorptionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightNetReabsorptionPressure_)
                {
                  ::std::unique_ptr< RightNetReabsorptionPressure_type > r (
                    dynamic_cast< RightNetReabsorptionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightNetReabsorptionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightPeritubularCapillariesHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightPeritubularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightPeritubularCapillariesHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightPeritubularCapillariesHydrostaticPressure_)
                {
                  ::std::unique_ptr< RightPeritubularCapillariesHydrostaticPressure_type > r (
                    dynamic_cast< RightPeritubularCapillariesHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightPeritubularCapillariesHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightPeritubularCapillariesOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightPeritubularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightPeritubularCapillariesOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightPeritubularCapillariesOsmoticPressure_)
                {
                  ::std::unique_ptr< RightPeritubularCapillariesOsmoticPressure_type > r (
                    dynamic_cast< RightPeritubularCapillariesOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightPeritubularCapillariesOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightReabsorptionFiltrationCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightReabsorptionFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightReabsorptionFiltrationCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightReabsorptionFiltrationCoefficient_)
                {
                  ::std::unique_ptr< RightReabsorptionFiltrationCoefficient_type > r (
                    dynamic_cast< RightReabsorptionFiltrationCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightReabsorptionFiltrationCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightReabsorptionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightReabsorptionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightReabsorptionRate_)
                {
                  ::std::unique_ptr< RightReabsorptionRate_type > r (
                    dynamic_cast< RightReabsorptionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightReabsorptionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularOsmoticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularOsmoticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularOsmoticPressure_)
                {
                  ::std::unique_ptr< RightTubularOsmoticPressure_type > r (
                    dynamic_cast< RightTubularOsmoticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularOsmoticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularHydrostaticPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularHydrostaticPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularHydrostaticPressure_)
                {
                  ::std::unique_ptr< RightTubularHydrostaticPressure_type > r (
                    dynamic_cast< RightTubularHydrostaticPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularHydrostaticPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFiltrationSurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFiltrationSurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFiltrationSurfaceArea_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFiltrationSurfaceArea_type > r (
                    dynamic_cast< RightTubularReabsorptionFiltrationSurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFiltrationSurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFluidPermeability
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFluidPermeability_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFluidPermeability_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFluidPermeability_type > r (
                    dynamic_cast< RightTubularReabsorptionFluidPermeability_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFluidPermeability_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrinationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrinationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrinationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrinationRate_)
                {
                  ::std::unique_ptr< UrinationRate_type > r (
                    dynamic_cast< UrinationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrinationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineOsmolality
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineOsmolality",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineOsmolality_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineOsmolality_)
                {
                  ::std::unique_ptr< UrineOsmolality_type > r (
                    dynamic_cast< UrineOsmolality_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineOsmolality_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineOsmolarity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineOsmolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineOsmolarity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineOsmolarity_)
                {
                  ::std::unique_ptr< UrineOsmolarity_type > r (
                    dynamic_cast< UrineOsmolarity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineOsmolarity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineProductionRate_)
                {
                  ::std::unique_ptr< UrineProductionRate_type > r (
                    dynamic_cast< UrineProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanUrineOutput
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanUrineOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanUrineOutput_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanUrineOutput_)
                {
                  ::std::unique_ptr< MeanUrineOutput_type > r (
                    dynamic_cast< MeanUrineOutput_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanUrineOutput_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineSpecificGravity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineSpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineSpecificGravity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineSpecificGravity_)
                {
                  ::std::unique_ptr< UrineSpecificGravity_type > r (
                    dynamic_cast< UrineSpecificGravity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineSpecificGravity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineVolume_)
                {
                  ::std::unique_ptr< UrineVolume_type > r (
                    dynamic_cast< UrineVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // UrineUreaNitrogenConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "UrineUreaNitrogenConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< UrineUreaNitrogenConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->UrineUreaNitrogenConcentration_)
                {
                  ::std::unique_ptr< UrineUreaNitrogenConcentration_type > r (
                    dynamic_cast< UrineUreaNitrogenConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->UrineUreaNitrogenConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RenalSystemData* RenalSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RenalSystemData (*this, f, c);
        }

        RenalSystemData& RenalSystemData::
        operator= (const RenalSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->FiltrationFraction_ = x.FiltrationFraction_;
            this->GlomerularFiltrationRate_ = x.GlomerularFiltrationRate_;
            this->LeftAfferentArterioleResistance_ = x.LeftAfferentArterioleResistance_;
            this->LeftBowmansCapsulesHydrostaticPressure_ = x.LeftBowmansCapsulesHydrostaticPressure_;
            this->LeftBowmansCapsulesOsmoticPressure_ = x.LeftBowmansCapsulesOsmoticPressure_;
            this->LeftEfferentArterioleResistance_ = x.LeftEfferentArterioleResistance_;
            this->LeftGlomerularCapillariesHydrostaticPressure_ = x.LeftGlomerularCapillariesHydrostaticPressure_;
            this->LeftGlomerularCapillariesOsmoticPressure_ = x.LeftGlomerularCapillariesOsmoticPressure_;
            this->LeftGlomerularFiltrationCoefficient_ = x.LeftGlomerularFiltrationCoefficient_;
            this->LeftGlomerularFiltrationRate_ = x.LeftGlomerularFiltrationRate_;
            this->LeftGlomerularFiltrationSurfaceArea_ = x.LeftGlomerularFiltrationSurfaceArea_;
            this->LeftGlomerularFluidPermeability_ = x.LeftGlomerularFluidPermeability_;
            this->LeftFiltrationFraction_ = x.LeftFiltrationFraction_;
            this->LeftNetFiltrationPressure_ = x.LeftNetFiltrationPressure_;
            this->LeftNetReabsorptionPressure_ = x.LeftNetReabsorptionPressure_;
            this->LeftPeritubularCapillariesHydrostaticPressure_ = x.LeftPeritubularCapillariesHydrostaticPressure_;
            this->LeftPeritubularCapillariesOsmoticPressure_ = x.LeftPeritubularCapillariesOsmoticPressure_;
            this->LeftReabsorptionFiltrationCoefficient_ = x.LeftReabsorptionFiltrationCoefficient_;
            this->LeftReabsorptionRate_ = x.LeftReabsorptionRate_;
            this->LeftTubularOsmoticPressure_ = x.LeftTubularOsmoticPressure_;
            this->LeftTubularHydrostaticPressure_ = x.LeftTubularHydrostaticPressure_;
            this->LeftTubularReabsorptionFiltrationSurfaceArea_ = x.LeftTubularReabsorptionFiltrationSurfaceArea_;
            this->LeftTubularReabsorptionFluidPermeability_ = x.LeftTubularReabsorptionFluidPermeability_;
            this->RenalBloodFlow_ = x.RenalBloodFlow_;
            this->RenalPlasmaFlow_ = x.RenalPlasmaFlow_;
            this->RenalVascularResistance_ = x.RenalVascularResistance_;
            this->RightAfferentArterioleResistance_ = x.RightAfferentArterioleResistance_;
            this->RightBowmansCapsulesHydrostaticPressure_ = x.RightBowmansCapsulesHydrostaticPressure_;
            this->RightBowmansCapsulesOsmoticPressure_ = x.RightBowmansCapsulesOsmoticPressure_;
            this->RightEfferentArterioleResistance_ = x.RightEfferentArterioleResistance_;
            this->RightGlomerularCapillariesHydrostaticPressure_ = x.RightGlomerularCapillariesHydrostaticPressure_;
            this->RightGlomerularCapillariesOsmoticPressure_ = x.RightGlomerularCapillariesOsmoticPressure_;
            this->RightGlomerularFiltrationCoefficient_ = x.RightGlomerularFiltrationCoefficient_;
            this->RightGlomerularFiltrationRate_ = x.RightGlomerularFiltrationRate_;
            this->RightGlomerularFiltrationSurfaceArea_ = x.RightGlomerularFiltrationSurfaceArea_;
            this->RightGlomerularFluidPermeability_ = x.RightGlomerularFluidPermeability_;
            this->RightFiltrationFraction_ = x.RightFiltrationFraction_;
            this->RightNetFiltrationPressure_ = x.RightNetFiltrationPressure_;
            this->RightNetReabsorptionPressure_ = x.RightNetReabsorptionPressure_;
            this->RightPeritubularCapillariesHydrostaticPressure_ = x.RightPeritubularCapillariesHydrostaticPressure_;
            this->RightPeritubularCapillariesOsmoticPressure_ = x.RightPeritubularCapillariesOsmoticPressure_;
            this->RightReabsorptionFiltrationCoefficient_ = x.RightReabsorptionFiltrationCoefficient_;
            this->RightReabsorptionRate_ = x.RightReabsorptionRate_;
            this->RightTubularOsmoticPressure_ = x.RightTubularOsmoticPressure_;
            this->RightTubularHydrostaticPressure_ = x.RightTubularHydrostaticPressure_;
            this->RightTubularReabsorptionFiltrationSurfaceArea_ = x.RightTubularReabsorptionFiltrationSurfaceArea_;
            this->RightTubularReabsorptionFluidPermeability_ = x.RightTubularReabsorptionFluidPermeability_;
            this->UrinationRate_ = x.UrinationRate_;
            this->UrineOsmolality_ = x.UrineOsmolality_;
            this->UrineOsmolarity_ = x.UrineOsmolarity_;
            this->UrineProductionRate_ = x.UrineProductionRate_;
            this->MeanUrineOutput_ = x.MeanUrineOutput_;
            this->UrineSpecificGravity_ = x.UrineSpecificGravity_;
            this->UrineVolume_ = x.UrineVolume_;
            this->UrineUreaNitrogenConcentration_ = x.UrineUreaNitrogenConcentration_;
          }

          return *this;
        }

        RenalSystemData::
        ~RenalSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RenalSystemData >
        _xsd_RenalSystemData_type_factory_init (
          "RenalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // RespiratorySystemData
        //

        RespiratorySystemData::
        RespiratorySystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          AlveolarArterialGradient_ (this),
          CarricoIndex_ (this),
          EndTidalCarbonDioxideFraction_ (this),
          EndTidalCarbonDioxidePressure_ (this),
          ExpiratoryFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          InspiratoryFlow_ (this),
          MeanPleuralPressure_ (this),
          PulmonaryCompliance_ (this),
          PulmonaryResistance_ (this),
          RespirationDriverFrequency_ (this),
          RespirationDriverPressure_ (this),
          RespirationMusclePressure_ (this),
          RespirationRate_ (this),
          SpecificVentilation_ (this),
          TidalVolume_ (this),
          TargetPulmonaryVentilation_ (this),
          TotalAlveolarVentilation_ (this),
          TotalDeadSpaceVentilation_ (this),
          TotalLungVolume_ (this),
          TotalPulmonaryVentilation_ (this),
          TranspulmonaryPressure_ (this)
        {
        }

        RespiratorySystemData::
        RespiratorySystemData (const RespiratorySystemData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          AlveolarArterialGradient_ (x.AlveolarArterialGradient_, f, this),
          CarricoIndex_ (x.CarricoIndex_, f, this),
          EndTidalCarbonDioxideFraction_ (x.EndTidalCarbonDioxideFraction_, f, this),
          EndTidalCarbonDioxidePressure_ (x.EndTidalCarbonDioxidePressure_, f, this),
          ExpiratoryFlow_ (x.ExpiratoryFlow_, f, this),
          InspiratoryExpiratoryRatio_ (x.InspiratoryExpiratoryRatio_, f, this),
          InspiratoryFlow_ (x.InspiratoryFlow_, f, this),
          MeanPleuralPressure_ (x.MeanPleuralPressure_, f, this),
          PulmonaryCompliance_ (x.PulmonaryCompliance_, f, this),
          PulmonaryResistance_ (x.PulmonaryResistance_, f, this),
          RespirationDriverFrequency_ (x.RespirationDriverFrequency_, f, this),
          RespirationDriverPressure_ (x.RespirationDriverPressure_, f, this),
          RespirationMusclePressure_ (x.RespirationMusclePressure_, f, this),
          RespirationRate_ (x.RespirationRate_, f, this),
          SpecificVentilation_ (x.SpecificVentilation_, f, this),
          TidalVolume_ (x.TidalVolume_, f, this),
          TargetPulmonaryVentilation_ (x.TargetPulmonaryVentilation_, f, this),
          TotalAlveolarVentilation_ (x.TotalAlveolarVentilation_, f, this),
          TotalDeadSpaceVentilation_ (x.TotalDeadSpaceVentilation_, f, this),
          TotalLungVolume_ (x.TotalLungVolume_, f, this),
          TotalPulmonaryVentilation_ (x.TotalPulmonaryVentilation_, f, this),
          TranspulmonaryPressure_ (x.TranspulmonaryPressure_, f, this)
        {
        }

        RespiratorySystemData::
        RespiratorySystemData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          AlveolarArterialGradient_ (this),
          CarricoIndex_ (this),
          EndTidalCarbonDioxideFraction_ (this),
          EndTidalCarbonDioxidePressure_ (this),
          ExpiratoryFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          InspiratoryFlow_ (this),
          MeanPleuralPressure_ (this),
          PulmonaryCompliance_ (this),
          PulmonaryResistance_ (this),
          RespirationDriverFrequency_ (this),
          RespirationDriverPressure_ (this),
          RespirationMusclePressure_ (this),
          RespirationRate_ (this),
          SpecificVentilation_ (this),
          TidalVolume_ (this),
          TargetPulmonaryVentilation_ (this),
          TotalAlveolarVentilation_ (this),
          TotalDeadSpaceVentilation_ (this),
          TotalLungVolume_ (this),
          TotalPulmonaryVentilation_ (this),
          TranspulmonaryPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RespiratorySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AlveolarArterialGradient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AlveolarArterialGradient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AlveolarArterialGradient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AlveolarArterialGradient_)
                {
                  ::std::unique_ptr< AlveolarArterialGradient_type > r (
                    dynamic_cast< AlveolarArterialGradient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AlveolarArterialGradient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarricoIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarricoIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarricoIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarricoIndex_)
                {
                  ::std::unique_ptr< CarricoIndex_type > r (
                    dynamic_cast< CarricoIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarricoIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalCarbonDioxideFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalCarbonDioxideFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalCarbonDioxideFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalCarbonDioxideFraction_)
                {
                  ::std::unique_ptr< EndTidalCarbonDioxideFraction_type > r (
                    dynamic_cast< EndTidalCarbonDioxideFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalCarbonDioxideFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< EndTidalCarbonDioxidePressure_type > r (
                    dynamic_cast< EndTidalCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExpiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExpiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExpiratoryFlow_)
                {
                  ::std::unique_ptr< ExpiratoryFlow_type > r (
                    dynamic_cast< ExpiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExpiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryExpiratoryRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryExpiratoryRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryExpiratoryRatio_)
                {
                  ::std::unique_ptr< InspiratoryExpiratoryRatio_type > r (
                    dynamic_cast< InspiratoryExpiratoryRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryExpiratoryRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryFlow_)
                {
                  ::std::unique_ptr< InspiratoryFlow_type > r (
                    dynamic_cast< InspiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanPleuralPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanPleuralPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanPleuralPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanPleuralPressure_)
                {
                  ::std::unique_ptr< MeanPleuralPressure_type > r (
                    dynamic_cast< MeanPleuralPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanPleuralPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryCompliance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryCompliance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryCompliance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryCompliance_)
                {
                  ::std::unique_ptr< PulmonaryCompliance_type > r (
                    dynamic_cast< PulmonaryCompliance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryCompliance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryResistance_)
                {
                  ::std::unique_ptr< PulmonaryResistance_type > r (
                    dynamic_cast< PulmonaryResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationDriverFrequency
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationDriverFrequency",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationDriverFrequency_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationDriverFrequency_)
                {
                  ::std::unique_ptr< RespirationDriverFrequency_type > r (
                    dynamic_cast< RespirationDriverFrequency_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationDriverFrequency_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationDriverPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationDriverPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationDriverPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationDriverPressure_)
                {
                  ::std::unique_ptr< RespirationDriverPressure_type > r (
                    dynamic_cast< RespirationDriverPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationDriverPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationMusclePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationMusclePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationMusclePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationMusclePressure_)
                {
                  ::std::unique_ptr< RespirationMusclePressure_type > r (
                    dynamic_cast< RespirationMusclePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationMusclePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationRate_)
                {
                  ::std::unique_ptr< RespirationRate_type > r (
                    dynamic_cast< RespirationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SpecificVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SpecificVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SpecificVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SpecificVentilation_)
                {
                  ::std::unique_ptr< SpecificVentilation_type > r (
                    dynamic_cast< SpecificVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SpecificVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TidalVolume_)
                {
                  ::std::unique_ptr< TidalVolume_type > r (
                    dynamic_cast< TidalVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetPulmonaryVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetPulmonaryVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TargetPulmonaryVentilation_)
                {
                  ::std::unique_ptr< TargetPulmonaryVentilation_type > r (
                    dynamic_cast< TargetPulmonaryVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetPulmonaryVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalAlveolarVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalAlveolarVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalAlveolarVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalAlveolarVentilation_)
                {
                  ::std::unique_ptr< TotalAlveolarVentilation_type > r (
                    dynamic_cast< TotalAlveolarVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalAlveolarVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalDeadSpaceVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalDeadSpaceVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalDeadSpaceVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalDeadSpaceVentilation_)
                {
                  ::std::unique_ptr< TotalDeadSpaceVentilation_type > r (
                    dynamic_cast< TotalDeadSpaceVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalDeadSpaceVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalLungVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalLungVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalLungVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalLungVolume_)
                {
                  ::std::unique_ptr< TotalLungVolume_type > r (
                    dynamic_cast< TotalLungVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalLungVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalPulmonaryVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalPulmonaryVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalPulmonaryVentilation_)
                {
                  ::std::unique_ptr< TotalPulmonaryVentilation_type > r (
                    dynamic_cast< TotalPulmonaryVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalPulmonaryVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TranspulmonaryPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TranspulmonaryPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TranspulmonaryPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TranspulmonaryPressure_)
                {
                  ::std::unique_ptr< TranspulmonaryPressure_type > r (
                    dynamic_cast< TranspulmonaryPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TranspulmonaryPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RespiratorySystemData* RespiratorySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RespiratorySystemData (*this, f, c);
        }

        RespiratorySystemData& RespiratorySystemData::
        operator= (const RespiratorySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->AlveolarArterialGradient_ = x.AlveolarArterialGradient_;
            this->CarricoIndex_ = x.CarricoIndex_;
            this->EndTidalCarbonDioxideFraction_ = x.EndTidalCarbonDioxideFraction_;
            this->EndTidalCarbonDioxidePressure_ = x.EndTidalCarbonDioxidePressure_;
            this->ExpiratoryFlow_ = x.ExpiratoryFlow_;
            this->InspiratoryExpiratoryRatio_ = x.InspiratoryExpiratoryRatio_;
            this->InspiratoryFlow_ = x.InspiratoryFlow_;
            this->MeanPleuralPressure_ = x.MeanPleuralPressure_;
            this->PulmonaryCompliance_ = x.PulmonaryCompliance_;
            this->PulmonaryResistance_ = x.PulmonaryResistance_;
            this->RespirationDriverFrequency_ = x.RespirationDriverFrequency_;
            this->RespirationDriverPressure_ = x.RespirationDriverPressure_;
            this->RespirationMusclePressure_ = x.RespirationMusclePressure_;
            this->RespirationRate_ = x.RespirationRate_;
            this->SpecificVentilation_ = x.SpecificVentilation_;
            this->TidalVolume_ = x.TidalVolume_;
            this->TargetPulmonaryVentilation_ = x.TargetPulmonaryVentilation_;
            this->TotalAlveolarVentilation_ = x.TotalAlveolarVentilation_;
            this->TotalDeadSpaceVentilation_ = x.TotalDeadSpaceVentilation_;
            this->TotalLungVolume_ = x.TotalLungVolume_;
            this->TotalPulmonaryVentilation_ = x.TotalPulmonaryVentilation_;
            this->TranspulmonaryPressure_ = x.TranspulmonaryPressure_;
          }

          return *this;
        }

        RespiratorySystemData::
        ~RespiratorySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_type_factory_init (
          "RespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TissueSystemData
        //

        TissueSystemData::
        TissueSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          CarbonDioxideProductionRate_ (this),
          DehydrationFraction_ (this),
          ExtracellularFluidVolume_ (this),
          ExtravascularFluidVolume_ (this),
          IntracellularFluidPH_ (this),
          IntracellularFluidVolume_ (this),
          TotalBodyFluidVolume_ (this),
          OxygenConsumptionRate_ (this),
          RespiratoryExchangeRatio_ (this),
          LiverInsulinSetPoint_ (this),
          LiverGlucagonSetPoint_ (this),
          MuscleInsulinSetPoint_ (this),
          MuscleGlucagonSetPoint_ (this),
          FatInsulinSetPoint_ (this),
          FatGlucagonSetPoint_ (this),
          LiverGlycogen_ (this),
          MuscleGlycogen_ (this),
          StoredProtein_ (this),
          StoredFat_ (this)
        {
        }

        TissueSystemData::
        TissueSystemData (const TissueSystemData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          CarbonDioxideProductionRate_ (x.CarbonDioxideProductionRate_, f, this),
          DehydrationFraction_ (x.DehydrationFraction_, f, this),
          ExtracellularFluidVolume_ (x.ExtracellularFluidVolume_, f, this),
          ExtravascularFluidVolume_ (x.ExtravascularFluidVolume_, f, this),
          IntracellularFluidPH_ (x.IntracellularFluidPH_, f, this),
          IntracellularFluidVolume_ (x.IntracellularFluidVolume_, f, this),
          TotalBodyFluidVolume_ (x.TotalBodyFluidVolume_, f, this),
          OxygenConsumptionRate_ (x.OxygenConsumptionRate_, f, this),
          RespiratoryExchangeRatio_ (x.RespiratoryExchangeRatio_, f, this),
          LiverInsulinSetPoint_ (x.LiverInsulinSetPoint_, f, this),
          LiverGlucagonSetPoint_ (x.LiverGlucagonSetPoint_, f, this),
          MuscleInsulinSetPoint_ (x.MuscleInsulinSetPoint_, f, this),
          MuscleGlucagonSetPoint_ (x.MuscleGlucagonSetPoint_, f, this),
          FatInsulinSetPoint_ (x.FatInsulinSetPoint_, f, this),
          FatGlucagonSetPoint_ (x.FatGlucagonSetPoint_, f, this),
          LiverGlycogen_ (x.LiverGlycogen_, f, this),
          MuscleGlycogen_ (x.MuscleGlycogen_, f, this),
          StoredProtein_ (x.StoredProtein_, f, this),
          StoredFat_ (x.StoredFat_, f, this)
        {
        }

        TissueSystemData::
        TissueSystemData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          CarbonDioxideProductionRate_ (this),
          DehydrationFraction_ (this),
          ExtracellularFluidVolume_ (this),
          ExtravascularFluidVolume_ (this),
          IntracellularFluidPH_ (this),
          IntracellularFluidVolume_ (this),
          TotalBodyFluidVolume_ (this),
          OxygenConsumptionRate_ (this),
          RespiratoryExchangeRatio_ (this),
          LiverInsulinSetPoint_ (this),
          LiverGlucagonSetPoint_ (this),
          MuscleInsulinSetPoint_ (this),
          MuscleGlucagonSetPoint_ (this),
          FatInsulinSetPoint_ (this),
          FatGlucagonSetPoint_ (this),
          LiverGlycogen_ (this),
          MuscleGlycogen_ (this),
          StoredProtein_ (this),
          StoredFat_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TissueSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CarbonDioxideProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarbonDioxideProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarbonDioxideProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarbonDioxideProductionRate_)
                {
                  ::std::unique_ptr< CarbonDioxideProductionRate_type > r (
                    dynamic_cast< CarbonDioxideProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarbonDioxideProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DehydrationFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DehydrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DehydrationFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DehydrationFraction_)
                {
                  ::std::unique_ptr< DehydrationFraction_type > r (
                    dynamic_cast< DehydrationFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DehydrationFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtracellularFluidVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtracellularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtracellularFluidVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtracellularFluidVolume_)
                {
                  ::std::unique_ptr< ExtracellularFluidVolume_type > r (
                    dynamic_cast< ExtracellularFluidVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtracellularFluidVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExtravascularFluidVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExtravascularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExtravascularFluidVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExtravascularFluidVolume_)
                {
                  ::std::unique_ptr< ExtravascularFluidVolume_type > r (
                    dynamic_cast< ExtravascularFluidVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExtravascularFluidVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntracellularFluidPH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntracellularFluidPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntracellularFluidPH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->IntracellularFluidPH_)
                {
                  ::std::unique_ptr< IntracellularFluidPH_type > r (
                    dynamic_cast< IntracellularFluidPH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntracellularFluidPH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntracellularFluidVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntracellularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntracellularFluidVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->IntracellularFluidVolume_)
                {
                  ::std::unique_ptr< IntracellularFluidVolume_type > r (
                    dynamic_cast< IntracellularFluidVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntracellularFluidVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalBodyFluidVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBodyFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBodyFluidVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalBodyFluidVolume_)
                {
                  ::std::unique_ptr< TotalBodyFluidVolume_type > r (
                    dynamic_cast< TotalBodyFluidVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBodyFluidVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenConsumptionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenConsumptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenConsumptionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenConsumptionRate_)
                {
                  ::std::unique_ptr< OxygenConsumptionRate_type > r (
                    dynamic_cast< OxygenConsumptionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenConsumptionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryExchangeRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryExchangeRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryExchangeRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespiratoryExchangeRatio_)
                {
                  ::std::unique_ptr< RespiratoryExchangeRatio_type > r (
                    dynamic_cast< RespiratoryExchangeRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryExchangeRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LiverInsulinSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiverInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiverInsulinSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LiverInsulinSetPoint_)
                {
                  ::std::unique_ptr< LiverInsulinSetPoint_type > r (
                    dynamic_cast< LiverInsulinSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LiverInsulinSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LiverGlucagonSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiverGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiverGlucagonSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LiverGlucagonSetPoint_)
                {
                  ::std::unique_ptr< LiverGlucagonSetPoint_type > r (
                    dynamic_cast< LiverGlucagonSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LiverGlucagonSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MuscleInsulinSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MuscleInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MuscleInsulinSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MuscleInsulinSetPoint_)
                {
                  ::std::unique_ptr< MuscleInsulinSetPoint_type > r (
                    dynamic_cast< MuscleInsulinSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MuscleInsulinSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MuscleGlucagonSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MuscleGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MuscleGlucagonSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MuscleGlucagonSetPoint_)
                {
                  ::std::unique_ptr< MuscleGlucagonSetPoint_type > r (
                    dynamic_cast< MuscleGlucagonSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MuscleGlucagonSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatInsulinSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatInsulinSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatInsulinSetPoint_)
                {
                  ::std::unique_ptr< FatInsulinSetPoint_type > r (
                    dynamic_cast< FatInsulinSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatInsulinSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatGlucagonSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatGlucagonSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatGlucagonSetPoint_)
                {
                  ::std::unique_ptr< FatGlucagonSetPoint_type > r (
                    dynamic_cast< FatGlucagonSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatGlucagonSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LiverGlycogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiverGlycogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiverGlycogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LiverGlycogen_)
                {
                  ::std::unique_ptr< LiverGlycogen_type > r (
                    dynamic_cast< LiverGlycogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LiverGlycogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MuscleGlycogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MuscleGlycogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MuscleGlycogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MuscleGlycogen_)
                {
                  ::std::unique_ptr< MuscleGlycogen_type > r (
                    dynamic_cast< MuscleGlycogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MuscleGlycogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StoredProtein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StoredProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StoredProtein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StoredProtein_)
                {
                  ::std::unique_ptr< StoredProtein_type > r (
                    dynamic_cast< StoredProtein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StoredProtein_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StoredFat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StoredFat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StoredFat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StoredFat_)
                {
                  ::std::unique_ptr< StoredFat_type > r (
                    dynamic_cast< StoredFat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StoredFat_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        TissueSystemData* TissueSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueSystemData (*this, f, c);
        }

        TissueSystemData& TissueSystemData::
        operator= (const TissueSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->CarbonDioxideProductionRate_ = x.CarbonDioxideProductionRate_;
            this->DehydrationFraction_ = x.DehydrationFraction_;
            this->ExtracellularFluidVolume_ = x.ExtracellularFluidVolume_;
            this->ExtravascularFluidVolume_ = x.ExtravascularFluidVolume_;
            this->IntracellularFluidPH_ = x.IntracellularFluidPH_;
            this->IntracellularFluidVolume_ = x.IntracellularFluidVolume_;
            this->TotalBodyFluidVolume_ = x.TotalBodyFluidVolume_;
            this->OxygenConsumptionRate_ = x.OxygenConsumptionRate_;
            this->RespiratoryExchangeRatio_ = x.RespiratoryExchangeRatio_;
            this->LiverInsulinSetPoint_ = x.LiverInsulinSetPoint_;
            this->LiverGlucagonSetPoint_ = x.LiverGlucagonSetPoint_;
            this->MuscleInsulinSetPoint_ = x.MuscleInsulinSetPoint_;
            this->MuscleGlucagonSetPoint_ = x.MuscleGlucagonSetPoint_;
            this->FatInsulinSetPoint_ = x.FatInsulinSetPoint_;
            this->FatGlucagonSetPoint_ = x.FatGlucagonSetPoint_;
            this->LiverGlycogen_ = x.LiverGlycogen_;
            this->MuscleGlycogen_ = x.MuscleGlycogen_;
            this->StoredProtein_ = x.StoredProtein_;
            this->StoredFat_ = x.StoredFat_;
          }

          return *this;
        }

        TissueSystemData::
        ~TissueSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueSystemData >
        _xsd_TissueSystemData_type_factory_init (
          "TissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PupillaryResponseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReactivityModifier ())
            {
              o << ::std::endl << "ReactivityModifier: ";
              om.insert (o, *i.ReactivityModifier ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ShapeModifier ())
            {
              o << ::std::endl << "ShapeModifier: ";
              om.insert (o, *i.ShapeModifier ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SizeModifier ())
            {
              o << ::std::endl << "SizeModifier: ";
              om.insert (o, *i.SizeModifier ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PupillaryResponseData >
        _xsd_PupillaryResponseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumInflammationSource::value i)
        {
          return o << enumInflammationSource::_xsd_enumInflammationSource_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumInflammationSource& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumInflammationSource >
        _xsd_enumInflammationSource_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const InflammatoryResponseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LocalPathogen: ";
            om.insert (o, i.LocalPathogen ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LocalMacrophage: ";
            om.insert (o, i.LocalMacrophage ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LocalNeutrophil: ";
            om.insert (o, i.LocalNeutrophil ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LocalBarrier: ";
            om.insert (o, i.LocalBarrier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ActiveTLR: ";
            om.insert (o, i.ActiveTLR ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AutonomicResponseLevel: ";
            om.insert (o, i.AutonomicResponseLevel ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BloodPathogen: ";
            om.insert (o, i.BloodPathogen ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Trauma: ";
            om.insert (o, i.Trauma ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MacrophageResting: ";
            om.insert (o, i.MacrophageResting ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MacrophageActive: ";
            om.insert (o, i.MacrophageActive ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "NeutrophilResting: ";
            om.insert (o, i.NeutrophilResting ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "NeutrophilActive: ";
            om.insert (o, i.NeutrophilActive ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TumorNecrosisFactor: ";
            om.insert (o, i.TumorNecrosisFactor ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Interleukin6: ";
            om.insert (o, i.Interleukin6 ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Interleukin10: ";
            om.insert (o, i.Interleukin10 ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Interleukin12: ";
            om.insert (o, i.Interleukin12 ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InducibleNOSPre: ";
            om.insert (o, i.InducibleNOSPre ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InducibleNOS: ";
            om.insert (o, i.InducibleNOS ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ConstitutiveNOS: ";
            om.insert (o, i.ConstitutiveNOS ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Nitrate: ";
            om.insert (o, i.Nitrate ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "NitricOxide: ";
            om.insert (o, i.NitricOxide ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TissueIntegrity: ";
            om.insert (o, i.TissueIntegrity ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Catecholamines: ";
            om.insert (o, i.Catecholamines ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InflammationTime: ";
            om.insert (o, i.InflammationTime ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (InflammatoryResponseData::Source_const_iterator
                 b (i.Source ().begin ()), e (i.Source ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Source: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, InflammatoryResponseData >
        _xsd_InflammatoryResponseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const BloodChemistrySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodDensity ())
            {
              o << ::std::endl << "BloodDensity: ";
              om.insert (o, *i.BloodDensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialBloodPH ())
            {
              o << ::std::endl << "ArterialBloodPH: ";
              om.insert (o, *i.ArterialBloodPH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialBloodPHBaseline ())
            {
              o << ::std::endl << "ArterialBloodPHBaseline: ";
              om.insert (o, *i.ArterialBloodPHBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VenousBloodPH ())
            {
              o << ::std::endl << "VenousBloodPH: ";
              om.insert (o, *i.VenousBloodPH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodSpecificHeat ())
            {
              o << ::std::endl << "BloodSpecificHeat: ";
              om.insert (o, *i.BloodSpecificHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodUreaNitrogenConcentration ())
            {
              o << ::std::endl << "BloodUreaNitrogenConcentration: ";
              om.insert (o, *i.BloodUreaNitrogenConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbonDioxideSaturation ())
            {
              o << ::std::endl << "CarbonDioxideSaturation: ";
              om.insert (o, *i.CarbonDioxideSaturation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbonMonoxideSaturation ())
            {
              o << ::std::endl << "CarbonMonoxideSaturation: ";
              om.insert (o, *i.CarbonMonoxideSaturation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              o << ::std::endl << "Hematocrit: ";
              om.insert (o, *i.Hematocrit ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HemoglobinContent ())
            {
              o << ::std::endl << "HemoglobinContent: ";
              om.insert (o, *i.HemoglobinContent ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HemoglobinLostToUrine ())
            {
              o << ::std::endl << "HemoglobinLostToUrine: ";
              om.insert (o, *i.HemoglobinLostToUrine ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenSaturation ())
            {
              o << ::std::endl << "OxygenSaturation: ";
              om.insert (o, *i.OxygenSaturation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenVenousSaturation ())
            {
              o << ::std::endl << "OxygenVenousSaturation: ";
              om.insert (o, *i.OxygenVenousSaturation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Phosphate ())
            {
              o << ::std::endl << "Phosphate: ";
              om.insert (o, *i.Phosphate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlasmaVolume ())
            {
              o << ::std::endl << "PlasmaVolume: ";
              om.insert (o, *i.PlasmaVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulseOximetry ())
            {
              o << ::std::endl << "PulseOximetry: ";
              om.insert (o, *i.PulseOximetry ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              o << ::std::endl << "RedBloodCellCount: ";
              om.insert (o, *i.RedBloodCellCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RhTransfusionReactionVolume ())
            {
              o << ::std::endl << "RhTransfusionReactionVolume: ";
              om.insert (o, *i.RhTransfusionReactionVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ShuntFraction ())
            {
              o << ::std::endl << "ShuntFraction: ";
              om.insert (o, *i.ShuntFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StrongIonDifference ())
            {
              o << ::std::endl << "StrongIonDifference: ";
              om.insert (o, *i.StrongIonDifference ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalProteinConcentration ())
            {
              o << ::std::endl << "TotalProteinConcentration: ";
              om.insert (o, *i.TotalProteinConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VolumeFractionNeutralLipidInPlasma ())
            {
              o << ::std::endl << "VolumeFractionNeutralLipidInPlasma: ";
              om.insert (o, *i.VolumeFractionNeutralLipidInPlasma ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VolumeFractionNeutralPhospholipidInPlasma ())
            {
              o << ::std::endl << "VolumeFractionNeutralPhospholipidInPlasma: ";
              om.insert (o, *i.VolumeFractionNeutralPhospholipidInPlasma ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              o << ::std::endl << "WhiteBloodCellCount: ";
              om.insert (o, *i.WhiteBloodCellCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCellAcetylcholinesterase ())
            {
              o << ::std::endl << "RedBloodCellAcetylcholinesterase: ";
              om.insert (o, *i.RedBloodCellAcetylcholinesterase ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              o << ::std::endl << "TotalBilirubin: ";
              om.insert (o, *i.TotalBilirubin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InflammatoryResponse ())
            {
              o << ::std::endl << "InflammatoryResponse: ";
              om.insert (o, *i.InflammatoryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialCarbonDioxidePressure ())
            {
              o << ::std::endl << "ArterialCarbonDioxidePressure: ";
              om.insert (o, *i.ArterialCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialOxygenPressure ())
            {
              o << ::std::endl << "ArterialOxygenPressure: ";
              om.insert (o, *i.ArterialOxygenPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryArterialCarbonDioxidePressure ())
            {
              o << ::std::endl << "PulmonaryArterialCarbonDioxidePressure: ";
              om.insert (o, *i.PulmonaryArterialCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryArterialOxygenPressure ())
            {
              o << ::std::endl << "PulmonaryArterialOxygenPressure: ";
              om.insert (o, *i.PulmonaryArterialOxygenPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVenousCarbonDioxidePressure ())
            {
              o << ::std::endl << "PulmonaryVenousCarbonDioxidePressure: ";
              om.insert (o, *i.PulmonaryVenousCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVenousOxygenPressure ())
            {
              o << ::std::endl << "PulmonaryVenousOxygenPressure: ";
              om.insert (o, *i.PulmonaryVenousOxygenPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VenousCarbonDioxidePressure ())
            {
              o << ::std::endl << "VenousCarbonDioxidePressure: ";
              om.insert (o, *i.VenousCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VenousOxygenPressure ())
            {
              o << ::std::endl << "VenousOxygenPressure: ";
              om.insert (o, *i.VenousOxygenPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BloodChemistrySystemData >
        _xsd_BloodChemistrySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumHeartRhythm::value i)
        {
          return o << enumHeartRhythm::_xsd_enumHeartRhythm_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumHeartRhythm& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumHeartRhythm >
        _xsd_enumHeartRhythm_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CardiovascularSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialPressure ())
            {
              o << ::std::endl << "ArterialPressure: ";
              om.insert (o, *i.ArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodVolume ())
            {
              o << ::std::endl << "BloodVolume: ";
              om.insert (o, *i.BloodVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiacIndex ())
            {
              o << ::std::endl << "CardiacIndex: ";
              om.insert (o, *i.CardiacIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiacOutput ())
            {
              o << ::std::endl << "CardiacOutput: ";
              om.insert (o, *i.CardiacOutput ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralVenousPressure ())
            {
              o << ::std::endl << "CentralVenousPressure: ";
              om.insert (o, *i.CentralVenousPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CerebralBloodFlow ())
            {
              o << ::std::endl << "CerebralBloodFlow: ";
              om.insert (o, *i.CerebralBloodFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CerebralPerfusionPressure ())
            {
              o << ::std::endl << "CerebralPerfusionPressure: ";
              om.insert (o, *i.CerebralPerfusionPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DiastolicArterialPressure ())
            {
              o << ::std::endl << "DiastolicArterialPressure: ";
              om.insert (o, *i.DiastolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartEjectionFraction ())
            {
              o << ::std::endl << "HeartEjectionFraction: ";
              om.insert (o, *i.HeartEjectionFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRate ())
            {
              o << ::std::endl << "HeartRate: ";
              om.insert (o, *i.HeartRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRhythm ())
            {
              o << ::std::endl << "HeartRhythm: ";
              om.insert (o, *i.HeartRhythm ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartStrokeVolume ())
            {
              o << ::std::endl << "HeartStrokeVolume: ";
              om.insert (o, *i.HeartStrokeVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.IntracranialPressure ())
            {
              o << ::std::endl << "IntracranialPressure: ";
              om.insert (o, *i.IntracranialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialPressure ())
            {
              o << ::std::endl << "MeanArterialPressure: ";
              om.insert (o, *i.MeanArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressure ())
            {
              o << ::std::endl << "MeanArterialCarbonDioxidePartialPressure: ";
              om.insert (o, *i.MeanArterialCarbonDioxidePartialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressureDelta ())
            {
              o << ::std::endl << "MeanArterialCarbonDioxidePartialPressureDelta: ";
              om.insert (o, *i.MeanArterialCarbonDioxidePartialPressureDelta ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCentralVenousPressure ())
            {
              o << ::std::endl << "MeanCentralVenousPressure: ";
              om.insert (o, *i.MeanCentralVenousPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanSkinFlow ())
            {
              o << ::std::endl << "MeanSkinFlow: ";
              om.insert (o, *i.MeanSkinFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryArterialPressure ())
            {
              o << ::std::endl << "PulmonaryArterialPressure: ";
              om.insert (o, *i.PulmonaryArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryCapillariesWedgePressure ())
            {
              o << ::std::endl << "PulmonaryCapillariesWedgePressure: ";
              om.insert (o, *i.PulmonaryCapillariesWedgePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryDiastolicArterialPressure ())
            {
              o << ::std::endl << "PulmonaryDiastolicArterialPressure: ";
              om.insert (o, *i.PulmonaryDiastolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanArterialPressure ())
            {
              o << ::std::endl << "PulmonaryMeanArterialPressure: ";
              om.insert (o, *i.PulmonaryMeanArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanCapillaryFlow ())
            {
              o << ::std::endl << "PulmonaryMeanCapillaryFlow: ";
              om.insert (o, *i.PulmonaryMeanCapillaryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanShuntFlow ())
            {
              o << ::std::endl << "PulmonaryMeanShuntFlow: ";
              om.insert (o, *i.PulmonaryMeanShuntFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonarySystolicArterialPressure ())
            {
              o << ::std::endl << "PulmonarySystolicArterialPressure: ";
              om.insert (o, *i.PulmonarySystolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistance ())
            {
              o << ::std::endl << "PulmonaryVascularResistance: ";
              om.insert (o, *i.PulmonaryVascularResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistanceIndex ())
            {
              o << ::std::endl << "PulmonaryVascularResistanceIndex: ";
              om.insert (o, *i.PulmonaryVascularResistanceIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulsePressure ())
            {
              o << ::std::endl << "PulsePressure: ";
              om.insert (o, *i.PulsePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystemicVascularResistance ())
            {
              o << ::std::endl << "SystemicVascularResistance: ";
              om.insert (o, *i.SystemicVascularResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystolicArterialPressure ())
            {
              o << ::std::endl << "SystolicArterialPressure: ";
              om.insert (o, *i.SystolicArterialPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DrugSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AntibioticActivity ())
            {
              o << ::std::endl << "AntibioticActivity: ";
              om.insert (o, *i.AntibioticActivity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BronchodilationLevel ())
            {
              o << ::std::endl << "BronchodilationLevel: ";
              om.insert (o, *i.BronchodilationLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FeverChange ())
            {
              o << ::std::endl << "FeverChange: ";
              om.insert (o, *i.FeverChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRateChange ())
            {
              o << ::std::endl << "HeartRateChange: ";
              om.insert (o, *i.HeartRateChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HemorrhageChange ())
            {
              o << ::std::endl << "HemorrhageChange: ";
              om.insert (o, *i.HemorrhageChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanBloodPressureChange ())
            {
              o << ::std::endl << "MeanBloodPressureChange: ";
              om.insert (o, *i.MeanBloodPressureChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeuromuscularBlockLevel ())
            {
              o << ::std::endl << "NeuromuscularBlockLevel: ";
              om.insert (o, *i.NeuromuscularBlockLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PainToleranceChange ())
            {
              o << ::std::endl << "PainToleranceChange: ";
              om.insert (o, *i.PainToleranceChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulsePressureChange ())
            {
              o << ::std::endl << "PulsePressureChange: ";
              om.insert (o, *i.PulsePressureChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationRateChange ())
            {
              o << ::std::endl << "RespirationRateChange: ";
              om.insert (o, *i.RespirationRateChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SedationLevel ())
            {
              o << ::std::endl << "SedationLevel: ";
              om.insert (o, *i.SedationLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TidalVolumeChange ())
            {
              o << ::std::endl << "TidalVolumeChange: ";
              om.insert (o, *i.TidalVolumeChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TubularPermeabilityChange ())
            {
              o << ::std::endl << "TubularPermeabilityChange: ";
              om.insert (o, *i.TubularPermeabilityChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralNervousResponse ())
            {
              o << ::std::endl << "CentralNervousResponse: ";
              om.insert (o, *i.CentralNervousResponse ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EndocrineSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InsulinSynthesisRate ())
            {
              o << ::std::endl << "InsulinSynthesisRate: ";
              om.insert (o, *i.InsulinSynthesisRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GlucagonSynthesisRate ())
            {
              o << ::std::endl << "GlucagonSynthesisRate: ";
              om.insert (o, *i.GlucagonSynthesisRate ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EndocrineSystemData >
        _xsd_EndocrineSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnergySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AchievedExerciseLevel ())
            {
              o << ::std::endl << "AchievedExerciseLevel: ";
              om.insert (o, *i.AchievedExerciseLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperature ())
            {
              o << ::std::endl << "CoreTemperature: ";
              om.insert (o, *i.CoreTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CreatinineProductionRate ())
            {
              o << ::std::endl << "CreatinineProductionRate: ";
              om.insert (o, *i.CreatinineProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExerciseEnergyDemand ())
            {
              o << ::std::endl << "ExerciseEnergyDemand: ";
              om.insert (o, *i.ExerciseEnergyDemand ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDelta ())
            {
              o << ::std::endl << "ExerciseMeanArterialPressureDelta: ";
              om.insert (o, *i.ExerciseMeanArterialPressureDelta ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatigueLevel ())
            {
              o << ::std::endl << "FatigueLevel: ";
              om.insert (o, *i.FatigueLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LactateProductionRate ())
            {
              o << ::std::endl << "LactateProductionRate: ";
              om.insert (o, *i.LactateProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SkinTemperature ())
            {
              o << ::std::endl << "SkinTemperature: ";
              om.insert (o, *i.SkinTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SweatRate ())
            {
              o << ::std::endl << "SweatRate: ";
              om.insert (o, *i.SweatRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalMetabolicRate ())
            {
              o << ::std::endl << "TotalMetabolicRate: ";
              om.insert (o, *i.TotalMetabolicRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalWorkRateLevel ())
            {
              o << ::std::endl << "TotalWorkRateLevel: ";
              om.insert (o, *i.TotalWorkRateLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SodiumLostToSweat ())
            {
              o << ::std::endl << "SodiumLostToSweat: ";
              om.insert (o, *i.SodiumLostToSweat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PotassiumLostToSweat ())
            {
              o << ::std::endl << "PotassiumLostToSweat: ";
              om.insert (o, *i.PotassiumLostToSweat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChlorideLostToSweat ())
            {
              o << ::std::endl << "ChlorideLostToSweat: ";
              om.insert (o, *i.ChlorideLostToSweat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnergyDeficit ())
            {
              o << ::std::endl << "EnergyDeficit: ";
              om.insert (o, *i.EnergyDeficit ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DrugTransitStateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (DrugTransitStateData::LumenSolidMasses_const_iterator
                 b (i.LumenSolidMasses ().begin ()), e (i.LumenSolidMasses ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LumenSolidMasses: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (DrugTransitStateData::LumenDissolvedMasses_const_iterator
                 b (i.LumenDissolvedMasses ().begin ()), e (i.LumenDissolvedMasses ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LumenDissolvedMasses: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (DrugTransitStateData::EnterocyteMasses_const_iterator
                 b (i.EnterocyteMasses ().begin ()), e (i.EnterocyteMasses ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "EnterocyteMasses: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MassMetabolized: ";
            om.insert (o, i.MassMetabolized ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MassExcreted: ";
            om.insert (o, i.MassExcreted ());
          }

          o << ::std::endl << "Substance: " << i.Substance ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DrugTransitStateData >
        _xsd_DrugTransitStateData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GastrointestinalSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChymeAbsorptionRate ())
            {
              o << ::std::endl << "ChymeAbsorptionRate: ";
              om.insert (o, *i.ChymeAbsorptionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StomachContents ())
            {
              o << ::std::endl << "StomachContents: ";
              om.insert (o, *i.StomachContents ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (GastrointestinalSystemData::DrugTransitStates_const_iterator
                 b (i.DrugTransitStates ().begin ()), e (i.DrugTransitStates ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "DrugTransitStates: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GastrointestinalSystemData >
        _xsd_GastrointestinalSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const HepaticSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.KetoneProductionRate ())
            {
              o << ::std::endl << "KetoneProductionRate: ";
              om.insert (o, *i.KetoneProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HepaticGluconeogenesisRate ())
            {
              o << ::std::endl << "HepaticGluconeogenesisRate: ";
              om.insert (o, *i.HepaticGluconeogenesisRate ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, HepaticSystemData >
        _xsd_HepaticSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumSleepState::value i)
        {
          return o << enumSleepState::_xsd_enumSleepState_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumSleepState& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSleepState >
        _xsd_enumSleepState_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const NervousSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRateScale ())
            {
              o << ::std::endl << "HeartRateScale: ";
              om.insert (o, *i.HeartRateScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartElastanceScale ())
            {
              o << ::std::endl << "HeartElastanceScale: ";
              om.insert (o, *i.HeartElastanceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResistanceScaleExtrasplanchnic ())
            {
              o << ::std::endl << "ResistanceScaleExtrasplanchnic: ";
              om.insert (o, *i.ResistanceScaleExtrasplanchnic ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResistanceScaleMuscle ())
            {
              o << ::std::endl << "ResistanceScaleMuscle: ";
              om.insert (o, *i.ResistanceScaleMuscle ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResistanceScaleMyocardium ())
            {
              o << ::std::endl << "ResistanceScaleMyocardium: ";
              om.insert (o, *i.ResistanceScaleMyocardium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResistanceScaleSplanchnic ())
            {
              o << ::std::endl << "ResistanceScaleSplanchnic: ";
              om.insert (o, *i.ResistanceScaleSplanchnic ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ComplianceScale ())
            {
              o << ::std::endl << "ComplianceScale: ";
              om.insert (o, *i.ComplianceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftEyePupillaryResponse ())
            {
              o << ::std::endl << "LeftEyePupillaryResponse: ";
              om.insert (o, *i.LeftEyePupillaryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PainVisualAnalogueScale ())
            {
              o << ::std::endl << "PainVisualAnalogueScale: ";
              om.insert (o, *i.PainVisualAnalogueScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RichmondAgitationSedationScale ())
            {
              o << ::std::endl << "RichmondAgitationSedationScale: ";
              om.insert (o, *i.RichmondAgitationSedationScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightEyePupillaryResponse ())
            {
              o << ::std::endl << "RightEyePupillaryResponse: ";
              om.insert (o, *i.RightEyePupillaryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SleepTime ())
            {
              o << ::std::endl << "SleepTime: ";
              om.insert (o, *i.SleepTime ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SleepState ())
            {
              o << ::std::endl << "SleepState: ";
              om.insert (o, *i.SleepState ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WakeTime ())
            {
              o << ::std::endl << "WakeTime: ";
              om.insert (o, *i.WakeTime ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BiologicalDebt ())
            {
              o << ::std::endl << "BiologicalDebt: ";
              om.insert (o, *i.BiologicalDebt ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReactionTime ())
            {
              o << ::std::endl << "ReactionTime: ";
              om.insert (o, *i.ReactionTime ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AttentionLapses ())
            {
              o << ::std::endl << "AttentionLapses: ";
              om.insert (o, *i.AttentionLapses ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const RenalSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FiltrationFraction ())
            {
              o << ::std::endl << "FiltrationFraction: ";
              om.insert (o, *i.FiltrationFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GlomerularFiltrationRate ())
            {
              o << ::std::endl << "GlomerularFiltrationRate: ";
              om.insert (o, *i.GlomerularFiltrationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftAfferentArterioleResistance ())
            {
              o << ::std::endl << "LeftAfferentArterioleResistance: ";
              om.insert (o, *i.LeftAfferentArterioleResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftBowmansCapsulesHydrostaticPressure ())
            {
              o << ::std::endl << "LeftBowmansCapsulesHydrostaticPressure: ";
              om.insert (o, *i.LeftBowmansCapsulesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftBowmansCapsulesOsmoticPressure ())
            {
              o << ::std::endl << "LeftBowmansCapsulesOsmoticPressure: ";
              om.insert (o, *i.LeftBowmansCapsulesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftEfferentArterioleResistance ())
            {
              o << ::std::endl << "LeftEfferentArterioleResistance: ";
              om.insert (o, *i.LeftEfferentArterioleResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularCapillariesHydrostaticPressure ())
            {
              o << ::std::endl << "LeftGlomerularCapillariesHydrostaticPressure: ";
              om.insert (o, *i.LeftGlomerularCapillariesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularCapillariesOsmoticPressure ())
            {
              o << ::std::endl << "LeftGlomerularCapillariesOsmoticPressure: ";
              om.insert (o, *i.LeftGlomerularCapillariesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationCoefficient ())
            {
              o << ::std::endl << "LeftGlomerularFiltrationCoefficient: ";
              om.insert (o, *i.LeftGlomerularFiltrationCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationRate ())
            {
              o << ::std::endl << "LeftGlomerularFiltrationRate: ";
              om.insert (o, *i.LeftGlomerularFiltrationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationSurfaceArea ())
            {
              o << ::std::endl << "LeftGlomerularFiltrationSurfaceArea: ";
              om.insert (o, *i.LeftGlomerularFiltrationSurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeability ())
            {
              o << ::std::endl << "LeftGlomerularFluidPermeability: ";
              om.insert (o, *i.LeftGlomerularFluidPermeability ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftFiltrationFraction ())
            {
              o << ::std::endl << "LeftFiltrationFraction: ";
              om.insert (o, *i.LeftFiltrationFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftNetFiltrationPressure ())
            {
              o << ::std::endl << "LeftNetFiltrationPressure: ";
              om.insert (o, *i.LeftNetFiltrationPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftNetReabsorptionPressure ())
            {
              o << ::std::endl << "LeftNetReabsorptionPressure: ";
              om.insert (o, *i.LeftNetReabsorptionPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftPeritubularCapillariesHydrostaticPressure ())
            {
              o << ::std::endl << "LeftPeritubularCapillariesHydrostaticPressure: ";
              om.insert (o, *i.LeftPeritubularCapillariesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftPeritubularCapillariesOsmoticPressure ())
            {
              o << ::std::endl << "LeftPeritubularCapillariesOsmoticPressure: ";
              om.insert (o, *i.LeftPeritubularCapillariesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftReabsorptionFiltrationCoefficient ())
            {
              o << ::std::endl << "LeftReabsorptionFiltrationCoefficient: ";
              om.insert (o, *i.LeftReabsorptionFiltrationCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftReabsorptionRate ())
            {
              o << ::std::endl << "LeftReabsorptionRate: ";
              om.insert (o, *i.LeftReabsorptionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularOsmoticPressure ())
            {
              o << ::std::endl << "LeftTubularOsmoticPressure: ";
              om.insert (o, *i.LeftTubularOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularHydrostaticPressure ())
            {
              o << ::std::endl << "LeftTubularHydrostaticPressure: ";
              om.insert (o, *i.LeftTubularHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFiltrationSurfaceArea ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFiltrationSurfaceArea: ";
              om.insert (o, *i.LeftTubularReabsorptionFiltrationSurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeability ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFluidPermeability: ";
              om.insert (o, *i.LeftTubularReabsorptionFluidPermeability ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalBloodFlow ())
            {
              o << ::std::endl << "RenalBloodFlow: ";
              om.insert (o, *i.RenalBloodFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalPlasmaFlow ())
            {
              o << ::std::endl << "RenalPlasmaFlow: ";
              om.insert (o, *i.RenalPlasmaFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RenalVascularResistance ())
            {
              o << ::std::endl << "RenalVascularResistance: ";
              om.insert (o, *i.RenalVascularResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightAfferentArterioleResistance ())
            {
              o << ::std::endl << "RightAfferentArterioleResistance: ";
              om.insert (o, *i.RightAfferentArterioleResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightBowmansCapsulesHydrostaticPressure ())
            {
              o << ::std::endl << "RightBowmansCapsulesHydrostaticPressure: ";
              om.insert (o, *i.RightBowmansCapsulesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightBowmansCapsulesOsmoticPressure ())
            {
              o << ::std::endl << "RightBowmansCapsulesOsmoticPressure: ";
              om.insert (o, *i.RightBowmansCapsulesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightEfferentArterioleResistance ())
            {
              o << ::std::endl << "RightEfferentArterioleResistance: ";
              om.insert (o, *i.RightEfferentArterioleResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularCapillariesHydrostaticPressure ())
            {
              o << ::std::endl << "RightGlomerularCapillariesHydrostaticPressure: ";
              om.insert (o, *i.RightGlomerularCapillariesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularCapillariesOsmoticPressure ())
            {
              o << ::std::endl << "RightGlomerularCapillariesOsmoticPressure: ";
              om.insert (o, *i.RightGlomerularCapillariesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationCoefficient ())
            {
              o << ::std::endl << "RightGlomerularFiltrationCoefficient: ";
              om.insert (o, *i.RightGlomerularFiltrationCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationRate ())
            {
              o << ::std::endl << "RightGlomerularFiltrationRate: ";
              om.insert (o, *i.RightGlomerularFiltrationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationSurfaceArea ())
            {
              o << ::std::endl << "RightGlomerularFiltrationSurfaceArea: ";
              om.insert (o, *i.RightGlomerularFiltrationSurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeability ())
            {
              o << ::std::endl << "RightGlomerularFluidPermeability: ";
              om.insert (o, *i.RightGlomerularFluidPermeability ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightFiltrationFraction ())
            {
              o << ::std::endl << "RightFiltrationFraction: ";
              om.insert (o, *i.RightFiltrationFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightNetFiltrationPressure ())
            {
              o << ::std::endl << "RightNetFiltrationPressure: ";
              om.insert (o, *i.RightNetFiltrationPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightNetReabsorptionPressure ())
            {
              o << ::std::endl << "RightNetReabsorptionPressure: ";
              om.insert (o, *i.RightNetReabsorptionPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightPeritubularCapillariesHydrostaticPressure ())
            {
              o << ::std::endl << "RightPeritubularCapillariesHydrostaticPressure: ";
              om.insert (o, *i.RightPeritubularCapillariesHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightPeritubularCapillariesOsmoticPressure ())
            {
              o << ::std::endl << "RightPeritubularCapillariesOsmoticPressure: ";
              om.insert (o, *i.RightPeritubularCapillariesOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightReabsorptionFiltrationCoefficient ())
            {
              o << ::std::endl << "RightReabsorptionFiltrationCoefficient: ";
              om.insert (o, *i.RightReabsorptionFiltrationCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightReabsorptionRate ())
            {
              o << ::std::endl << "RightReabsorptionRate: ";
              om.insert (o, *i.RightReabsorptionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularOsmoticPressure ())
            {
              o << ::std::endl << "RightTubularOsmoticPressure: ";
              om.insert (o, *i.RightTubularOsmoticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularHydrostaticPressure ())
            {
              o << ::std::endl << "RightTubularHydrostaticPressure: ";
              om.insert (o, *i.RightTubularHydrostaticPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFiltrationSurfaceArea ())
            {
              o << ::std::endl << "RightTubularReabsorptionFiltrationSurfaceArea: ";
              om.insert (o, *i.RightTubularReabsorptionFiltrationSurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeability ())
            {
              o << ::std::endl << "RightTubularReabsorptionFluidPermeability: ";
              om.insert (o, *i.RightTubularReabsorptionFluidPermeability ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrinationRate ())
            {
              o << ::std::endl << "UrinationRate: ";
              om.insert (o, *i.UrinationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineOsmolality ())
            {
              o << ::std::endl << "UrineOsmolality: ";
              om.insert (o, *i.UrineOsmolality ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineOsmolarity ())
            {
              o << ::std::endl << "UrineOsmolarity: ";
              om.insert (o, *i.UrineOsmolarity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineProductionRate ())
            {
              o << ::std::endl << "UrineProductionRate: ";
              om.insert (o, *i.UrineProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanUrineOutput ())
            {
              o << ::std::endl << "MeanUrineOutput: ";
              om.insert (o, *i.MeanUrineOutput ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineSpecificGravity ())
            {
              o << ::std::endl << "UrineSpecificGravity: ";
              om.insert (o, *i.UrineSpecificGravity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineVolume ())
            {
              o << ::std::endl << "UrineVolume: ";
              om.insert (o, *i.UrineVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.UrineUreaNitrogenConcentration ())
            {
              o << ::std::endl << "UrineUreaNitrogenConcentration: ";
              om.insert (o, *i.UrineUreaNitrogenConcentration ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RenalSystemData >
        _xsd_RenalSystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const RespiratorySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AlveolarArterialGradient ())
            {
              o << ::std::endl << "AlveolarArterialGradient: ";
              om.insert (o, *i.AlveolarArterialGradient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarricoIndex ())
            {
              o << ::std::endl << "CarricoIndex: ";
              om.insert (o, *i.CarricoIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxideFraction ())
            {
              o << ::std::endl << "EndTidalCarbonDioxideFraction: ";
              om.insert (o, *i.EndTidalCarbonDioxideFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxidePressure ())
            {
              o << ::std::endl << "EndTidalCarbonDioxidePressure: ";
              om.insert (o, *i.EndTidalCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExpiratoryFlow ())
            {
              o << ::std::endl << "ExpiratoryFlow: ";
              om.insert (o, *i.ExpiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              o << ::std::endl << "InspiratoryExpiratoryRatio: ";
              om.insert (o, *i.InspiratoryExpiratoryRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryFlow ())
            {
              o << ::std::endl << "InspiratoryFlow: ";
              om.insert (o, *i.InspiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanPleuralPressure ())
            {
              o << ::std::endl << "MeanPleuralPressure: ";
              om.insert (o, *i.MeanPleuralPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryCompliance ())
            {
              o << ::std::endl << "PulmonaryCompliance: ";
              om.insert (o, *i.PulmonaryCompliance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryResistance ())
            {
              o << ::std::endl << "PulmonaryResistance: ";
              om.insert (o, *i.PulmonaryResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationDriverFrequency ())
            {
              o << ::std::endl << "RespirationDriverFrequency: ";
              om.insert (o, *i.RespirationDriverFrequency ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationDriverPressure ())
            {
              o << ::std::endl << "RespirationDriverPressure: ";
              om.insert (o, *i.RespirationDriverPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationMusclePressure ())
            {
              o << ::std::endl << "RespirationMusclePressure: ";
              om.insert (o, *i.RespirationMusclePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationRate ())
            {
              o << ::std::endl << "RespirationRate: ";
              om.insert (o, *i.RespirationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SpecificVentilation ())
            {
              o << ::std::endl << "SpecificVentilation: ";
              om.insert (o, *i.SpecificVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TidalVolume ())
            {
              o << ::std::endl << "TidalVolume: ";
              om.insert (o, *i.TidalVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TargetPulmonaryVentilation ())
            {
              o << ::std::endl << "TargetPulmonaryVentilation: ";
              om.insert (o, *i.TargetPulmonaryVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilation ())
            {
              o << ::std::endl << "TotalAlveolarVentilation: ";
              om.insert (o, *i.TotalAlveolarVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalDeadSpaceVentilation ())
            {
              o << ::std::endl << "TotalDeadSpaceVentilation: ";
              om.insert (o, *i.TotalDeadSpaceVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalLungVolume ())
            {
              o << ::std::endl << "TotalLungVolume: ";
              om.insert (o, *i.TotalLungVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilation ())
            {
              o << ::std::endl << "TotalPulmonaryVentilation: ";
              om.insert (o, *i.TotalPulmonaryVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TranspulmonaryPressure ())
            {
              o << ::std::endl << "TranspulmonaryPressure: ";
              om.insert (o, *i.TranspulmonaryPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TissueSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarbonDioxideProductionRate ())
            {
              o << ::std::endl << "CarbonDioxideProductionRate: ";
              om.insert (o, *i.CarbonDioxideProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DehydrationFraction ())
            {
              o << ::std::endl << "DehydrationFraction: ";
              om.insert (o, *i.DehydrationFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtracellularFluidVolume ())
            {
              o << ::std::endl << "ExtracellularFluidVolume: ";
              om.insert (o, *i.ExtracellularFluidVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExtravascularFluidVolume ())
            {
              o << ::std::endl << "ExtravascularFluidVolume: ";
              om.insert (o, *i.ExtravascularFluidVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.IntracellularFluidPH ())
            {
              o << ::std::endl << "IntracellularFluidPH: ";
              om.insert (o, *i.IntracellularFluidPH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.IntracellularFluidVolume ())
            {
              o << ::std::endl << "IntracellularFluidVolume: ";
              om.insert (o, *i.IntracellularFluidVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalBodyFluidVolume ())
            {
              o << ::std::endl << "TotalBodyFluidVolume: ";
              om.insert (o, *i.TotalBodyFluidVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenConsumptionRate ())
            {
              o << ::std::endl << "OxygenConsumptionRate: ";
              om.insert (o, *i.OxygenConsumptionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespiratoryExchangeRatio ())
            {
              o << ::std::endl << "RespiratoryExchangeRatio: ";
              om.insert (o, *i.RespiratoryExchangeRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LiverInsulinSetPoint ())
            {
              o << ::std::endl << "LiverInsulinSetPoint: ";
              om.insert (o, *i.LiverInsulinSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LiverGlucagonSetPoint ())
            {
              o << ::std::endl << "LiverGlucagonSetPoint: ";
              om.insert (o, *i.LiverGlucagonSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MuscleInsulinSetPoint ())
            {
              o << ::std::endl << "MuscleInsulinSetPoint: ";
              om.insert (o, *i.MuscleInsulinSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MuscleGlucagonSetPoint ())
            {
              o << ::std::endl << "MuscleGlucagonSetPoint: ";
              om.insert (o, *i.MuscleGlucagonSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatInsulinSetPoint ())
            {
              o << ::std::endl << "FatInsulinSetPoint: ";
              om.insert (o, *i.FatInsulinSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatGlucagonSetPoint ())
            {
              o << ::std::endl << "FatGlucagonSetPoint: ";
              om.insert (o, *i.FatGlucagonSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LiverGlycogen ())
            {
              o << ::std::endl << "LiverGlycogen: ";
              om.insert (o, *i.LiverGlycogen ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MuscleGlycogen ())
            {
              o << ::std::endl << "MuscleGlycogen: ";
              om.insert (o, *i.MuscleGlycogen ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StoredProtein ())
            {
              o << ::std::endl << "StoredProtein: ";
              om.insert (o, *i.StoredProtein ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StoredFat ())
            {
              o << ::std::endl << "StoredFat: ";
              om.insert (o, *i.StoredFat ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueSystemData >
        _xsd_TissueSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > (
              ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "BloodChemistrySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BloodChemistrySystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >
        BloodChemistrySystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "BloodChemistrySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BloodChemistrySystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CardiovascularSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > (
              ::mil::tatrc::physiology::datamodel::CardiovascularSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CardiovascularSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CardiovascularSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >
        CardiovascularSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CardiovascularSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CardiovascularSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CardiovascularSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DrugSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
            ::mil::tatrc::physiology::datamodel::DrugSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > (
              ::mil::tatrc::physiology::datamodel::DrugSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "DrugSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::DrugSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::DrugSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DrugSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData >
        DrugSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "DrugSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::DrugSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DrugSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::DrugSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DrugSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EndocrineSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > (
              ::mil::tatrc::physiology::datamodel::EndocrineSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EndocrineSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EndocrineSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EndocrineSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >
        EndocrineSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EndocrineSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EndocrineSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EndocrineSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EndocrineSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EndocrineSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnergySystemData_ (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > (
              ::mil::tatrc::physiology::datamodel::EnergySystemData_ (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EnergySystemData",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnergySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnergySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EnergySystemData",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData >
        EnergySystemData_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EnergySystemData",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnergySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnergySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnergySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EnergySystemData",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > (
              ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "GastrointestinalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GastrointestinalSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >
        GastrointestinalSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "GastrointestinalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GastrointestinalSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::HepaticSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > (
              ::mil::tatrc::physiology::datamodel::HepaticSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "HepaticSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::HepaticSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::HepaticSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "HepaticSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData >
        HepaticSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "HepaticSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::HepaticSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::HepaticSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::HepaticSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "HepaticSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::NervousSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
            ::mil::tatrc::physiology::datamodel::NervousSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > (
              ::mil::tatrc::physiology::datamodel::NervousSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "NervousSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::NervousSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::NervousSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NervousSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData >
        NervousSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "NervousSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::NervousSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::NervousSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::NervousSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NervousSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RenalSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
            ::mil::tatrc::physiology::datamodel::RenalSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > (
              ::mil::tatrc::physiology::datamodel::RenalSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "RenalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::RenalSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::RenalSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RenalSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData >
        RenalSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "RenalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::RenalSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RenalSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::RenalSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RenalSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::RespiratorySystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > (
              ::mil::tatrc::physiology::datamodel::RespiratorySystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "RespiratorySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::RespiratorySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RespiratorySystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >
        RespiratorySystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "RespiratorySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::RespiratorySystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::RespiratorySystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::RespiratorySystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RespiratorySystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::TissueSystem (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
            ::mil::tatrc::physiology::datamodel::TissueSystem (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > (
              ::mil::tatrc::physiology::datamodel::TissueSystem (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "TissueSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::TissueSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::TissueSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TissueSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData >
        TissueSystem (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "TissueSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::TissueSystemData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::TissueSystemData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::TissueSystemData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TissueSystem",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PupillaryResponseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // ReactivityModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReactivityModifier ())
            {
              const PupillaryResponseData::ReactivityModifier_type& x (*i.ReactivityModifier ());
              if (typeid (PupillaryResponseData::ReactivityModifier_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReactivityModifier",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReactivityModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ShapeModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ShapeModifier ())
            {
              const PupillaryResponseData::ShapeModifier_type& x (*i.ShapeModifier ());
              if (typeid (PupillaryResponseData::ShapeModifier_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ShapeModifier",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ShapeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SizeModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SizeModifier ())
            {
              const PupillaryResponseData::SizeModifier_type& x (*i.SizeModifier ());
              if (typeid (PupillaryResponseData::SizeModifier_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SizeModifier",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SizeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PupillaryResponseData >
        _xsd_PupillaryResponseData_type_serializer_init (
          "PupillaryResponseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumInflammationSource& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumInflammationSource& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumInflammationSource& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumInflammationSource >
        _xsd_enumInflammationSource_type_serializer_init (
          "enumInflammationSource",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const InflammatoryResponseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // LocalPathogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::LocalPathogen_type& x (i.LocalPathogen ());
            if (typeid (InflammatoryResponseData::LocalPathogen_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LocalPathogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LocalPathogen",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LocalMacrophage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::LocalMacrophage_type& x (i.LocalMacrophage ());
            if (typeid (InflammatoryResponseData::LocalMacrophage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LocalMacrophage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LocalMacrophage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LocalNeutrophil
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::LocalNeutrophil_type& x (i.LocalNeutrophil ());
            if (typeid (InflammatoryResponseData::LocalNeutrophil_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LocalNeutrophil",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LocalNeutrophil",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LocalBarrier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::LocalBarrier_type& x (i.LocalBarrier ());
            if (typeid (InflammatoryResponseData::LocalBarrier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LocalBarrier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LocalBarrier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ActiveTLR
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::ActiveTLR_type& x (i.ActiveTLR ());
            if (typeid (InflammatoryResponseData::ActiveTLR_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ActiveTLR",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ActiveTLR",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AutonomicResponseLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::AutonomicResponseLevel_type& x (i.AutonomicResponseLevel ());
            if (typeid (InflammatoryResponseData::AutonomicResponseLevel_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AutonomicResponseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AutonomicResponseLevel",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BloodPathogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::BloodPathogen_type& x (i.BloodPathogen ());
            if (typeid (InflammatoryResponseData::BloodPathogen_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BloodPathogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BloodPathogen",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Trauma
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Trauma_type& x (i.Trauma ());
            if (typeid (InflammatoryResponseData::Trauma_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Trauma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Trauma",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // MacrophageResting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::MacrophageResting_type& x (i.MacrophageResting ());
            if (typeid (InflammatoryResponseData::MacrophageResting_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MacrophageResting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MacrophageResting",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // MacrophageActive
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::MacrophageActive_type& x (i.MacrophageActive ());
            if (typeid (InflammatoryResponseData::MacrophageActive_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MacrophageActive",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MacrophageActive",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // NeutrophilResting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::NeutrophilResting_type& x (i.NeutrophilResting ());
            if (typeid (InflammatoryResponseData::NeutrophilResting_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "NeutrophilResting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "NeutrophilResting",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // NeutrophilActive
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::NeutrophilActive_type& x (i.NeutrophilActive ());
            if (typeid (InflammatoryResponseData::NeutrophilActive_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "NeutrophilActive",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "NeutrophilActive",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TumorNecrosisFactor
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::TumorNecrosisFactor_type& x (i.TumorNecrosisFactor ());
            if (typeid (InflammatoryResponseData::TumorNecrosisFactor_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TumorNecrosisFactor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TumorNecrosisFactor",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Interleukin6
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Interleukin6_type& x (i.Interleukin6 ());
            if (typeid (InflammatoryResponseData::Interleukin6_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Interleukin6",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Interleukin6",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Interleukin10
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Interleukin10_type& x (i.Interleukin10 ());
            if (typeid (InflammatoryResponseData::Interleukin10_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Interleukin10",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Interleukin10",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Interleukin12
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Interleukin12_type& x (i.Interleukin12 ());
            if (typeid (InflammatoryResponseData::Interleukin12_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Interleukin12",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Interleukin12",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // InducibleNOSPre
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::InducibleNOSPre_type& x (i.InducibleNOSPre ());
            if (typeid (InflammatoryResponseData::InducibleNOSPre_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InducibleNOSPre",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InducibleNOSPre",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // InducibleNOS
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::InducibleNOS_type& x (i.InducibleNOS ());
            if (typeid (InflammatoryResponseData::InducibleNOS_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InducibleNOS",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InducibleNOS",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ConstitutiveNOS
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::ConstitutiveNOS_type& x (i.ConstitutiveNOS ());
            if (typeid (InflammatoryResponseData::ConstitutiveNOS_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ConstitutiveNOS",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ConstitutiveNOS",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Nitrate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Nitrate_type& x (i.Nitrate ());
            if (typeid (InflammatoryResponseData::Nitrate_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Nitrate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Nitrate",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // NitricOxide
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::NitricOxide_type& x (i.NitricOxide ());
            if (typeid (InflammatoryResponseData::NitricOxide_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "NitricOxide",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "NitricOxide",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TissueIntegrity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::TissueIntegrity_type& x (i.TissueIntegrity ());
            if (typeid (InflammatoryResponseData::TissueIntegrity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TissueIntegrity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TissueIntegrity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Catecholamines
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::Catecholamines_type& x (i.Catecholamines ());
            if (typeid (InflammatoryResponseData::Catecholamines_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Catecholamines",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Catecholamines",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // InflammationTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const InflammatoryResponseData::InflammationTime_type& x (i.InflammationTime ());
            if (typeid (InflammatoryResponseData::InflammationTime_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InflammationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InflammationTime",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Source
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (InflammatoryResponseData::Source_const_iterator
                 b (i.Source ().begin ()), n (i.Source ().end ());
                 b != n; ++b)
            {
              if (typeid (InflammatoryResponseData::Source_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Source",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Source",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InflammatoryResponseData >
        _xsd_InflammatoryResponseData_type_serializer_init (
          "InflammatoryResponseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const BloodChemistrySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // BloodDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodDensity ())
            {
              const BloodChemistrySystemData::BloodDensity_type& x (*i.BloodDensity ());
              if (typeid (BloodChemistrySystemData::BloodDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ArterialBloodPH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialBloodPH ())
            {
              const BloodChemistrySystemData::ArterialBloodPH_type& x (*i.ArterialBloodPH ());
              if (typeid (BloodChemistrySystemData::ArterialBloodPH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialBloodPH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialBloodPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ArterialBloodPHBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialBloodPHBaseline ())
            {
              const BloodChemistrySystemData::ArterialBloodPHBaseline_type& x (*i.ArterialBloodPHBaseline ());
              if (typeid (BloodChemistrySystemData::ArterialBloodPHBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialBloodPHBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialBloodPHBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VenousBloodPH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VenousBloodPH ())
            {
              const BloodChemistrySystemData::VenousBloodPH_type& x (*i.VenousBloodPH ());
              if (typeid (BloodChemistrySystemData::VenousBloodPH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VenousBloodPH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VenousBloodPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodSpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodSpecificHeat ())
            {
              const BloodChemistrySystemData::BloodSpecificHeat_type& x (*i.BloodSpecificHeat ());
              if (typeid (BloodChemistrySystemData::BloodSpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodSpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodUreaNitrogenConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodUreaNitrogenConcentration ())
            {
              const BloodChemistrySystemData::BloodUreaNitrogenConcentration_type& x (*i.BloodUreaNitrogenConcentration ());
              if (typeid (BloodChemistrySystemData::BloodUreaNitrogenConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodUreaNitrogenConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodUreaNitrogenConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarbonDioxideSaturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbonDioxideSaturation ())
            {
              const BloodChemistrySystemData::CarbonDioxideSaturation_type& x (*i.CarbonDioxideSaturation ());
              if (typeid (BloodChemistrySystemData::CarbonDioxideSaturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbonDioxideSaturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbonDioxideSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarbonMonoxideSaturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbonMonoxideSaturation ())
            {
              const BloodChemistrySystemData::CarbonMonoxideSaturation_type& x (*i.CarbonMonoxideSaturation ());
              if (typeid (BloodChemistrySystemData::CarbonMonoxideSaturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbonMonoxideSaturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbonMonoxideSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Hematocrit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              const BloodChemistrySystemData::Hematocrit_type& x (*i.Hematocrit ());
              if (typeid (BloodChemistrySystemData::Hematocrit_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Hematocrit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HemoglobinContent
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HemoglobinContent ())
            {
              const BloodChemistrySystemData::HemoglobinContent_type& x (*i.HemoglobinContent ());
              if (typeid (BloodChemistrySystemData::HemoglobinContent_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HemoglobinContent",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HemoglobinContent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HemoglobinLostToUrine
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HemoglobinLostToUrine ())
            {
              const BloodChemistrySystemData::HemoglobinLostToUrine_type& x (*i.HemoglobinLostToUrine ());
              if (typeid (BloodChemistrySystemData::HemoglobinLostToUrine_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HemoglobinLostToUrine",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HemoglobinLostToUrine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenSaturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenSaturation ())
            {
              const BloodChemistrySystemData::OxygenSaturation_type& x (*i.OxygenSaturation ());
              if (typeid (BloodChemistrySystemData::OxygenSaturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenSaturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenVenousSaturation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenVenousSaturation ())
            {
              const BloodChemistrySystemData::OxygenVenousSaturation_type& x (*i.OxygenVenousSaturation ());
              if (typeid (BloodChemistrySystemData::OxygenVenousSaturation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenVenousSaturation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenVenousSaturation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Phosphate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Phosphate ())
            {
              const BloodChemistrySystemData::Phosphate_type& x (*i.Phosphate ());
              if (typeid (BloodChemistrySystemData::Phosphate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Phosphate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Phosphate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlasmaVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlasmaVolume ())
            {
              const BloodChemistrySystemData::PlasmaVolume_type& x (*i.PlasmaVolume ());
              if (typeid (BloodChemistrySystemData::PlasmaVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlasmaVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlasmaVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulseOximetry
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulseOximetry ())
            {
              const BloodChemistrySystemData::PulseOximetry_type& x (*i.PulseOximetry ());
              if (typeid (BloodChemistrySystemData::PulseOximetry_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulseOximetry",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulseOximetry",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RedBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              const BloodChemistrySystemData::RedBloodCellCount_type& x (*i.RedBloodCellCount ());
              if (typeid (BloodChemistrySystemData::RedBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RhTransfusionReactionVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RhTransfusionReactionVolume ())
            {
              const BloodChemistrySystemData::RhTransfusionReactionVolume_type& x (*i.RhTransfusionReactionVolume ());
              if (typeid (BloodChemistrySystemData::RhTransfusionReactionVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RhTransfusionReactionVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RhTransfusionReactionVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ShuntFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ShuntFraction ())
            {
              const BloodChemistrySystemData::ShuntFraction_type& x (*i.ShuntFraction ());
              if (typeid (BloodChemistrySystemData::ShuntFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ShuntFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ShuntFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StrongIonDifference
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StrongIonDifference ())
            {
              const BloodChemistrySystemData::StrongIonDifference_type& x (*i.StrongIonDifference ());
              if (typeid (BloodChemistrySystemData::StrongIonDifference_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StrongIonDifference",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StrongIonDifference",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalProteinConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalProteinConcentration ())
            {
              const BloodChemistrySystemData::TotalProteinConcentration_type& x (*i.TotalProteinConcentration ());
              if (typeid (BloodChemistrySystemData::TotalProteinConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalProteinConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalProteinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VolumeFractionNeutralLipidInPlasma
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VolumeFractionNeutralLipidInPlasma ())
            {
              const BloodChemistrySystemData::VolumeFractionNeutralLipidInPlasma_type& x (*i.VolumeFractionNeutralLipidInPlasma ());
              if (typeid (BloodChemistrySystemData::VolumeFractionNeutralLipidInPlasma_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VolumeFractionNeutralLipidInPlasma",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VolumeFractionNeutralLipidInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VolumeFractionNeutralPhospholipidInPlasma
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VolumeFractionNeutralPhospholipidInPlasma ())
            {
              const BloodChemistrySystemData::VolumeFractionNeutralPhospholipidInPlasma_type& x (*i.VolumeFractionNeutralPhospholipidInPlasma ());
              if (typeid (BloodChemistrySystemData::VolumeFractionNeutralPhospholipidInPlasma_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VolumeFractionNeutralPhospholipidInPlasma",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VolumeFractionNeutralPhospholipidInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              const BloodChemistrySystemData::WhiteBloodCellCount_type& x (*i.WhiteBloodCellCount ());
              if (typeid (BloodChemistrySystemData::WhiteBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RedBloodCellAcetylcholinesterase
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCellAcetylcholinesterase ())
            {
              const BloodChemistrySystemData::RedBloodCellAcetylcholinesterase_type& x (*i.RedBloodCellAcetylcholinesterase ());
              if (typeid (BloodChemistrySystemData::RedBloodCellAcetylcholinesterase_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCellAcetylcholinesterase",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCellAcetylcholinesterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalBilirubin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              const BloodChemistrySystemData::TotalBilirubin_type& x (*i.TotalBilirubin ());
              if (typeid (BloodChemistrySystemData::TotalBilirubin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalBilirubin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InflammatoryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InflammatoryResponse ())
            {
              const BloodChemistrySystemData::InflammatoryResponse_type& x (*i.InflammatoryResponse ());
              if (typeid (BloodChemistrySystemData::InflammatoryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InflammatoryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InflammatoryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ArterialCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialCarbonDioxidePressure ())
            {
              const BloodChemistrySystemData::ArterialCarbonDioxidePressure_type& x (*i.ArterialCarbonDioxidePressure ());
              if (typeid (BloodChemistrySystemData::ArterialCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ArterialOxygenPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialOxygenPressure ())
            {
              const BloodChemistrySystemData::ArterialOxygenPressure_type& x (*i.ArterialOxygenPressure ());
              if (typeid (BloodChemistrySystemData::ArterialOxygenPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialOxygenPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryArterialCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryArterialCarbonDioxidePressure ())
            {
              const BloodChemistrySystemData::PulmonaryArterialCarbonDioxidePressure_type& x (*i.PulmonaryArterialCarbonDioxidePressure ());
              if (typeid (BloodChemistrySystemData::PulmonaryArterialCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryArterialCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryArterialCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryArterialOxygenPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryArterialOxygenPressure ())
            {
              const BloodChemistrySystemData::PulmonaryArterialOxygenPressure_type& x (*i.PulmonaryArterialOxygenPressure ());
              if (typeid (BloodChemistrySystemData::PulmonaryArterialOxygenPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryArterialOxygenPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryArterialOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVenousCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVenousCarbonDioxidePressure ())
            {
              const BloodChemistrySystemData::PulmonaryVenousCarbonDioxidePressure_type& x (*i.PulmonaryVenousCarbonDioxidePressure ());
              if (typeid (BloodChemistrySystemData::PulmonaryVenousCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVenousCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVenousCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVenousOxygenPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVenousOxygenPressure ())
            {
              const BloodChemistrySystemData::PulmonaryVenousOxygenPressure_type& x (*i.PulmonaryVenousOxygenPressure ());
              if (typeid (BloodChemistrySystemData::PulmonaryVenousOxygenPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVenousOxygenPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVenousOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VenousCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VenousCarbonDioxidePressure ())
            {
              const BloodChemistrySystemData::VenousCarbonDioxidePressure_type& x (*i.VenousCarbonDioxidePressure ());
              if (typeid (BloodChemistrySystemData::VenousCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VenousCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VenousCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VenousOxygenPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VenousOxygenPressure ())
            {
              const BloodChemistrySystemData::VenousOxygenPressure_type& x (*i.VenousOxygenPressure ());
              if (typeid (BloodChemistrySystemData::VenousOxygenPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VenousOxygenPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VenousOxygenPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BloodChemistrySystemData >
        _xsd_BloodChemistrySystemData_type_serializer_init (
          "BloodChemistrySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        BloodChemistrySystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        BloodChemistrySystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BloodChemistrySystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BloodChemistrySystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        BloodChemistrySystem (::xercesc::DOMDocument& d,
                              const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::BloodChemistrySystemData) == typeid (s))
          {
            if (n.name () == "BloodChemistrySystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "BloodChemistrySystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "BloodChemistrySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        BloodChemistrySystem (const ::mil::tatrc::physiology::datamodel::BloodChemistrySystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::BloodChemistrySystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "BloodChemistrySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "BloodChemistrySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::BloodChemistrySystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const enumHeartRhythm& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumHeartRhythm& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumHeartRhythm& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumHeartRhythm >
        _xsd_enumHeartRhythm_type_serializer_init (
          "enumHeartRhythm",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CardiovascularSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // ArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialPressure ())
            {
              const CardiovascularSystemData::ArterialPressure_type& x (*i.ArterialPressure ());
              if (typeid (CardiovascularSystemData::ArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodVolume ())
            {
              const CardiovascularSystemData::BloodVolume_type& x (*i.BloodVolume ());
              if (typeid (CardiovascularSystemData::BloodVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiacIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiacIndex ())
            {
              const CardiovascularSystemData::CardiacIndex_type& x (*i.CardiacIndex ());
              if (typeid (CardiovascularSystemData::CardiacIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiacIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiacIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiacOutput
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiacOutput ())
            {
              const CardiovascularSystemData::CardiacOutput_type& x (*i.CardiacOutput ());
              if (typeid (CardiovascularSystemData::CardiacOutput_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiacOutput",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiacOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CentralVenousPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralVenousPressure ())
            {
              const CardiovascularSystemData::CentralVenousPressure_type& x (*i.CentralVenousPressure ());
              if (typeid (CardiovascularSystemData::CentralVenousPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralVenousPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CerebralBloodFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CerebralBloodFlow ())
            {
              const CardiovascularSystemData::CerebralBloodFlow_type& x (*i.CerebralBloodFlow ());
              if (typeid (CardiovascularSystemData::CerebralBloodFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CerebralBloodFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CerebralBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CerebralPerfusionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CerebralPerfusionPressure ())
            {
              const CardiovascularSystemData::CerebralPerfusionPressure_type& x (*i.CerebralPerfusionPressure ());
              if (typeid (CardiovascularSystemData::CerebralPerfusionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CerebralPerfusionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CerebralPerfusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DiastolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DiastolicArterialPressure ())
            {
              const CardiovascularSystemData::DiastolicArterialPressure_type& x (*i.DiastolicArterialPressure ());
              if (typeid (CardiovascularSystemData::DiastolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DiastolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartEjectionFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartEjectionFraction ())
            {
              const CardiovascularSystemData::HeartEjectionFraction_type& x (*i.HeartEjectionFraction ());
              if (typeid (CardiovascularSystemData::HeartEjectionFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartEjectionFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartEjectionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRate ())
            {
              const CardiovascularSystemData::HeartRate_type& x (*i.HeartRate ());
              if (typeid (CardiovascularSystemData::HeartRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRhythm
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRhythm ())
            {
              const CardiovascularSystemData::HeartRhythm_type& x (*i.HeartRhythm ());
              if (typeid (CardiovascularSystemData::HeartRhythm_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRhythm",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRhythm",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartStrokeVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartStrokeVolume ())
            {
              const CardiovascularSystemData::HeartStrokeVolume_type& x (*i.HeartStrokeVolume ());
              if (typeid (CardiovascularSystemData::HeartStrokeVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartStrokeVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartStrokeVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // IntracranialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.IntracranialPressure ())
            {
              const CardiovascularSystemData::IntracranialPressure_type& x (*i.IntracranialPressure ());
              if (typeid (CardiovascularSystemData::IntracranialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "IntracranialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "IntracranialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialPressure ())
            {
              const CardiovascularSystemData::MeanArterialPressure_type& x (*i.MeanArterialPressure ());
              if (typeid (CardiovascularSystemData::MeanArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialCarbonDioxidePartialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressure ())
            {
              const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_type& x (*i.MeanArterialCarbonDioxidePartialPressure ());
              if (typeid (CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialCarbonDioxidePartialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialCarbonDioxidePartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialCarbonDioxidePartialPressureDelta
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressureDelta ())
            {
              const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_type& x (*i.MeanArterialCarbonDioxidePartialPressureDelta ());
              if (typeid (CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialCarbonDioxidePartialPressureDelta",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialCarbonDioxidePartialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCentralVenousPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCentralVenousPressure ())
            {
              const CardiovascularSystemData::MeanCentralVenousPressure_type& x (*i.MeanCentralVenousPressure ());
              if (typeid (CardiovascularSystemData::MeanCentralVenousPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCentralVenousPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanSkinFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanSkinFlow ())
            {
              const CardiovascularSystemData::MeanSkinFlow_type& x (*i.MeanSkinFlow ());
              if (typeid (CardiovascularSystemData::MeanSkinFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanSkinFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanSkinFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryArterialPressure_type& x (*i.PulmonaryArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryCapillariesWedgePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryCapillariesWedgePressure ())
            {
              const CardiovascularSystemData::PulmonaryCapillariesWedgePressure_type& x (*i.PulmonaryCapillariesWedgePressure ());
              if (typeid (CardiovascularSystemData::PulmonaryCapillariesWedgePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryCapillariesWedgePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryCapillariesWedgePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryDiastolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryDiastolicArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryDiastolicArterialPressure_type& x (*i.PulmonaryDiastolicArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryDiastolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryDiastolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryDiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryMeanArterialPressure_type& x (*i.PulmonaryMeanArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanCapillaryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanCapillaryFlow ())
            {
              const CardiovascularSystemData::PulmonaryMeanCapillaryFlow_type& x (*i.PulmonaryMeanCapillaryFlow ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanCapillaryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanCapillaryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanCapillaryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanShuntFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanShuntFlow ())
            {
              const CardiovascularSystemData::PulmonaryMeanShuntFlow_type& x (*i.PulmonaryMeanShuntFlow ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanShuntFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanShuntFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanShuntFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonarySystolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonarySystolicArterialPressure ())
            {
              const CardiovascularSystemData::PulmonarySystolicArterialPressure_type& x (*i.PulmonarySystolicArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonarySystolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonarySystolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonarySystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVascularResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistance ())
            {
              const CardiovascularSystemData::PulmonaryVascularResistance_type& x (*i.PulmonaryVascularResistance ());
              if (typeid (CardiovascularSystemData::PulmonaryVascularResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVascularResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVascularResistanceIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistanceIndex ())
            {
              const CardiovascularSystemData::PulmonaryVascularResistanceIndex_type& x (*i.PulmonaryVascularResistanceIndex ());
              if (typeid (CardiovascularSystemData::PulmonaryVascularResistanceIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVascularResistanceIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVascularResistanceIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulsePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulsePressure ())
            {
              const CardiovascularSystemData::PulsePressure_type& x (*i.PulsePressure ());
              if (typeid (CardiovascularSystemData::PulsePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulsePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulsePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystemicVascularResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystemicVascularResistance ())
            {
              const CardiovascularSystemData::SystemicVascularResistance_type& x (*i.SystemicVascularResistance ());
              if (typeid (CardiovascularSystemData::SystemicVascularResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystemicVascularResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystemicVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystolicArterialPressure ())
            {
              const CardiovascularSystemData::SystolicArterialPressure_type& x (*i.SystolicArterialPressure ());
              if (typeid (CardiovascularSystemData::SystolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_type_serializer_init (
          "CardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        CardiovascularSystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CardiovascularSystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CardiovascularSystem (::std::ostream& o,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CardiovascularSystem (::xercesc::XMLFormatTarget& t,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CardiovascularSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CardiovascularSystem (::xercesc::DOMDocument& d,
                              const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::CardiovascularSystemData) == typeid (s))
          {
            if (n.name () == "CardiovascularSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "CardiovascularSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CardiovascularSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        CardiovascularSystem (const ::mil::tatrc::physiology::datamodel::CardiovascularSystemData& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::CardiovascularSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "CardiovascularSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CardiovascularSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::CardiovascularSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const DrugSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // AntibioticActivity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AntibioticActivity ())
            {
              const DrugSystemData::AntibioticActivity_type& x (*i.AntibioticActivity ());
              if (typeid (DrugSystemData::AntibioticActivity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AntibioticActivity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AntibioticActivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BronchodilationLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BronchodilationLevel ())
            {
              const DrugSystemData::BronchodilationLevel_type& x (*i.BronchodilationLevel ());
              if (typeid (DrugSystemData::BronchodilationLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BronchodilationLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BronchodilationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FeverChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FeverChange ())
            {
              const DrugSystemData::FeverChange_type& x (*i.FeverChange ());
              if (typeid (DrugSystemData::FeverChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FeverChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FeverChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRateChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRateChange ())
            {
              const DrugSystemData::HeartRateChange_type& x (*i.HeartRateChange ());
              if (typeid (DrugSystemData::HeartRateChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRateChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HemorrhageChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HemorrhageChange ())
            {
              const DrugSystemData::HemorrhageChange_type& x (*i.HemorrhageChange ());
              if (typeid (DrugSystemData::HemorrhageChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HemorrhageChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HemorrhageChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanBloodPressureChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanBloodPressureChange ())
            {
              const DrugSystemData::MeanBloodPressureChange_type& x (*i.MeanBloodPressureChange ());
              if (typeid (DrugSystemData::MeanBloodPressureChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanBloodPressureChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanBloodPressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeuromuscularBlockLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeuromuscularBlockLevel ())
            {
              const DrugSystemData::NeuromuscularBlockLevel_type& x (*i.NeuromuscularBlockLevel ());
              if (typeid (DrugSystemData::NeuromuscularBlockLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeuromuscularBlockLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeuromuscularBlockLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PainToleranceChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PainToleranceChange ())
            {
              const DrugSystemData::PainToleranceChange_type& x (*i.PainToleranceChange ());
              if (typeid (DrugSystemData::PainToleranceChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PainToleranceChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PainToleranceChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulsePressureChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulsePressureChange ())
            {
              const DrugSystemData::PulsePressureChange_type& x (*i.PulsePressureChange ());
              if (typeid (DrugSystemData::PulsePressureChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulsePressureChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulsePressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationRateChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationRateChange ())
            {
              const DrugSystemData::RespirationRateChange_type& x (*i.RespirationRateChange ());
              if (typeid (DrugSystemData::RespirationRateChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationRateChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SedationLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SedationLevel ())
            {
              const DrugSystemData::SedationLevel_type& x (*i.SedationLevel ());
              if (typeid (DrugSystemData::SedationLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SedationLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SedationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TidalVolumeChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TidalVolumeChange ())
            {
              const DrugSystemData::TidalVolumeChange_type& x (*i.TidalVolumeChange ());
              if (typeid (DrugSystemData::TidalVolumeChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TidalVolumeChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TidalVolumeChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TubularPermeabilityChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TubularPermeabilityChange ())
            {
              const DrugSystemData::TubularPermeabilityChange_type& x (*i.TubularPermeabilityChange ());
              if (typeid (DrugSystemData::TubularPermeabilityChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TubularPermeabilityChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TubularPermeabilityChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CentralNervousResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralNervousResponse ())
            {
              const DrugSystemData::CentralNervousResponse_type& x (*i.CentralNervousResponse ());
              if (typeid (DrugSystemData::CentralNervousResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralNervousResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralNervousResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_type_serializer_init (
          "DrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        DrugSystem (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        DrugSystem (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DrugSystem (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DrugSystem (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        DrugSystem (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DrugSystem (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DrugSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DrugSystem (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::DrugSystemData) == typeid (s))
          {
            if (n.name () == "DrugSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "DrugSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "DrugSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        DrugSystem (const ::mil::tatrc::physiology::datamodel::DrugSystemData& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::DrugSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "DrugSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "DrugSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::DrugSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const EndocrineSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // InsulinSynthesisRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InsulinSynthesisRate ())
            {
              const EndocrineSystemData::InsulinSynthesisRate_type& x (*i.InsulinSynthesisRate ());
              if (typeid (EndocrineSystemData::InsulinSynthesisRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InsulinSynthesisRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InsulinSynthesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GlucagonSynthesisRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GlucagonSynthesisRate ())
            {
              const EndocrineSystemData::GlucagonSynthesisRate_type& x (*i.GlucagonSynthesisRate ());
              if (typeid (EndocrineSystemData::GlucagonSynthesisRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GlucagonSynthesisRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GlucagonSynthesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EndocrineSystemData >
        _xsd_EndocrineSystemData_type_serializer_init (
          "EndocrineSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        EndocrineSystem (::std::ostream& o,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EndocrineSystem (::std::ostream& o,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EndocrineSystem (::std::ostream& o,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EndocrineSystem (::xercesc::XMLFormatTarget& t,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EndocrineSystem (::xercesc::XMLFormatTarget& t,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EndocrineSystem (::xercesc::XMLFormatTarget& t,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EndocrineSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EndocrineSystem (::xercesc::DOMDocument& d,
                         const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::EndocrineSystemData) == typeid (s))
          {
            if (n.name () == "EndocrineSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "EndocrineSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EndocrineSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        EndocrineSystem (const ::mil::tatrc::physiology::datamodel::EndocrineSystemData& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::EndocrineSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "EndocrineSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EndocrineSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::EndocrineSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const EnergySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // AchievedExerciseLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AchievedExerciseLevel ())
            {
              const EnergySystemData::AchievedExerciseLevel_type& x (*i.AchievedExerciseLevel ());
              if (typeid (EnergySystemData::AchievedExerciseLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AchievedExerciseLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AchievedExerciseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperature ())
            {
              const EnergySystemData::CoreTemperature_type& x (*i.CoreTemperature ());
              if (typeid (EnergySystemData::CoreTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CreatinineProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CreatinineProductionRate ())
            {
              const EnergySystemData::CreatinineProductionRate_type& x (*i.CreatinineProductionRate ());
              if (typeid (EnergySystemData::CreatinineProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CreatinineProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CreatinineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExerciseEnergyDemand
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExerciseEnergyDemand ())
            {
              const EnergySystemData::ExerciseEnergyDemand_type& x (*i.ExerciseEnergyDemand ());
              if (typeid (EnergySystemData::ExerciseEnergyDemand_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExerciseEnergyDemand",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExerciseEnergyDemand",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExerciseMeanArterialPressureDelta
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDelta ())
            {
              const EnergySystemData::ExerciseMeanArterialPressureDelta_type& x (*i.ExerciseMeanArterialPressureDelta ());
              if (typeid (EnergySystemData::ExerciseMeanArterialPressureDelta_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExerciseMeanArterialPressureDelta",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExerciseMeanArterialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatigueLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatigueLevel ())
            {
              const EnergySystemData::FatigueLevel_type& x (*i.FatigueLevel ());
              if (typeid (EnergySystemData::FatigueLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatigueLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatigueLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LactateProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LactateProductionRate ())
            {
              const EnergySystemData::LactateProductionRate_type& x (*i.LactateProductionRate ());
              if (typeid (EnergySystemData::LactateProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LactateProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LactateProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SkinTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SkinTemperature ())
            {
              const EnergySystemData::SkinTemperature_type& x (*i.SkinTemperature ());
              if (typeid (EnergySystemData::SkinTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SkinTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SkinTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SweatRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SweatRate ())
            {
              const EnergySystemData::SweatRate_type& x (*i.SweatRate ());
              if (typeid (EnergySystemData::SweatRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SweatRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SweatRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalMetabolicRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalMetabolicRate ())
            {
              const EnergySystemData::TotalMetabolicRate_type& x (*i.TotalMetabolicRate ());
              if (typeid (EnergySystemData::TotalMetabolicRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalMetabolicRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalMetabolicRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalWorkRateLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalWorkRateLevel ())
            {
              const EnergySystemData::TotalWorkRateLevel_type& x (*i.TotalWorkRateLevel ());
              if (typeid (EnergySystemData::TotalWorkRateLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalWorkRateLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalWorkRateLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SodiumLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SodiumLostToSweat ())
            {
              const EnergySystemData::SodiumLostToSweat_type& x (*i.SodiumLostToSweat ());
              if (typeid (EnergySystemData::SodiumLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SodiumLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SodiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PotassiumLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PotassiumLostToSweat ())
            {
              const EnergySystemData::PotassiumLostToSweat_type& x (*i.PotassiumLostToSweat ());
              if (typeid (EnergySystemData::PotassiumLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PotassiumLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PotassiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChlorideLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChlorideLostToSweat ())
            {
              const EnergySystemData::ChlorideLostToSweat_type& x (*i.ChlorideLostToSweat ());
              if (typeid (EnergySystemData::ChlorideLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChlorideLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChlorideLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EnergyDeficit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnergyDeficit ())
            {
              const EnergySystemData::EnergyDeficit_type& x (*i.EnergyDeficit ());
              if (typeid (EnergySystemData::EnergyDeficit_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnergyDeficit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnergyDeficit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_type_serializer_init (
          "EnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        EnergySystemData_ (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EnergySystemData_ (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnergySystemData_ (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnergySystemData_ (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnergySystemData_ (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnergySystemData_ (::xercesc::DOMDocument& d,
                           const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::EnergySystemData) == typeid (s))
          {
            if (n.name () == "EnergySystemData" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "EnergySystemData",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EnergySystemData",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        EnergySystemData_ (const ::mil::tatrc::physiology::datamodel::EnergySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::EnergySystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "EnergySystemData",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EnergySystemData",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::EnergySystemData_ (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const DrugTransitStateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // LumenSolidMasses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (DrugTransitStateData::LumenSolidMasses_const_iterator
                 b (i.LumenSolidMasses ().begin ()), n (i.LumenSolidMasses ().end ());
                 b != n; ++b)
            {
              if (typeid (DrugTransitStateData::LumenSolidMasses_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LumenSolidMasses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LumenSolidMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LumenDissolvedMasses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (DrugTransitStateData::LumenDissolvedMasses_const_iterator
                 b (i.LumenDissolvedMasses ().begin ()), n (i.LumenDissolvedMasses ().end ());
                 b != n; ++b)
            {
              if (typeid (DrugTransitStateData::LumenDissolvedMasses_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LumenDissolvedMasses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LumenDissolvedMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // EnterocyteMasses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (DrugTransitStateData::EnterocyteMasses_const_iterator
                 b (i.EnterocyteMasses ().begin ()), n (i.EnterocyteMasses ().end ());
                 b != n; ++b)
            {
              if (typeid (DrugTransitStateData::EnterocyteMasses_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnterocyteMasses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "EnterocyteMasses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // MassMetabolized
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DrugTransitStateData::MassMetabolized_type& x (i.MassMetabolized ());
            if (typeid (DrugTransitStateData::MassMetabolized_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MassMetabolized",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MassMetabolized",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // MassExcreted
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DrugTransitStateData::MassExcreted_type& x (i.MassExcreted ());
            if (typeid (DrugTransitStateData::MassExcreted_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MassExcreted",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MassExcreted",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << i.Substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DrugTransitStateData >
        _xsd_DrugTransitStateData_type_serializer_init (
          "DrugTransitStateData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GastrointestinalSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // ChymeAbsorptionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChymeAbsorptionRate ())
            {
              const GastrointestinalSystemData::ChymeAbsorptionRate_type& x (*i.ChymeAbsorptionRate ());
              if (typeid (GastrointestinalSystemData::ChymeAbsorptionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChymeAbsorptionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChymeAbsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StomachContents
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StomachContents ())
            {
              const GastrointestinalSystemData::StomachContents_type& x (*i.StomachContents ());
              if (typeid (GastrointestinalSystemData::StomachContents_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StomachContents",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StomachContents",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DrugTransitStates
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (GastrointestinalSystemData::DrugTransitStates_const_iterator
                 b (i.DrugTransitStates ().begin ()), n (i.DrugTransitStates ().end ());
                 b != n; ++b)
            {
              if (typeid (GastrointestinalSystemData::DrugTransitStates_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DrugTransitStates",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "DrugTransitStates",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GastrointestinalSystemData >
        _xsd_GastrointestinalSystemData_type_serializer_init (
          "GastrointestinalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        GastrointestinalSystem (::std::ostream& o,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        GastrointestinalSystem (::std::ostream& o,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        GastrointestinalSystem (::std::ostream& o,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& t,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& t,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        GastrointestinalSystem (::xercesc::XMLFormatTarget& t,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        GastrointestinalSystem (::xercesc::DOMDocument& d,
                                const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::GastrointestinalSystemData) == typeid (s))
          {
            if (n.name () == "GastrointestinalSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "GastrointestinalSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "GastrointestinalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        GastrointestinalSystem (const ::mil::tatrc::physiology::datamodel::GastrointestinalSystemData& s,
                                const ::xml_schema::namespace_infomap& m,
                                ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::GastrointestinalSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "GastrointestinalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "GastrointestinalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::GastrointestinalSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const HepaticSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // KetoneProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.KetoneProductionRate ())
            {
              const HepaticSystemData::KetoneProductionRate_type& x (*i.KetoneProductionRate ());
              if (typeid (HepaticSystemData::KetoneProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "KetoneProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "KetoneProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HepaticGluconeogenesisRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HepaticGluconeogenesisRate ())
            {
              const HepaticSystemData::HepaticGluconeogenesisRate_type& x (*i.HepaticGluconeogenesisRate ());
              if (typeid (HepaticSystemData::HepaticGluconeogenesisRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HepaticGluconeogenesisRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HepaticGluconeogenesisRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HepaticSystemData >
        _xsd_HepaticSystemData_type_serializer_init (
          "HepaticSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        HepaticSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        HepaticSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        HepaticSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        HepaticSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        HepaticSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        HepaticSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::HepaticSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        HepaticSystem (::xercesc::DOMDocument& d,
                       const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::HepaticSystemData) == typeid (s))
          {
            if (n.name () == "HepaticSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "HepaticSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "HepaticSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        HepaticSystem (const ::mil::tatrc::physiology::datamodel::HepaticSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::HepaticSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "HepaticSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "HepaticSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::HepaticSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const enumSleepState& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumSleepState& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumSleepState& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSleepState >
        _xsd_enumSleepState_type_serializer_init (
          "enumSleepState",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const NervousSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // HeartRateScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRateScale ())
            {
              const NervousSystemData::HeartRateScale_type& x (*i.HeartRateScale ());
              if (typeid (NervousSystemData::HeartRateScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRateScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartElastanceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartElastanceScale ())
            {
              const NervousSystemData::HeartElastanceScale_type& x (*i.HeartElastanceScale ());
              if (typeid (NervousSystemData::HeartElastanceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartElastanceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResistanceScaleExtrasplanchnic
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResistanceScaleExtrasplanchnic ())
            {
              const NervousSystemData::ResistanceScaleExtrasplanchnic_type& x (*i.ResistanceScaleExtrasplanchnic ());
              if (typeid (NervousSystemData::ResistanceScaleExtrasplanchnic_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResistanceScaleExtrasplanchnic",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResistanceScaleExtrasplanchnic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResistanceScaleMuscle
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResistanceScaleMuscle ())
            {
              const NervousSystemData::ResistanceScaleMuscle_type& x (*i.ResistanceScaleMuscle ());
              if (typeid (NervousSystemData::ResistanceScaleMuscle_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResistanceScaleMuscle",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResistanceScaleMuscle",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResistanceScaleMyocardium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResistanceScaleMyocardium ())
            {
              const NervousSystemData::ResistanceScaleMyocardium_type& x (*i.ResistanceScaleMyocardium ());
              if (typeid (NervousSystemData::ResistanceScaleMyocardium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResistanceScaleMyocardium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResistanceScaleMyocardium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResistanceScaleSplanchnic
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResistanceScaleSplanchnic ())
            {
              const NervousSystemData::ResistanceScaleSplanchnic_type& x (*i.ResistanceScaleSplanchnic ());
              if (typeid (NervousSystemData::ResistanceScaleSplanchnic_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResistanceScaleSplanchnic",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResistanceScaleSplanchnic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ComplianceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ComplianceScale ())
            {
              const NervousSystemData::ComplianceScale_type& x (*i.ComplianceScale ());
              if (typeid (NervousSystemData::ComplianceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ComplianceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ComplianceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftEyePupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftEyePupillaryResponse ())
            {
              const NervousSystemData::LeftEyePupillaryResponse_type& x (*i.LeftEyePupillaryResponse ());
              if (typeid (NervousSystemData::LeftEyePupillaryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftEyePupillaryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PainVisualAnalogueScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PainVisualAnalogueScale ())
            {
              const NervousSystemData::PainVisualAnalogueScale_type& x (*i.PainVisualAnalogueScale ());
              if (typeid (NervousSystemData::PainVisualAnalogueScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PainVisualAnalogueScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PainVisualAnalogueScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RichmondAgitationSedationScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RichmondAgitationSedationScale ())
            {
              const NervousSystemData::RichmondAgitationSedationScale_type& x (*i.RichmondAgitationSedationScale ());
              if (typeid (NervousSystemData::RichmondAgitationSedationScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RichmondAgitationSedationScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RichmondAgitationSedationScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightEyePupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightEyePupillaryResponse ())
            {
              const NervousSystemData::RightEyePupillaryResponse_type& x (*i.RightEyePupillaryResponse ());
              if (typeid (NervousSystemData::RightEyePupillaryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightEyePupillaryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SleepTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SleepTime ())
            {
              const NervousSystemData::SleepTime_type& x (*i.SleepTime ());
              if (typeid (NervousSystemData::SleepTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SleepTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SleepTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SleepState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SleepState ())
            {
              const NervousSystemData::SleepState_type& x (*i.SleepState ());
              if (typeid (NervousSystemData::SleepState_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SleepState",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SleepState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WakeTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WakeTime ())
            {
              const NervousSystemData::WakeTime_type& x (*i.WakeTime ());
              if (typeid (NervousSystemData::WakeTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WakeTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WakeTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BiologicalDebt
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BiologicalDebt ())
            {
              const NervousSystemData::BiologicalDebt_type& x (*i.BiologicalDebt ());
              if (typeid (NervousSystemData::BiologicalDebt_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BiologicalDebt",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BiologicalDebt",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ReactionTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReactionTime ())
            {
              const NervousSystemData::ReactionTime_type& x (*i.ReactionTime ());
              if (typeid (NervousSystemData::ReactionTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReactionTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AttentionLapses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AttentionLapses ())
            {
              const NervousSystemData::AttentionLapses_type& x (*i.AttentionLapses ());
              if (typeid (NervousSystemData::AttentionLapses_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AttentionLapses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AttentionLapses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_type_serializer_init (
          "NervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        NervousSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        NervousSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        NervousSystem (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        NervousSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        NervousSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        NervousSystem (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::NervousSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        NervousSystem (::xercesc::DOMDocument& d,
                       const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::NervousSystemData) == typeid (s))
          {
            if (n.name () == "NervousSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "NervousSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "NervousSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        NervousSystem (const ::mil::tatrc::physiology::datamodel::NervousSystemData& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::NervousSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "NervousSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "NervousSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::NervousSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const RenalSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // FiltrationFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FiltrationFraction ())
            {
              const RenalSystemData::FiltrationFraction_type& x (*i.FiltrationFraction ());
              if (typeid (RenalSystemData::FiltrationFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FiltrationFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GlomerularFiltrationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GlomerularFiltrationRate ())
            {
              const RenalSystemData::GlomerularFiltrationRate_type& x (*i.GlomerularFiltrationRate ());
              if (typeid (RenalSystemData::GlomerularFiltrationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GlomerularFiltrationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftAfferentArterioleResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftAfferentArterioleResistance ())
            {
              const RenalSystemData::LeftAfferentArterioleResistance_type& x (*i.LeftAfferentArterioleResistance ());
              if (typeid (RenalSystemData::LeftAfferentArterioleResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftAfferentArterioleResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftAfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftBowmansCapsulesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftBowmansCapsulesHydrostaticPressure ())
            {
              const RenalSystemData::LeftBowmansCapsulesHydrostaticPressure_type& x (*i.LeftBowmansCapsulesHydrostaticPressure ());
              if (typeid (RenalSystemData::LeftBowmansCapsulesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftBowmansCapsulesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftBowmansCapsulesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftBowmansCapsulesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftBowmansCapsulesOsmoticPressure ())
            {
              const RenalSystemData::LeftBowmansCapsulesOsmoticPressure_type& x (*i.LeftBowmansCapsulesOsmoticPressure ());
              if (typeid (RenalSystemData::LeftBowmansCapsulesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftBowmansCapsulesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftBowmansCapsulesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftEfferentArterioleResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftEfferentArterioleResistance ())
            {
              const RenalSystemData::LeftEfferentArterioleResistance_type& x (*i.LeftEfferentArterioleResistance ());
              if (typeid (RenalSystemData::LeftEfferentArterioleResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftEfferentArterioleResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftEfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularCapillariesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularCapillariesHydrostaticPressure ())
            {
              const RenalSystemData::LeftGlomerularCapillariesHydrostaticPressure_type& x (*i.LeftGlomerularCapillariesHydrostaticPressure ());
              if (typeid (RenalSystemData::LeftGlomerularCapillariesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularCapillariesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularCapillariesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularCapillariesOsmoticPressure ())
            {
              const RenalSystemData::LeftGlomerularCapillariesOsmoticPressure_type& x (*i.LeftGlomerularCapillariesOsmoticPressure ());
              if (typeid (RenalSystemData::LeftGlomerularCapillariesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularCapillariesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFiltrationCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationCoefficient ())
            {
              const RenalSystemData::LeftGlomerularFiltrationCoefficient_type& x (*i.LeftGlomerularFiltrationCoefficient ());
              if (typeid (RenalSystemData::LeftGlomerularFiltrationCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFiltrationCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFiltrationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationRate ())
            {
              const RenalSystemData::LeftGlomerularFiltrationRate_type& x (*i.LeftGlomerularFiltrationRate ());
              if (typeid (RenalSystemData::LeftGlomerularFiltrationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFiltrationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFiltrationSurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFiltrationSurfaceArea ())
            {
              const RenalSystemData::LeftGlomerularFiltrationSurfaceArea_type& x (*i.LeftGlomerularFiltrationSurfaceArea ());
              if (typeid (RenalSystemData::LeftGlomerularFiltrationSurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFiltrationSurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFluidPermeability
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeability ())
            {
              const RenalSystemData::LeftGlomerularFluidPermeability_type& x (*i.LeftGlomerularFluidPermeability ());
              if (typeid (RenalSystemData::LeftGlomerularFluidPermeability_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFluidPermeability",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftFiltrationFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftFiltrationFraction ())
            {
              const RenalSystemData::LeftFiltrationFraction_type& x (*i.LeftFiltrationFraction ());
              if (typeid (RenalSystemData::LeftFiltrationFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftFiltrationFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftFiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftNetFiltrationPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftNetFiltrationPressure ())
            {
              const RenalSystemData::LeftNetFiltrationPressure_type& x (*i.LeftNetFiltrationPressure ());
              if (typeid (RenalSystemData::LeftNetFiltrationPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftNetFiltrationPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftNetFiltrationPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftNetReabsorptionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftNetReabsorptionPressure ())
            {
              const RenalSystemData::LeftNetReabsorptionPressure_type& x (*i.LeftNetReabsorptionPressure ());
              if (typeid (RenalSystemData::LeftNetReabsorptionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftNetReabsorptionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftNetReabsorptionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftPeritubularCapillariesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftPeritubularCapillariesHydrostaticPressure ())
            {
              const RenalSystemData::LeftPeritubularCapillariesHydrostaticPressure_type& x (*i.LeftPeritubularCapillariesHydrostaticPressure ());
              if (typeid (RenalSystemData::LeftPeritubularCapillariesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftPeritubularCapillariesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftPeritubularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftPeritubularCapillariesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftPeritubularCapillariesOsmoticPressure ())
            {
              const RenalSystemData::LeftPeritubularCapillariesOsmoticPressure_type& x (*i.LeftPeritubularCapillariesOsmoticPressure ());
              if (typeid (RenalSystemData::LeftPeritubularCapillariesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftPeritubularCapillariesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftPeritubularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftReabsorptionFiltrationCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftReabsorptionFiltrationCoefficient ())
            {
              const RenalSystemData::LeftReabsorptionFiltrationCoefficient_type& x (*i.LeftReabsorptionFiltrationCoefficient ());
              if (typeid (RenalSystemData::LeftReabsorptionFiltrationCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftReabsorptionFiltrationCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftReabsorptionFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftReabsorptionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftReabsorptionRate ())
            {
              const RenalSystemData::LeftReabsorptionRate_type& x (*i.LeftReabsorptionRate ());
              if (typeid (RenalSystemData::LeftReabsorptionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftReabsorptionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularOsmoticPressure ())
            {
              const RenalSystemData::LeftTubularOsmoticPressure_type& x (*i.LeftTubularOsmoticPressure ());
              if (typeid (RenalSystemData::LeftTubularOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularHydrostaticPressure ())
            {
              const RenalSystemData::LeftTubularHydrostaticPressure_type& x (*i.LeftTubularHydrostaticPressure ());
              if (typeid (RenalSystemData::LeftTubularHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFiltrationSurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFiltrationSurfaceArea ())
            {
              const RenalSystemData::LeftTubularReabsorptionFiltrationSurfaceArea_type& x (*i.LeftTubularReabsorptionFiltrationSurfaceArea ());
              if (typeid (RenalSystemData::LeftTubularReabsorptionFiltrationSurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFiltrationSurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFluidPermeability
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeability ())
            {
              const RenalSystemData::LeftTubularReabsorptionFluidPermeability_type& x (*i.LeftTubularReabsorptionFluidPermeability ());
              if (typeid (RenalSystemData::LeftTubularReabsorptionFluidPermeability_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFluidPermeability",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalBloodFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalBloodFlow ())
            {
              const RenalSystemData::RenalBloodFlow_type& x (*i.RenalBloodFlow ());
              if (typeid (RenalSystemData::RenalBloodFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalBloodFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalPlasmaFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalPlasmaFlow ())
            {
              const RenalSystemData::RenalPlasmaFlow_type& x (*i.RenalPlasmaFlow ());
              if (typeid (RenalSystemData::RenalPlasmaFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalPlasmaFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalPlasmaFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RenalVascularResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RenalVascularResistance ())
            {
              const RenalSystemData::RenalVascularResistance_type& x (*i.RenalVascularResistance ());
              if (typeid (RenalSystemData::RenalVascularResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RenalVascularResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RenalVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightAfferentArterioleResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightAfferentArterioleResistance ())
            {
              const RenalSystemData::RightAfferentArterioleResistance_type& x (*i.RightAfferentArterioleResistance ());
              if (typeid (RenalSystemData::RightAfferentArterioleResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightAfferentArterioleResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightAfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightBowmansCapsulesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightBowmansCapsulesHydrostaticPressure ())
            {
              const RenalSystemData::RightBowmansCapsulesHydrostaticPressure_type& x (*i.RightBowmansCapsulesHydrostaticPressure ());
              if (typeid (RenalSystemData::RightBowmansCapsulesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightBowmansCapsulesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightBowmansCapsulesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightBowmansCapsulesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightBowmansCapsulesOsmoticPressure ())
            {
              const RenalSystemData::RightBowmansCapsulesOsmoticPressure_type& x (*i.RightBowmansCapsulesOsmoticPressure ());
              if (typeid (RenalSystemData::RightBowmansCapsulesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightBowmansCapsulesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightBowmansCapsulesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightEfferentArterioleResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightEfferentArterioleResistance ())
            {
              const RenalSystemData::RightEfferentArterioleResistance_type& x (*i.RightEfferentArterioleResistance ());
              if (typeid (RenalSystemData::RightEfferentArterioleResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightEfferentArterioleResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightEfferentArterioleResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularCapillariesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularCapillariesHydrostaticPressure ())
            {
              const RenalSystemData::RightGlomerularCapillariesHydrostaticPressure_type& x (*i.RightGlomerularCapillariesHydrostaticPressure ());
              if (typeid (RenalSystemData::RightGlomerularCapillariesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularCapillariesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularCapillariesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularCapillariesOsmoticPressure ())
            {
              const RenalSystemData::RightGlomerularCapillariesOsmoticPressure_type& x (*i.RightGlomerularCapillariesOsmoticPressure ());
              if (typeid (RenalSystemData::RightGlomerularCapillariesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularCapillariesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFiltrationCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationCoefficient ())
            {
              const RenalSystemData::RightGlomerularFiltrationCoefficient_type& x (*i.RightGlomerularFiltrationCoefficient ());
              if (typeid (RenalSystemData::RightGlomerularFiltrationCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFiltrationCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFiltrationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationRate ())
            {
              const RenalSystemData::RightGlomerularFiltrationRate_type& x (*i.RightGlomerularFiltrationRate ());
              if (typeid (RenalSystemData::RightGlomerularFiltrationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFiltrationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFiltrationSurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFiltrationSurfaceArea ())
            {
              const RenalSystemData::RightGlomerularFiltrationSurfaceArea_type& x (*i.RightGlomerularFiltrationSurfaceArea ());
              if (typeid (RenalSystemData::RightGlomerularFiltrationSurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFiltrationSurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFluidPermeability
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeability ())
            {
              const RenalSystemData::RightGlomerularFluidPermeability_type& x (*i.RightGlomerularFluidPermeability ());
              if (typeid (RenalSystemData::RightGlomerularFluidPermeability_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFluidPermeability",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightFiltrationFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightFiltrationFraction ())
            {
              const RenalSystemData::RightFiltrationFraction_type& x (*i.RightFiltrationFraction ());
              if (typeid (RenalSystemData::RightFiltrationFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightFiltrationFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightFiltrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightNetFiltrationPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightNetFiltrationPressure ())
            {
              const RenalSystemData::RightNetFiltrationPressure_type& x (*i.RightNetFiltrationPressure ());
              if (typeid (RenalSystemData::RightNetFiltrationPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightNetFiltrationPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightNetFiltrationPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightNetReabsorptionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightNetReabsorptionPressure ())
            {
              const RenalSystemData::RightNetReabsorptionPressure_type& x (*i.RightNetReabsorptionPressure ());
              if (typeid (RenalSystemData::RightNetReabsorptionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightNetReabsorptionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightNetReabsorptionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightPeritubularCapillariesHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightPeritubularCapillariesHydrostaticPressure ())
            {
              const RenalSystemData::RightPeritubularCapillariesHydrostaticPressure_type& x (*i.RightPeritubularCapillariesHydrostaticPressure ());
              if (typeid (RenalSystemData::RightPeritubularCapillariesHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightPeritubularCapillariesHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightPeritubularCapillariesHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightPeritubularCapillariesOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightPeritubularCapillariesOsmoticPressure ())
            {
              const RenalSystemData::RightPeritubularCapillariesOsmoticPressure_type& x (*i.RightPeritubularCapillariesOsmoticPressure ());
              if (typeid (RenalSystemData::RightPeritubularCapillariesOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightPeritubularCapillariesOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightPeritubularCapillariesOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightReabsorptionFiltrationCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightReabsorptionFiltrationCoefficient ())
            {
              const RenalSystemData::RightReabsorptionFiltrationCoefficient_type& x (*i.RightReabsorptionFiltrationCoefficient ());
              if (typeid (RenalSystemData::RightReabsorptionFiltrationCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightReabsorptionFiltrationCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightReabsorptionFiltrationCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightReabsorptionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightReabsorptionRate ())
            {
              const RenalSystemData::RightReabsorptionRate_type& x (*i.RightReabsorptionRate ());
              if (typeid (RenalSystemData::RightReabsorptionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightReabsorptionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularOsmoticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularOsmoticPressure ())
            {
              const RenalSystemData::RightTubularOsmoticPressure_type& x (*i.RightTubularOsmoticPressure ());
              if (typeid (RenalSystemData::RightTubularOsmoticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularOsmoticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularOsmoticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularHydrostaticPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularHydrostaticPressure ())
            {
              const RenalSystemData::RightTubularHydrostaticPressure_type& x (*i.RightTubularHydrostaticPressure ());
              if (typeid (RenalSystemData::RightTubularHydrostaticPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularHydrostaticPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularHydrostaticPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFiltrationSurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFiltrationSurfaceArea ())
            {
              const RenalSystemData::RightTubularReabsorptionFiltrationSurfaceArea_type& x (*i.RightTubularReabsorptionFiltrationSurfaceArea ());
              if (typeid (RenalSystemData::RightTubularReabsorptionFiltrationSurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFiltrationSurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFiltrationSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFluidPermeability
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeability ())
            {
              const RenalSystemData::RightTubularReabsorptionFluidPermeability_type& x (*i.RightTubularReabsorptionFluidPermeability ());
              if (typeid (RenalSystemData::RightTubularReabsorptionFluidPermeability_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFluidPermeability",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFluidPermeability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrinationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrinationRate ())
            {
              const RenalSystemData::UrinationRate_type& x (*i.UrinationRate ());
              if (typeid (RenalSystemData::UrinationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrinationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrinationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineOsmolality
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineOsmolality ())
            {
              const RenalSystemData::UrineOsmolality_type& x (*i.UrineOsmolality ());
              if (typeid (RenalSystemData::UrineOsmolality_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineOsmolality",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineOsmolality",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineOsmolarity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineOsmolarity ())
            {
              const RenalSystemData::UrineOsmolarity_type& x (*i.UrineOsmolarity ());
              if (typeid (RenalSystemData::UrineOsmolarity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineOsmolarity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineOsmolarity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineProductionRate ())
            {
              const RenalSystemData::UrineProductionRate_type& x (*i.UrineProductionRate ());
              if (typeid (RenalSystemData::UrineProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanUrineOutput
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanUrineOutput ())
            {
              const RenalSystemData::MeanUrineOutput_type& x (*i.MeanUrineOutput ());
              if (typeid (RenalSystemData::MeanUrineOutput_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanUrineOutput",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanUrineOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineSpecificGravity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineSpecificGravity ())
            {
              const RenalSystemData::UrineSpecificGravity_type& x (*i.UrineSpecificGravity ());
              if (typeid (RenalSystemData::UrineSpecificGravity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineSpecificGravity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineSpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineVolume ())
            {
              const RenalSystemData::UrineVolume_type& x (*i.UrineVolume ());
              if (typeid (RenalSystemData::UrineVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // UrineUreaNitrogenConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.UrineUreaNitrogenConcentration ())
            {
              const RenalSystemData::UrineUreaNitrogenConcentration_type& x (*i.UrineUreaNitrogenConcentration ());
              if (typeid (RenalSystemData::UrineUreaNitrogenConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "UrineUreaNitrogenConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "UrineUreaNitrogenConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RenalSystemData >
        _xsd_RenalSystemData_type_serializer_init (
          "RenalSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        RenalSystem (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        RenalSystem (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RenalSystem (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RenalSystem (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        RenalSystem (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RenalSystem (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RenalSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RenalSystem (::xercesc::DOMDocument& d,
                     const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::RenalSystemData) == typeid (s))
          {
            if (n.name () == "RenalSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "RenalSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "RenalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        RenalSystem (const ::mil::tatrc::physiology::datamodel::RenalSystemData& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::RenalSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "RenalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "RenalSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::RenalSystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const RespiratorySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // AlveolarArterialGradient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AlveolarArterialGradient ())
            {
              const RespiratorySystemData::AlveolarArterialGradient_type& x (*i.AlveolarArterialGradient ());
              if (typeid (RespiratorySystemData::AlveolarArterialGradient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AlveolarArterialGradient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AlveolarArterialGradient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarricoIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarricoIndex ())
            {
              const RespiratorySystemData::CarricoIndex_type& x (*i.CarricoIndex ());
              if (typeid (RespiratorySystemData::CarricoIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarricoIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarricoIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalCarbonDioxideFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxideFraction ())
            {
              const RespiratorySystemData::EndTidalCarbonDioxideFraction_type& x (*i.EndTidalCarbonDioxideFraction ());
              if (typeid (RespiratorySystemData::EndTidalCarbonDioxideFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalCarbonDioxideFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalCarbonDioxideFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxidePressure ())
            {
              const RespiratorySystemData::EndTidalCarbonDioxidePressure_type& x (*i.EndTidalCarbonDioxidePressure ());
              if (typeid (RespiratorySystemData::EndTidalCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExpiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExpiratoryFlow ())
            {
              const RespiratorySystemData::ExpiratoryFlow_type& x (*i.ExpiratoryFlow ());
              if (typeid (RespiratorySystemData::ExpiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExpiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryExpiratoryRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              const RespiratorySystemData::InspiratoryExpiratoryRatio_type& x (*i.InspiratoryExpiratoryRatio ());
              if (typeid (RespiratorySystemData::InspiratoryExpiratoryRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryExpiratoryRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryFlow ())
            {
              const RespiratorySystemData::InspiratoryFlow_type& x (*i.InspiratoryFlow ());
              if (typeid (RespiratorySystemData::InspiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanPleuralPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanPleuralPressure ())
            {
              const RespiratorySystemData::MeanPleuralPressure_type& x (*i.MeanPleuralPressure ());
              if (typeid (RespiratorySystemData::MeanPleuralPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanPleuralPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanPleuralPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryCompliance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryCompliance ())
            {
              const RespiratorySystemData::PulmonaryCompliance_type& x (*i.PulmonaryCompliance ());
              if (typeid (RespiratorySystemData::PulmonaryCompliance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryCompliance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryCompliance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryResistance ())
            {
              const RespiratorySystemData::PulmonaryResistance_type& x (*i.PulmonaryResistance ());
              if (typeid (RespiratorySystemData::PulmonaryResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationDriverFrequency
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationDriverFrequency ())
            {
              const RespiratorySystemData::RespirationDriverFrequency_type& x (*i.RespirationDriverFrequency ());
              if (typeid (RespiratorySystemData::RespirationDriverFrequency_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationDriverFrequency",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationDriverFrequency",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationDriverPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationDriverPressure ())
            {
              const RespiratorySystemData::RespirationDriverPressure_type& x (*i.RespirationDriverPressure ());
              if (typeid (RespiratorySystemData::RespirationDriverPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationDriverPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationDriverPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationMusclePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationMusclePressure ())
            {
              const RespiratorySystemData::RespirationMusclePressure_type& x (*i.RespirationMusclePressure ());
              if (typeid (RespiratorySystemData::RespirationMusclePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationMusclePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationMusclePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationRate ())
            {
              const RespiratorySystemData::RespirationRate_type& x (*i.RespirationRate ());
              if (typeid (RespiratorySystemData::RespirationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SpecificVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SpecificVentilation ())
            {
              const RespiratorySystemData::SpecificVentilation_type& x (*i.SpecificVentilation ());
              if (typeid (RespiratorySystemData::SpecificVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SpecificVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SpecificVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TidalVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TidalVolume ())
            {
              const RespiratorySystemData::TidalVolume_type& x (*i.TidalVolume ());
              if (typeid (RespiratorySystemData::TidalVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TidalVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TidalVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TargetPulmonaryVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TargetPulmonaryVentilation ())
            {
              const RespiratorySystemData::TargetPulmonaryVentilation_type& x (*i.TargetPulmonaryVentilation ());
              if (typeid (RespiratorySystemData::TargetPulmonaryVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TargetPulmonaryVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TargetPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalAlveolarVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilation ())
            {
              const RespiratorySystemData::TotalAlveolarVentilation_type& x (*i.TotalAlveolarVentilation ());
              if (typeid (RespiratorySystemData::TotalAlveolarVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalAlveolarVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalAlveolarVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalDeadSpaceVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalDeadSpaceVentilation ())
            {
              const RespiratorySystemData::TotalDeadSpaceVentilation_type& x (*i.TotalDeadSpaceVentilation ());
              if (typeid (RespiratorySystemData::TotalDeadSpaceVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalDeadSpaceVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalDeadSpaceVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalLungVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalLungVolume ())
            {
              const RespiratorySystemData::TotalLungVolume_type& x (*i.TotalLungVolume ());
              if (typeid (RespiratorySystemData::TotalLungVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalLungVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalLungVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalPulmonaryVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilation ())
            {
              const RespiratorySystemData::TotalPulmonaryVentilation_type& x (*i.TotalPulmonaryVentilation ());
              if (typeid (RespiratorySystemData::TotalPulmonaryVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalPulmonaryVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TranspulmonaryPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TranspulmonaryPressure ())
            {
              const RespiratorySystemData::TranspulmonaryPressure_type& x (*i.TranspulmonaryPressure ());
              if (typeid (RespiratorySystemData::TranspulmonaryPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TranspulmonaryPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TranspulmonaryPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_type_serializer_init (
          "RespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        RespiratorySystem (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        RespiratorySystem (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RespiratorySystem (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RespiratorySystem (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        RespiratorySystem (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RespiratorySystem (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::RespiratorySystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        RespiratorySystem (::xercesc::DOMDocument& d,
                           const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::RespiratorySystemData) == typeid (s))
          {
            if (n.name () == "RespiratorySystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "RespiratorySystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "RespiratorySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        RespiratorySystem (const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::RespiratorySystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "RespiratorySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "RespiratorySystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::RespiratorySystem (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const TissueSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // CarbonDioxideProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarbonDioxideProductionRate ())
            {
              const TissueSystemData::CarbonDioxideProductionRate_type& x (*i.CarbonDioxideProductionRate ());
              if (typeid (TissueSystemData::CarbonDioxideProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarbonDioxideProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarbonDioxideProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DehydrationFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DehydrationFraction ())
            {
              const TissueSystemData::DehydrationFraction_type& x (*i.DehydrationFraction ());
              if (typeid (TissueSystemData::DehydrationFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DehydrationFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DehydrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtracellularFluidVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtracellularFluidVolume ())
            {
              const TissueSystemData::ExtracellularFluidVolume_type& x (*i.ExtracellularFluidVolume ());
              if (typeid (TissueSystemData::ExtracellularFluidVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtracellularFluidVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtracellularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExtravascularFluidVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExtravascularFluidVolume ())
            {
              const TissueSystemData::ExtravascularFluidVolume_type& x (*i.ExtravascularFluidVolume ());
              if (typeid (TissueSystemData::ExtravascularFluidVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExtravascularFluidVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExtravascularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // IntracellularFluidPH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.IntracellularFluidPH ())
            {
              const TissueSystemData::IntracellularFluidPH_type& x (*i.IntracellularFluidPH ());
              if (typeid (TissueSystemData::IntracellularFluidPH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "IntracellularFluidPH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "IntracellularFluidPH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // IntracellularFluidVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.IntracellularFluidVolume ())
            {
              const TissueSystemData::IntracellularFluidVolume_type& x (*i.IntracellularFluidVolume ());
              if (typeid (TissueSystemData::IntracellularFluidVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "IntracellularFluidVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "IntracellularFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalBodyFluidVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalBodyFluidVolume ())
            {
              const TissueSystemData::TotalBodyFluidVolume_type& x (*i.TotalBodyFluidVolume ());
              if (typeid (TissueSystemData::TotalBodyFluidVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalBodyFluidVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalBodyFluidVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenConsumptionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenConsumptionRate ())
            {
              const TissueSystemData::OxygenConsumptionRate_type& x (*i.OxygenConsumptionRate ());
              if (typeid (TissueSystemData::OxygenConsumptionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenConsumptionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenConsumptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespiratoryExchangeRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespiratoryExchangeRatio ())
            {
              const TissueSystemData::RespiratoryExchangeRatio_type& x (*i.RespiratoryExchangeRatio ());
              if (typeid (TissueSystemData::RespiratoryExchangeRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespiratoryExchangeRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespiratoryExchangeRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LiverInsulinSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LiverInsulinSetPoint ())
            {
              const TissueSystemData::LiverInsulinSetPoint_type& x (*i.LiverInsulinSetPoint ());
              if (typeid (TissueSystemData::LiverInsulinSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiverInsulinSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LiverInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LiverGlucagonSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LiverGlucagonSetPoint ())
            {
              const TissueSystemData::LiverGlucagonSetPoint_type& x (*i.LiverGlucagonSetPoint ());
              if (typeid (TissueSystemData::LiverGlucagonSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiverGlucagonSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LiverGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MuscleInsulinSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MuscleInsulinSetPoint ())
            {
              const TissueSystemData::MuscleInsulinSetPoint_type& x (*i.MuscleInsulinSetPoint ());
              if (typeid (TissueSystemData::MuscleInsulinSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MuscleInsulinSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MuscleInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MuscleGlucagonSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MuscleGlucagonSetPoint ())
            {
              const TissueSystemData::MuscleGlucagonSetPoint_type& x (*i.MuscleGlucagonSetPoint ());
              if (typeid (TissueSystemData::MuscleGlucagonSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MuscleGlucagonSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MuscleGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatInsulinSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatInsulinSetPoint ())
            {
              const TissueSystemData::FatInsulinSetPoint_type& x (*i.FatInsulinSetPoint ());
              if (typeid (TissueSystemData::FatInsulinSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatInsulinSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatInsulinSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatGlucagonSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatGlucagonSetPoint ())
            {
              const TissueSystemData::FatGlucagonSetPoint_type& x (*i.FatGlucagonSetPoint ());
              if (typeid (TissueSystemData::FatGlucagonSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatGlucagonSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatGlucagonSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LiverGlycogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LiverGlycogen ())
            {
              const TissueSystemData::LiverGlycogen_type& x (*i.LiverGlycogen ());
              if (typeid (TissueSystemData::LiverGlycogen_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiverGlycogen",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LiverGlycogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MuscleGlycogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MuscleGlycogen ())
            {
              const TissueSystemData::MuscleGlycogen_type& x (*i.MuscleGlycogen ());
              if (typeid (TissueSystemData::MuscleGlycogen_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MuscleGlycogen",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MuscleGlycogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StoredProtein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StoredProtein ())
            {
              const TissueSystemData::StoredProtein_type& x (*i.StoredProtein ());
              if (typeid (TissueSystemData::StoredProtein_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StoredProtein",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StoredProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StoredFat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StoredFat ())
            {
              const TissueSystemData::StoredFat_type& x (*i.StoredFat ());
              if (typeid (TissueSystemData::StoredFat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StoredFat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StoredFat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueSystemData >
        _xsd_TissueSystemData_type_serializer_init (
          "TissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        TissueSystem (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        TissueSystem (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TissueSystem (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TissueSystem (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        TissueSystem (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TissueSystem (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::TissueSystem (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        TissueSystem (::xercesc::DOMDocument& d,
                      const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::TissueSystemData) == typeid (s))
          {
            if (n.name () == "TissueSystem" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "TissueSystem",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "TissueSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        TissueSystem (const ::mil::tatrc::physiology::datamodel::TissueSystemData& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::TissueSystemData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "TissueSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "TissueSystem",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::TissueSystem (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

