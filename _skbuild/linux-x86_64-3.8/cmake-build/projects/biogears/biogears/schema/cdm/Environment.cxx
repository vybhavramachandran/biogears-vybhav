// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Environment.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // enumSurroundingType
        // 

        enumSurroundingType::
        enumSurroundingType ()
        : ::xml_schema::string ()
        {
        }

        enumSurroundingType::
        enumSurroundingType (value v)
        : ::xml_schema::string (_xsd_enumSurroundingType_literals_[v])
        {
        }

        enumSurroundingType::
        enumSurroundingType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumSurroundingType::
        enumSurroundingType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSurroundingType::
        enumSurroundingType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSurroundingType::
        enumSurroundingType (const enumSurroundingType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumSurroundingType& enumSurroundingType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumSurroundingType_literals_[v]);

          return *this;
        }


        // EnvironmentalConditionsData
        // 

        const EnvironmentalConditionsData::Name_optional& EnvironmentalConditionsData::
        Name () const
        {
          return this->Name_;
        }

        EnvironmentalConditionsData::Name_optional& EnvironmentalConditionsData::
        Name ()
        {
          return this->Name_;
        }

        void EnvironmentalConditionsData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void EnvironmentalConditionsData::
        Name (const Name_optional& x)
        {
          this->Name_ = x;
        }

        void EnvironmentalConditionsData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const EnvironmentalConditionsData::SurroundingType_optional& EnvironmentalConditionsData::
        SurroundingType () const
        {
          return this->SurroundingType_;
        }

        EnvironmentalConditionsData::SurroundingType_optional& EnvironmentalConditionsData::
        SurroundingType ()
        {
          return this->SurroundingType_;
        }

        void EnvironmentalConditionsData::
        SurroundingType (const SurroundingType_type& x)
        {
          this->SurroundingType_.set (x);
        }

        void EnvironmentalConditionsData::
        SurroundingType (const SurroundingType_optional& x)
        {
          this->SurroundingType_ = x;
        }

        void EnvironmentalConditionsData::
        SurroundingType (::std::unique_ptr< SurroundingType_type > x)
        {
          this->SurroundingType_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AirDensity_optional& EnvironmentalConditionsData::
        AirDensity () const
        {
          return this->AirDensity_;
        }

        EnvironmentalConditionsData::AirDensity_optional& EnvironmentalConditionsData::
        AirDensity ()
        {
          return this->AirDensity_;
        }

        void EnvironmentalConditionsData::
        AirDensity (const AirDensity_type& x)
        {
          this->AirDensity_.set (x);
        }

        void EnvironmentalConditionsData::
        AirDensity (const AirDensity_optional& x)
        {
          this->AirDensity_ = x;
        }

        void EnvironmentalConditionsData::
        AirDensity (::std::unique_ptr< AirDensity_type > x)
        {
          this->AirDensity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AirVelocity_optional& EnvironmentalConditionsData::
        AirVelocity () const
        {
          return this->AirVelocity_;
        }

        EnvironmentalConditionsData::AirVelocity_optional& EnvironmentalConditionsData::
        AirVelocity ()
        {
          return this->AirVelocity_;
        }

        void EnvironmentalConditionsData::
        AirVelocity (const AirVelocity_type& x)
        {
          this->AirVelocity_.set (x);
        }

        void EnvironmentalConditionsData::
        AirVelocity (const AirVelocity_optional& x)
        {
          this->AirVelocity_ = x;
        }

        void EnvironmentalConditionsData::
        AirVelocity (::std::unique_ptr< AirVelocity_type > x)
        {
          this->AirVelocity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AmbientTemperature_optional& EnvironmentalConditionsData::
        AmbientTemperature () const
        {
          return this->AmbientTemperature_;
        }

        EnvironmentalConditionsData::AmbientTemperature_optional& EnvironmentalConditionsData::
        AmbientTemperature ()
        {
          return this->AmbientTemperature_;
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (const AmbientTemperature_type& x)
        {
          this->AmbientTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (const AmbientTemperature_optional& x)
        {
          this->AmbientTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (::std::unique_ptr< AmbientTemperature_type > x)
        {
          this->AmbientTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AtmosphericPressure_optional& EnvironmentalConditionsData::
        AtmosphericPressure () const
        {
          return this->AtmosphericPressure_;
        }

        EnvironmentalConditionsData::AtmosphericPressure_optional& EnvironmentalConditionsData::
        AtmosphericPressure ()
        {
          return this->AtmosphericPressure_;
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (const AtmosphericPressure_type& x)
        {
          this->AtmosphericPressure_.set (x);
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (const AtmosphericPressure_optional& x)
        {
          this->AtmosphericPressure_ = x;
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (::std::unique_ptr< AtmosphericPressure_type > x)
        {
          this->AtmosphericPressure_.set (std::move (x));
        }

        const EnvironmentalConditionsData::ClothingResistance_optional& EnvironmentalConditionsData::
        ClothingResistance () const
        {
          return this->ClothingResistance_;
        }

        EnvironmentalConditionsData::ClothingResistance_optional& EnvironmentalConditionsData::
        ClothingResistance ()
        {
          return this->ClothingResistance_;
        }

        void EnvironmentalConditionsData::
        ClothingResistance (const ClothingResistance_type& x)
        {
          this->ClothingResistance_.set (x);
        }

        void EnvironmentalConditionsData::
        ClothingResistance (const ClothingResistance_optional& x)
        {
          this->ClothingResistance_ = x;
        }

        void EnvironmentalConditionsData::
        ClothingResistance (::std::unique_ptr< ClothingResistance_type > x)
        {
          this->ClothingResistance_.set (std::move (x));
        }

        const EnvironmentalConditionsData::Emissivity_optional& EnvironmentalConditionsData::
        Emissivity () const
        {
          return this->Emissivity_;
        }

        EnvironmentalConditionsData::Emissivity_optional& EnvironmentalConditionsData::
        Emissivity ()
        {
          return this->Emissivity_;
        }

        void EnvironmentalConditionsData::
        Emissivity (const Emissivity_type& x)
        {
          this->Emissivity_.set (x);
        }

        void EnvironmentalConditionsData::
        Emissivity (const Emissivity_optional& x)
        {
          this->Emissivity_ = x;
        }

        void EnvironmentalConditionsData::
        Emissivity (::std::unique_ptr< Emissivity_type > x)
        {
          this->Emissivity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::MeanRadiantTemperature_optional& EnvironmentalConditionsData::
        MeanRadiantTemperature () const
        {
          return this->MeanRadiantTemperature_;
        }

        EnvironmentalConditionsData::MeanRadiantTemperature_optional& EnvironmentalConditionsData::
        MeanRadiantTemperature ()
        {
          return this->MeanRadiantTemperature_;
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (const MeanRadiantTemperature_type& x)
        {
          this->MeanRadiantTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (const MeanRadiantTemperature_optional& x)
        {
          this->MeanRadiantTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (::std::unique_ptr< MeanRadiantTemperature_type > x)
        {
          this->MeanRadiantTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::RelativeHumidity_optional& EnvironmentalConditionsData::
        RelativeHumidity () const
        {
          return this->RelativeHumidity_;
        }

        EnvironmentalConditionsData::RelativeHumidity_optional& EnvironmentalConditionsData::
        RelativeHumidity ()
        {
          return this->RelativeHumidity_;
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (const RelativeHumidity_type& x)
        {
          this->RelativeHumidity_.set (x);
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (const RelativeHumidity_optional& x)
        {
          this->RelativeHumidity_ = x;
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (::std::unique_ptr< RelativeHumidity_type > x)
        {
          this->RelativeHumidity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::RespirationAmbientTemperature_optional& EnvironmentalConditionsData::
        RespirationAmbientTemperature () const
        {
          return this->RespirationAmbientTemperature_;
        }

        EnvironmentalConditionsData::RespirationAmbientTemperature_optional& EnvironmentalConditionsData::
        RespirationAmbientTemperature ()
        {
          return this->RespirationAmbientTemperature_;
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (const RespirationAmbientTemperature_type& x)
        {
          this->RespirationAmbientTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (const RespirationAmbientTemperature_optional& x)
        {
          this->RespirationAmbientTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (::std::unique_ptr< RespirationAmbientTemperature_type > x)
        {
          this->RespirationAmbientTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AmbientGas_sequence& EnvironmentalConditionsData::
        AmbientGas () const
        {
          return this->AmbientGas_;
        }

        EnvironmentalConditionsData::AmbientGas_sequence& EnvironmentalConditionsData::
        AmbientGas ()
        {
          return this->AmbientGas_;
        }

        void EnvironmentalConditionsData::
        AmbientGas (const AmbientGas_sequence& s)
        {
          this->AmbientGas_ = s;
        }

        const EnvironmentalConditionsData::AmbientAerosol_sequence& EnvironmentalConditionsData::
        AmbientAerosol () const
        {
          return this->AmbientAerosol_;
        }

        EnvironmentalConditionsData::AmbientAerosol_sequence& EnvironmentalConditionsData::
        AmbientAerosol ()
        {
          return this->AmbientAerosol_;
        }

        void EnvironmentalConditionsData::
        AmbientAerosol (const AmbientAerosol_sequence& s)
        {
          this->AmbientAerosol_ = s;
        }


        // ActiveHeatingData
        // 

        const ActiveHeatingData::Power_type& ActiveHeatingData::
        Power () const
        {
          return this->Power_.get ();
        }

        ActiveHeatingData::Power_type& ActiveHeatingData::
        Power ()
        {
          return this->Power_.get ();
        }

        void ActiveHeatingData::
        Power (const Power_type& x)
        {
          this->Power_.set (x);
        }

        void ActiveHeatingData::
        Power (::std::unique_ptr< Power_type > x)
        {
          this->Power_.set (std::move (x));
        }

        const ActiveHeatingData::SurfaceArea_optional& ActiveHeatingData::
        SurfaceArea () const
        {
          return this->SurfaceArea_;
        }

        ActiveHeatingData::SurfaceArea_optional& ActiveHeatingData::
        SurfaceArea ()
        {
          return this->SurfaceArea_;
        }

        void ActiveHeatingData::
        SurfaceArea (const SurfaceArea_type& x)
        {
          this->SurfaceArea_.set (x);
        }

        void ActiveHeatingData::
        SurfaceArea (const SurfaceArea_optional& x)
        {
          this->SurfaceArea_ = x;
        }

        void ActiveHeatingData::
        SurfaceArea (::std::unique_ptr< SurfaceArea_type > x)
        {
          this->SurfaceArea_.set (std::move (x));
        }

        const ActiveHeatingData::SurfaceAreaFraction_optional& ActiveHeatingData::
        SurfaceAreaFraction () const
        {
          return this->SurfaceAreaFraction_;
        }

        ActiveHeatingData::SurfaceAreaFraction_optional& ActiveHeatingData::
        SurfaceAreaFraction ()
        {
          return this->SurfaceAreaFraction_;
        }

        void ActiveHeatingData::
        SurfaceAreaFraction (const SurfaceAreaFraction_type& x)
        {
          this->SurfaceAreaFraction_.set (x);
        }

        void ActiveHeatingData::
        SurfaceAreaFraction (const SurfaceAreaFraction_optional& x)
        {
          this->SurfaceAreaFraction_ = x;
        }

        void ActiveHeatingData::
        SurfaceAreaFraction (::std::unique_ptr< SurfaceAreaFraction_type > x)
        {
          this->SurfaceAreaFraction_.set (std::move (x));
        }


        // ActiveCoolingData
        // 

        const ActiveCoolingData::Power_type& ActiveCoolingData::
        Power () const
        {
          return this->Power_.get ();
        }

        ActiveCoolingData::Power_type& ActiveCoolingData::
        Power ()
        {
          return this->Power_.get ();
        }

        void ActiveCoolingData::
        Power (const Power_type& x)
        {
          this->Power_.set (x);
        }

        void ActiveCoolingData::
        Power (::std::unique_ptr< Power_type > x)
        {
          this->Power_.set (std::move (x));
        }

        const ActiveCoolingData::SurfaceArea_optional& ActiveCoolingData::
        SurfaceArea () const
        {
          return this->SurfaceArea_;
        }

        ActiveCoolingData::SurfaceArea_optional& ActiveCoolingData::
        SurfaceArea ()
        {
          return this->SurfaceArea_;
        }

        void ActiveCoolingData::
        SurfaceArea (const SurfaceArea_type& x)
        {
          this->SurfaceArea_.set (x);
        }

        void ActiveCoolingData::
        SurfaceArea (const SurfaceArea_optional& x)
        {
          this->SurfaceArea_ = x;
        }

        void ActiveCoolingData::
        SurfaceArea (::std::unique_ptr< SurfaceArea_type > x)
        {
          this->SurfaceArea_.set (std::move (x));
        }

        const ActiveCoolingData::SurfaceAreaFraction_optional& ActiveCoolingData::
        SurfaceAreaFraction () const
        {
          return this->SurfaceAreaFraction_;
        }

        ActiveCoolingData::SurfaceAreaFraction_optional& ActiveCoolingData::
        SurfaceAreaFraction ()
        {
          return this->SurfaceAreaFraction_;
        }

        void ActiveCoolingData::
        SurfaceAreaFraction (const SurfaceAreaFraction_type& x)
        {
          this->SurfaceAreaFraction_.set (x);
        }

        void ActiveCoolingData::
        SurfaceAreaFraction (const SurfaceAreaFraction_optional& x)
        {
          this->SurfaceAreaFraction_ = x;
        }

        void ActiveCoolingData::
        SurfaceAreaFraction (::std::unique_ptr< SurfaceAreaFraction_type > x)
        {
          this->SurfaceAreaFraction_.set (std::move (x));
        }


        // AppliedTemperatureData
        // 

        const AppliedTemperatureData::State_optional& AppliedTemperatureData::
        State () const
        {
          return this->State_;
        }

        AppliedTemperatureData::State_optional& AppliedTemperatureData::
        State ()
        {
          return this->State_;
        }

        void AppliedTemperatureData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void AppliedTemperatureData::
        State (const State_optional& x)
        {
          this->State_ = x;
        }

        void AppliedTemperatureData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const AppliedTemperatureData::Temperature_optional& AppliedTemperatureData::
        Temperature () const
        {
          return this->Temperature_;
        }

        AppliedTemperatureData::Temperature_optional& AppliedTemperatureData::
        Temperature ()
        {
          return this->Temperature_;
        }

        void AppliedTemperatureData::
        Temperature (const Temperature_type& x)
        {
          this->Temperature_.set (x);
        }

        void AppliedTemperatureData::
        Temperature (const Temperature_optional& x)
        {
          this->Temperature_ = x;
        }

        void AppliedTemperatureData::
        Temperature (::std::unique_ptr< Temperature_type > x)
        {
          this->Temperature_.set (std::move (x));
        }

        const AppliedTemperatureData::SurfaceArea_optional& AppliedTemperatureData::
        SurfaceArea () const
        {
          return this->SurfaceArea_;
        }

        AppliedTemperatureData::SurfaceArea_optional& AppliedTemperatureData::
        SurfaceArea ()
        {
          return this->SurfaceArea_;
        }

        void AppliedTemperatureData::
        SurfaceArea (const SurfaceArea_type& x)
        {
          this->SurfaceArea_.set (x);
        }

        void AppliedTemperatureData::
        SurfaceArea (const SurfaceArea_optional& x)
        {
          this->SurfaceArea_ = x;
        }

        void AppliedTemperatureData::
        SurfaceArea (::std::unique_ptr< SurfaceArea_type > x)
        {
          this->SurfaceArea_.set (std::move (x));
        }

        const AppliedTemperatureData::SurfaceAreaFraction_optional& AppliedTemperatureData::
        SurfaceAreaFraction () const
        {
          return this->SurfaceAreaFraction_;
        }

        AppliedTemperatureData::SurfaceAreaFraction_optional& AppliedTemperatureData::
        SurfaceAreaFraction ()
        {
          return this->SurfaceAreaFraction_;
        }

        void AppliedTemperatureData::
        SurfaceAreaFraction (const SurfaceAreaFraction_type& x)
        {
          this->SurfaceAreaFraction_.set (x);
        }

        void AppliedTemperatureData::
        SurfaceAreaFraction (const SurfaceAreaFraction_optional& x)
        {
          this->SurfaceAreaFraction_ = x;
        }

        void AppliedTemperatureData::
        SurfaceAreaFraction (::std::unique_ptr< SurfaceAreaFraction_type > x)
        {
          this->SurfaceAreaFraction_.set (std::move (x));
        }


        // EnvironmentData
        // 

        const EnvironmentData::Name_optional& EnvironmentData::
        Name () const
        {
          return this->Name_;
        }

        EnvironmentData::Name_optional& EnvironmentData::
        Name ()
        {
          return this->Name_;
        }

        void EnvironmentData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void EnvironmentData::
        Name (const Name_optional& x)
        {
          this->Name_ = x;
        }

        void EnvironmentData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const EnvironmentData::Conditions_optional& EnvironmentData::
        Conditions () const
        {
          return this->Conditions_;
        }

        EnvironmentData::Conditions_optional& EnvironmentData::
        Conditions ()
        {
          return this->Conditions_;
        }

        void EnvironmentData::
        Conditions (const Conditions_type& x)
        {
          this->Conditions_.set (x);
        }

        void EnvironmentData::
        Conditions (const Conditions_optional& x)
        {
          this->Conditions_ = x;
        }

        void EnvironmentData::
        Conditions (::std::unique_ptr< Conditions_type > x)
        {
          this->Conditions_.set (std::move (x));
        }

        const EnvironmentData::ConvectiveHeatLoss_optional& EnvironmentData::
        ConvectiveHeatLoss () const
        {
          return this->ConvectiveHeatLoss_;
        }

        EnvironmentData::ConvectiveHeatLoss_optional& EnvironmentData::
        ConvectiveHeatLoss ()
        {
          return this->ConvectiveHeatLoss_;
        }

        void EnvironmentData::
        ConvectiveHeatLoss (const ConvectiveHeatLoss_type& x)
        {
          this->ConvectiveHeatLoss_.set (x);
        }

        void EnvironmentData::
        ConvectiveHeatLoss (const ConvectiveHeatLoss_optional& x)
        {
          this->ConvectiveHeatLoss_ = x;
        }

        void EnvironmentData::
        ConvectiveHeatLoss (::std::unique_ptr< ConvectiveHeatLoss_type > x)
        {
          this->ConvectiveHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::ConvectiveHeatTranferCoefficient_optional& EnvironmentData::
        ConvectiveHeatTranferCoefficient () const
        {
          return this->ConvectiveHeatTranferCoefficient_;
        }

        EnvironmentData::ConvectiveHeatTranferCoefficient_optional& EnvironmentData::
        ConvectiveHeatTranferCoefficient ()
        {
          return this->ConvectiveHeatTranferCoefficient_;
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (const ConvectiveHeatTranferCoefficient_type& x)
        {
          this->ConvectiveHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (const ConvectiveHeatTranferCoefficient_optional& x)
        {
          this->ConvectiveHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (::std::unique_ptr< ConvectiveHeatTranferCoefficient_type > x)
        {
          this->ConvectiveHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::EvaporativeHeatLoss_optional& EnvironmentData::
        EvaporativeHeatLoss () const
        {
          return this->EvaporativeHeatLoss_;
        }

        EnvironmentData::EvaporativeHeatLoss_optional& EnvironmentData::
        EvaporativeHeatLoss ()
        {
          return this->EvaporativeHeatLoss_;
        }

        void EnvironmentData::
        EvaporativeHeatLoss (const EvaporativeHeatLoss_type& x)
        {
          this->EvaporativeHeatLoss_.set (x);
        }

        void EnvironmentData::
        EvaporativeHeatLoss (const EvaporativeHeatLoss_optional& x)
        {
          this->EvaporativeHeatLoss_ = x;
        }

        void EnvironmentData::
        EvaporativeHeatLoss (::std::unique_ptr< EvaporativeHeatLoss_type > x)
        {
          this->EvaporativeHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::EvaporativeHeatTranferCoefficient_optional& EnvironmentData::
        EvaporativeHeatTranferCoefficient () const
        {
          return this->EvaporativeHeatTranferCoefficient_;
        }

        EnvironmentData::EvaporativeHeatTranferCoefficient_optional& EnvironmentData::
        EvaporativeHeatTranferCoefficient ()
        {
          return this->EvaporativeHeatTranferCoefficient_;
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (const EvaporativeHeatTranferCoefficient_type& x)
        {
          this->EvaporativeHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (const EvaporativeHeatTranferCoefficient_optional& x)
        {
          this->EvaporativeHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (::std::unique_ptr< EvaporativeHeatTranferCoefficient_type > x)
        {
          this->EvaporativeHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::RadiativeHeatLoss_optional& EnvironmentData::
        RadiativeHeatLoss () const
        {
          return this->RadiativeHeatLoss_;
        }

        EnvironmentData::RadiativeHeatLoss_optional& EnvironmentData::
        RadiativeHeatLoss ()
        {
          return this->RadiativeHeatLoss_;
        }

        void EnvironmentData::
        RadiativeHeatLoss (const RadiativeHeatLoss_type& x)
        {
          this->RadiativeHeatLoss_.set (x);
        }

        void EnvironmentData::
        RadiativeHeatLoss (const RadiativeHeatLoss_optional& x)
        {
          this->RadiativeHeatLoss_ = x;
        }

        void EnvironmentData::
        RadiativeHeatLoss (::std::unique_ptr< RadiativeHeatLoss_type > x)
        {
          this->RadiativeHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::RadiativeHeatTranferCoefficient_optional& EnvironmentData::
        RadiativeHeatTranferCoefficient () const
        {
          return this->RadiativeHeatTranferCoefficient_;
        }

        EnvironmentData::RadiativeHeatTranferCoefficient_optional& EnvironmentData::
        RadiativeHeatTranferCoefficient ()
        {
          return this->RadiativeHeatTranferCoefficient_;
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (const RadiativeHeatTranferCoefficient_type& x)
        {
          this->RadiativeHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (const RadiativeHeatTranferCoefficient_optional& x)
        {
          this->RadiativeHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (::std::unique_ptr< RadiativeHeatTranferCoefficient_type > x)
        {
          this->RadiativeHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::RespirationHeatLoss_optional& EnvironmentData::
        RespirationHeatLoss () const
        {
          return this->RespirationHeatLoss_;
        }

        EnvironmentData::RespirationHeatLoss_optional& EnvironmentData::
        RespirationHeatLoss ()
        {
          return this->RespirationHeatLoss_;
        }

        void EnvironmentData::
        RespirationHeatLoss (const RespirationHeatLoss_type& x)
        {
          this->RespirationHeatLoss_.set (x);
        }

        void EnvironmentData::
        RespirationHeatLoss (const RespirationHeatLoss_optional& x)
        {
          this->RespirationHeatLoss_ = x;
        }

        void EnvironmentData::
        RespirationHeatLoss (::std::unique_ptr< RespirationHeatLoss_type > x)
        {
          this->RespirationHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::SkinHeatLoss_optional& EnvironmentData::
        SkinHeatLoss () const
        {
          return this->SkinHeatLoss_;
        }

        EnvironmentData::SkinHeatLoss_optional& EnvironmentData::
        SkinHeatLoss ()
        {
          return this->SkinHeatLoss_;
        }

        void EnvironmentData::
        SkinHeatLoss (const SkinHeatLoss_type& x)
        {
          this->SkinHeatLoss_.set (x);
        }

        void EnvironmentData::
        SkinHeatLoss (const SkinHeatLoss_optional& x)
        {
          this->SkinHeatLoss_ = x;
        }

        void EnvironmentData::
        SkinHeatLoss (::std::unique_ptr< SkinHeatLoss_type > x)
        {
          this->SkinHeatLoss_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // enumSurroundingType
        //

        enumSurroundingType::
        enumSurroundingType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumSurroundingType_convert ();
        }

        enumSurroundingType::
        enumSurroundingType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumSurroundingType_convert ();
        }

        enumSurroundingType::
        enumSurroundingType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumSurroundingType_convert ();
        }

        enumSurroundingType* enumSurroundingType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumSurroundingType (*this, f, c);
        }

        enumSurroundingType::value enumSurroundingType::
        _xsd_enumSurroundingType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSurroundingType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumSurroundingType_indexes_,
                            _xsd_enumSurroundingType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumSurroundingType_indexes_ + 2 || _xsd_enumSurroundingType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumSurroundingType::
        _xsd_enumSurroundingType_literals_[2] =
        {
          "Air",
          "Water"
        };

        const enumSurroundingType::value enumSurroundingType::
        _xsd_enumSurroundingType_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumSurroundingType::Air,
          ::mil::tatrc::physiology::datamodel::enumSurroundingType::Water
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSurroundingType >
        _xsd_enumSurroundingType_type_factory_init (
          "enumSurroundingType",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnvironmentalConditionsData
        //

        EnvironmentalConditionsData::
        EnvironmentalConditionsData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          SurroundingType_ (this),
          AirDensity_ (this),
          AirVelocity_ (this),
          AmbientTemperature_ (this),
          AtmosphericPressure_ (this),
          ClothingResistance_ (this),
          Emissivity_ (this),
          MeanRadiantTemperature_ (this),
          RelativeHumidity_ (this),
          RespirationAmbientTemperature_ (this),
          AmbientGas_ (this),
          AmbientAerosol_ (this)
        {
        }

        EnvironmentalConditionsData::
        EnvironmentalConditionsData (const EnvironmentalConditionsData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          SurroundingType_ (x.SurroundingType_, f, this),
          AirDensity_ (x.AirDensity_, f, this),
          AirVelocity_ (x.AirVelocity_, f, this),
          AmbientTemperature_ (x.AmbientTemperature_, f, this),
          AtmosphericPressure_ (x.AtmosphericPressure_, f, this),
          ClothingResistance_ (x.ClothingResistance_, f, this),
          Emissivity_ (x.Emissivity_, f, this),
          MeanRadiantTemperature_ (x.MeanRadiantTemperature_, f, this),
          RelativeHumidity_ (x.RelativeHumidity_, f, this),
          RespirationAmbientTemperature_ (x.RespirationAmbientTemperature_, f, this),
          AmbientGas_ (x.AmbientGas_, f, this),
          AmbientAerosol_ (x.AmbientAerosol_, f, this)
        {
        }

        EnvironmentalConditionsData::
        EnvironmentalConditionsData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          SurroundingType_ (this),
          AirDensity_ (this),
          AirVelocity_ (this),
          AmbientTemperature_ (this),
          AtmosphericPressure_ (this),
          ClothingResistance_ (this),
          Emissivity_ (this),
          MeanRadiantTemperature_ (this),
          RelativeHumidity_ (this),
          RespirationAmbientTemperature_ (this),
          AmbientGas_ (this),
          AmbientAerosol_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentalConditionsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Name_)
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurroundingType
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurroundingType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurroundingType_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurroundingType_)
                {
                  ::std::unique_ptr< SurroundingType_type > r (
                    dynamic_cast< SurroundingType_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurroundingType_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirDensity_)
                {
                  ::std::unique_ptr< AirDensity_type > r (
                    dynamic_cast< AirDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirVelocity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirVelocity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirVelocity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirVelocity_)
                {
                  ::std::unique_ptr< AirVelocity_type > r (
                    dynamic_cast< AirVelocity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirVelocity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AmbientTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AmbientTemperature_)
                {
                  ::std::unique_ptr< AmbientTemperature_type > r (
                    dynamic_cast< AmbientTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AmbientTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AtmosphericPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AtmosphericPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AtmosphericPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AtmosphericPressure_)
                {
                  ::std::unique_ptr< AtmosphericPressure_type > r (
                    dynamic_cast< AtmosphericPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AtmosphericPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ClothingResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ClothingResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ClothingResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ClothingResistance_)
                {
                  ::std::unique_ptr< ClothingResistance_type > r (
                    dynamic_cast< ClothingResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ClothingResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Emissivity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Emissivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Emissivity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Emissivity_)
                {
                  ::std::unique_ptr< Emissivity_type > r (
                    dynamic_cast< Emissivity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Emissivity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanRadiantTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanRadiantTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanRadiantTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanRadiantTemperature_)
                {
                  ::std::unique_ptr< MeanRadiantTemperature_type > r (
                    dynamic_cast< MeanRadiantTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanRadiantTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RelativeHumidity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RelativeHumidity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RelativeHumidity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RelativeHumidity_)
                {
                  ::std::unique_ptr< RelativeHumidity_type > r (
                    dynamic_cast< RelativeHumidity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RelativeHumidity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationAmbientTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationAmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationAmbientTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationAmbientTemperature_)
                {
                  ::std::unique_ptr< RespirationAmbientTemperature_type > r (
                    dynamic_cast< RespirationAmbientTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationAmbientTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AmbientGas
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientGas_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< AmbientGas_type > r (
                  dynamic_cast< AmbientGas_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->AmbientGas_.push_back (::std::move (r));
                continue;
              }
            }

            // AmbientAerosol
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientAerosol",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientAerosol_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< AmbientAerosol_type > r (
                  dynamic_cast< AmbientAerosol_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->AmbientAerosol_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        EnvironmentalConditionsData* EnvironmentalConditionsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentalConditionsData (*this, f, c);
        }

        EnvironmentalConditionsData& EnvironmentalConditionsData::
        operator= (const EnvironmentalConditionsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->SurroundingType_ = x.SurroundingType_;
            this->AirDensity_ = x.AirDensity_;
            this->AirVelocity_ = x.AirVelocity_;
            this->AmbientTemperature_ = x.AmbientTemperature_;
            this->AtmosphericPressure_ = x.AtmosphericPressure_;
            this->ClothingResistance_ = x.ClothingResistance_;
            this->Emissivity_ = x.Emissivity_;
            this->MeanRadiantTemperature_ = x.MeanRadiantTemperature_;
            this->RelativeHumidity_ = x.RelativeHumidity_;
            this->RespirationAmbientTemperature_ = x.RespirationAmbientTemperature_;
            this->AmbientGas_ = x.AmbientGas_;
            this->AmbientAerosol_ = x.AmbientAerosol_;
          }

          return *this;
        }

        EnvironmentalConditionsData::
        ~EnvironmentalConditionsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_type_factory_init (
          "EnvironmentalConditionsData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ActiveHeatingData
        //

        ActiveHeatingData::
        ActiveHeatingData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveHeatingData::
        ActiveHeatingData (const Power_type& Power)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (Power, this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveHeatingData::
        ActiveHeatingData (::std::unique_ptr< Power_type > Power)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (std::move (Power), this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveHeatingData::
        ActiveHeatingData (const ActiveHeatingData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Power_ (x.Power_, f, this),
          SurfaceArea_ (x.SurfaceArea_, f, this),
          SurfaceAreaFraction_ (x.SurfaceAreaFraction_, f, this)
        {
        }

        ActiveHeatingData::
        ActiveHeatingData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Power_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ActiveHeatingData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Power
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Power_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Power_.present ())
                {
                  ::std::unique_ptr< Power_type > r (
                    dynamic_cast< Power_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Power_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceArea_)
                {
                  ::std::unique_ptr< SurfaceArea_type > r (
                    dynamic_cast< SurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceAreaFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceAreaFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceAreaFraction_)
                {
                  ::std::unique_ptr< SurfaceAreaFraction_type > r (
                    dynamic_cast< SurfaceAreaFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceAreaFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Power_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Power",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ActiveHeatingData* ActiveHeatingData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ActiveHeatingData (*this, f, c);
        }

        ActiveHeatingData& ActiveHeatingData::
        operator= (const ActiveHeatingData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Power_ = x.Power_;
            this->SurfaceArea_ = x.SurfaceArea_;
            this->SurfaceAreaFraction_ = x.SurfaceAreaFraction_;
          }

          return *this;
        }

        ActiveHeatingData::
        ~ActiveHeatingData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActiveHeatingData >
        _xsd_ActiveHeatingData_type_factory_init (
          "ActiveHeatingData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ActiveCoolingData
        //

        ActiveCoolingData::
        ActiveCoolingData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveCoolingData::
        ActiveCoolingData (const Power_type& Power)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (Power, this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveCoolingData::
        ActiveCoolingData (::std::unique_ptr< Power_type > Power)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Power_ (std::move (Power), this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        ActiveCoolingData::
        ActiveCoolingData (const ActiveCoolingData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Power_ (x.Power_, f, this),
          SurfaceArea_ (x.SurfaceArea_, f, this),
          SurfaceAreaFraction_ (x.SurfaceAreaFraction_, f, this)
        {
        }

        ActiveCoolingData::
        ActiveCoolingData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Power_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ActiveCoolingData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Power
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Power_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Power_.present ())
                {
                  ::std::unique_ptr< Power_type > r (
                    dynamic_cast< Power_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Power_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceArea_)
                {
                  ::std::unique_ptr< SurfaceArea_type > r (
                    dynamic_cast< SurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceAreaFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceAreaFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceAreaFraction_)
                {
                  ::std::unique_ptr< SurfaceAreaFraction_type > r (
                    dynamic_cast< SurfaceAreaFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceAreaFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Power_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Power",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ActiveCoolingData* ActiveCoolingData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ActiveCoolingData (*this, f, c);
        }

        ActiveCoolingData& ActiveCoolingData::
        operator= (const ActiveCoolingData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Power_ = x.Power_;
            this->SurfaceArea_ = x.SurfaceArea_;
            this->SurfaceAreaFraction_ = x.SurfaceAreaFraction_;
          }

          return *this;
        }

        ActiveCoolingData::
        ~ActiveCoolingData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActiveCoolingData >
        _xsd_ActiveCoolingData_type_factory_init (
          "ActiveCoolingData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AppliedTemperatureData
        //

        AppliedTemperatureData::
        AppliedTemperatureData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          State_ (this),
          Temperature_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
        }

        AppliedTemperatureData::
        AppliedTemperatureData (const AppliedTemperatureData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          State_ (x.State_, f, this),
          Temperature_ (x.Temperature_, f, this),
          SurfaceArea_ (x.SurfaceArea_, f, this),
          SurfaceAreaFraction_ (x.SurfaceAreaFraction_, f, this)
        {
        }

        AppliedTemperatureData::
        AppliedTemperatureData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          State_ (this),
          Temperature_ (this),
          SurfaceArea_ (this),
          SurfaceAreaFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void AppliedTemperatureData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // State
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "State",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< State_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->State_)
                {
                  ::std::unique_ptr< State_type > r (
                    dynamic_cast< State_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->State_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Temperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Temperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Temperature_)
                {
                  ::std::unique_ptr< Temperature_type > r (
                    dynamic_cast< Temperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Temperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceArea_)
                {
                  ::std::unique_ptr< SurfaceArea_type > r (
                    dynamic_cast< SurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SurfaceAreaFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurfaceAreaFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurfaceAreaFraction_)
                {
                  ::std::unique_ptr< SurfaceAreaFraction_type > r (
                    dynamic_cast< SurfaceAreaFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurfaceAreaFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        AppliedTemperatureData* AppliedTemperatureData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AppliedTemperatureData (*this, f, c);
        }

        AppliedTemperatureData& AppliedTemperatureData::
        operator= (const AppliedTemperatureData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->State_ = x.State_;
            this->Temperature_ = x.Temperature_;
            this->SurfaceArea_ = x.SurfaceArea_;
            this->SurfaceAreaFraction_ = x.SurfaceAreaFraction_;
          }

          return *this;
        }

        AppliedTemperatureData::
        ~AppliedTemperatureData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AppliedTemperatureData >
        _xsd_AppliedTemperatureData_type_factory_init (
          "AppliedTemperatureData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnvironmentData
        //

        EnvironmentData::
        EnvironmentData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          Name_ (this),
          Conditions_ (this),
          ConvectiveHeatLoss_ (this),
          ConvectiveHeatTranferCoefficient_ (this),
          EvaporativeHeatLoss_ (this),
          EvaporativeHeatTranferCoefficient_ (this),
          RadiativeHeatLoss_ (this),
          RadiativeHeatTranferCoefficient_ (this),
          RespirationHeatLoss_ (this),
          SkinHeatLoss_ (this)
        {
        }

        EnvironmentData::
        EnvironmentData (const EnvironmentData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          Name_ (x.Name_, f, this),
          Conditions_ (x.Conditions_, f, this),
          ConvectiveHeatLoss_ (x.ConvectiveHeatLoss_, f, this),
          ConvectiveHeatTranferCoefficient_ (x.ConvectiveHeatTranferCoefficient_, f, this),
          EvaporativeHeatLoss_ (x.EvaporativeHeatLoss_, f, this),
          EvaporativeHeatTranferCoefficient_ (x.EvaporativeHeatTranferCoefficient_, f, this),
          RadiativeHeatLoss_ (x.RadiativeHeatLoss_, f, this),
          RadiativeHeatTranferCoefficient_ (x.RadiativeHeatTranferCoefficient_, f, this),
          RespirationHeatLoss_ (x.RespirationHeatLoss_, f, this),
          SkinHeatLoss_ (x.SkinHeatLoss_, f, this)
        {
        }

        EnvironmentData::
        EnvironmentData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Conditions_ (this),
          ConvectiveHeatLoss_ (this),
          ConvectiveHeatTranferCoefficient_ (this),
          EvaporativeHeatLoss_ (this),
          EvaporativeHeatTranferCoefficient_ (this),
          RadiativeHeatLoss_ (this),
          RadiativeHeatTranferCoefficient_ (this),
          RespirationHeatLoss_ (this),
          SkinHeatLoss_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Name_)
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Conditions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Conditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Conditions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Conditions_)
                {
                  ::std::unique_ptr< Conditions_type > r (
                    dynamic_cast< Conditions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Conditions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConvectiveHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConvectiveHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConvectiveHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConvectiveHeatLoss_)
                {
                  ::std::unique_ptr< ConvectiveHeatLoss_type > r (
                    dynamic_cast< ConvectiveHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConvectiveHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConvectiveHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConvectiveHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConvectiveHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConvectiveHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< ConvectiveHeatTranferCoefficient_type > r (
                    dynamic_cast< ConvectiveHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConvectiveHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EvaporativeHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EvaporativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EvaporativeHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EvaporativeHeatLoss_)
                {
                  ::std::unique_ptr< EvaporativeHeatLoss_type > r (
                    dynamic_cast< EvaporativeHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EvaporativeHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EvaporativeHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EvaporativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EvaporativeHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EvaporativeHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< EvaporativeHeatTranferCoefficient_type > r (
                    dynamic_cast< EvaporativeHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EvaporativeHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RadiativeHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RadiativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RadiativeHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RadiativeHeatLoss_)
                {
                  ::std::unique_ptr< RadiativeHeatLoss_type > r (
                    dynamic_cast< RadiativeHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RadiativeHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RadiativeHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RadiativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RadiativeHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RadiativeHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< RadiativeHeatTranferCoefficient_type > r (
                    dynamic_cast< RadiativeHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RadiativeHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationHeatLoss_)
                {
                  ::std::unique_ptr< RespirationHeatLoss_type > r (
                    dynamic_cast< RespirationHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SkinHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SkinHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SkinHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SkinHeatLoss_)
                {
                  ::std::unique_ptr< SkinHeatLoss_type > r (
                    dynamic_cast< SkinHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SkinHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnvironmentData* EnvironmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentData (*this, f, c);
        }

        EnvironmentData& EnvironmentData::
        operator= (const EnvironmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Conditions_ = x.Conditions_;
            this->ConvectiveHeatLoss_ = x.ConvectiveHeatLoss_;
            this->ConvectiveHeatTranferCoefficient_ = x.ConvectiveHeatTranferCoefficient_;
            this->EvaporativeHeatLoss_ = x.EvaporativeHeatLoss_;
            this->EvaporativeHeatTranferCoefficient_ = x.EvaporativeHeatTranferCoefficient_;
            this->RadiativeHeatLoss_ = x.RadiativeHeatLoss_;
            this->RadiativeHeatTranferCoefficient_ = x.RadiativeHeatTranferCoefficient_;
            this->RespirationHeatLoss_ = x.RespirationHeatLoss_;
            this->SkinHeatLoss_ = x.SkinHeatLoss_;
          }

          return *this;
        }

        EnvironmentData::
        ~EnvironmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_type_factory_init (
          "EnvironmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, enumSurroundingType::value i)
        {
          return o << enumSurroundingType::_xsd_enumSurroundingType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumSurroundingType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSurroundingType >
        _xsd_enumSurroundingType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentalConditionsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Name ())
            {
              o << ::std::endl << "Name: ";
              om.insert (o, *i.Name ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurroundingType ())
            {
              o << ::std::endl << "SurroundingType: ";
              om.insert (o, *i.SurroundingType ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              o << ::std::endl << "AirDensity: ";
              om.insert (o, *i.AirDensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirVelocity ())
            {
              o << ::std::endl << "AirVelocity: ";
              om.insert (o, *i.AirVelocity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AmbientTemperature ())
            {
              o << ::std::endl << "AmbientTemperature: ";
              om.insert (o, *i.AmbientTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AtmosphericPressure ())
            {
              o << ::std::endl << "AtmosphericPressure: ";
              om.insert (o, *i.AtmosphericPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ClothingResistance ())
            {
              o << ::std::endl << "ClothingResistance: ";
              om.insert (o, *i.ClothingResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Emissivity ())
            {
              o << ::std::endl << "Emissivity: ";
              om.insert (o, *i.Emissivity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanRadiantTemperature ())
            {
              o << ::std::endl << "MeanRadiantTemperature: ";
              om.insert (o, *i.MeanRadiantTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RelativeHumidity ())
            {
              o << ::std::endl << "RelativeHumidity: ";
              om.insert (o, *i.RelativeHumidity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationAmbientTemperature ())
            {
              o << ::std::endl << "RespirationAmbientTemperature: ";
              om.insert (o, *i.RespirationAmbientTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientGas_const_iterator
                 b (i.AmbientGas ().begin ()), e (i.AmbientGas ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "AmbientGas: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientAerosol_const_iterator
                 b (i.AmbientAerosol ().begin ()), e (i.AmbientAerosol ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "AmbientAerosol: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ActiveHeatingData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Power: ";
            om.insert (o, i.Power ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              o << ::std::endl << "SurfaceArea: ";
              om.insert (o, *i.SurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              o << ::std::endl << "SurfaceAreaFraction: ";
              om.insert (o, *i.SurfaceAreaFraction ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActiveHeatingData >
        _xsd_ActiveHeatingData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ActiveCoolingData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Power: ";
            om.insert (o, i.Power ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              o << ::std::endl << "SurfaceArea: ";
              om.insert (o, *i.SurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              o << ::std::endl << "SurfaceAreaFraction: ";
              om.insert (o, *i.SurfaceAreaFraction ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActiveCoolingData >
        _xsd_ActiveCoolingData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AppliedTemperatureData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.State ())
            {
              o << ::std::endl << "State: ";
              om.insert (o, *i.State ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              o << ::std::endl << "Temperature: ";
              om.insert (o, *i.Temperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              o << ::std::endl << "SurfaceArea: ";
              om.insert (o, *i.SurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              o << ::std::endl << "SurfaceAreaFraction: ";
              om.insert (o, *i.SurfaceAreaFraction ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AppliedTemperatureData >
        _xsd_AppliedTemperatureData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Name ())
            {
              o << ::std::endl << "Name: ";
              om.insert (o, *i.Name ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Conditions ())
            {
              o << ::std::endl << "Conditions: ";
              om.insert (o, *i.Conditions ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConvectiveHeatLoss ())
            {
              o << ::std::endl << "ConvectiveHeatLoss: ";
              om.insert (o, *i.ConvectiveHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConvectiveHeatTranferCoefficient ())
            {
              o << ::std::endl << "ConvectiveHeatTranferCoefficient: ";
              om.insert (o, *i.ConvectiveHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EvaporativeHeatLoss ())
            {
              o << ::std::endl << "EvaporativeHeatLoss: ";
              om.insert (o, *i.EvaporativeHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EvaporativeHeatTranferCoefficient ())
            {
              o << ::std::endl << "EvaporativeHeatTranferCoefficient: ";
              om.insert (o, *i.EvaporativeHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RadiativeHeatLoss ())
            {
              o << ::std::endl << "RadiativeHeatLoss: ";
              om.insert (o, *i.RadiativeHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RadiativeHeatTranferCoefficient ())
            {
              o << ::std::endl << "RadiativeHeatTranferCoefficient: ";
              om.insert (o, *i.RadiativeHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationHeatLoss ())
            {
              o << ::std::endl << "RespirationHeatLoss: ";
              om.insert (o, *i.RespirationHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SkinHeatLoss ())
            {
              o << ::std::endl << "SkinHeatLoss: ";
              om.insert (o, *i.SkinHeatLoss ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > (
              ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EnvironmentalConditions",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EnvironmentalConditions",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >
        EnvironmentalConditions (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EnvironmentalConditions",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EnvironmentalConditions",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Environment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
            ::mil::tatrc::physiology::datamodel::Environment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > (
              ::mil::tatrc::physiology::datamodel::Environment (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Environment",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnvironmentData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnvironmentData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Environment",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData >
        Environment (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Environment",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::EnvironmentData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::EnvironmentData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::EnvironmentData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Environment",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const enumSurroundingType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumSurroundingType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumSurroundingType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSurroundingType >
        _xsd_enumSurroundingType_type_serializer_init (
          "enumSurroundingType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentalConditionsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Name ())
            {
              const EnvironmentalConditionsData::Name_type& x (*i.Name ());
              if (typeid (EnvironmentalConditionsData::Name_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Name",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SurroundingType
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurroundingType ())
            {
              const EnvironmentalConditionsData::SurroundingType_type& x (*i.SurroundingType ());
              if (typeid (EnvironmentalConditionsData::SurroundingType_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurroundingType",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurroundingType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              const EnvironmentalConditionsData::AirDensity_type& x (*i.AirDensity ());
              if (typeid (EnvironmentalConditionsData::AirDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirVelocity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirVelocity ())
            {
              const EnvironmentalConditionsData::AirVelocity_type& x (*i.AirVelocity ());
              if (typeid (EnvironmentalConditionsData::AirVelocity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirVelocity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirVelocity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AmbientTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AmbientTemperature ())
            {
              const EnvironmentalConditionsData::AmbientTemperature_type& x (*i.AmbientTemperature ());
              if (typeid (EnvironmentalConditionsData::AmbientTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AtmosphericPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AtmosphericPressure ())
            {
              const EnvironmentalConditionsData::AtmosphericPressure_type& x (*i.AtmosphericPressure ());
              if (typeid (EnvironmentalConditionsData::AtmosphericPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AtmosphericPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AtmosphericPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ClothingResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ClothingResistance ())
            {
              const EnvironmentalConditionsData::ClothingResistance_type& x (*i.ClothingResistance ());
              if (typeid (EnvironmentalConditionsData::ClothingResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ClothingResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ClothingResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Emissivity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Emissivity ())
            {
              const EnvironmentalConditionsData::Emissivity_type& x (*i.Emissivity ());
              if (typeid (EnvironmentalConditionsData::Emissivity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Emissivity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Emissivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanRadiantTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanRadiantTemperature ())
            {
              const EnvironmentalConditionsData::MeanRadiantTemperature_type& x (*i.MeanRadiantTemperature ());
              if (typeid (EnvironmentalConditionsData::MeanRadiantTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanRadiantTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanRadiantTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RelativeHumidity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RelativeHumidity ())
            {
              const EnvironmentalConditionsData::RelativeHumidity_type& x (*i.RelativeHumidity ());
              if (typeid (EnvironmentalConditionsData::RelativeHumidity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RelativeHumidity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RelativeHumidity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationAmbientTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationAmbientTemperature ())
            {
              const EnvironmentalConditionsData::RespirationAmbientTemperature_type& x (*i.RespirationAmbientTemperature ());
              if (typeid (EnvironmentalConditionsData::RespirationAmbientTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationAmbientTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationAmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AmbientGas
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientGas_const_iterator
                 b (i.AmbientGas ().begin ()), n (i.AmbientGas ().end ());
                 b != n; ++b)
            {
              if (typeid (EnvironmentalConditionsData::AmbientGas_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientGas",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "AmbientGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // AmbientAerosol
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientAerosol_const_iterator
                 b (i.AmbientAerosol ().begin ()), n (i.AmbientAerosol ().end ());
                 b != n; ++b)
            {
              if (typeid (EnvironmentalConditionsData::AmbientAerosol_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientAerosol",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "AmbientAerosol",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_type_serializer_init (
          "EnvironmentalConditionsData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        EnvironmentalConditions (::std::ostream& o,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EnvironmentalConditions (::std::ostream& o,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnvironmentalConditions (::std::ostream& o,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnvironmentalConditions (::xercesc::XMLFormatTarget& t,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        EnvironmentalConditions (::xercesc::XMLFormatTarget& t,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnvironmentalConditions (::xercesc::XMLFormatTarget& t,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        EnvironmentalConditions (::xercesc::DOMDocument& d,
                                 const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData) == typeid (s))
          {
            if (n.name () == "EnvironmentalConditions" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "EnvironmentalConditions",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EnvironmentalConditions",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        EnvironmentalConditions (const ::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::EnvironmentalConditionsData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "EnvironmentalConditions",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "EnvironmentalConditions",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::EnvironmentalConditions (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActiveHeatingData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Power
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ActiveHeatingData::Power_type& x (i.Power ());
            if (typeid (ActiveHeatingData::Power_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Power",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              const ActiveHeatingData::SurfaceArea_type& x (*i.SurfaceArea ());
              if (typeid (ActiveHeatingData::SurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SurfaceAreaFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              const ActiveHeatingData::SurfaceAreaFraction_type& x (*i.SurfaceAreaFraction ());
              if (typeid (ActiveHeatingData::SurfaceAreaFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceAreaFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActiveHeatingData >
        _xsd_ActiveHeatingData_type_serializer_init (
          "ActiveHeatingData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ActiveCoolingData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Power
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ActiveCoolingData::Power_type& x (i.Power ());
            if (typeid (ActiveCoolingData::Power_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Power",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Power",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              const ActiveCoolingData::SurfaceArea_type& x (*i.SurfaceArea ());
              if (typeid (ActiveCoolingData::SurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SurfaceAreaFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              const ActiveCoolingData::SurfaceAreaFraction_type& x (*i.SurfaceAreaFraction ());
              if (typeid (ActiveCoolingData::SurfaceAreaFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceAreaFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActiveCoolingData >
        _xsd_ActiveCoolingData_type_serializer_init (
          "ActiveCoolingData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AppliedTemperatureData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // State
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.State ())
            {
              const AppliedTemperatureData::State_type& x (*i.State ());
              if (typeid (AppliedTemperatureData::State_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "State",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "State",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Temperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              const AppliedTemperatureData::Temperature_type& x (*i.Temperature ());
              if (typeid (AppliedTemperatureData::Temperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Temperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceArea ())
            {
              const AppliedTemperatureData::SurfaceArea_type& x (*i.SurfaceArea ());
              if (typeid (AppliedTemperatureData::SurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SurfaceAreaFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurfaceAreaFraction ())
            {
              const AppliedTemperatureData::SurfaceAreaFraction_type& x (*i.SurfaceAreaFraction ());
              if (typeid (AppliedTemperatureData::SurfaceAreaFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurfaceAreaFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurfaceAreaFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AppliedTemperatureData >
        _xsd_AppliedTemperatureData_type_serializer_init (
          "AppliedTemperatureData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Name ())
            {
              const EnvironmentData::Name_type& x (*i.Name ());
              if (typeid (EnvironmentData::Name_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Name",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Conditions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Conditions ())
            {
              const EnvironmentData::Conditions_type& x (*i.Conditions ());
              if (typeid (EnvironmentData::Conditions_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Conditions",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Conditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConvectiveHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConvectiveHeatLoss ())
            {
              const EnvironmentData::ConvectiveHeatLoss_type& x (*i.ConvectiveHeatLoss ());
              if (typeid (EnvironmentData::ConvectiveHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConvectiveHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConvectiveHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConvectiveHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConvectiveHeatTranferCoefficient ())
            {
              const EnvironmentData::ConvectiveHeatTranferCoefficient_type& x (*i.ConvectiveHeatTranferCoefficient ());
              if (typeid (EnvironmentData::ConvectiveHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConvectiveHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConvectiveHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EvaporativeHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EvaporativeHeatLoss ())
            {
              const EnvironmentData::EvaporativeHeatLoss_type& x (*i.EvaporativeHeatLoss ());
              if (typeid (EnvironmentData::EvaporativeHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EvaporativeHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EvaporativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EvaporativeHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EvaporativeHeatTranferCoefficient ())
            {
              const EnvironmentData::EvaporativeHeatTranferCoefficient_type& x (*i.EvaporativeHeatTranferCoefficient ());
              if (typeid (EnvironmentData::EvaporativeHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EvaporativeHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EvaporativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RadiativeHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RadiativeHeatLoss ())
            {
              const EnvironmentData::RadiativeHeatLoss_type& x (*i.RadiativeHeatLoss ());
              if (typeid (EnvironmentData::RadiativeHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RadiativeHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RadiativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RadiativeHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RadiativeHeatTranferCoefficient ())
            {
              const EnvironmentData::RadiativeHeatTranferCoefficient_type& x (*i.RadiativeHeatTranferCoefficient ());
              if (typeid (EnvironmentData::RadiativeHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RadiativeHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RadiativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationHeatLoss ())
            {
              const EnvironmentData::RespirationHeatLoss_type& x (*i.RespirationHeatLoss ());
              if (typeid (EnvironmentData::RespirationHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SkinHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SkinHeatLoss ())
            {
              const EnvironmentData::SkinHeatLoss_type& x (*i.SkinHeatLoss ());
              if (typeid (EnvironmentData::SkinHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SkinHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SkinHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_type_serializer_init (
          "EnvironmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        Environment (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Environment (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Environment (::std::ostream& o,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Environment (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Environment (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Environment (::xercesc::XMLFormatTarget& t,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Environment (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Environment (::xercesc::DOMDocument& d,
                     const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::EnvironmentData) == typeid (s))
          {
            if (n.name () == "Environment" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "Environment",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Environment",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        Environment (const ::mil::tatrc::physiology::datamodel::EnvironmentData& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::EnvironmentData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "Environment",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Environment",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::Environment (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

