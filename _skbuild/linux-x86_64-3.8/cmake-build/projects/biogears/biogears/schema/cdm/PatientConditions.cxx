// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PatientConditions.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientConditionData
        // 


        // ChronicAnemiaData
        // 

        const ChronicAnemiaData::ReductionFactor_type& ChronicAnemiaData::
        ReductionFactor () const
        {
          return this->ReductionFactor_.get ();
        }

        ChronicAnemiaData::ReductionFactor_type& ChronicAnemiaData::
        ReductionFactor ()
        {
          return this->ReductionFactor_.get ();
        }

        void ChronicAnemiaData::
        ReductionFactor (const ReductionFactor_type& x)
        {
          this->ReductionFactor_.set (x);
        }

        void ChronicAnemiaData::
        ReductionFactor (::std::unique_ptr< ReductionFactor_type > x)
        {
          this->ReductionFactor_.set (std::move (x));
        }


        // ChronicHeartFailureData
        // 


        // ChronicVentricularSystolicDysfunctionData
        // 


        // ChronicObstructivePulmonaryDiseaseData
        // 

        const ChronicObstructivePulmonaryDiseaseData::BronchitisSeverity_type& ChronicObstructivePulmonaryDiseaseData::
        BronchitisSeverity () const
        {
          return this->BronchitisSeverity_.get ();
        }

        ChronicObstructivePulmonaryDiseaseData::BronchitisSeverity_type& ChronicObstructivePulmonaryDiseaseData::
        BronchitisSeverity ()
        {
          return this->BronchitisSeverity_.get ();
        }

        void ChronicObstructivePulmonaryDiseaseData::
        BronchitisSeverity (const BronchitisSeverity_type& x)
        {
          this->BronchitisSeverity_.set (x);
        }

        void ChronicObstructivePulmonaryDiseaseData::
        BronchitisSeverity (::std::unique_ptr< BronchitisSeverity_type > x)
        {
          this->BronchitisSeverity_.set (std::move (x));
        }

        const ChronicObstructivePulmonaryDiseaseData::EmphysemaSeverity_type& ChronicObstructivePulmonaryDiseaseData::
        EmphysemaSeverity () const
        {
          return this->EmphysemaSeverity_.get ();
        }

        ChronicObstructivePulmonaryDiseaseData::EmphysemaSeverity_type& ChronicObstructivePulmonaryDiseaseData::
        EmphysemaSeverity ()
        {
          return this->EmphysemaSeverity_.get ();
        }

        void ChronicObstructivePulmonaryDiseaseData::
        EmphysemaSeverity (const EmphysemaSeverity_type& x)
        {
          this->EmphysemaSeverity_.set (x);
        }

        void ChronicObstructivePulmonaryDiseaseData::
        EmphysemaSeverity (::std::unique_ptr< EmphysemaSeverity_type > x)
        {
          this->EmphysemaSeverity_.set (std::move (x));
        }


        // ChronicPericardialEffusionData
        // 

        const ChronicPericardialEffusionData::AccumulatedVolume_type& ChronicPericardialEffusionData::
        AccumulatedVolume () const
        {
          return this->AccumulatedVolume_.get ();
        }

        ChronicPericardialEffusionData::AccumulatedVolume_type& ChronicPericardialEffusionData::
        AccumulatedVolume ()
        {
          return this->AccumulatedVolume_.get ();
        }

        void ChronicPericardialEffusionData::
        AccumulatedVolume (const AccumulatedVolume_type& x)
        {
          this->AccumulatedVolume_.set (x);
        }

        void ChronicPericardialEffusionData::
        AccumulatedVolume (::std::unique_ptr< AccumulatedVolume_type > x)
        {
          this->AccumulatedVolume_.set (std::move (x));
        }


        // ChronicRenalStenosisData
        // 

        const ChronicRenalStenosisData::LeftKidneySeverity_optional& ChronicRenalStenosisData::
        LeftKidneySeverity () const
        {
          return this->LeftKidneySeverity_;
        }

        ChronicRenalStenosisData::LeftKidneySeverity_optional& ChronicRenalStenosisData::
        LeftKidneySeverity ()
        {
          return this->LeftKidneySeverity_;
        }

        void ChronicRenalStenosisData::
        LeftKidneySeverity (const LeftKidneySeverity_type& x)
        {
          this->LeftKidneySeverity_.set (x);
        }

        void ChronicRenalStenosisData::
        LeftKidneySeverity (const LeftKidneySeverity_optional& x)
        {
          this->LeftKidneySeverity_ = x;
        }

        void ChronicRenalStenosisData::
        LeftKidneySeverity (::std::unique_ptr< LeftKidneySeverity_type > x)
        {
          this->LeftKidneySeverity_.set (std::move (x));
        }

        const ChronicRenalStenosisData::RightKidneySeverity_optional& ChronicRenalStenosisData::
        RightKidneySeverity () const
        {
          return this->RightKidneySeverity_;
        }

        ChronicRenalStenosisData::RightKidneySeverity_optional& ChronicRenalStenosisData::
        RightKidneySeverity ()
        {
          return this->RightKidneySeverity_;
        }

        void ChronicRenalStenosisData::
        RightKidneySeverity (const RightKidneySeverity_type& x)
        {
          this->RightKidneySeverity_.set (x);
        }

        void ChronicRenalStenosisData::
        RightKidneySeverity (const RightKidneySeverity_optional& x)
        {
          this->RightKidneySeverity_ = x;
        }

        void ChronicRenalStenosisData::
        RightKidneySeverity (::std::unique_ptr< RightKidneySeverity_type > x)
        {
          this->RightKidneySeverity_.set (std::move (x));
        }


        // DehydrationData
        // 

        const DehydrationData::DehydrationFraction_type& DehydrationData::
        DehydrationFraction () const
        {
          return this->DehydrationFraction_.get ();
        }

        DehydrationData::DehydrationFraction_type& DehydrationData::
        DehydrationFraction ()
        {
          return this->DehydrationFraction_.get ();
        }

        void DehydrationData::
        DehydrationFraction (const DehydrationFraction_type& x)
        {
          this->DehydrationFraction_.set (x);
        }

        void DehydrationData::
        DehydrationFraction (::std::unique_ptr< DehydrationFraction_type > x)
        {
          this->DehydrationFraction_.set (std::move (x));
        }


        // DiabetesType1Data
        // 

        const DiabetesType1Data::InsulinProductionSeverity_type& DiabetesType1Data::
        InsulinProductionSeverity () const
        {
          return this->InsulinProductionSeverity_.get ();
        }

        DiabetesType1Data::InsulinProductionSeverity_type& DiabetesType1Data::
        InsulinProductionSeverity ()
        {
          return this->InsulinProductionSeverity_.get ();
        }

        void DiabetesType1Data::
        InsulinProductionSeverity (const InsulinProductionSeverity_type& x)
        {
          this->InsulinProductionSeverity_.set (x);
        }

        void DiabetesType1Data::
        InsulinProductionSeverity (::std::unique_ptr< InsulinProductionSeverity_type > x)
        {
          this->InsulinProductionSeverity_.set (std::move (x));
        }


        // DiabetesType2Data
        // 

        const DiabetesType2Data::InsulinProductionSeverity_type& DiabetesType2Data::
        InsulinProductionSeverity () const
        {
          return this->InsulinProductionSeverity_.get ();
        }

        DiabetesType2Data::InsulinProductionSeverity_type& DiabetesType2Data::
        InsulinProductionSeverity ()
        {
          return this->InsulinProductionSeverity_.get ();
        }

        void DiabetesType2Data::
        InsulinProductionSeverity (const InsulinProductionSeverity_type& x)
        {
          this->InsulinProductionSeverity_.set (x);
        }

        void DiabetesType2Data::
        InsulinProductionSeverity (::std::unique_ptr< InsulinProductionSeverity_type > x)
        {
          this->InsulinProductionSeverity_.set (std::move (x));
        }

        const DiabetesType2Data::InsulinResistanceSeverity_type& DiabetesType2Data::
        InsulinResistanceSeverity () const
        {
          return this->InsulinResistanceSeverity_.get ();
        }

        DiabetesType2Data::InsulinResistanceSeverity_type& DiabetesType2Data::
        InsulinResistanceSeverity ()
        {
          return this->InsulinResistanceSeverity_.get ();
        }

        void DiabetesType2Data::
        InsulinResistanceSeverity (const InsulinResistanceSeverity_type& x)
        {
          this->InsulinResistanceSeverity_.set (x);
        }

        void DiabetesType2Data::
        InsulinResistanceSeverity (::std::unique_ptr< InsulinResistanceSeverity_type > x)
        {
          this->InsulinResistanceSeverity_.set (std::move (x));
        }


        // ImpairedAlveolarExchangeData
        // 

        const ImpairedAlveolarExchangeData::ImpairedSurfaceArea_optional& ImpairedAlveolarExchangeData::
        ImpairedSurfaceArea () const
        {
          return this->ImpairedSurfaceArea_;
        }

        ImpairedAlveolarExchangeData::ImpairedSurfaceArea_optional& ImpairedAlveolarExchangeData::
        ImpairedSurfaceArea ()
        {
          return this->ImpairedSurfaceArea_;
        }

        void ImpairedAlveolarExchangeData::
        ImpairedSurfaceArea (const ImpairedSurfaceArea_type& x)
        {
          this->ImpairedSurfaceArea_.set (x);
        }

        void ImpairedAlveolarExchangeData::
        ImpairedSurfaceArea (const ImpairedSurfaceArea_optional& x)
        {
          this->ImpairedSurfaceArea_ = x;
        }

        void ImpairedAlveolarExchangeData::
        ImpairedSurfaceArea (::std::unique_ptr< ImpairedSurfaceArea_type > x)
        {
          this->ImpairedSurfaceArea_.set (std::move (x));
        }

        const ImpairedAlveolarExchangeData::ImpairedFraction_optional& ImpairedAlveolarExchangeData::
        ImpairedFraction () const
        {
          return this->ImpairedFraction_;
        }

        ImpairedAlveolarExchangeData::ImpairedFraction_optional& ImpairedAlveolarExchangeData::
        ImpairedFraction ()
        {
          return this->ImpairedFraction_;
        }

        void ImpairedAlveolarExchangeData::
        ImpairedFraction (const ImpairedFraction_type& x)
        {
          this->ImpairedFraction_.set (x);
        }

        void ImpairedAlveolarExchangeData::
        ImpairedFraction (const ImpairedFraction_optional& x)
        {
          this->ImpairedFraction_ = x;
        }

        void ImpairedAlveolarExchangeData::
        ImpairedFraction (::std::unique_ptr< ImpairedFraction_type > x)
        {
          this->ImpairedFraction_.set (std::move (x));
        }


        // LobarPneumoniaData
        // 

        const LobarPneumoniaData::Severity_type& LobarPneumoniaData::
        Severity () const
        {
          return this->Severity_.get ();
        }

        LobarPneumoniaData::Severity_type& LobarPneumoniaData::
        Severity ()
        {
          return this->Severity_.get ();
        }

        void LobarPneumoniaData::
        Severity (const Severity_type& x)
        {
          this->Severity_.set (x);
        }

        void LobarPneumoniaData::
        Severity (::std::unique_ptr< Severity_type > x)
        {
          this->Severity_.set (std::move (x));
        }

        const LobarPneumoniaData::LeftLungAffected_type& LobarPneumoniaData::
        LeftLungAffected () const
        {
          return this->LeftLungAffected_.get ();
        }

        LobarPneumoniaData::LeftLungAffected_type& LobarPneumoniaData::
        LeftLungAffected ()
        {
          return this->LeftLungAffected_.get ();
        }

        void LobarPneumoniaData::
        LeftLungAffected (const LeftLungAffected_type& x)
        {
          this->LeftLungAffected_.set (x);
        }

        void LobarPneumoniaData::
        LeftLungAffected (::std::unique_ptr< LeftLungAffected_type > x)
        {
          this->LeftLungAffected_.set (std::move (x));
        }

        const LobarPneumoniaData::RightLungAffected_type& LobarPneumoniaData::
        RightLungAffected () const
        {
          return this->RightLungAffected_.get ();
        }

        LobarPneumoniaData::RightLungAffected_type& LobarPneumoniaData::
        RightLungAffected ()
        {
          return this->RightLungAffected_.get ();
        }

        void LobarPneumoniaData::
        RightLungAffected (const RightLungAffected_type& x)
        {
          this->RightLungAffected_.set (x);
        }

        void LobarPneumoniaData::
        RightLungAffected (::std::unique_ptr< RightLungAffected_type > x)
        {
          this->RightLungAffected_.set (std::move (x));
        }


        // StarvationData
        // 

        const StarvationData::TimeSinceMeal_type& StarvationData::
        TimeSinceMeal () const
        {
          return this->TimeSinceMeal_.get ();
        }

        StarvationData::TimeSinceMeal_type& StarvationData::
        TimeSinceMeal ()
        {
          return this->TimeSinceMeal_.get ();
        }

        void StarvationData::
        TimeSinceMeal (const TimeSinceMeal_type& x)
        {
          this->TimeSinceMeal_.set (x);
        }

        void StarvationData::
        TimeSinceMeal (::std::unique_ptr< TimeSinceMeal_type > x)
        {
          this->TimeSinceMeal_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientConditionData
        //

        PatientConditionData::
        PatientConditionData ()
        : ::mil::tatrc::physiology::datamodel::ConditionData ()
        {
        }

        PatientConditionData::
        PatientConditionData (const PatientConditionData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConditionData (x, f, c)
        {
        }

        PatientConditionData::
        PatientConditionData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ConditionData (e, f, c)
        {
        }

        PatientConditionData* PatientConditionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PatientConditionData (*this, f, c);
        }

        PatientConditionData::
        ~PatientConditionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PatientConditionData >
        _xsd_PatientConditionData_type_factory_init (
          "PatientConditionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicAnemiaData
        //

        ChronicAnemiaData::
        ChronicAnemiaData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          ReductionFactor_ (this)
        {
        }

        ChronicAnemiaData::
        ChronicAnemiaData (const ReductionFactor_type& ReductionFactor)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          ReductionFactor_ (ReductionFactor, this)
        {
        }

        ChronicAnemiaData::
        ChronicAnemiaData (::std::unique_ptr< ReductionFactor_type > ReductionFactor)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          ReductionFactor_ (std::move (ReductionFactor), this)
        {
        }

        ChronicAnemiaData::
        ChronicAnemiaData (const ChronicAnemiaData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          ReductionFactor_ (x.ReductionFactor_, f, this)
        {
        }

        ChronicAnemiaData::
        ChronicAnemiaData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          ReductionFactor_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChronicAnemiaData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ReductionFactor
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReductionFactor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReductionFactor_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ReductionFactor_.present ())
                {
                  ::std::unique_ptr< ReductionFactor_type > r (
                    dynamic_cast< ReductionFactor_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReductionFactor_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ReductionFactor_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ReductionFactor",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ChronicAnemiaData* ChronicAnemiaData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicAnemiaData (*this, f, c);
        }

        ChronicAnemiaData& ChronicAnemiaData::
        operator= (const ChronicAnemiaData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->ReductionFactor_ = x.ReductionFactor_;
          }

          return *this;
        }

        ChronicAnemiaData::
        ~ChronicAnemiaData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicAnemiaData >
        _xsd_ChronicAnemiaData_type_factory_init (
          "ChronicAnemiaData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicHeartFailureData
        //

        ChronicHeartFailureData::
        ChronicHeartFailureData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData ()
        {
        }

        ChronicHeartFailureData::
        ChronicHeartFailureData (const ChronicHeartFailureData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c)
        {
        }

        ChronicHeartFailureData::
        ChronicHeartFailureData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f, c)
        {
        }

        ChronicHeartFailureData* ChronicHeartFailureData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicHeartFailureData (*this, f, c);
        }

        ChronicHeartFailureData::
        ~ChronicHeartFailureData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicHeartFailureData >
        _xsd_ChronicHeartFailureData_type_factory_init (
          "ChronicHeartFailureData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicVentricularSystolicDysfunctionData
        //

        ChronicVentricularSystolicDysfunctionData::
        ChronicVentricularSystolicDysfunctionData ()
        : ::mil::tatrc::physiology::datamodel::ChronicHeartFailureData ()
        {
        }

        ChronicVentricularSystolicDysfunctionData::
        ChronicVentricularSystolicDysfunctionData (const ChronicVentricularSystolicDysfunctionData& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChronicHeartFailureData (x, f, c)
        {
        }

        ChronicVentricularSystolicDysfunctionData::
        ChronicVentricularSystolicDysfunctionData (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ChronicHeartFailureData (e, f, c)
        {
        }

        ChronicVentricularSystolicDysfunctionData* ChronicVentricularSystolicDysfunctionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicVentricularSystolicDysfunctionData (*this, f, c);
        }

        ChronicVentricularSystolicDysfunctionData::
        ~ChronicVentricularSystolicDysfunctionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicVentricularSystolicDysfunctionData >
        _xsd_ChronicVentricularSystolicDysfunctionData_type_factory_init (
          "ChronicVentricularSystolicDysfunctionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicObstructivePulmonaryDiseaseData
        //

        ChronicObstructivePulmonaryDiseaseData::
        ChronicObstructivePulmonaryDiseaseData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          BronchitisSeverity_ (this),
          EmphysemaSeverity_ (this)
        {
        }

        ChronicObstructivePulmonaryDiseaseData::
        ChronicObstructivePulmonaryDiseaseData (const BronchitisSeverity_type& BronchitisSeverity,
                                                const EmphysemaSeverity_type& EmphysemaSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          BronchitisSeverity_ (BronchitisSeverity, this),
          EmphysemaSeverity_ (EmphysemaSeverity, this)
        {
        }

        ChronicObstructivePulmonaryDiseaseData::
        ChronicObstructivePulmonaryDiseaseData (::std::unique_ptr< BronchitisSeverity_type > BronchitisSeverity,
                                                ::std::unique_ptr< EmphysemaSeverity_type > EmphysemaSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          BronchitisSeverity_ (std::move (BronchitisSeverity), this),
          EmphysemaSeverity_ (std::move (EmphysemaSeverity), this)
        {
        }

        ChronicObstructivePulmonaryDiseaseData::
        ChronicObstructivePulmonaryDiseaseData (const ChronicObstructivePulmonaryDiseaseData& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          BronchitisSeverity_ (x.BronchitisSeverity_, f, this),
          EmphysemaSeverity_ (x.EmphysemaSeverity_, f, this)
        {
        }

        ChronicObstructivePulmonaryDiseaseData::
        ChronicObstructivePulmonaryDiseaseData (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          BronchitisSeverity_ (this),
          EmphysemaSeverity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChronicObstructivePulmonaryDiseaseData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BronchitisSeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BronchitisSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BronchitisSeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BronchitisSeverity_.present ())
                {
                  ::std::unique_ptr< BronchitisSeverity_type > r (
                    dynamic_cast< BronchitisSeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BronchitisSeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EmphysemaSeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EmphysemaSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EmphysemaSeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!EmphysemaSeverity_.present ())
                {
                  ::std::unique_ptr< EmphysemaSeverity_type > r (
                    dynamic_cast< EmphysemaSeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EmphysemaSeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!BronchitisSeverity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BronchitisSeverity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!EmphysemaSeverity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EmphysemaSeverity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ChronicObstructivePulmonaryDiseaseData* ChronicObstructivePulmonaryDiseaseData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicObstructivePulmonaryDiseaseData (*this, f, c);
        }

        ChronicObstructivePulmonaryDiseaseData& ChronicObstructivePulmonaryDiseaseData::
        operator= (const ChronicObstructivePulmonaryDiseaseData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->BronchitisSeverity_ = x.BronchitisSeverity_;
            this->EmphysemaSeverity_ = x.EmphysemaSeverity_;
          }

          return *this;
        }

        ChronicObstructivePulmonaryDiseaseData::
        ~ChronicObstructivePulmonaryDiseaseData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicObstructivePulmonaryDiseaseData >
        _xsd_ChronicObstructivePulmonaryDiseaseData_type_factory_init (
          "ChronicObstructivePulmonaryDiseaseData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicPericardialEffusionData
        //

        ChronicPericardialEffusionData::
        ChronicPericardialEffusionData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          AccumulatedVolume_ (this)
        {
        }

        ChronicPericardialEffusionData::
        ChronicPericardialEffusionData (const AccumulatedVolume_type& AccumulatedVolume)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          AccumulatedVolume_ (AccumulatedVolume, this)
        {
        }

        ChronicPericardialEffusionData::
        ChronicPericardialEffusionData (::std::unique_ptr< AccumulatedVolume_type > AccumulatedVolume)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          AccumulatedVolume_ (std::move (AccumulatedVolume), this)
        {
        }

        ChronicPericardialEffusionData::
        ChronicPericardialEffusionData (const ChronicPericardialEffusionData& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          AccumulatedVolume_ (x.AccumulatedVolume_, f, this)
        {
        }

        ChronicPericardialEffusionData::
        ChronicPericardialEffusionData (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          AccumulatedVolume_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChronicPericardialEffusionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AccumulatedVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AccumulatedVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AccumulatedVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AccumulatedVolume_.present ())
                {
                  ::std::unique_ptr< AccumulatedVolume_type > r (
                    dynamic_cast< AccumulatedVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AccumulatedVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!AccumulatedVolume_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AccumulatedVolume",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ChronicPericardialEffusionData* ChronicPericardialEffusionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicPericardialEffusionData (*this, f, c);
        }

        ChronicPericardialEffusionData& ChronicPericardialEffusionData::
        operator= (const ChronicPericardialEffusionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->AccumulatedVolume_ = x.AccumulatedVolume_;
          }

          return *this;
        }

        ChronicPericardialEffusionData::
        ~ChronicPericardialEffusionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicPericardialEffusionData >
        _xsd_ChronicPericardialEffusionData_type_factory_init (
          "ChronicPericardialEffusionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ChronicRenalStenosisData
        //

        ChronicRenalStenosisData::
        ChronicRenalStenosisData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          LeftKidneySeverity_ (this),
          RightKidneySeverity_ (this)
        {
        }

        ChronicRenalStenosisData::
        ChronicRenalStenosisData (const ChronicRenalStenosisData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          LeftKidneySeverity_ (x.LeftKidneySeverity_, f, this),
          RightKidneySeverity_ (x.RightKidneySeverity_, f, this)
        {
        }

        ChronicRenalStenosisData::
        ChronicRenalStenosisData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          LeftKidneySeverity_ (this),
          RightKidneySeverity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ChronicRenalStenosisData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LeftKidneySeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftKidneySeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftKidneySeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftKidneySeverity_)
                {
                  ::std::unique_ptr< LeftKidneySeverity_type > r (
                    dynamic_cast< LeftKidneySeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftKidneySeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightKidneySeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightKidneySeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightKidneySeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightKidneySeverity_)
                {
                  ::std::unique_ptr< RightKidneySeverity_type > r (
                    dynamic_cast< RightKidneySeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightKidneySeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ChronicRenalStenosisData* ChronicRenalStenosisData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ChronicRenalStenosisData (*this, f, c);
        }

        ChronicRenalStenosisData& ChronicRenalStenosisData::
        operator= (const ChronicRenalStenosisData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->LeftKidneySeverity_ = x.LeftKidneySeverity_;
            this->RightKidneySeverity_ = x.RightKidneySeverity_;
          }

          return *this;
        }

        ChronicRenalStenosisData::
        ~ChronicRenalStenosisData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChronicRenalStenosisData >
        _xsd_ChronicRenalStenosisData_type_factory_init (
          "ChronicRenalStenosisData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DehydrationData
        //

        DehydrationData::
        DehydrationData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          DehydrationFraction_ (this)
        {
        }

        DehydrationData::
        DehydrationData (const DehydrationFraction_type& DehydrationFraction)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          DehydrationFraction_ (DehydrationFraction, this)
        {
        }

        DehydrationData::
        DehydrationData (::std::unique_ptr< DehydrationFraction_type > DehydrationFraction)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          DehydrationFraction_ (std::move (DehydrationFraction), this)
        {
        }

        DehydrationData::
        DehydrationData (const DehydrationData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          DehydrationFraction_ (x.DehydrationFraction_, f, this)
        {
        }

        DehydrationData::
        DehydrationData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          DehydrationFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void DehydrationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // DehydrationFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DehydrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DehydrationFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!DehydrationFraction_.present ())
                {
                  ::std::unique_ptr< DehydrationFraction_type > r (
                    dynamic_cast< DehydrationFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DehydrationFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!DehydrationFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DehydrationFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        DehydrationData* DehydrationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DehydrationData (*this, f, c);
        }

        DehydrationData& DehydrationData::
        operator= (const DehydrationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->DehydrationFraction_ = x.DehydrationFraction_;
          }

          return *this;
        }

        DehydrationData::
        ~DehydrationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DehydrationData >
        _xsd_DehydrationData_type_factory_init (
          "DehydrationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DiabetesType1Data
        //

        DiabetesType1Data::
        DiabetesType1Data ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (this)
        {
        }

        DiabetesType1Data::
        DiabetesType1Data (const InsulinProductionSeverity_type& InsulinProductionSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (InsulinProductionSeverity, this)
        {
        }

        DiabetesType1Data::
        DiabetesType1Data (::std::unique_ptr< InsulinProductionSeverity_type > InsulinProductionSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (std::move (InsulinProductionSeverity), this)
        {
        }

        DiabetesType1Data::
        DiabetesType1Data (const DiabetesType1Data& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          InsulinProductionSeverity_ (x.InsulinProductionSeverity_, f, this)
        {
        }

        DiabetesType1Data::
        DiabetesType1Data (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          InsulinProductionSeverity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void DiabetesType1Data::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InsulinProductionSeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InsulinProductionSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InsulinProductionSeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InsulinProductionSeverity_.present ())
                {
                  ::std::unique_ptr< InsulinProductionSeverity_type > r (
                    dynamic_cast< InsulinProductionSeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InsulinProductionSeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!InsulinProductionSeverity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InsulinProductionSeverity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        DiabetesType1Data* DiabetesType1Data::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DiabetesType1Data (*this, f, c);
        }

        DiabetesType1Data& DiabetesType1Data::
        operator= (const DiabetesType1Data& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->InsulinProductionSeverity_ = x.InsulinProductionSeverity_;
          }

          return *this;
        }

        DiabetesType1Data::
        ~DiabetesType1Data ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DiabetesType1Data >
        _xsd_DiabetesType1Data_type_factory_init (
          "DiabetesType1Data",
          "uri:/mil/tatrc/physiology/datamodel");

        // DiabetesType2Data
        //

        DiabetesType2Data::
        DiabetesType2Data ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (this),
          InsulinResistanceSeverity_ (this)
        {
        }

        DiabetesType2Data::
        DiabetesType2Data (const InsulinProductionSeverity_type& InsulinProductionSeverity,
                           const InsulinResistanceSeverity_type& InsulinResistanceSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (InsulinProductionSeverity, this),
          InsulinResistanceSeverity_ (InsulinResistanceSeverity, this)
        {
        }

        DiabetesType2Data::
        DiabetesType2Data (::std::unique_ptr< InsulinProductionSeverity_type > InsulinProductionSeverity,
                           ::std::unique_ptr< InsulinResistanceSeverity_type > InsulinResistanceSeverity)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          InsulinProductionSeverity_ (std::move (InsulinProductionSeverity), this),
          InsulinResistanceSeverity_ (std::move (InsulinResistanceSeverity), this)
        {
        }

        DiabetesType2Data::
        DiabetesType2Data (const DiabetesType2Data& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          InsulinProductionSeverity_ (x.InsulinProductionSeverity_, f, this),
          InsulinResistanceSeverity_ (x.InsulinResistanceSeverity_, f, this)
        {
        }

        DiabetesType2Data::
        DiabetesType2Data (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          InsulinProductionSeverity_ (this),
          InsulinResistanceSeverity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void DiabetesType2Data::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InsulinProductionSeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InsulinProductionSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InsulinProductionSeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InsulinProductionSeverity_.present ())
                {
                  ::std::unique_ptr< InsulinProductionSeverity_type > r (
                    dynamic_cast< InsulinProductionSeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InsulinProductionSeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InsulinResistanceSeverity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InsulinResistanceSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InsulinResistanceSeverity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!InsulinResistanceSeverity_.present ())
                {
                  ::std::unique_ptr< InsulinResistanceSeverity_type > r (
                    dynamic_cast< InsulinResistanceSeverity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InsulinResistanceSeverity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!InsulinProductionSeverity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InsulinProductionSeverity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InsulinResistanceSeverity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InsulinResistanceSeverity",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        DiabetesType2Data* DiabetesType2Data::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DiabetesType2Data (*this, f, c);
        }

        DiabetesType2Data& DiabetesType2Data::
        operator= (const DiabetesType2Data& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->InsulinProductionSeverity_ = x.InsulinProductionSeverity_;
            this->InsulinResistanceSeverity_ = x.InsulinResistanceSeverity_;
          }

          return *this;
        }

        DiabetesType2Data::
        ~DiabetesType2Data ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DiabetesType2Data >
        _xsd_DiabetesType2Data_type_factory_init (
          "DiabetesType2Data",
          "uri:/mil/tatrc/physiology/datamodel");

        // ImpairedAlveolarExchangeData
        //

        ImpairedAlveolarExchangeData::
        ImpairedAlveolarExchangeData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          ImpairedSurfaceArea_ (this),
          ImpairedFraction_ (this)
        {
        }

        ImpairedAlveolarExchangeData::
        ImpairedAlveolarExchangeData (const ImpairedAlveolarExchangeData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          ImpairedSurfaceArea_ (x.ImpairedSurfaceArea_, f, this),
          ImpairedFraction_ (x.ImpairedFraction_, f, this)
        {
        }

        ImpairedAlveolarExchangeData::
        ImpairedAlveolarExchangeData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          ImpairedSurfaceArea_ (this),
          ImpairedFraction_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ImpairedAlveolarExchangeData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ImpairedSurfaceArea
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ImpairedSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ImpairedSurfaceArea_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ImpairedSurfaceArea_)
                {
                  ::std::unique_ptr< ImpairedSurfaceArea_type > r (
                    dynamic_cast< ImpairedSurfaceArea_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ImpairedSurfaceArea_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ImpairedFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ImpairedFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ImpairedFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ImpairedFraction_)
                {
                  ::std::unique_ptr< ImpairedFraction_type > r (
                    dynamic_cast< ImpairedFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ImpairedFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ImpairedAlveolarExchangeData* ImpairedAlveolarExchangeData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ImpairedAlveolarExchangeData (*this, f, c);
        }

        ImpairedAlveolarExchangeData& ImpairedAlveolarExchangeData::
        operator= (const ImpairedAlveolarExchangeData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->ImpairedSurfaceArea_ = x.ImpairedSurfaceArea_;
            this->ImpairedFraction_ = x.ImpairedFraction_;
          }

          return *this;
        }

        ImpairedAlveolarExchangeData::
        ~ImpairedAlveolarExchangeData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ImpairedAlveolarExchangeData >
        _xsd_ImpairedAlveolarExchangeData_type_factory_init (
          "ImpairedAlveolarExchangeData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LobarPneumoniaData
        //

        LobarPneumoniaData::
        LobarPneumoniaData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          Severity_ (this),
          LeftLungAffected_ (this),
          RightLungAffected_ (this)
        {
        }

        LobarPneumoniaData::
        LobarPneumoniaData (const Severity_type& Severity,
                            const LeftLungAffected_type& LeftLungAffected,
                            const RightLungAffected_type& RightLungAffected)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          Severity_ (Severity, this),
          LeftLungAffected_ (LeftLungAffected, this),
          RightLungAffected_ (RightLungAffected, this)
        {
        }

        LobarPneumoniaData::
        LobarPneumoniaData (::std::unique_ptr< Severity_type > Severity,
                            ::std::unique_ptr< LeftLungAffected_type > LeftLungAffected,
                            ::std::unique_ptr< RightLungAffected_type > RightLungAffected)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          Severity_ (std::move (Severity), this),
          LeftLungAffected_ (std::move (LeftLungAffected), this),
          RightLungAffected_ (std::move (RightLungAffected), this)
        {
        }

        LobarPneumoniaData::
        LobarPneumoniaData (const LobarPneumoniaData& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          Severity_ (x.Severity_, f, this),
          LeftLungAffected_ (x.LeftLungAffected_, f, this),
          RightLungAffected_ (x.RightLungAffected_, f, this)
        {
        }

        LobarPneumoniaData::
        LobarPneumoniaData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          Severity_ (this),
          LeftLungAffected_ (this),
          RightLungAffected_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void LobarPneumoniaData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Severity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Severity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Severity_.present ())
                {
                  ::std::unique_ptr< Severity_type > r (
                    dynamic_cast< Severity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Severity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftLungAffected
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftLungAffected",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftLungAffected_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LeftLungAffected_.present ())
                {
                  ::std::unique_ptr< LeftLungAffected_type > r (
                    dynamic_cast< LeftLungAffected_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftLungAffected_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightLungAffected
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightLungAffected",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightLungAffected_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RightLungAffected_.present ())
                {
                  ::std::unique_ptr< RightLungAffected_type > r (
                    dynamic_cast< RightLungAffected_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightLungAffected_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Severity_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Severity",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LeftLungAffected_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LeftLungAffected",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RightLungAffected_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RightLungAffected",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        LobarPneumoniaData* LobarPneumoniaData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LobarPneumoniaData (*this, f, c);
        }

        LobarPneumoniaData& LobarPneumoniaData::
        operator= (const LobarPneumoniaData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->Severity_ = x.Severity_;
            this->LeftLungAffected_ = x.LeftLungAffected_;
            this->RightLungAffected_ = x.RightLungAffected_;
          }

          return *this;
        }

        LobarPneumoniaData::
        ~LobarPneumoniaData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LobarPneumoniaData >
        _xsd_LobarPneumoniaData_type_factory_init (
          "LobarPneumoniaData",
          "uri:/mil/tatrc/physiology/datamodel");

        // StarvationData
        //

        StarvationData::
        StarvationData ()
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          TimeSinceMeal_ (this)
        {
        }

        StarvationData::
        StarvationData (const TimeSinceMeal_type& TimeSinceMeal)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          TimeSinceMeal_ (TimeSinceMeal, this)
        {
        }

        StarvationData::
        StarvationData (::std::unique_ptr< TimeSinceMeal_type > TimeSinceMeal)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (),
          TimeSinceMeal_ (std::move (TimeSinceMeal), this)
        {
        }

        StarvationData::
        StarvationData (const StarvationData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (x, f, c),
          TimeSinceMeal_ (x.TimeSinceMeal_, f, this)
        {
        }

        StarvationData::
        StarvationData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientConditionData (e, f | ::xml_schema::flags::base, c),
          TimeSinceMeal_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void StarvationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientConditionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TimeSinceMeal
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TimeSinceMeal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TimeSinceMeal_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TimeSinceMeal_.present ())
                {
                  ::std::unique_ptr< TimeSinceMeal_type > r (
                    dynamic_cast< TimeSinceMeal_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TimeSinceMeal_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!TimeSinceMeal_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TimeSinceMeal",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        StarvationData* StarvationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class StarvationData (*this, f, c);
        }

        StarvationData& StarvationData::
        operator= (const StarvationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientConditionData& > (*this) = x;
            this->TimeSinceMeal_ = x.TimeSinceMeal_;
          }

          return *this;
        }

        StarvationData::
        ~StarvationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, StarvationData >
        _xsd_StarvationData_type_factory_init (
          "StarvationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PatientConditionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ConditionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PatientConditionData >
        _xsd_PatientConditionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicAnemiaData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ReductionFactor: ";
            om.insert (o, i.ReductionFactor ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicAnemiaData >
        _xsd_ChronicAnemiaData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicHeartFailureData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicHeartFailureData >
        _xsd_ChronicHeartFailureData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicVentricularSystolicDysfunctionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ChronicHeartFailureData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicVentricularSystolicDysfunctionData >
        _xsd_ChronicVentricularSystolicDysfunctionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicObstructivePulmonaryDiseaseData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BronchitisSeverity: ";
            om.insert (o, i.BronchitisSeverity ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "EmphysemaSeverity: ";
            om.insert (o, i.EmphysemaSeverity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicObstructivePulmonaryDiseaseData >
        _xsd_ChronicObstructivePulmonaryDiseaseData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicPericardialEffusionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AccumulatedVolume: ";
            om.insert (o, i.AccumulatedVolume ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicPericardialEffusionData >
        _xsd_ChronicPericardialEffusionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ChronicRenalStenosisData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftKidneySeverity ())
            {
              o << ::std::endl << "LeftKidneySeverity: ";
              om.insert (o, *i.LeftKidneySeverity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightKidneySeverity ())
            {
              o << ::std::endl << "RightKidneySeverity: ";
              om.insert (o, *i.RightKidneySeverity ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ChronicRenalStenosisData >
        _xsd_ChronicRenalStenosisData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DehydrationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "DehydrationFraction: ";
            om.insert (o, i.DehydrationFraction ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DehydrationData >
        _xsd_DehydrationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DiabetesType1Data& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InsulinProductionSeverity: ";
            om.insert (o, i.InsulinProductionSeverity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DiabetesType1Data >
        _xsd_DiabetesType1Data_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DiabetesType2Data& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InsulinProductionSeverity: ";
            om.insert (o, i.InsulinProductionSeverity ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "InsulinResistanceSeverity: ";
            om.insert (o, i.InsulinResistanceSeverity ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DiabetesType2Data >
        _xsd_DiabetesType2Data_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ImpairedAlveolarExchangeData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ImpairedSurfaceArea ())
            {
              o << ::std::endl << "ImpairedSurfaceArea: ";
              om.insert (o, *i.ImpairedSurfaceArea ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ImpairedFraction ())
            {
              o << ::std::endl << "ImpairedFraction: ";
              om.insert (o, *i.ImpairedFraction ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ImpairedAlveolarExchangeData >
        _xsd_ImpairedAlveolarExchangeData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LobarPneumoniaData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Severity: ";
            om.insert (o, i.Severity ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LeftLungAffected: ";
            om.insert (o, i.LeftLungAffected ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RightLungAffected: ";
            om.insert (o, i.RightLungAffected ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LobarPneumoniaData >
        _xsd_LobarPneumoniaData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const StarvationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TimeSinceMeal: ";
            om.insert (o, i.TimeSinceMeal ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StarvationData >
        _xsd_StarvationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PatientConditionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ConditionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PatientConditionData >
        _xsd_PatientConditionData_type_serializer_init (
          "PatientConditionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicAnemiaData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // ReductionFactor
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChronicAnemiaData::ReductionFactor_type& x (i.ReductionFactor ());
            if (typeid (ChronicAnemiaData::ReductionFactor_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ReductionFactor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ReductionFactor",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicAnemiaData >
        _xsd_ChronicAnemiaData_type_serializer_init (
          "ChronicAnemiaData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicHeartFailureData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicHeartFailureData >
        _xsd_ChronicHeartFailureData_type_serializer_init (
          "ChronicHeartFailureData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicVentricularSystolicDysfunctionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ChronicHeartFailureData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicVentricularSystolicDysfunctionData >
        _xsd_ChronicVentricularSystolicDysfunctionData_type_serializer_init (
          "ChronicVentricularSystolicDysfunctionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicObstructivePulmonaryDiseaseData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // BronchitisSeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChronicObstructivePulmonaryDiseaseData::BronchitisSeverity_type& x (i.BronchitisSeverity ());
            if (typeid (ChronicObstructivePulmonaryDiseaseData::BronchitisSeverity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BronchitisSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BronchitisSeverity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // EmphysemaSeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChronicObstructivePulmonaryDiseaseData::EmphysemaSeverity_type& x (i.EmphysemaSeverity ());
            if (typeid (ChronicObstructivePulmonaryDiseaseData::EmphysemaSeverity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "EmphysemaSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "EmphysemaSeverity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicObstructivePulmonaryDiseaseData >
        _xsd_ChronicObstructivePulmonaryDiseaseData_type_serializer_init (
          "ChronicObstructivePulmonaryDiseaseData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicPericardialEffusionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // AccumulatedVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ChronicPericardialEffusionData::AccumulatedVolume_type& x (i.AccumulatedVolume ());
            if (typeid (ChronicPericardialEffusionData::AccumulatedVolume_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AccumulatedVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AccumulatedVolume",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicPericardialEffusionData >
        _xsd_ChronicPericardialEffusionData_type_serializer_init (
          "ChronicPericardialEffusionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ChronicRenalStenosisData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // LeftKidneySeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftKidneySeverity ())
            {
              const ChronicRenalStenosisData::LeftKidneySeverity_type& x (*i.LeftKidneySeverity ());
              if (typeid (ChronicRenalStenosisData::LeftKidneySeverity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftKidneySeverity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftKidneySeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightKidneySeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightKidneySeverity ())
            {
              const ChronicRenalStenosisData::RightKidneySeverity_type& x (*i.RightKidneySeverity ());
              if (typeid (ChronicRenalStenosisData::RightKidneySeverity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightKidneySeverity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightKidneySeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChronicRenalStenosisData >
        _xsd_ChronicRenalStenosisData_type_serializer_init (
          "ChronicRenalStenosisData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const DehydrationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // DehydrationFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DehydrationData::DehydrationFraction_type& x (i.DehydrationFraction ());
            if (typeid (DehydrationData::DehydrationFraction_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "DehydrationFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "DehydrationFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DehydrationData >
        _xsd_DehydrationData_type_serializer_init (
          "DehydrationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const DiabetesType1Data& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // InsulinProductionSeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DiabetesType1Data::InsulinProductionSeverity_type& x (i.InsulinProductionSeverity ());
            if (typeid (DiabetesType1Data::InsulinProductionSeverity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InsulinProductionSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InsulinProductionSeverity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DiabetesType1Data >
        _xsd_DiabetesType1Data_type_serializer_init (
          "DiabetesType1Data",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const DiabetesType2Data& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // InsulinProductionSeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DiabetesType2Data::InsulinProductionSeverity_type& x (i.InsulinProductionSeverity ());
            if (typeid (DiabetesType2Data::InsulinProductionSeverity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InsulinProductionSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InsulinProductionSeverity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // InsulinResistanceSeverity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const DiabetesType2Data::InsulinResistanceSeverity_type& x (i.InsulinResistanceSeverity ());
            if (typeid (DiabetesType2Data::InsulinResistanceSeverity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "InsulinResistanceSeverity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "InsulinResistanceSeverity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DiabetesType2Data >
        _xsd_DiabetesType2Data_type_serializer_init (
          "DiabetesType2Data",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ImpairedAlveolarExchangeData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // ImpairedSurfaceArea
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ImpairedSurfaceArea ())
            {
              const ImpairedAlveolarExchangeData::ImpairedSurfaceArea_type& x (*i.ImpairedSurfaceArea ());
              if (typeid (ImpairedAlveolarExchangeData::ImpairedSurfaceArea_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ImpairedSurfaceArea",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ImpairedSurfaceArea",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ImpairedFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ImpairedFraction ())
            {
              const ImpairedAlveolarExchangeData::ImpairedFraction_type& x (*i.ImpairedFraction ());
              if (typeid (ImpairedAlveolarExchangeData::ImpairedFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ImpairedFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ImpairedFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ImpairedAlveolarExchangeData >
        _xsd_ImpairedAlveolarExchangeData_type_serializer_init (
          "ImpairedAlveolarExchangeData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LobarPneumoniaData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // Severity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const LobarPneumoniaData::Severity_type& x (i.Severity ());
            if (typeid (LobarPneumoniaData::Severity_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Severity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Severity",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LeftLungAffected
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const LobarPneumoniaData::LeftLungAffected_type& x (i.LeftLungAffected ());
            if (typeid (LobarPneumoniaData::LeftLungAffected_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LeftLungAffected",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LeftLungAffected",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RightLungAffected
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const LobarPneumoniaData::RightLungAffected_type& x (i.RightLungAffected ());
            if (typeid (LobarPneumoniaData::RightLungAffected_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RightLungAffected",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RightLungAffected",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LobarPneumoniaData >
        _xsd_LobarPneumoniaData_type_serializer_init (
          "LobarPneumoniaData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const StarvationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientConditionData& > (i);

          // TimeSinceMeal
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const StarvationData::TimeSinceMeal_type& x (i.TimeSinceMeal ());
            if (typeid (StarvationData::TimeSinceMeal_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TimeSinceMeal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TimeSinceMeal",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StarvationData >
        _xsd_StarvationData_type_serializer_init (
          "StarvationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

