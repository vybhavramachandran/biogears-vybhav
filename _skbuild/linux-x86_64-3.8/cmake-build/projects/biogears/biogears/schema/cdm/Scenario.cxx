// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Scenario.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ConditionData
        // 

        const ConditionData::Comment_optional& ConditionData::
        Comment () const
        {
          return this->Comment_;
        }

        ConditionData::Comment_optional& ConditionData::
        Comment ()
        {
          return this->Comment_;
        }

        void ConditionData::
        Comment (const Comment_type& x)
        {
          this->Comment_.set (x);
        }

        void ConditionData::
        Comment (const Comment_optional& x)
        {
          this->Comment_ = x;
        }

        void ConditionData::
        Comment (::std::unique_ptr< Comment_type > x)
        {
          this->Comment_.set (std::move (x));
        }


        // ConditionListData
        // 

        const ConditionListData::Condition_sequence& ConditionListData::
        Condition () const
        {
          return this->Condition_;
        }

        ConditionListData::Condition_sequence& ConditionListData::
        Condition ()
        {
          return this->Condition_;
        }

        void ConditionListData::
        Condition (const Condition_sequence& s)
        {
          this->Condition_ = s;
        }


        // ActionData
        // 

        const ActionData::Comment_optional& ActionData::
        Comment () const
        {
          return this->Comment_;
        }

        ActionData::Comment_optional& ActionData::
        Comment ()
        {
          return this->Comment_;
        }

        void ActionData::
        Comment (const Comment_type& x)
        {
          this->Comment_.set (x);
        }

        void ActionData::
        Comment (const Comment_optional& x)
        {
          this->Comment_ = x;
        }

        void ActionData::
        Comment (::std::unique_ptr< Comment_type > x)
        {
          this->Comment_.set (std::move (x));
        }

        const ActionData::Occurs_optional& ActionData::
        Occurs () const
        {
          return this->Occurs_;
        }

        ActionData::Occurs_optional& ActionData::
        Occurs ()
        {
          return this->Occurs_;
        }

        void ActionData::
        Occurs (const Occurs_type& x)
        {
          this->Occurs_.set (x);
        }

        void ActionData::
        Occurs (const Occurs_optional& x)
        {
          this->Occurs_ = x;
        }

        const ActionData::Duration_optional& ActionData::
        Duration () const
        {
          return this->Duration_;
        }

        ActionData::Duration_optional& ActionData::
        Duration ()
        {
          return this->Duration_;
        }

        void ActionData::
        Duration (const Duration_type& x)
        {
          this->Duration_.set (x);
        }

        void ActionData::
        Duration (const Duration_optional& x)
        {
          this->Duration_ = x;
        }


        // ActionListData
        // 

        const ActionListData::Action_sequence& ActionListData::
        Action () const
        {
          return this->Action_;
        }

        ActionListData::Action_sequence& ActionListData::
        Action ()
        {
          return this->Action_;
        }

        void ActionListData::
        Action (const Action_sequence& s)
        {
          this->Action_ = s;
        }


        // DataRequestData
        // 

        const DataRequestData::Name_type& DataRequestData::
        Name () const
        {
          return this->Name_.get ();
        }

        DataRequestData::Name_type& DataRequestData::
        Name ()
        {
          return this->Name_.get ();
        }

        void DataRequestData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void DataRequestData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const DataRequestData::Unit_optional& DataRequestData::
        Unit () const
        {
          return this->Unit_;
        }

        DataRequestData::Unit_optional& DataRequestData::
        Unit ()
        {
          return this->Unit_;
        }

        void DataRequestData::
        Unit (const Unit_type& x)
        {
          this->Unit_.set (x);
        }

        void DataRequestData::
        Unit (const Unit_optional& x)
        {
          this->Unit_ = x;
        }

        void DataRequestData::
        Unit (::std::unique_ptr< Unit_type > x)
        {
          this->Unit_.set (std::move (x));
        }


        // PatientDataRequestData
        // 


        // PhysiologyDataRequestData
        // 


        // EnvironmentDataRequestData
        // 


        // EquipmentDataRequestData
        // 

        const EquipmentDataRequestData::Type_type& EquipmentDataRequestData::
        Type () const
        {
          return this->Type_.get ();
        }

        EquipmentDataRequestData::Type_type& EquipmentDataRequestData::
        Type ()
        {
          return this->Type_.get ();
        }

        void EquipmentDataRequestData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void EquipmentDataRequestData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }


        // CompartmentDataRequestData
        // 

        const CompartmentDataRequestData::Compartment_type& CompartmentDataRequestData::
        Compartment () const
        {
          return this->Compartment_.get ();
        }

        CompartmentDataRequestData::Compartment_type& CompartmentDataRequestData::
        Compartment ()
        {
          return this->Compartment_.get ();
        }

        void CompartmentDataRequestData::
        Compartment (const Compartment_type& x)
        {
          this->Compartment_.set (x);
        }

        void CompartmentDataRequestData::
        Compartment (::std::unique_ptr< Compartment_type > x)
        {
          this->Compartment_.set (std::move (x));
        }


        // CompartmentSubstanceDataRequestData
        // 

        const CompartmentSubstanceDataRequestData::Substance_optional& CompartmentSubstanceDataRequestData::
        Substance () const
        {
          return this->Substance_;
        }

        CompartmentSubstanceDataRequestData::Substance_optional& CompartmentSubstanceDataRequestData::
        Substance ()
        {
          return this->Substance_;
        }

        void CompartmentSubstanceDataRequestData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void CompartmentSubstanceDataRequestData::
        Substance (const Substance_optional& x)
        {
          this->Substance_ = x;
        }

        void CompartmentSubstanceDataRequestData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }


        // GasCompartmentDataRequestData
        // 


        // LiquidCompartmentDataRequestData
        // 


        // ThermalCompartmentDataRequestData
        // 


        // TissueCompartmentDataRequestData
        // 


        // SubstanceDataRequestData
        // 

        const SubstanceDataRequestData::Substance_type& SubstanceDataRequestData::
        Substance () const
        {
          return this->Substance_.get ();
        }

        SubstanceDataRequestData::Substance_type& SubstanceDataRequestData::
        Substance ()
        {
          return this->Substance_.get ();
        }

        void SubstanceDataRequestData::
        Substance (const Substance_type& x)
        {
          this->Substance_.set (x);
        }

        void SubstanceDataRequestData::
        Substance (::std::unique_ptr< Substance_type > x)
        {
          this->Substance_.set (std::move (x));
        }

        const SubstanceDataRequestData::Compartment_optional& SubstanceDataRequestData::
        Compartment () const
        {
          return this->Compartment_;
        }

        SubstanceDataRequestData::Compartment_optional& SubstanceDataRequestData::
        Compartment ()
        {
          return this->Compartment_;
        }

        void SubstanceDataRequestData::
        Compartment (const Compartment_type& x)
        {
          this->Compartment_.set (x);
        }

        void SubstanceDataRequestData::
        Compartment (const Compartment_optional& x)
        {
          this->Compartment_ = x;
        }

        void SubstanceDataRequestData::
        Compartment (::std::unique_ptr< Compartment_type > x)
        {
          this->Compartment_.set (std::move (x));
        }


        // DataRequestsData
        // 

        const DataRequestsData::DefaultDecimalFormatting_optional& DataRequestsData::
        DefaultDecimalFormatting () const
        {
          return this->DefaultDecimalFormatting_;
        }

        DataRequestsData::DefaultDecimalFormatting_optional& DataRequestsData::
        DefaultDecimalFormatting ()
        {
          return this->DefaultDecimalFormatting_;
        }

        void DataRequestsData::
        DefaultDecimalFormatting (const DefaultDecimalFormatting_type& x)
        {
          this->DefaultDecimalFormatting_.set (x);
        }

        void DataRequestsData::
        DefaultDecimalFormatting (const DefaultDecimalFormatting_optional& x)
        {
          this->DefaultDecimalFormatting_ = x;
        }

        void DataRequestsData::
        DefaultDecimalFormatting (::std::unique_ptr< DefaultDecimalFormatting_type > x)
        {
          this->DefaultDecimalFormatting_.set (std::move (x));
        }

        const DataRequestsData::OverrideDecimalFormatting_optional& DataRequestsData::
        OverrideDecimalFormatting () const
        {
          return this->OverrideDecimalFormatting_;
        }

        DataRequestsData::OverrideDecimalFormatting_optional& DataRequestsData::
        OverrideDecimalFormatting ()
        {
          return this->OverrideDecimalFormatting_;
        }

        void DataRequestsData::
        OverrideDecimalFormatting (const OverrideDecimalFormatting_type& x)
        {
          this->OverrideDecimalFormatting_.set (x);
        }

        void DataRequestsData::
        OverrideDecimalFormatting (const OverrideDecimalFormatting_optional& x)
        {
          this->OverrideDecimalFormatting_ = x;
        }

        void DataRequestsData::
        OverrideDecimalFormatting (::std::unique_ptr< OverrideDecimalFormatting_type > x)
        {
          this->OverrideDecimalFormatting_.set (std::move (x));
        }

        const DataRequestsData::DataRequest_sequence& DataRequestsData::
        DataRequest () const
        {
          return this->DataRequest_;
        }

        DataRequestsData::DataRequest_sequence& DataRequestsData::
        DataRequest ()
        {
          return this->DataRequest_;
        }

        void DataRequestsData::
        DataRequest (const DataRequest_sequence& s)
        {
          this->DataRequest_ = s;
        }

        const DataRequestsData::Filename_optional& DataRequestsData::
        Filename () const
        {
          return this->Filename_;
        }

        DataRequestsData::Filename_optional& DataRequestsData::
        Filename ()
        {
          return this->Filename_;
        }

        void DataRequestsData::
        Filename (const Filename_type& x)
        {
          this->Filename_.set (x);
        }

        void DataRequestsData::
        Filename (const Filename_optional& x)
        {
          this->Filename_ = x;
        }

        void DataRequestsData::
        Filename (::std::unique_ptr< Filename_type > x)
        {
          this->Filename_.set (std::move (x));
        }

        const DataRequestsData::SamplesPerSecond_optional& DataRequestsData::
        SamplesPerSecond () const
        {
          return this->SamplesPerSecond_;
        }

        DataRequestsData::SamplesPerSecond_optional& DataRequestsData::
        SamplesPerSecond ()
        {
          return this->SamplesPerSecond_;
        }

        void DataRequestsData::
        SamplesPerSecond (const SamplesPerSecond_type& x)
        {
          this->SamplesPerSecond_.set (x);
        }

        void DataRequestsData::
        SamplesPerSecond (const SamplesPerSecond_optional& x)
        {
          this->SamplesPerSecond_ = x;
        }


        // ScenarioData
        // 

        const ScenarioData::Name_optional& ScenarioData::
        Name () const
        {
          return this->Name_;
        }

        ScenarioData::Name_optional& ScenarioData::
        Name ()
        {
          return this->Name_;
        }

        void ScenarioData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void ScenarioData::
        Name (const Name_optional& x)
        {
          this->Name_ = x;
        }

        void ScenarioData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const ScenarioData::Description_optional& ScenarioData::
        Description () const
        {
          return this->Description_;
        }

        ScenarioData::Description_optional& ScenarioData::
        Description ()
        {
          return this->Description_;
        }

        void ScenarioData::
        Description (const Description_type& x)
        {
          this->Description_.set (x);
        }

        void ScenarioData::
        Description (const Description_optional& x)
        {
          this->Description_ = x;
        }

        void ScenarioData::
        Description (::std::unique_ptr< Description_type > x)
        {
          this->Description_.set (std::move (x));
        }

        const ScenarioData::EngineStateFile_optional& ScenarioData::
        EngineStateFile () const
        {
          return this->EngineStateFile_;
        }

        ScenarioData::EngineStateFile_optional& ScenarioData::
        EngineStateFile ()
        {
          return this->EngineStateFile_;
        }

        void ScenarioData::
        EngineStateFile (const EngineStateFile_type& x)
        {
          this->EngineStateFile_.set (x);
        }

        void ScenarioData::
        EngineStateFile (const EngineStateFile_optional& x)
        {
          this->EngineStateFile_ = x;
        }

        void ScenarioData::
        EngineStateFile (::std::unique_ptr< EngineStateFile_type > x)
        {
          this->EngineStateFile_.set (std::move (x));
        }

        const ScenarioData::InitialParameters_optional& ScenarioData::
        InitialParameters () const
        {
          return this->InitialParameters_;
        }

        ScenarioData::InitialParameters_optional& ScenarioData::
        InitialParameters ()
        {
          return this->InitialParameters_;
        }

        void ScenarioData::
        InitialParameters (const InitialParameters_type& x)
        {
          this->InitialParameters_.set (x);
        }

        void ScenarioData::
        InitialParameters (const InitialParameters_optional& x)
        {
          this->InitialParameters_ = x;
        }

        void ScenarioData::
        InitialParameters (::std::unique_ptr< InitialParameters_type > x)
        {
          this->InitialParameters_.set (std::move (x));
        }

        const ScenarioData::AutoSerialization_optional& ScenarioData::
        AutoSerialization () const
        {
          return this->AutoSerialization_;
        }

        ScenarioData::AutoSerialization_optional& ScenarioData::
        AutoSerialization ()
        {
          return this->AutoSerialization_;
        }

        void ScenarioData::
        AutoSerialization (const AutoSerialization_type& x)
        {
          this->AutoSerialization_.set (x);
        }

        void ScenarioData::
        AutoSerialization (const AutoSerialization_optional& x)
        {
          this->AutoSerialization_ = x;
        }

        void ScenarioData::
        AutoSerialization (::std::unique_ptr< AutoSerialization_type > x)
        {
          this->AutoSerialization_.set (std::move (x));
        }

        const ScenarioData::DataRequests_optional& ScenarioData::
        DataRequests () const
        {
          return this->DataRequests_;
        }

        ScenarioData::DataRequests_optional& ScenarioData::
        DataRequests ()
        {
          return this->DataRequests_;
        }

        void ScenarioData::
        DataRequests (const DataRequests_type& x)
        {
          this->DataRequests_.set (x);
        }

        void ScenarioData::
        DataRequests (const DataRequests_optional& x)
        {
          this->DataRequests_ = x;
        }

        void ScenarioData::
        DataRequests (::std::unique_ptr< DataRequests_type > x)
        {
          this->DataRequests_.set (std::move (x));
        }

        const ScenarioData::Action_sequence& ScenarioData::
        Action () const
        {
          return this->Action_;
        }

        ScenarioData::Action_sequence& ScenarioData::
        Action ()
        {
          return this->Action_;
        }

        void ScenarioData::
        Action (const Action_sequence& s)
        {
          this->Action_ = s;
        }


        // ScenarioInitialParametersData
        // 

        const ScenarioInitialParametersData::Patient_optional& ScenarioInitialParametersData::
        Patient () const
        {
          return this->Patient_;
        }

        ScenarioInitialParametersData::Patient_optional& ScenarioInitialParametersData::
        Patient ()
        {
          return this->Patient_;
        }

        void ScenarioInitialParametersData::
        Patient (const Patient_type& x)
        {
          this->Patient_.set (x);
        }

        void ScenarioInitialParametersData::
        Patient (const Patient_optional& x)
        {
          this->Patient_ = x;
        }

        void ScenarioInitialParametersData::
        Patient (::std::unique_ptr< Patient_type > x)
        {
          this->Patient_.set (std::move (x));
        }

        const ScenarioInitialParametersData::PatientFile_optional& ScenarioInitialParametersData::
        PatientFile () const
        {
          return this->PatientFile_;
        }

        ScenarioInitialParametersData::PatientFile_optional& ScenarioInitialParametersData::
        PatientFile ()
        {
          return this->PatientFile_;
        }

        void ScenarioInitialParametersData::
        PatientFile (const PatientFile_type& x)
        {
          this->PatientFile_.set (x);
        }

        void ScenarioInitialParametersData::
        PatientFile (const PatientFile_optional& x)
        {
          this->PatientFile_ = x;
        }

        void ScenarioInitialParametersData::
        PatientFile (::std::unique_ptr< PatientFile_type > x)
        {
          this->PatientFile_.set (std::move (x));
        }

        const ScenarioInitialParametersData::TrackStabilization_optional& ScenarioInitialParametersData::
        TrackStabilization () const
        {
          return this->TrackStabilization_;
        }

        ScenarioInitialParametersData::TrackStabilization_optional& ScenarioInitialParametersData::
        TrackStabilization ()
        {
          return this->TrackStabilization_;
        }

        void ScenarioInitialParametersData::
        TrackStabilization (const TrackStabilization_type& x)
        {
          this->TrackStabilization_.set (x);
        }

        void ScenarioInitialParametersData::
        TrackStabilization (const TrackStabilization_optional& x)
        {
          this->TrackStabilization_ = x;
        }

        void ScenarioInitialParametersData::
        TrackStabilization (::std::unique_ptr< TrackStabilization_type > x)
        {
          this->TrackStabilization_.set (std::move (x));
        }

        const ScenarioInitialParametersData::Condition_sequence& ScenarioInitialParametersData::
        Condition () const
        {
          return this->Condition_;
        }

        ScenarioInitialParametersData::Condition_sequence& ScenarioInitialParametersData::
        Condition ()
        {
          return this->Condition_;
        }

        void ScenarioInitialParametersData::
        Condition (const Condition_sequence& s)
        {
          this->Condition_ = s;
        }

        const ScenarioInitialParametersData::Configuration_optional& ScenarioInitialParametersData::
        Configuration () const
        {
          return this->Configuration_;
        }

        ScenarioInitialParametersData::Configuration_optional& ScenarioInitialParametersData::
        Configuration ()
        {
          return this->Configuration_;
        }

        void ScenarioInitialParametersData::
        Configuration (const Configuration_type& x)
        {
          this->Configuration_.set (x);
        }

        void ScenarioInitialParametersData::
        Configuration (const Configuration_optional& x)
        {
          this->Configuration_ = x;
        }

        void ScenarioInitialParametersData::
        Configuration (::std::unique_ptr< Configuration_type > x)
        {
          this->Configuration_.set (std::move (x));
        }


        // ScenarioAutoSerializationData
        // 

        const ScenarioAutoSerializationData::Directory_type& ScenarioAutoSerializationData::
        Directory () const
        {
          return this->Directory_.get ();
        }

        ScenarioAutoSerializationData::Directory_type& ScenarioAutoSerializationData::
        Directory ()
        {
          return this->Directory_.get ();
        }

        void ScenarioAutoSerializationData::
        Directory (const Directory_type& x)
        {
          this->Directory_.set (x);
        }

        void ScenarioAutoSerializationData::
        Directory (::std::unique_ptr< Directory_type > x)
        {
          this->Directory_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::FileName_type& ScenarioAutoSerializationData::
        FileName () const
        {
          return this->FileName_.get ();
        }

        ScenarioAutoSerializationData::FileName_type& ScenarioAutoSerializationData::
        FileName ()
        {
          return this->FileName_.get ();
        }

        void ScenarioAutoSerializationData::
        FileName (const FileName_type& x)
        {
          this->FileName_.set (x);
        }

        void ScenarioAutoSerializationData::
        FileName (::std::unique_ptr< FileName_type > x)
        {
          this->FileName_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::AfterActions_type& ScenarioAutoSerializationData::
        AfterActions () const
        {
          return this->AfterActions_.get ();
        }

        ScenarioAutoSerializationData::AfterActions_type& ScenarioAutoSerializationData::
        AfterActions ()
        {
          return this->AfterActions_.get ();
        }

        void ScenarioAutoSerializationData::
        AfterActions (const AfterActions_type& x)
        {
          this->AfterActions_.set (x);
        }

        void ScenarioAutoSerializationData::
        AfterActions (::std::unique_ptr< AfterActions_type > x)
        {
          this->AfterActions_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::Period_type& ScenarioAutoSerializationData::
        Period () const
        {
          return this->Period_.get ();
        }

        ScenarioAutoSerializationData::Period_type& ScenarioAutoSerializationData::
        Period ()
        {
          return this->Period_.get ();
        }

        void ScenarioAutoSerializationData::
        Period (const Period_type& x)
        {
          this->Period_.set (x);
        }

        void ScenarioAutoSerializationData::
        Period (::std::unique_ptr< Period_type > x)
        {
          this->Period_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::PeriodTimeStamps_type& ScenarioAutoSerializationData::
        PeriodTimeStamps () const
        {
          return this->PeriodTimeStamps_.get ();
        }

        ScenarioAutoSerializationData::PeriodTimeStamps_type& ScenarioAutoSerializationData::
        PeriodTimeStamps ()
        {
          return this->PeriodTimeStamps_.get ();
        }

        void ScenarioAutoSerializationData::
        PeriodTimeStamps (const PeriodTimeStamps_type& x)
        {
          this->PeriodTimeStamps_.set (x);
        }

        void ScenarioAutoSerializationData::
        PeriodTimeStamps (::std::unique_ptr< PeriodTimeStamps_type > x)
        {
          this->PeriodTimeStamps_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::ReloadState_type& ScenarioAutoSerializationData::
        ReloadState () const
        {
          return this->ReloadState_.get ();
        }

        ScenarioAutoSerializationData::ReloadState_type& ScenarioAutoSerializationData::
        ReloadState ()
        {
          return this->ReloadState_.get ();
        }

        void ScenarioAutoSerializationData::
        ReloadState (const ReloadState_type& x)
        {
          this->ReloadState_.set (x);
        }

        void ScenarioAutoSerializationData::
        ReloadState (::std::unique_ptr< ReloadState_type > x)
        {
          this->ReloadState_.set (std::move (x));
        }


        // AdvanceTimeData
        // 

        const AdvanceTimeData::Time_type& AdvanceTimeData::
        Time () const
        {
          return this->Time_.get ();
        }

        AdvanceTimeData::Time_type& AdvanceTimeData::
        Time ()
        {
          return this->Time_.get ();
        }

        void AdvanceTimeData::
        Time (const Time_type& x)
        {
          this->Time_.set (x);
        }

        void AdvanceTimeData::
        Time (::std::unique_ptr< Time_type > x)
        {
          this->Time_.set (std::move (x));
        }


        // enumSerializationType
        // 

        enumSerializationType::
        enumSerializationType ()
        : ::xml_schema::string ()
        {
        }

        enumSerializationType::
        enumSerializationType (value v)
        : ::xml_schema::string (_xsd_enumSerializationType_literals_[v])
        {
        }

        enumSerializationType::
        enumSerializationType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumSerializationType::
        enumSerializationType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSerializationType::
        enumSerializationType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumSerializationType::
        enumSerializationType (const enumSerializationType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumSerializationType& enumSerializationType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumSerializationType_literals_[v]);

          return *this;
        }


        // SerializeStateData
        // 

        const SerializeStateData::Filename_type& SerializeStateData::
        Filename () const
        {
          return this->Filename_.get ();
        }

        SerializeStateData::Filename_type& SerializeStateData::
        Filename ()
        {
          return this->Filename_.get ();
        }

        void SerializeStateData::
        Filename (const Filename_type& x)
        {
          this->Filename_.set (x);
        }

        void SerializeStateData::
        Filename (::std::unique_ptr< Filename_type > x)
        {
          this->Filename_.set (std::move (x));
        }

        const SerializeStateData::Type_type& SerializeStateData::
        Type () const
        {
          return this->Type_.get ();
        }

        SerializeStateData::Type_type& SerializeStateData::
        Type ()
        {
          return this->Type_.get ();
        }

        void SerializeStateData::
        Type (const Type_type& x)
        {
          this->Type_.set (x);
        }

        void SerializeStateData::
        Type (::std::unique_ptr< Type_type > x)
        {
          this->Type_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ConditionData
        //

        ConditionData::
        ConditionData ()
        : ::xml_schema::type (),
          Comment_ (this)
        {
        }

        ConditionData::
        ConditionData (const ConditionData& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Comment_ (x.Comment_, f, this)
        {
        }

        ConditionData::
        ConditionData (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Comment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ConditionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Comment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Comment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Comment_)
                {
                  ::std::unique_ptr< Comment_type > r (
                    dynamic_cast< Comment_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Comment_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ConditionData* ConditionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConditionData (*this, f, c);
        }

        ConditionData& ConditionData::
        operator= (const ConditionData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Comment_ = x.Comment_;
          }

          return *this;
        }

        ConditionData::
        ~ConditionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConditionData >
        _xsd_ConditionData_type_factory_init (
          "ConditionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ConditionListData
        //

        ConditionListData::
        ConditionListData ()
        : ::xml_schema::type (),
          Condition_ (this)
        {
        }

        ConditionListData::
        ConditionListData (const ConditionListData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Condition_ (x.Condition_, f, this)
        {
        }

        ConditionListData::
        ConditionListData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Condition_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ConditionListData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Condition
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Condition_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Condition_type > r (
                  dynamic_cast< Condition_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Condition_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        ConditionListData* ConditionListData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ConditionListData (*this, f, c);
        }

        ConditionListData& ConditionListData::
        operator= (const ConditionListData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Condition_ = x.Condition_;
          }

          return *this;
        }

        ConditionListData::
        ~ConditionListData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConditionListData >
        _xsd_ConditionListData_type_factory_init (
          "ConditionListData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ActionData
        //

        ActionData::
        ActionData ()
        : ::xml_schema::type (),
          Comment_ (this),
          Occurs_ (this),
          Duration_ (this)
        {
        }

        ActionData::
        ActionData (const ActionData& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Comment_ (x.Comment_, f, this),
          Occurs_ (x.Occurs_, f, this),
          Duration_ (x.Duration_, f, this)
        {
        }

        ActionData::
        ActionData (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Comment_ (this),
          Occurs_ (this),
          Duration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ActionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Comment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Comment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Comment_)
                {
                  ::std::unique_ptr< Comment_type > r (
                    dynamic_cast< Comment_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Comment_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Occurs
            //
            if (n.name () == "Occurs" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->Occurs_)
              {
                this->Occurs_.set (Occurs_traits::create (i, f, this));
                continue;
              }
            }

            // Duration
            //
            if (n.name () == "Duration" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->Duration_)
              {
                this->Duration_.set (Duration_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }
        }

        ActionData* ActionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ActionData (*this, f, c);
        }

        ActionData& ActionData::
        operator= (const ActionData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Comment_ = x.Comment_;
            this->Occurs_ = x.Occurs_;
            this->Duration_ = x.Duration_;
          }

          return *this;
        }

        ActionData::
        ~ActionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionData >
        _xsd_ActionData_type_factory_init (
          "ActionData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ActionListData
        //

        ActionListData::
        ActionListData ()
        : ::xml_schema::type (),
          Action_ (this)
        {
        }

        ActionListData::
        ActionListData (const ActionListData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Action_ (x.Action_, f, this)
        {
        }

        ActionListData::
        ActionListData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Action_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void ActionListData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Action
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Action",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Action_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Action_type > r (
                  dynamic_cast< Action_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Action_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        ActionListData* ActionListData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ActionListData (*this, f, c);
        }

        ActionListData& ActionListData::
        operator= (const ActionListData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Action_ = x.Action_;
          }

          return *this;
        }

        ActionListData::
        ~ActionListData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionListData >
        _xsd_ActionListData_type_factory_init (
          "ActionListData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DataRequestData
        //

        DataRequestData::
        DataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DecimalFormatData (),
          Name_ (this),
          Unit_ (this)
        {
        }

        DataRequestData::
        DataRequestData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::DecimalFormatData (),
          Name_ (Name, this),
          Unit_ (this)
        {
        }

        DataRequestData::
        DataRequestData (const DataRequestData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DecimalFormatData (x, f, c),
          Name_ (x.Name_, f, this),
          Unit_ (x.Unit_, f, this)
        {
        }

        DataRequestData::
        DataRequestData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DecimalFormatData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Unit_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void DataRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::DecimalFormatData::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Name" && n.namespace_ ().empty ())
            {
              this->Name_.set (Name_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Unit" && n.namespace_ ().empty ())
            {
              this->Unit_.set (Unit_traits::create (i, f, this));
              continue;
            }
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Name",
              "");
          }
        }

        DataRequestData* DataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DataRequestData (*this, f, c);
        }

        DataRequestData& DataRequestData::
        operator= (const DataRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::DecimalFormatData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Unit_ = x.Unit_;
          }

          return *this;
        }

        DataRequestData::
        ~DataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DataRequestData >
        _xsd_DataRequestData_type_factory_init (
          "DataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PatientDataRequestData
        //

        PatientDataRequestData::
        PatientDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData ()
        {
        }

        PatientDataRequestData::
        PatientDataRequestData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name)
        {
        }

        PatientDataRequestData::
        PatientDataRequestData (const PatientDataRequestData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c)
        {
        }

        PatientDataRequestData::
        PatientDataRequestData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f, c)
        {
        }

        PatientDataRequestData* PatientDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PatientDataRequestData (*this, f, c);
        }

        PatientDataRequestData::
        ~PatientDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PatientDataRequestData >
        _xsd_PatientDataRequestData_type_factory_init (
          "PatientDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PhysiologyDataRequestData
        //

        PhysiologyDataRequestData::
        PhysiologyDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData ()
        {
        }

        PhysiologyDataRequestData::
        PhysiologyDataRequestData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name)
        {
        }

        PhysiologyDataRequestData::
        PhysiologyDataRequestData (const PhysiologyDataRequestData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c)
        {
        }

        PhysiologyDataRequestData::
        PhysiologyDataRequestData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f, c)
        {
        }

        PhysiologyDataRequestData* PhysiologyDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PhysiologyDataRequestData (*this, f, c);
        }

        PhysiologyDataRequestData::
        ~PhysiologyDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PhysiologyDataRequestData >
        _xsd_PhysiologyDataRequestData_type_factory_init (
          "PhysiologyDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EnvironmentDataRequestData
        //

        EnvironmentDataRequestData::
        EnvironmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData ()
        {
        }

        EnvironmentDataRequestData::
        EnvironmentDataRequestData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name)
        {
        }

        EnvironmentDataRequestData::
        EnvironmentDataRequestData (const EnvironmentDataRequestData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c)
        {
        }

        EnvironmentDataRequestData::
        EnvironmentDataRequestData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f, c)
        {
        }

        EnvironmentDataRequestData* EnvironmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentDataRequestData (*this, f, c);
        }

        EnvironmentDataRequestData::
        ~EnvironmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentDataRequestData >
        _xsd_EnvironmentDataRequestData_type_factory_init (
          "EnvironmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // EquipmentDataRequestData
        //

        EquipmentDataRequestData::
        EquipmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData (),
          Type_ (this)
        {
        }

        EquipmentDataRequestData::
        EquipmentDataRequestData (const Name_type& Name,
                                  const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name),
          Type_ (Type, this)
        {
        }

        EquipmentDataRequestData::
        EquipmentDataRequestData (const EquipmentDataRequestData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c),
          Type_ (x.Type_, f, this)
        {
        }

        EquipmentDataRequestData::
        EquipmentDataRequestData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f | ::xml_schema::flags::base, c),
          Type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void EquipmentDataRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::DataRequestData::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }
        }

        EquipmentDataRequestData* EquipmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EquipmentDataRequestData (*this, f, c);
        }

        EquipmentDataRequestData& EquipmentDataRequestData::
        operator= (const EquipmentDataRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::DataRequestData& > (*this) = x;
            this->Type_ = x.Type_;
          }

          return *this;
        }

        EquipmentDataRequestData::
        ~EquipmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EquipmentDataRequestData >
        _xsd_EquipmentDataRequestData_type_factory_init (
          "EquipmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentDataRequestData
        //

        CompartmentDataRequestData::
        CompartmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData (),
          Compartment_ (this)
        {
        }

        CompartmentDataRequestData::
        CompartmentDataRequestData (const Name_type& Name,
                                    const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name),
          Compartment_ (Compartment, this)
        {
        }

        CompartmentDataRequestData::
        CompartmentDataRequestData (const CompartmentDataRequestData& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c),
          Compartment_ (x.Compartment_, f, this)
        {
        }

        CompartmentDataRequestData::
        CompartmentDataRequestData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f | ::xml_schema::flags::base, c),
          Compartment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentDataRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::DataRequestData::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Compartment" && n.namespace_ ().empty ())
            {
              this->Compartment_.set (Compartment_traits::create (i, f, this));
              continue;
            }
          }

          if (!Compartment_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Compartment",
              "");
          }
        }

        CompartmentDataRequestData* CompartmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentDataRequestData (*this, f, c);
        }

        CompartmentDataRequestData& CompartmentDataRequestData::
        operator= (const CompartmentDataRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::DataRequestData& > (*this) = x;
            this->Compartment_ = x.Compartment_;
          }

          return *this;
        }

        CompartmentDataRequestData::
        ~CompartmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentDataRequestData >
        _xsd_CompartmentDataRequestData_type_factory_init (
          "CompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompartmentSubstanceDataRequestData
        //

        CompartmentSubstanceDataRequestData::
        CompartmentSubstanceDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (),
          Substance_ (this)
        {
        }

        CompartmentSubstanceDataRequestData::
        CompartmentSubstanceDataRequestData (const Name_type& Name,
                                             const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (Name,
                                                                           Compartment),
          Substance_ (this)
        {
        }

        CompartmentSubstanceDataRequestData::
        CompartmentSubstanceDataRequestData (const CompartmentSubstanceDataRequestData& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (x, f, c),
          Substance_ (x.Substance_, f, this)
        {
        }

        CompartmentSubstanceDataRequestData::
        CompartmentSubstanceDataRequestData (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentSubstanceDataRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentDataRequestData::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }
          }
        }

        CompartmentSubstanceDataRequestData* CompartmentSubstanceDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentSubstanceDataRequestData (*this, f, c);
        }

        CompartmentSubstanceDataRequestData& CompartmentSubstanceDataRequestData::
        operator= (const CompartmentSubstanceDataRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (*this) = x;
            this->Substance_ = x.Substance_;
          }

          return *this;
        }

        CompartmentSubstanceDataRequestData::
        ~CompartmentSubstanceDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentSubstanceDataRequestData >
        _xsd_CompartmentSubstanceDataRequestData_type_factory_init (
          "CompartmentSubstanceDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // GasCompartmentDataRequestData
        //

        GasCompartmentDataRequestData::
        GasCompartmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData ()
        {
        }

        GasCompartmentDataRequestData::
        GasCompartmentDataRequestData (const Name_type& Name,
                                       const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (Name,
                                                                                    Compartment)
        {
        }

        GasCompartmentDataRequestData::
        GasCompartmentDataRequestData (const GasCompartmentDataRequestData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (x, f, c)
        {
        }

        GasCompartmentDataRequestData::
        GasCompartmentDataRequestData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (e, f, c)
        {
        }

        GasCompartmentDataRequestData* GasCompartmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class GasCompartmentDataRequestData (*this, f, c);
        }

        GasCompartmentDataRequestData::
        ~GasCompartmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, GasCompartmentDataRequestData >
        _xsd_GasCompartmentDataRequestData_type_factory_init (
          "GasCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // LiquidCompartmentDataRequestData
        //

        LiquidCompartmentDataRequestData::
        LiquidCompartmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData ()
        {
        }

        LiquidCompartmentDataRequestData::
        LiquidCompartmentDataRequestData (const Name_type& Name,
                                          const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (Name,
                                                                                    Compartment)
        {
        }

        LiquidCompartmentDataRequestData::
        LiquidCompartmentDataRequestData (const LiquidCompartmentDataRequestData& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (x, f, c)
        {
        }

        LiquidCompartmentDataRequestData::
        LiquidCompartmentDataRequestData (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData (e, f, c)
        {
        }

        LiquidCompartmentDataRequestData* LiquidCompartmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class LiquidCompartmentDataRequestData (*this, f, c);
        }

        LiquidCompartmentDataRequestData::
        ~LiquidCompartmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, LiquidCompartmentDataRequestData >
        _xsd_LiquidCompartmentDataRequestData_type_factory_init (
          "LiquidCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ThermalCompartmentDataRequestData
        //

        ThermalCompartmentDataRequestData::
        ThermalCompartmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData ()
        {
        }

        ThermalCompartmentDataRequestData::
        ThermalCompartmentDataRequestData (const Name_type& Name,
                                           const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (Name,
                                                                           Compartment)
        {
        }

        ThermalCompartmentDataRequestData::
        ThermalCompartmentDataRequestData (const ThermalCompartmentDataRequestData& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (x, f, c)
        {
        }

        ThermalCompartmentDataRequestData::
        ThermalCompartmentDataRequestData (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (e, f, c)
        {
        }

        ThermalCompartmentDataRequestData* ThermalCompartmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ThermalCompartmentDataRequestData (*this, f, c);
        }

        ThermalCompartmentDataRequestData::
        ~ThermalCompartmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ThermalCompartmentDataRequestData >
        _xsd_ThermalCompartmentDataRequestData_type_factory_init (
          "ThermalCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // TissueCompartmentDataRequestData
        //

        TissueCompartmentDataRequestData::
        TissueCompartmentDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData ()
        {
        }

        TissueCompartmentDataRequestData::
        TissueCompartmentDataRequestData (const Name_type& Name,
                                          const Compartment_type& Compartment)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (Name,
                                                                           Compartment)
        {
        }

        TissueCompartmentDataRequestData::
        TissueCompartmentDataRequestData (const TissueCompartmentDataRequestData& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (x, f, c)
        {
        }

        TissueCompartmentDataRequestData::
        TissueCompartmentDataRequestData (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData (e, f, c)
        {
        }

        TissueCompartmentDataRequestData* TissueCompartmentDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueCompartmentDataRequestData (*this, f, c);
        }

        TissueCompartmentDataRequestData::
        ~TissueCompartmentDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueCompartmentDataRequestData >
        _xsd_TissueCompartmentDataRequestData_type_factory_init (
          "TissueCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SubstanceDataRequestData
        //

        SubstanceDataRequestData::
        SubstanceDataRequestData ()
        : ::mil::tatrc::physiology::datamodel::DataRequestData (),
          Substance_ (this),
          Compartment_ (this)
        {
        }

        SubstanceDataRequestData::
        SubstanceDataRequestData (const Name_type& Name,
                                  const Substance_type& Substance)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (Name),
          Substance_ (Substance, this),
          Compartment_ (this)
        {
        }

        SubstanceDataRequestData::
        SubstanceDataRequestData (const SubstanceDataRequestData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (x, f, c),
          Substance_ (x.Substance_, f, this),
          Compartment_ (x.Compartment_, f, this)
        {
        }

        SubstanceDataRequestData::
        SubstanceDataRequestData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::DataRequestData (e, f | ::xml_schema::flags::base, c),
          Substance_ (this),
          Compartment_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceDataRequestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::DataRequestData::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Substance" && n.namespace_ ().empty ())
            {
              this->Substance_.set (Substance_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Compartment" && n.namespace_ ().empty ())
            {
              this->Compartment_.set (Compartment_traits::create (i, f, this));
              continue;
            }
          }

          if (!Substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Substance",
              "");
          }
        }

        SubstanceDataRequestData* SubstanceDataRequestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceDataRequestData (*this, f, c);
        }

        SubstanceDataRequestData& SubstanceDataRequestData::
        operator= (const SubstanceDataRequestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::DataRequestData& > (*this) = x;
            this->Substance_ = x.Substance_;
            this->Compartment_ = x.Compartment_;
          }

          return *this;
        }

        SubstanceDataRequestData::
        ~SubstanceDataRequestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceDataRequestData >
        _xsd_SubstanceDataRequestData_type_factory_init (
          "SubstanceDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // DataRequestsData
        //

        DataRequestsData::
        DataRequestsData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          DefaultDecimalFormatting_ (this),
          OverrideDecimalFormatting_ (this),
          DataRequest_ (this),
          Filename_ (this),
          SamplesPerSecond_ (this)
        {
        }

        DataRequestsData::
        DataRequestsData (const DataRequestsData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          DefaultDecimalFormatting_ (x.DefaultDecimalFormatting_, f, this),
          OverrideDecimalFormatting_ (x.OverrideDecimalFormatting_, f, this),
          DataRequest_ (x.DataRequest_, f, this),
          Filename_ (x.Filename_, f, this),
          SamplesPerSecond_ (x.SamplesPerSecond_, f, this)
        {
        }

        DataRequestsData::
        DataRequestsData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          DefaultDecimalFormatting_ (this),
          OverrideDecimalFormatting_ (this),
          DataRequest_ (this),
          Filename_ (this),
          SamplesPerSecond_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DataRequestsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // DefaultDecimalFormatting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultDecimalFormatting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultDecimalFormatting_)
                {
                  ::std::unique_ptr< DefaultDecimalFormatting_type > r (
                    dynamic_cast< DefaultDecimalFormatting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultDecimalFormatting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OverrideDecimalFormatting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OverrideDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OverrideDecimalFormatting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OverrideDecimalFormatting_)
                {
                  ::std::unique_ptr< OverrideDecimalFormatting_type > r (
                    dynamic_cast< OverrideDecimalFormatting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OverrideDecimalFormatting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DataRequest
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DataRequest",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DataRequest_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< DataRequest_type > r (
                  dynamic_cast< DataRequest_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->DataRequest_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Filename" && n.namespace_ ().empty ())
            {
              this->Filename_.set (Filename_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "SamplesPerSecond" && n.namespace_ ().empty ())
            {
              this->SamplesPerSecond_.set (SamplesPerSecond_traits::create (i, f, this));
              continue;
            }
          }
        }

        DataRequestsData* DataRequestsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DataRequestsData (*this, f, c);
        }

        DataRequestsData& DataRequestsData::
        operator= (const DataRequestsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->DefaultDecimalFormatting_ = x.DefaultDecimalFormatting_;
            this->OverrideDecimalFormatting_ = x.OverrideDecimalFormatting_;
            this->DataRequest_ = x.DataRequest_;
            this->Filename_ = x.Filename_;
            this->SamplesPerSecond_ = x.SamplesPerSecond_;
          }

          return *this;
        }

        DataRequestsData::
        ~DataRequestsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_type_factory_init (
          "DataRequestsData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ScenarioData
        //

        ScenarioData::
        ScenarioData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          Description_ (this),
          EngineStateFile_ (this),
          InitialParameters_ (this),
          AutoSerialization_ (this),
          DataRequests_ (this),
          Action_ (this)
        {
        }

        ScenarioData::
        ScenarioData (const ScenarioData& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          Description_ (x.Description_, f, this),
          EngineStateFile_ (x.EngineStateFile_, f, this),
          InitialParameters_ (x.InitialParameters_, f, this),
          AutoSerialization_ (x.AutoSerialization_, f, this),
          DataRequests_ (x.DataRequests_, f, this),
          Action_ (x.Action_, f, this)
        {
        }

        ScenarioData::
        ScenarioData (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Description_ (this),
          EngineStateFile_ (this),
          InitialParameters_ (this),
          AutoSerialization_ (this),
          DataRequests_ (this),
          Action_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ScenarioData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Name_)
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Description
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Description",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Description_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Description_)
                {
                  ::std::unique_ptr< Description_type > r (
                    dynamic_cast< Description_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Description_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EngineStateFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EngineStateFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EngineStateFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EngineStateFile_)
                {
                  ::std::unique_ptr< EngineStateFile_type > r (
                    dynamic_cast< EngineStateFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EngineStateFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InitialParameters
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialParameters",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialParameters_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InitialParameters_)
                {
                  ::std::unique_ptr< InitialParameters_type > r (
                    dynamic_cast< InitialParameters_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialParameters_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AutoSerialization
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AutoSerialization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AutoSerialization_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AutoSerialization_)
                {
                  ::std::unique_ptr< AutoSerialization_type > r (
                    dynamic_cast< AutoSerialization_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AutoSerialization_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DataRequests
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DataRequests",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DataRequests_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DataRequests_)
                {
                  ::std::unique_ptr< DataRequests_type > r (
                    dynamic_cast< DataRequests_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DataRequests_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Action
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Action",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Action_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Action_type > r (
                  dynamic_cast< Action_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Action_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        ScenarioData* ScenarioData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ScenarioData (*this, f, c);
        }

        ScenarioData& ScenarioData::
        operator= (const ScenarioData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Description_ = x.Description_;
            this->EngineStateFile_ = x.EngineStateFile_;
            this->InitialParameters_ = x.InitialParameters_;
            this->AutoSerialization_ = x.AutoSerialization_;
            this->DataRequests_ = x.DataRequests_;
            this->Action_ = x.Action_;
          }

          return *this;
        }

        ScenarioData::
        ~ScenarioData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ScenarioData >
        _xsd_ScenarioData_type_factory_init (
          "ScenarioData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ScenarioInitialParametersData
        //

        ScenarioInitialParametersData::
        ScenarioInitialParametersData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Patient_ (this),
          PatientFile_ (this),
          TrackStabilization_ (this),
          Condition_ (this),
          Configuration_ (this)
        {
        }

        ScenarioInitialParametersData::
        ScenarioInitialParametersData (const ScenarioInitialParametersData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Patient_ (x.Patient_, f, this),
          PatientFile_ (x.PatientFile_, f, this),
          TrackStabilization_ (x.TrackStabilization_, f, this),
          Condition_ (x.Condition_, f, this),
          Configuration_ (x.Configuration_, f, this)
        {
        }

        ScenarioInitialParametersData::
        ScenarioInitialParametersData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Patient_ (this),
          PatientFile_ (this),
          TrackStabilization_ (this),
          Condition_ (this),
          Configuration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ScenarioInitialParametersData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Patient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Patient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Patient_)
                {
                  ::std::unique_ptr< Patient_type > r (
                    dynamic_cast< Patient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Patient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PatientFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PatientFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PatientFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PatientFile_)
                {
                  ::std::unique_ptr< PatientFile_type > r (
                    dynamic_cast< PatientFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PatientFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TrackStabilization
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TrackStabilization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TrackStabilization_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TrackStabilization_)
                {
                  ::std::unique_ptr< TrackStabilization_type > r (
                    dynamic_cast< TrackStabilization_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TrackStabilization_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Condition
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Condition_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Condition_type > r (
                  dynamic_cast< Condition_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Condition_.push_back (::std::move (r));
                continue;
              }
            }

            // Configuration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Configuration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Configuration_)
                {
                  ::std::unique_ptr< Configuration_type > r (
                    dynamic_cast< Configuration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Configuration_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ScenarioInitialParametersData* ScenarioInitialParametersData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ScenarioInitialParametersData (*this, f, c);
        }

        ScenarioInitialParametersData& ScenarioInitialParametersData::
        operator= (const ScenarioInitialParametersData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Patient_ = x.Patient_;
            this->PatientFile_ = x.PatientFile_;
            this->TrackStabilization_ = x.TrackStabilization_;
            this->Condition_ = x.Condition_;
            this->Configuration_ = x.Configuration_;
          }

          return *this;
        }

        ScenarioInitialParametersData::
        ~ScenarioInitialParametersData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_type_factory_init (
          "ScenarioInitialParametersData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ScenarioAutoSerializationData
        //

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (this),
          FileName_ (this),
          AfterActions_ (this),
          Period_ (this),
          PeriodTimeStamps_ (this),
          ReloadState_ (this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const Directory_type& Directory,
                                       const FileName_type& FileName,
                                       const AfterActions_type& AfterActions,
                                       const Period_type& Period,
                                       const PeriodTimeStamps_type& PeriodTimeStamps,
                                       const ReloadState_type& ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (Directory, this),
          FileName_ (FileName, this),
          AfterActions_ (AfterActions, this),
          Period_ (Period, this),
          PeriodTimeStamps_ (PeriodTimeStamps, this),
          ReloadState_ (ReloadState, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const Directory_type& Directory,
                                       const FileName_type& FileName,
                                       const AfterActions_type& AfterActions,
                                       ::std::unique_ptr< Period_type > Period,
                                       const PeriodTimeStamps_type& PeriodTimeStamps,
                                       const ReloadState_type& ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (Directory, this),
          FileName_ (FileName, this),
          AfterActions_ (AfterActions, this),
          Period_ (std::move (Period), this),
          PeriodTimeStamps_ (PeriodTimeStamps, this),
          ReloadState_ (ReloadState, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (::std::unique_ptr< Directory_type > Directory,
                                       ::std::unique_ptr< FileName_type > FileName,
                                       ::std::unique_ptr< AfterActions_type > AfterActions,
                                       ::std::unique_ptr< Period_type > Period,
                                       ::std::unique_ptr< PeriodTimeStamps_type > PeriodTimeStamps,
                                       ::std::unique_ptr< ReloadState_type > ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (std::move (Directory), this),
          FileName_ (std::move (FileName), this),
          AfterActions_ (std::move (AfterActions), this),
          Period_ (std::move (Period), this),
          PeriodTimeStamps_ (std::move (PeriodTimeStamps), this),
          ReloadState_ (std::move (ReloadState), this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const ScenarioAutoSerializationData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Directory_ (x.Directory_, f, this),
          FileName_ (x.FileName_, f, this),
          AfterActions_ (x.AfterActions_, f, this),
          Period_ (x.Period_, f, this),
          PeriodTimeStamps_ (x.PeriodTimeStamps_, f, this),
          ReloadState_ (x.ReloadState_, f, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Directory_ (this),
          FileName_ (this),
          AfterActions_ (this),
          Period_ (this),
          PeriodTimeStamps_ (this),
          ReloadState_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ScenarioAutoSerializationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Directory
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Directory",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Directory_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Directory_.present ())
                {
                  ::std::unique_ptr< Directory_type > r (
                    dynamic_cast< Directory_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Directory_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FileName
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FileName",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FileName_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FileName_.present ())
                {
                  ::std::unique_ptr< FileName_type > r (
                    dynamic_cast< FileName_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FileName_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AfterActions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AfterActions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AfterActions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AfterActions_.present ())
                {
                  ::std::unique_ptr< AfterActions_type > r (
                    dynamic_cast< AfterActions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AfterActions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Period
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Period_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Period_.present ())
                {
                  ::std::unique_ptr< Period_type > r (
                    dynamic_cast< Period_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Period_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PeriodTimeStamps
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PeriodTimeStamps",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PeriodTimeStamps_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!PeriodTimeStamps_.present ())
                {
                  ::std::unique_ptr< PeriodTimeStamps_type > r (
                    dynamic_cast< PeriodTimeStamps_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PeriodTimeStamps_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReloadState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReloadState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReloadState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ReloadState_.present ())
                {
                  ::std::unique_ptr< ReloadState_type > r (
                    dynamic_cast< ReloadState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReloadState_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Directory_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Directory",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FileName",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AfterActions_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AfterActions",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Period",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeriodTimeStamps_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeriodTimeStamps",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ReloadState_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ReloadState",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ScenarioAutoSerializationData* ScenarioAutoSerializationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ScenarioAutoSerializationData (*this, f, c);
        }

        ScenarioAutoSerializationData& ScenarioAutoSerializationData::
        operator= (const ScenarioAutoSerializationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Directory_ = x.Directory_;
            this->FileName_ = x.FileName_;
            this->AfterActions_ = x.AfterActions_;
            this->Period_ = x.Period_;
            this->PeriodTimeStamps_ = x.PeriodTimeStamps_;
            this->ReloadState_ = x.ReloadState_;
          }

          return *this;
        }

        ScenarioAutoSerializationData::
        ~ScenarioAutoSerializationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_type_factory_init (
          "ScenarioAutoSerializationData",
          "uri:/mil/tatrc/physiology/datamodel");

        // AdvanceTimeData
        //

        AdvanceTimeData::
        AdvanceTimeData ()
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Time_ (this)
        {
        }

        AdvanceTimeData::
        AdvanceTimeData (const Time_type& Time)
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Time_ (Time, this)
        {
        }

        AdvanceTimeData::
        AdvanceTimeData (::std::unique_ptr< Time_type > Time)
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Time_ (std::move (Time), this)
        {
        }

        AdvanceTimeData::
        AdvanceTimeData (const AdvanceTimeData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (x, f, c),
          Time_ (x.Time_, f, this)
        {
        }

        AdvanceTimeData::
        AdvanceTimeData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (e, f | ::xml_schema::flags::base, c),
          Time_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void AdvanceTimeData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Time
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Time_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Time_.present ())
                {
                  ::std::unique_ptr< Time_type > r (
                    dynamic_cast< Time_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Time_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Time_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Time",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        AdvanceTimeData* AdvanceTimeData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AdvanceTimeData (*this, f, c);
        }

        AdvanceTimeData& AdvanceTimeData::
        operator= (const AdvanceTimeData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ActionData& > (*this) = x;
            this->Time_ = x.Time_;
          }

          return *this;
        }

        AdvanceTimeData::
        ~AdvanceTimeData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AdvanceTimeData >
        _xsd_AdvanceTimeData_type_factory_init (
          "AdvanceTimeData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumSerializationType
        //

        enumSerializationType::
        enumSerializationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumSerializationType_convert ();
        }

        enumSerializationType::
        enumSerializationType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumSerializationType_convert ();
        }

        enumSerializationType::
        enumSerializationType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumSerializationType_convert ();
        }

        enumSerializationType* enumSerializationType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumSerializationType (*this, f, c);
        }

        enumSerializationType::value enumSerializationType::
        _xsd_enumSerializationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumSerializationType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumSerializationType_indexes_,
                            _xsd_enumSerializationType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumSerializationType_indexes_ + 2 || _xsd_enumSerializationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumSerializationType::
        _xsd_enumSerializationType_literals_[2] =
        {
          "Load",
          "Save"
        };

        const enumSerializationType::value enumSerializationType::
        _xsd_enumSerializationType_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumSerializationType::Load,
          ::mil::tatrc::physiology::datamodel::enumSerializationType::Save
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumSerializationType >
        _xsd_enumSerializationType_type_factory_init (
          "enumSerializationType",
          "uri:/mil/tatrc/physiology/datamodel");

        // SerializeStateData
        //

        SerializeStateData::
        SerializeStateData ()
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Filename_ (this),
          Type_ (this)
        {
        }

        SerializeStateData::
        SerializeStateData (const Filename_type& Filename,
                            const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Filename_ (Filename, this),
          Type_ (Type, this)
        {
        }

        SerializeStateData::
        SerializeStateData (::std::unique_ptr< Filename_type > Filename,
                            const Type_type& Type)
        : ::mil::tatrc::physiology::datamodel::ActionData (),
          Filename_ (std::move (Filename), this),
          Type_ (Type, this)
        {
        }

        SerializeStateData::
        SerializeStateData (const SerializeStateData& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (x, f, c),
          Filename_ (x.Filename_, f, this),
          Type_ (x.Type_, f, this)
        {
        }

        SerializeStateData::
        SerializeStateData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ActionData (e, f | ::xml_schema::flags::base, c),
          Filename_ (this),
          Type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SerializeStateData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Filename
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Filename",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Filename_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Filename_.present ())
                {
                  ::std::unique_ptr< Filename_type > r (
                    dynamic_cast< Filename_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Filename_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Filename_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Filename",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              this->Type_.set (Type_traits::create (i, f, this));
              continue;
            }
          }

          if (!Type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Type",
              "");
          }
        }

        SerializeStateData* SerializeStateData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SerializeStateData (*this, f, c);
        }

        SerializeStateData& SerializeStateData::
        operator= (const SerializeStateData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ActionData& > (*this) = x;
            this->Filename_ = x.Filename_;
            this->Type_ = x.Type_;
          }

          return *this;
        }

        SerializeStateData::
        ~SerializeStateData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SerializeStateData >
        _xsd_SerializeStateData_type_factory_init (
          "SerializeStateData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ConditionData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Comment ())
            {
              o << ::std::endl << "Comment: ";
              om.insert (o, *i.Comment ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConditionData >
        _xsd_ConditionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ConditionListData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ConditionListData::Condition_const_iterator
                 b (i.Condition ().begin ()), e (i.Condition ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Condition: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ConditionListData >
        _xsd_ConditionListData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ActionData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Comment ())
            {
              o << ::std::endl << "Comment: ";
              om.insert (o, *i.Comment ());
            }
          }

          if (i.Occurs ())
          {
            o << ::std::endl << "Occurs: " << *i.Occurs ();
          }

          if (i.Duration ())
          {
            o << ::std::endl << "Duration: " << *i.Duration ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionData >
        _xsd_ActionData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ActionListData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ActionListData::Action_const_iterator
                 b (i.Action ().begin ()), e (i.Action ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Action: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ActionListData >
        _xsd_ActionListData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DecimalFormatData& > (i);

          o << ::std::endl << "Name: " << i.Name ();
          if (i.Unit ())
          {
            o << ::std::endl << "Unit: " << *i.Unit ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DataRequestData >
        _xsd_DataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PatientDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PatientDataRequestData >
        _xsd_PatientDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PhysiologyDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PhysiologyDataRequestData >
        _xsd_PhysiologyDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentDataRequestData >
        _xsd_EnvironmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const EquipmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          o << ::std::endl << "Type: " << i.Type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EquipmentDataRequestData >
        _xsd_EquipmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          o << ::std::endl << "Compartment: " << i.Compartment ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentDataRequestData >
        _xsd_CompartmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentSubstanceDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);

          if (i.Substance ())
          {
            o << ::std::endl << "Substance: " << *i.Substance ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentSubstanceDataRequestData >
        _xsd_CompartmentSubstanceDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const GasCompartmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GasCompartmentDataRequestData >
        _xsd_GasCompartmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const LiquidCompartmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LiquidCompartmentDataRequestData >
        _xsd_LiquidCompartmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ThermalCompartmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ThermalCompartmentDataRequestData >
        _xsd_ThermalCompartmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const TissueCompartmentDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueCompartmentDataRequestData >
        _xsd_TissueCompartmentDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceDataRequestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          o << ::std::endl << "Substance: " << i.Substance ();
          if (i.Compartment ())
          {
            o << ::std::endl << "Compartment: " << *i.Compartment ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceDataRequestData >
        _xsd_SubstanceDataRequestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const DataRequestsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultDecimalFormatting ())
            {
              o << ::std::endl << "DefaultDecimalFormatting: ";
              om.insert (o, *i.DefaultDecimalFormatting ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OverrideDecimalFormatting ())
            {
              o << ::std::endl << "OverrideDecimalFormatting: ";
              om.insert (o, *i.OverrideDecimalFormatting ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (DataRequestsData::DataRequest_const_iterator
                 b (i.DataRequest ().begin ()), e (i.DataRequest ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "DataRequest: ";
              om.insert (o, *b);
            }
          }

          if (i.Filename ())
          {
            o << ::std::endl << "Filename: " << *i.Filename ();
          }

          if (i.SamplesPerSecond ())
          {
            o << ::std::endl << "SamplesPerSecond: " << *i.SamplesPerSecond ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ScenarioData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Name ())
            {
              o << ::std::endl << "Name: ";
              om.insert (o, *i.Name ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Description ())
            {
              o << ::std::endl << "Description: ";
              om.insert (o, *i.Description ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EngineStateFile ())
            {
              o << ::std::endl << "EngineStateFile: ";
              om.insert (o, *i.EngineStateFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InitialParameters ())
            {
              o << ::std::endl << "InitialParameters: ";
              om.insert (o, *i.InitialParameters ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AutoSerialization ())
            {
              o << ::std::endl << "AutoSerialization: ";
              om.insert (o, *i.AutoSerialization ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DataRequests ())
            {
              o << ::std::endl << "DataRequests: ";
              om.insert (o, *i.DataRequests ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ScenarioData::Action_const_iterator
                 b (i.Action ().begin ()), e (i.Action ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Action: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ScenarioData >
        _xsd_ScenarioData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ScenarioInitialParametersData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Patient ())
            {
              o << ::std::endl << "Patient: ";
              om.insert (o, *i.Patient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PatientFile ())
            {
              o << ::std::endl << "PatientFile: ";
              om.insert (o, *i.PatientFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TrackStabilization ())
            {
              o << ::std::endl << "TrackStabilization: ";
              om.insert (o, *i.TrackStabilization ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ScenarioInitialParametersData::Condition_const_iterator
                 b (i.Condition ().begin ()), e (i.Condition ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Condition: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              o << ::std::endl << "Configuration: ";
              om.insert (o, *i.Configuration ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ScenarioAutoSerializationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Directory: ";
            om.insert (o, i.Directory ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FileName: ";
            om.insert (o, i.FileName ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AfterActions: ";
            om.insert (o, i.AfterActions ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Period: ";
            om.insert (o, i.Period ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "PeriodTimeStamps: ";
            om.insert (o, i.PeriodTimeStamps ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ReloadState: ";
            om.insert (o, i.ReloadState ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const AdvanceTimeData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Time: ";
            om.insert (o, i.Time ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AdvanceTimeData >
        _xsd_AdvanceTimeData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumSerializationType::value i)
        {
          return o << enumSerializationType::_xsd_enumSerializationType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumSerializationType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumSerializationType >
        _xsd_enumSerializationType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SerializeStateData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Filename: ";
            om.insert (o, i.Filename ());
          }

          o << ::std::endl << "Type: " << i.Type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SerializeStateData >
        _xsd_SerializeStateData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ConditionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
            ::mil::tatrc::physiology::datamodel::ConditionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > (
              ::mil::tatrc::physiology::datamodel::ConditionList (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ConditionList",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ConditionListData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ConditionListData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ConditionList",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData >
        ConditionList (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ConditionList",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ConditionListData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ConditionListData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ConditionListData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ConditionList",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ActionList (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
            ::mil::tatrc::physiology::datamodel::ActionList (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > (
              ::mil::tatrc::physiology::datamodel::ActionList (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ActionList",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ActionListData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ActionListData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ActionList",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData >
        ActionList (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ActionList",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ActionListData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ActionListData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ActionListData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ActionList",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::DataRequests (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
            ::mil::tatrc::physiology::datamodel::DataRequests (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > (
              ::mil::tatrc::physiology::datamodel::DataRequests (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "DataRequests",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::DataRequestsData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::DataRequestsData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DataRequests",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData >
        DataRequests (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "DataRequests",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::DataRequestsData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::DataRequestsData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::DataRequestsData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DataRequests",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Scenario (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
            ::mil::tatrc::physiology::datamodel::Scenario (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > (
              ::mil::tatrc::physiology::datamodel::Scenario (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Scenario",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ScenarioData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ScenarioData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Scenario",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData >
        Scenario (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Scenario",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ScenarioData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ScenarioData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ScenarioData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Scenario",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ConditionData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Comment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Comment ())
            {
              const ConditionData::Comment_type& x (*i.Comment ());
              if (typeid (ConditionData::Comment_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Comment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConditionData >
        _xsd_ConditionData_type_serializer_init (
          "ConditionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ConditionListData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Condition
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ConditionListData::Condition_const_iterator
                 b (i.Condition ().begin ()), n (i.Condition ().end ());
                 b != n; ++b)
            {
              if (typeid (ConditionListData::Condition_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Condition",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConditionListData >
        _xsd_ConditionListData_type_serializer_init (
          "ConditionListData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        ConditionList (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ConditionList (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ConditionList (::std::ostream& o,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ConditionList (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ConditionList (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ConditionList (::xercesc::XMLFormatTarget& t,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ConditionList (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ConditionList (::xercesc::DOMDocument& d,
                       const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ConditionListData) == typeid (s))
          {
            if (n.name () == "ConditionList" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "ConditionList",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ConditionList",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ConditionList (const ::mil::tatrc::physiology::datamodel::ConditionListData& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ConditionListData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "ConditionList",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ConditionList",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::ConditionList (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActionData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Comment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Comment ())
            {
              const ActionData::Comment_type& x (*i.Comment ());
              if (typeid (ActionData::Comment_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Comment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Comment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Occurs
          //
          if (i.Occurs ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Occurs",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.Occurs ());
          }

          // Duration
          //
          if (i.Duration ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Duration",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.Duration ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionData >
        _xsd_ActionData_type_serializer_init (
          "ActionData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ActionListData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Action
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ActionListData::Action_const_iterator
                 b (i.Action ().begin ()), n (i.Action ().end ());
                 b != n; ++b)
            {
              if (typeid (ActionListData::Action_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Action",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Action",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionListData >
        _xsd_ActionListData_type_serializer_init (
          "ActionListData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        ActionList (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ActionList (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ActionList (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ActionList (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ActionList (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ActionList (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ActionList (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ActionList (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ActionListData) == typeid (s))
          {
            if (n.name () == "ActionList" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "ActionList",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ActionList",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ActionList (const ::mil::tatrc::physiology::datamodel::ActionListData& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ActionListData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "ActionList",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ActionList",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::ActionList (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const DataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DecimalFormatData& > (i);

          // Name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Name",
                e));

            a << i.Name ();
          }

          // Unit
          //
          if (i.Unit ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Unit",
                e));

            a << *i.Unit ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DataRequestData >
        _xsd_DataRequestData_type_serializer_init (
          "DataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PatientDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PatientDataRequestData >
        _xsd_PatientDataRequestData_type_serializer_init (
          "PatientDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PhysiologyDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PhysiologyDataRequestData >
        _xsd_PhysiologyDataRequestData_type_serializer_init (
          "PhysiologyDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentDataRequestData >
        _xsd_EnvironmentDataRequestData_type_serializer_init (
          "EnvironmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const EquipmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EquipmentDataRequestData >
        _xsd_EquipmentDataRequestData_type_serializer_init (
          "EquipmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          // Compartment
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Compartment",
                e));

            a << i.Compartment ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentDataRequestData >
        _xsd_CompartmentDataRequestData_type_serializer_init (
          "CompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const CompartmentSubstanceDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);

          // Substance
          //
          if (i.Substance ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << *i.Substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentSubstanceDataRequestData >
        _xsd_CompartmentSubstanceDataRequestData_type_serializer_init (
          "CompartmentSubstanceDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const GasCompartmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GasCompartmentDataRequestData >
        _xsd_GasCompartmentDataRequestData_type_serializer_init (
          "GasCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const LiquidCompartmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentSubstanceDataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LiquidCompartmentDataRequestData >
        _xsd_LiquidCompartmentDataRequestData_type_serializer_init (
          "LiquidCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ThermalCompartmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ThermalCompartmentDataRequestData >
        _xsd_ThermalCompartmentDataRequestData_type_serializer_init (
          "ThermalCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const TissueCompartmentDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentDataRequestData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueCompartmentDataRequestData >
        _xsd_TissueCompartmentDataRequestData_type_serializer_init (
          "TissueCompartmentDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SubstanceDataRequestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::DataRequestData& > (i);

          // Substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Substance",
                e));

            a << i.Substance ();
          }

          // Compartment
          //
          if (i.Compartment ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Compartment",
                e));

            a << *i.Compartment ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceDataRequestData >
        _xsd_SubstanceDataRequestData_type_serializer_init (
          "SubstanceDataRequestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const DataRequestsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // DefaultDecimalFormatting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultDecimalFormatting ())
            {
              const DataRequestsData::DefaultDecimalFormatting_type& x (*i.DefaultDecimalFormatting ());
              if (typeid (DataRequestsData::DefaultDecimalFormatting_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultDecimalFormatting",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OverrideDecimalFormatting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OverrideDecimalFormatting ())
            {
              const DataRequestsData::OverrideDecimalFormatting_type& x (*i.OverrideDecimalFormatting ());
              if (typeid (DataRequestsData::OverrideDecimalFormatting_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OverrideDecimalFormatting",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OverrideDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DataRequest
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (DataRequestsData::DataRequest_const_iterator
                 b (i.DataRequest ().begin ()), n (i.DataRequest ().end ());
                 b != n; ++b)
            {
              if (typeid (DataRequestsData::DataRequest_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DataRequest",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "DataRequest",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Filename
          //
          if (i.Filename ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Filename",
                e));

            a << *i.Filename ();
          }

          // SamplesPerSecond
          //
          if (i.SamplesPerSecond ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "SamplesPerSecond",
                e));

            a << ::xml_schema::as_double(*i.SamplesPerSecond ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_type_serializer_init (
          "DataRequestsData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        DataRequests (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        DataRequests (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DataRequests (::std::ostream& o,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DataRequests (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        DataRequests (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DataRequests (::xercesc::XMLFormatTarget& t,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::DataRequests (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        DataRequests (::xercesc::DOMDocument& d,
                      const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::DataRequestsData) == typeid (s))
          {
            if (n.name () == "DataRequests" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "DataRequests",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "DataRequests",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        DataRequests (const ::mil::tatrc::physiology::datamodel::DataRequestsData& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::DataRequestsData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "DataRequests",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "DataRequests",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::DataRequests (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ScenarioData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Name ())
            {
              const ScenarioData::Name_type& x (*i.Name ());
              if (typeid (ScenarioData::Name_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Name",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Description
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Description ())
            {
              const ScenarioData::Description_type& x (*i.Description ());
              if (typeid (ScenarioData::Description_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Description",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Description",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EngineStateFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EngineStateFile ())
            {
              const ScenarioData::EngineStateFile_type& x (*i.EngineStateFile ());
              if (typeid (ScenarioData::EngineStateFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EngineStateFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EngineStateFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InitialParameters
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InitialParameters ())
            {
              const ScenarioData::InitialParameters_type& x (*i.InitialParameters ());
              if (typeid (ScenarioData::InitialParameters_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InitialParameters",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InitialParameters",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AutoSerialization
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AutoSerialization ())
            {
              const ScenarioData::AutoSerialization_type& x (*i.AutoSerialization ());
              if (typeid (ScenarioData::AutoSerialization_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AutoSerialization",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AutoSerialization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DataRequests
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DataRequests ())
            {
              const ScenarioData::DataRequests_type& x (*i.DataRequests ());
              if (typeid (ScenarioData::DataRequests_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DataRequests",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DataRequests",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Action
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ScenarioData::Action_const_iterator
                 b (i.Action ().begin ()), n (i.Action ().end ());
                 b != n; ++b)
            {
              if (typeid (ScenarioData::Action_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Action",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Action",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ScenarioData >
        _xsd_ScenarioData_type_serializer_init (
          "ScenarioData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        Scenario (::std::ostream& o,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Scenario (::std::ostream& o,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Scenario (::std::ostream& o,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Scenario (::xercesc::XMLFormatTarget& t,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Scenario (::xercesc::XMLFormatTarget& t,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Scenario (::xercesc::XMLFormatTarget& t,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Scenario (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Scenario (::xercesc::DOMDocument& d,
                  const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ScenarioData) == typeid (s))
          {
            if (n.name () == "Scenario" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "Scenario",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Scenario",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        Scenario (const ::mil::tatrc::physiology::datamodel::ScenarioData& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ScenarioData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "Scenario",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Scenario",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::Scenario (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ScenarioInitialParametersData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Patient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Patient ())
            {
              const ScenarioInitialParametersData::Patient_type& x (*i.Patient ());
              if (typeid (ScenarioInitialParametersData::Patient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Patient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PatientFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PatientFile ())
            {
              const ScenarioInitialParametersData::PatientFile_type& x (*i.PatientFile ());
              if (typeid (ScenarioInitialParametersData::PatientFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PatientFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PatientFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TrackStabilization
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TrackStabilization ())
            {
              const ScenarioInitialParametersData::TrackStabilization_type& x (*i.TrackStabilization ());
              if (typeid (ScenarioInitialParametersData::TrackStabilization_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TrackStabilization",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TrackStabilization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Condition
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ScenarioInitialParametersData::Condition_const_iterator
                 b (i.Condition ().begin ()), n (i.Condition ().end ());
                 b != n; ++b)
            {
              if (typeid (ScenarioInitialParametersData::Condition_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Condition",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Configuration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              const ScenarioInitialParametersData::Configuration_type& x (*i.Configuration ());
              if (typeid (ScenarioInitialParametersData::Configuration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Configuration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_type_serializer_init (
          "ScenarioInitialParametersData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ScenarioAutoSerializationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Directory
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::Directory_type& x (i.Directory ());
            if (typeid (ScenarioAutoSerializationData::Directory_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Directory",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Directory",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FileName
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::FileName_type& x (i.FileName ());
            if (typeid (ScenarioAutoSerializationData::FileName_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FileName",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FileName",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AfterActions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::AfterActions_type& x (i.AfterActions ());
            if (typeid (ScenarioAutoSerializationData::AfterActions_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AfterActions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AfterActions",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Period
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::Period_type& x (i.Period ());
            if (typeid (ScenarioAutoSerializationData::Period_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Period",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // PeriodTimeStamps
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::PeriodTimeStamps_type& x (i.PeriodTimeStamps ());
            if (typeid (ScenarioAutoSerializationData::PeriodTimeStamps_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "PeriodTimeStamps",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "PeriodTimeStamps",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ReloadState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::ReloadState_type& x (i.ReloadState ());
            if (typeid (ScenarioAutoSerializationData::ReloadState_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ReloadState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ReloadState",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_type_serializer_init (
          "ScenarioAutoSerializationData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const AdvanceTimeData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          // Time
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const AdvanceTimeData::Time_type& x (i.Time ());
            if (typeid (AdvanceTimeData::Time_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Time",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Time",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AdvanceTimeData >
        _xsd_AdvanceTimeData_type_serializer_init (
          "AdvanceTimeData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumSerializationType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumSerializationType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumSerializationType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumSerializationType >
        _xsd_enumSerializationType_type_serializer_init (
          "enumSerializationType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const SerializeStateData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ActionData& > (i);

          // Filename
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SerializeStateData::Filename_type& x (i.Filename ());
            if (typeid (SerializeStateData::Filename_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Filename",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Filename",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << i.Type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SerializeStateData >
        _xsd_SerializeStateData_type_serializer_init (
          "SerializeStateData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

