// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PatientAssessments.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientAssessmentData
        // 


        // PulmonaryFunctionTestData
        // 

        const PulmonaryFunctionTestData::ExpiratoryReserveVolume_optional& PulmonaryFunctionTestData::
        ExpiratoryReserveVolume () const
        {
          return this->ExpiratoryReserveVolume_;
        }

        PulmonaryFunctionTestData::ExpiratoryReserveVolume_optional& PulmonaryFunctionTestData::
        ExpiratoryReserveVolume ()
        {
          return this->ExpiratoryReserveVolume_;
        }

        void PulmonaryFunctionTestData::
        ExpiratoryReserveVolume (const ExpiratoryReserveVolume_type& x)
        {
          this->ExpiratoryReserveVolume_.set (x);
        }

        void PulmonaryFunctionTestData::
        ExpiratoryReserveVolume (const ExpiratoryReserveVolume_optional& x)
        {
          this->ExpiratoryReserveVolume_ = x;
        }

        void PulmonaryFunctionTestData::
        ExpiratoryReserveVolume (::std::unique_ptr< ExpiratoryReserveVolume_type > x)
        {
          this->ExpiratoryReserveVolume_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::ForcedVitalCapacity_optional& PulmonaryFunctionTestData::
        ForcedVitalCapacity () const
        {
          return this->ForcedVitalCapacity_;
        }

        PulmonaryFunctionTestData::ForcedVitalCapacity_optional& PulmonaryFunctionTestData::
        ForcedVitalCapacity ()
        {
          return this->ForcedVitalCapacity_;
        }

        void PulmonaryFunctionTestData::
        ForcedVitalCapacity (const ForcedVitalCapacity_type& x)
        {
          this->ForcedVitalCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        ForcedVitalCapacity (const ForcedVitalCapacity_optional& x)
        {
          this->ForcedVitalCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        ForcedVitalCapacity (::std::unique_ptr< ForcedVitalCapacity_type > x)
        {
          this->ForcedVitalCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::ForcedExpiratoryVolume_optional& PulmonaryFunctionTestData::
        ForcedExpiratoryVolume () const
        {
          return this->ForcedExpiratoryVolume_;
        }

        PulmonaryFunctionTestData::ForcedExpiratoryVolume_optional& PulmonaryFunctionTestData::
        ForcedExpiratoryVolume ()
        {
          return this->ForcedExpiratoryVolume_;
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryVolume (const ForcedExpiratoryVolume_type& x)
        {
          this->ForcedExpiratoryVolume_.set (x);
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryVolume (const ForcedExpiratoryVolume_optional& x)
        {
          this->ForcedExpiratoryVolume_ = x;
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryVolume (::std::unique_ptr< ForcedExpiratoryVolume_type > x)
        {
          this->ForcedExpiratoryVolume_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::ForcedExpiratoryFlow_optional& PulmonaryFunctionTestData::
        ForcedExpiratoryFlow () const
        {
          return this->ForcedExpiratoryFlow_;
        }

        PulmonaryFunctionTestData::ForcedExpiratoryFlow_optional& PulmonaryFunctionTestData::
        ForcedExpiratoryFlow ()
        {
          return this->ForcedExpiratoryFlow_;
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryFlow (const ForcedExpiratoryFlow_type& x)
        {
          this->ForcedExpiratoryFlow_.set (x);
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryFlow (const ForcedExpiratoryFlow_optional& x)
        {
          this->ForcedExpiratoryFlow_ = x;
        }

        void PulmonaryFunctionTestData::
        ForcedExpiratoryFlow (::std::unique_ptr< ForcedExpiratoryFlow_type > x)
        {
          this->ForcedExpiratoryFlow_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::FunctionalResidualCapacity_optional& PulmonaryFunctionTestData::
        FunctionalResidualCapacity () const
        {
          return this->FunctionalResidualCapacity_;
        }

        PulmonaryFunctionTestData::FunctionalResidualCapacity_optional& PulmonaryFunctionTestData::
        FunctionalResidualCapacity ()
        {
          return this->FunctionalResidualCapacity_;
        }

        void PulmonaryFunctionTestData::
        FunctionalResidualCapacity (const FunctionalResidualCapacity_type& x)
        {
          this->FunctionalResidualCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        FunctionalResidualCapacity (const FunctionalResidualCapacity_optional& x)
        {
          this->FunctionalResidualCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        FunctionalResidualCapacity (::std::unique_ptr< FunctionalResidualCapacity_type > x)
        {
          this->FunctionalResidualCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::InspiratoryCapacity_optional& PulmonaryFunctionTestData::
        InspiratoryCapacity () const
        {
          return this->InspiratoryCapacity_;
        }

        PulmonaryFunctionTestData::InspiratoryCapacity_optional& PulmonaryFunctionTestData::
        InspiratoryCapacity ()
        {
          return this->InspiratoryCapacity_;
        }

        void PulmonaryFunctionTestData::
        InspiratoryCapacity (const InspiratoryCapacity_type& x)
        {
          this->InspiratoryCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        InspiratoryCapacity (const InspiratoryCapacity_optional& x)
        {
          this->InspiratoryCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        InspiratoryCapacity (::std::unique_ptr< InspiratoryCapacity_type > x)
        {
          this->InspiratoryCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::InspiratoryReserveVolume_optional& PulmonaryFunctionTestData::
        InspiratoryReserveVolume () const
        {
          return this->InspiratoryReserveVolume_;
        }

        PulmonaryFunctionTestData::InspiratoryReserveVolume_optional& PulmonaryFunctionTestData::
        InspiratoryReserveVolume ()
        {
          return this->InspiratoryReserveVolume_;
        }

        void PulmonaryFunctionTestData::
        InspiratoryReserveVolume (const InspiratoryReserveVolume_type& x)
        {
          this->InspiratoryReserveVolume_.set (x);
        }

        void PulmonaryFunctionTestData::
        InspiratoryReserveVolume (const InspiratoryReserveVolume_optional& x)
        {
          this->InspiratoryReserveVolume_ = x;
        }

        void PulmonaryFunctionTestData::
        InspiratoryReserveVolume (::std::unique_ptr< InspiratoryReserveVolume_type > x)
        {
          this->InspiratoryReserveVolume_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::MaximumVoluntaryVentilation_optional& PulmonaryFunctionTestData::
        MaximumVoluntaryVentilation () const
        {
          return this->MaximumVoluntaryVentilation_;
        }

        PulmonaryFunctionTestData::MaximumVoluntaryVentilation_optional& PulmonaryFunctionTestData::
        MaximumVoluntaryVentilation ()
        {
          return this->MaximumVoluntaryVentilation_;
        }

        void PulmonaryFunctionTestData::
        MaximumVoluntaryVentilation (const MaximumVoluntaryVentilation_type& x)
        {
          this->MaximumVoluntaryVentilation_.set (x);
        }

        void PulmonaryFunctionTestData::
        MaximumVoluntaryVentilation (const MaximumVoluntaryVentilation_optional& x)
        {
          this->MaximumVoluntaryVentilation_ = x;
        }

        void PulmonaryFunctionTestData::
        MaximumVoluntaryVentilation (::std::unique_ptr< MaximumVoluntaryVentilation_type > x)
        {
          this->MaximumVoluntaryVentilation_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::PeakExpiratoryFlow_optional& PulmonaryFunctionTestData::
        PeakExpiratoryFlow () const
        {
          return this->PeakExpiratoryFlow_;
        }

        PulmonaryFunctionTestData::PeakExpiratoryFlow_optional& PulmonaryFunctionTestData::
        PeakExpiratoryFlow ()
        {
          return this->PeakExpiratoryFlow_;
        }

        void PulmonaryFunctionTestData::
        PeakExpiratoryFlow (const PeakExpiratoryFlow_type& x)
        {
          this->PeakExpiratoryFlow_.set (x);
        }

        void PulmonaryFunctionTestData::
        PeakExpiratoryFlow (const PeakExpiratoryFlow_optional& x)
        {
          this->PeakExpiratoryFlow_ = x;
        }

        void PulmonaryFunctionTestData::
        PeakExpiratoryFlow (::std::unique_ptr< PeakExpiratoryFlow_type > x)
        {
          this->PeakExpiratoryFlow_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::ResidualVolume_optional& PulmonaryFunctionTestData::
        ResidualVolume () const
        {
          return this->ResidualVolume_;
        }

        PulmonaryFunctionTestData::ResidualVolume_optional& PulmonaryFunctionTestData::
        ResidualVolume ()
        {
          return this->ResidualVolume_;
        }

        void PulmonaryFunctionTestData::
        ResidualVolume (const ResidualVolume_type& x)
        {
          this->ResidualVolume_.set (x);
        }

        void PulmonaryFunctionTestData::
        ResidualVolume (const ResidualVolume_optional& x)
        {
          this->ResidualVolume_ = x;
        }

        void PulmonaryFunctionTestData::
        ResidualVolume (::std::unique_ptr< ResidualVolume_type > x)
        {
          this->ResidualVolume_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::SlowVitalCapacity_optional& PulmonaryFunctionTestData::
        SlowVitalCapacity () const
        {
          return this->SlowVitalCapacity_;
        }

        PulmonaryFunctionTestData::SlowVitalCapacity_optional& PulmonaryFunctionTestData::
        SlowVitalCapacity ()
        {
          return this->SlowVitalCapacity_;
        }

        void PulmonaryFunctionTestData::
        SlowVitalCapacity (const SlowVitalCapacity_type& x)
        {
          this->SlowVitalCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        SlowVitalCapacity (const SlowVitalCapacity_optional& x)
        {
          this->SlowVitalCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        SlowVitalCapacity (::std::unique_ptr< SlowVitalCapacity_type > x)
        {
          this->SlowVitalCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::TotalLungCapacity_optional& PulmonaryFunctionTestData::
        TotalLungCapacity () const
        {
          return this->TotalLungCapacity_;
        }

        PulmonaryFunctionTestData::TotalLungCapacity_optional& PulmonaryFunctionTestData::
        TotalLungCapacity ()
        {
          return this->TotalLungCapacity_;
        }

        void PulmonaryFunctionTestData::
        TotalLungCapacity (const TotalLungCapacity_type& x)
        {
          this->TotalLungCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        TotalLungCapacity (const TotalLungCapacity_optional& x)
        {
          this->TotalLungCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        TotalLungCapacity (::std::unique_ptr< TotalLungCapacity_type > x)
        {
          this->TotalLungCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::VitalCapacity_optional& PulmonaryFunctionTestData::
        VitalCapacity () const
        {
          return this->VitalCapacity_;
        }

        PulmonaryFunctionTestData::VitalCapacity_optional& PulmonaryFunctionTestData::
        VitalCapacity ()
        {
          return this->VitalCapacity_;
        }

        void PulmonaryFunctionTestData::
        VitalCapacity (const VitalCapacity_type& x)
        {
          this->VitalCapacity_.set (x);
        }

        void PulmonaryFunctionTestData::
        VitalCapacity (const VitalCapacity_optional& x)
        {
          this->VitalCapacity_ = x;
        }

        void PulmonaryFunctionTestData::
        VitalCapacity (::std::unique_ptr< VitalCapacity_type > x)
        {
          this->VitalCapacity_.set (std::move (x));
        }

        const PulmonaryFunctionTestData::LungVolumePlot_optional& PulmonaryFunctionTestData::
        LungVolumePlot () const
        {
          return this->LungVolumePlot_;
        }

        PulmonaryFunctionTestData::LungVolumePlot_optional& PulmonaryFunctionTestData::
        LungVolumePlot ()
        {
          return this->LungVolumePlot_;
        }

        void PulmonaryFunctionTestData::
        LungVolumePlot (const LungVolumePlot_type& x)
        {
          this->LungVolumePlot_.set (x);
        }

        void PulmonaryFunctionTestData::
        LungVolumePlot (const LungVolumePlot_optional& x)
        {
          this->LungVolumePlot_ = x;
        }

        void PulmonaryFunctionTestData::
        LungVolumePlot (::std::unique_ptr< LungVolumePlot_type > x)
        {
          this->LungVolumePlot_.set (std::move (x));
        }


        // SequentialOrganFailureAssessmentData
        // 

        const SequentialOrganFailureAssessmentData::RespirationSOFA_type& SequentialOrganFailureAssessmentData::
        RespirationSOFA () const
        {
          return this->RespirationSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::RespirationSOFA_type& SequentialOrganFailureAssessmentData::
        RespirationSOFA ()
        {
          return this->RespirationSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        RespirationSOFA (const RespirationSOFA_type& x)
        {
          this->RespirationSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        RespirationSOFA (::std::unique_ptr< RespirationSOFA_type > x)
        {
          this->RespirationSOFA_.set (std::move (x));
        }

        const SequentialOrganFailureAssessmentData::CoagulationSOFA_type& SequentialOrganFailureAssessmentData::
        CoagulationSOFA () const
        {
          return this->CoagulationSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::CoagulationSOFA_type& SequentialOrganFailureAssessmentData::
        CoagulationSOFA ()
        {
          return this->CoagulationSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        CoagulationSOFA (const CoagulationSOFA_type& x)
        {
          this->CoagulationSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        CoagulationSOFA (::std::unique_ptr< CoagulationSOFA_type > x)
        {
          this->CoagulationSOFA_.set (std::move (x));
        }

        const SequentialOrganFailureAssessmentData::LiverSOFA_type& SequentialOrganFailureAssessmentData::
        LiverSOFA () const
        {
          return this->LiverSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::LiverSOFA_type& SequentialOrganFailureAssessmentData::
        LiverSOFA ()
        {
          return this->LiverSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        LiverSOFA (const LiverSOFA_type& x)
        {
          this->LiverSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        LiverSOFA (::std::unique_ptr< LiverSOFA_type > x)
        {
          this->LiverSOFA_.set (std::move (x));
        }

        const SequentialOrganFailureAssessmentData::CardiovascularSOFA_type& SequentialOrganFailureAssessmentData::
        CardiovascularSOFA () const
        {
          return this->CardiovascularSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::CardiovascularSOFA_type& SequentialOrganFailureAssessmentData::
        CardiovascularSOFA ()
        {
          return this->CardiovascularSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        CardiovascularSOFA (const CardiovascularSOFA_type& x)
        {
          this->CardiovascularSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        CardiovascularSOFA (::std::unique_ptr< CardiovascularSOFA_type > x)
        {
          this->CardiovascularSOFA_.set (std::move (x));
        }

        const SequentialOrganFailureAssessmentData::CentralNervousSOFA_type& SequentialOrganFailureAssessmentData::
        CentralNervousSOFA () const
        {
          return this->CentralNervousSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::CentralNervousSOFA_type& SequentialOrganFailureAssessmentData::
        CentralNervousSOFA ()
        {
          return this->CentralNervousSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        CentralNervousSOFA (const CentralNervousSOFA_type& x)
        {
          this->CentralNervousSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        CentralNervousSOFA (::std::unique_ptr< CentralNervousSOFA_type > x)
        {
          this->CentralNervousSOFA_.set (std::move (x));
        }

        const SequentialOrganFailureAssessmentData::RenalSOFA_type& SequentialOrganFailureAssessmentData::
        RenalSOFA () const
        {
          return this->RenalSOFA_.get ();
        }

        SequentialOrganFailureAssessmentData::RenalSOFA_type& SequentialOrganFailureAssessmentData::
        RenalSOFA ()
        {
          return this->RenalSOFA_.get ();
        }

        void SequentialOrganFailureAssessmentData::
        RenalSOFA (const RenalSOFA_type& x)
        {
          this->RenalSOFA_.set (x);
        }

        void SequentialOrganFailureAssessmentData::
        RenalSOFA (::std::unique_ptr< RenalSOFA_type > x)
        {
          this->RenalSOFA_.set (std::move (x));
        }


        // CompleteBloodCountData
        // 

        const CompleteBloodCountData::Hematocrit_optional& CompleteBloodCountData::
        Hematocrit () const
        {
          return this->Hematocrit_;
        }

        CompleteBloodCountData::Hematocrit_optional& CompleteBloodCountData::
        Hematocrit ()
        {
          return this->Hematocrit_;
        }

        void CompleteBloodCountData::
        Hematocrit (const Hematocrit_type& x)
        {
          this->Hematocrit_.set (x);
        }

        void CompleteBloodCountData::
        Hematocrit (const Hematocrit_optional& x)
        {
          this->Hematocrit_ = x;
        }

        void CompleteBloodCountData::
        Hematocrit (::std::unique_ptr< Hematocrit_type > x)
        {
          this->Hematocrit_.set (std::move (x));
        }

        const CompleteBloodCountData::Hemoglobin_optional& CompleteBloodCountData::
        Hemoglobin () const
        {
          return this->Hemoglobin_;
        }

        CompleteBloodCountData::Hemoglobin_optional& CompleteBloodCountData::
        Hemoglobin ()
        {
          return this->Hemoglobin_;
        }

        void CompleteBloodCountData::
        Hemoglobin (const Hemoglobin_type& x)
        {
          this->Hemoglobin_.set (x);
        }

        void CompleteBloodCountData::
        Hemoglobin (const Hemoglobin_optional& x)
        {
          this->Hemoglobin_ = x;
        }

        void CompleteBloodCountData::
        Hemoglobin (::std::unique_ptr< Hemoglobin_type > x)
        {
          this->Hemoglobin_.set (std::move (x));
        }

        const CompleteBloodCountData::PlateletCount_optional& CompleteBloodCountData::
        PlateletCount () const
        {
          return this->PlateletCount_;
        }

        CompleteBloodCountData::PlateletCount_optional& CompleteBloodCountData::
        PlateletCount ()
        {
          return this->PlateletCount_;
        }

        void CompleteBloodCountData::
        PlateletCount (const PlateletCount_type& x)
        {
          this->PlateletCount_.set (x);
        }

        void CompleteBloodCountData::
        PlateletCount (const PlateletCount_optional& x)
        {
          this->PlateletCount_ = x;
        }

        void CompleteBloodCountData::
        PlateletCount (::std::unique_ptr< PlateletCount_type > x)
        {
          this->PlateletCount_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularHemoglobin_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobin () const
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        CompleteBloodCountData::MeanCorpuscularHemoglobin_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobin ()
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_type& x)
        {
          this->MeanCorpuscularHemoglobin_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_optional& x)
        {
          this->MeanCorpuscularHemoglobin_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (::std::unique_ptr< MeanCorpuscularHemoglobin_type > x)
        {
          this->MeanCorpuscularHemoglobin_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration () const
        {
          return this->MeanCorpuscularHemoglobinConcentration_;
        }

        CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration ()
        {
          return this->MeanCorpuscularHemoglobinConcentration_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_type& x)
        {
          this->MeanCorpuscularHemoglobinConcentration_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_optional& x)
        {
          this->MeanCorpuscularHemoglobinConcentration_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (::std::unique_ptr< MeanCorpuscularHemoglobinConcentration_type > x)
        {
          this->MeanCorpuscularHemoglobinConcentration_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularVolume_optional& CompleteBloodCountData::
        MeanCorpuscularVolume () const
        {
          return this->MeanCorpuscularVolume_;
        }

        CompleteBloodCountData::MeanCorpuscularVolume_optional& CompleteBloodCountData::
        MeanCorpuscularVolume ()
        {
          return this->MeanCorpuscularVolume_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_type& x)
        {
          this->MeanCorpuscularVolume_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_optional& x)
        {
          this->MeanCorpuscularVolume_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (::std::unique_ptr< MeanCorpuscularVolume_type > x)
        {
          this->MeanCorpuscularVolume_.set (std::move (x));
        }

        const CompleteBloodCountData::RedBloodCellCount_optional& CompleteBloodCountData::
        RedBloodCellCount () const
        {
          return this->RedBloodCellCount_;
        }

        CompleteBloodCountData::RedBloodCellCount_optional& CompleteBloodCountData::
        RedBloodCellCount ()
        {
          return this->RedBloodCellCount_;
        }

        void CompleteBloodCountData::
        RedBloodCellCount (const RedBloodCellCount_type& x)
        {
          this->RedBloodCellCount_.set (x);
        }

        void CompleteBloodCountData::
        RedBloodCellCount (const RedBloodCellCount_optional& x)
        {
          this->RedBloodCellCount_ = x;
        }

        void CompleteBloodCountData::
        RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > x)
        {
          this->RedBloodCellCount_.set (std::move (x));
        }

        const CompleteBloodCountData::WhiteBloodCellCount_optional& CompleteBloodCountData::
        WhiteBloodCellCount () const
        {
          return this->WhiteBloodCellCount_;
        }

        CompleteBloodCountData::WhiteBloodCellCount_optional& CompleteBloodCountData::
        WhiteBloodCellCount ()
        {
          return this->WhiteBloodCellCount_;
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (const WhiteBloodCellCount_type& x)
        {
          this->WhiteBloodCellCount_.set (x);
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (const WhiteBloodCellCount_optional& x)
        {
          this->WhiteBloodCellCount_ = x;
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > x)
        {
          this->WhiteBloodCellCount_.set (std::move (x));
        }


        // PsychomotorVigilanceTaskData
        // 

        const PsychomotorVigilanceTaskData::ReactionTime_optional& PsychomotorVigilanceTaskData::
        ReactionTime () const
        {
          return this->ReactionTime_;
        }

        PsychomotorVigilanceTaskData::ReactionTime_optional& PsychomotorVigilanceTaskData::
        ReactionTime ()
        {
          return this->ReactionTime_;
        }

        void PsychomotorVigilanceTaskData::
        ReactionTime (const ReactionTime_type& x)
        {
          this->ReactionTime_.set (x);
        }

        void PsychomotorVigilanceTaskData::
        ReactionTime (const ReactionTime_optional& x)
        {
          this->ReactionTime_ = x;
        }

        void PsychomotorVigilanceTaskData::
        ReactionTime (::std::unique_ptr< ReactionTime_type > x)
        {
          this->ReactionTime_.set (std::move (x));
        }

        const PsychomotorVigilanceTaskData::AttentionLapses_optional& PsychomotorVigilanceTaskData::
        AttentionLapses () const
        {
          return this->AttentionLapses_;
        }

        PsychomotorVigilanceTaskData::AttentionLapses_optional& PsychomotorVigilanceTaskData::
        AttentionLapses ()
        {
          return this->AttentionLapses_;
        }

        void PsychomotorVigilanceTaskData::
        AttentionLapses (const AttentionLapses_type& x)
        {
          this->AttentionLapses_.set (x);
        }

        void PsychomotorVigilanceTaskData::
        AttentionLapses (const AttentionLapses_optional& x)
        {
          this->AttentionLapses_ = x;
        }

        void PsychomotorVigilanceTaskData::
        AttentionLapses (::std::unique_ptr< AttentionLapses_type > x)
        {
          this->AttentionLapses_.set (std::move (x));
        }


        // ComprehensiveMetabolicPanelData
        // 

        const ComprehensiveMetabolicPanelData::Albumin_optional& ComprehensiveMetabolicPanelData::
        Albumin () const
        {
          return this->Albumin_;
        }

        ComprehensiveMetabolicPanelData::Albumin_optional& ComprehensiveMetabolicPanelData::
        Albumin ()
        {
          return this->Albumin_;
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (const Albumin_type& x)
        {
          this->Albumin_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (const Albumin_optional& x)
        {
          this->Albumin_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (::std::unique_ptr< Albumin_type > x)
        {
          this->Albumin_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::ALP_optional& ComprehensiveMetabolicPanelData::
        ALP () const
        {
          return this->ALP_;
        }

        ComprehensiveMetabolicPanelData::ALP_optional& ComprehensiveMetabolicPanelData::
        ALP ()
        {
          return this->ALP_;
        }

        void ComprehensiveMetabolicPanelData::
        ALP (const ALP_type& x)
        {
          this->ALP_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        ALP (const ALP_optional& x)
        {
          this->ALP_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        ALP (::std::unique_ptr< ALP_type > x)
        {
          this->ALP_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::ALT_optional& ComprehensiveMetabolicPanelData::
        ALT () const
        {
          return this->ALT_;
        }

        ComprehensiveMetabolicPanelData::ALT_optional& ComprehensiveMetabolicPanelData::
        ALT ()
        {
          return this->ALT_;
        }

        void ComprehensiveMetabolicPanelData::
        ALT (const ALT_type& x)
        {
          this->ALT_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        ALT (const ALT_optional& x)
        {
          this->ALT_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        ALT (::std::unique_ptr< ALT_type > x)
        {
          this->ALT_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::AST_optional& ComprehensiveMetabolicPanelData::
        AST () const
        {
          return this->AST_;
        }

        ComprehensiveMetabolicPanelData::AST_optional& ComprehensiveMetabolicPanelData::
        AST ()
        {
          return this->AST_;
        }

        void ComprehensiveMetabolicPanelData::
        AST (const AST_type& x)
        {
          this->AST_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        AST (const AST_optional& x)
        {
          this->AST_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        AST (::std::unique_ptr< AST_type > x)
        {
          this->AST_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::BUN_optional& ComprehensiveMetabolicPanelData::
        BUN () const
        {
          return this->BUN_;
        }

        ComprehensiveMetabolicPanelData::BUN_optional& ComprehensiveMetabolicPanelData::
        BUN ()
        {
          return this->BUN_;
        }

        void ComprehensiveMetabolicPanelData::
        BUN (const BUN_type& x)
        {
          this->BUN_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        BUN (const BUN_optional& x)
        {
          this->BUN_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        BUN (::std::unique_ptr< BUN_type > x)
        {
          this->BUN_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Calcium_optional& ComprehensiveMetabolicPanelData::
        Calcium () const
        {
          return this->Calcium_;
        }

        ComprehensiveMetabolicPanelData::Calcium_optional& ComprehensiveMetabolicPanelData::
        Calcium ()
        {
          return this->Calcium_;
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (const Calcium_type& x)
        {
          this->Calcium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (const Calcium_optional& x)
        {
          this->Calcium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (::std::unique_ptr< Calcium_type > x)
        {
          this->Calcium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Chloride_optional& ComprehensiveMetabolicPanelData::
        Chloride () const
        {
          return this->Chloride_;
        }

        ComprehensiveMetabolicPanelData::Chloride_optional& ComprehensiveMetabolicPanelData::
        Chloride ()
        {
          return this->Chloride_;
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (const Chloride_type& x)
        {
          this->Chloride_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (const Chloride_optional& x)
        {
          this->Chloride_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (::std::unique_ptr< Chloride_type > x)
        {
          this->Chloride_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::CO2_optional& ComprehensiveMetabolicPanelData::
        CO2 () const
        {
          return this->CO2_;
        }

        ComprehensiveMetabolicPanelData::CO2_optional& ComprehensiveMetabolicPanelData::
        CO2 ()
        {
          return this->CO2_;
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (const CO2_type& x)
        {
          this->CO2_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (const CO2_optional& x)
        {
          this->CO2_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (::std::unique_ptr< CO2_type > x)
        {
          this->CO2_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Creatinine_optional& ComprehensiveMetabolicPanelData::
        Creatinine () const
        {
          return this->Creatinine_;
        }

        ComprehensiveMetabolicPanelData::Creatinine_optional& ComprehensiveMetabolicPanelData::
        Creatinine ()
        {
          return this->Creatinine_;
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (const Creatinine_type& x)
        {
          this->Creatinine_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (const Creatinine_optional& x)
        {
          this->Creatinine_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (::std::unique_ptr< Creatinine_type > x)
        {
          this->Creatinine_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Glucose_optional& ComprehensiveMetabolicPanelData::
        Glucose () const
        {
          return this->Glucose_;
        }

        ComprehensiveMetabolicPanelData::Glucose_optional& ComprehensiveMetabolicPanelData::
        Glucose ()
        {
          return this->Glucose_;
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (const Glucose_type& x)
        {
          this->Glucose_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (const Glucose_optional& x)
        {
          this->Glucose_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (::std::unique_ptr< Glucose_type > x)
        {
          this->Glucose_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Potassium_optional& ComprehensiveMetabolicPanelData::
        Potassium () const
        {
          return this->Potassium_;
        }

        ComprehensiveMetabolicPanelData::Potassium_optional& ComprehensiveMetabolicPanelData::
        Potassium ()
        {
          return this->Potassium_;
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (const Potassium_type& x)
        {
          this->Potassium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (const Potassium_optional& x)
        {
          this->Potassium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (::std::unique_ptr< Potassium_type > x)
        {
          this->Potassium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Sodium_optional& ComprehensiveMetabolicPanelData::
        Sodium () const
        {
          return this->Sodium_;
        }

        ComprehensiveMetabolicPanelData::Sodium_optional& ComprehensiveMetabolicPanelData::
        Sodium ()
        {
          return this->Sodium_;
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (const Sodium_type& x)
        {
          this->Sodium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (const Sodium_optional& x)
        {
          this->Sodium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (::std::unique_ptr< Sodium_type > x)
        {
          this->Sodium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::TotalBilirubin_optional& ComprehensiveMetabolicPanelData::
        TotalBilirubin () const
        {
          return this->TotalBilirubin_;
        }

        ComprehensiveMetabolicPanelData::TotalBilirubin_optional& ComprehensiveMetabolicPanelData::
        TotalBilirubin ()
        {
          return this->TotalBilirubin_;
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (const TotalBilirubin_type& x)
        {
          this->TotalBilirubin_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (const TotalBilirubin_optional& x)
        {
          this->TotalBilirubin_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > x)
        {
          this->TotalBilirubin_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::TotalProtein_optional& ComprehensiveMetabolicPanelData::
        TotalProtein () const
        {
          return this->TotalProtein_;
        }

        ComprehensiveMetabolicPanelData::TotalProtein_optional& ComprehensiveMetabolicPanelData::
        TotalProtein ()
        {
          return this->TotalProtein_;
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (const TotalProtein_type& x)
        {
          this->TotalProtein_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (const TotalProtein_optional& x)
        {
          this->TotalProtein_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (::std::unique_ptr< TotalProtein_type > x)
        {
          this->TotalProtein_.set (std::move (x));
        }


        // enumPresenceIndicator
        // 

        enumPresenceIndicator::
        enumPresenceIndicator ()
        : ::xml_schema::string ()
        {
        }

        enumPresenceIndicator::
        enumPresenceIndicator (value v)
        : ::xml_schema::string (_xsd_enumPresenceIndicator_literals_[v])
        {
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const enumPresenceIndicator& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumPresenceIndicator& enumPresenceIndicator::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumPresenceIndicator_literals_[v]);

          return *this;
        }


        // enumClarityIndicator
        // 

        enumClarityIndicator::
        enumClarityIndicator ()
        : ::xml_schema::string ()
        {
        }

        enumClarityIndicator::
        enumClarityIndicator (value v)
        : ::xml_schema::string (_xsd_enumClarityIndicator_literals_[v])
        {
        }

        enumClarityIndicator::
        enumClarityIndicator (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumClarityIndicator::
        enumClarityIndicator (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumClarityIndicator::
        enumClarityIndicator (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumClarityIndicator::
        enumClarityIndicator (const enumClarityIndicator& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumClarityIndicator& enumClarityIndicator::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumClarityIndicator_literals_[v]);

          return *this;
        }


        // enumUrineColor
        // 

        enumUrineColor::
        enumUrineColor ()
        : ::xml_schema::string ()
        {
        }

        enumUrineColor::
        enumUrineColor (value v)
        : ::xml_schema::string (_xsd_enumUrineColor_literals_[v])
        {
        }

        enumUrineColor::
        enumUrineColor (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumUrineColor::
        enumUrineColor (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumUrineColor::
        enumUrineColor (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumUrineColor::
        enumUrineColor (const enumUrineColor& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumUrineColor& enumUrineColor::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumUrineColor_literals_[v]);

          return *this;
        }


        // enumMicroscopicObservationType
        // 

        enumMicroscopicObservationType::
        enumMicroscopicObservationType ()
        : ::xml_schema::string ()
        {
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (value v)
        : ::xml_schema::string (_xsd_enumMicroscopicObservationType_literals_[v])
        {
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const enumMicroscopicObservationType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumMicroscopicObservationType& enumMicroscopicObservationType::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumMicroscopicObservationType_literals_[v]);

          return *this;
        }


        // enumMicroscopicObservationAmount
        // 

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount ()
        : ::xml_schema::string ()
        {
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (value v)
        : ::xml_schema::string (_xsd_enumMicroscopicObservationAmount_literals_[v])
        {
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const char* v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const ::std::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const ::xml_schema::string& v)
        : ::xml_schema::string (v)
        {
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const enumMicroscopicObservationAmount& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::xml_schema::string (v, f, c)
        {
        }

        enumMicroscopicObservationAmount& enumMicroscopicObservationAmount::
        operator= (value v)
        {
          static_cast< ::xml_schema::string& > (*this) = 
          ::xml_schema::string (_xsd_enumMicroscopicObservationAmount_literals_[v]);

          return *this;
        }


        // UrinalysisData
        // 

        const UrinalysisData::Color_optional& UrinalysisData::
        Color () const
        {
          return this->Color_;
        }

        UrinalysisData::Color_optional& UrinalysisData::
        Color ()
        {
          return this->Color_;
        }

        void UrinalysisData::
        Color (const Color_type& x)
        {
          this->Color_.set (x);
        }

        void UrinalysisData::
        Color (const Color_optional& x)
        {
          this->Color_ = x;
        }

        void UrinalysisData::
        Color (::std::unique_ptr< Color_type > x)
        {
          this->Color_.set (std::move (x));
        }

        const UrinalysisData::Appearance_optional& UrinalysisData::
        Appearance () const
        {
          return this->Appearance_;
        }

        UrinalysisData::Appearance_optional& UrinalysisData::
        Appearance ()
        {
          return this->Appearance_;
        }

        void UrinalysisData::
        Appearance (const Appearance_type& x)
        {
          this->Appearance_.set (x);
        }

        void UrinalysisData::
        Appearance (const Appearance_optional& x)
        {
          this->Appearance_ = x;
        }

        void UrinalysisData::
        Appearance (::std::unique_ptr< Appearance_type > x)
        {
          this->Appearance_.set (std::move (x));
        }

        const UrinalysisData::Glucose_optional& UrinalysisData::
        Glucose () const
        {
          return this->Glucose_;
        }

        UrinalysisData::Glucose_optional& UrinalysisData::
        Glucose ()
        {
          return this->Glucose_;
        }

        void UrinalysisData::
        Glucose (const Glucose_type& x)
        {
          this->Glucose_.set (x);
        }

        void UrinalysisData::
        Glucose (const Glucose_optional& x)
        {
          this->Glucose_ = x;
        }

        void UrinalysisData::
        Glucose (::std::unique_ptr< Glucose_type > x)
        {
          this->Glucose_.set (std::move (x));
        }

        const UrinalysisData::Ketone_optional& UrinalysisData::
        Ketone () const
        {
          return this->Ketone_;
        }

        UrinalysisData::Ketone_optional& UrinalysisData::
        Ketone ()
        {
          return this->Ketone_;
        }

        void UrinalysisData::
        Ketone (const Ketone_type& x)
        {
          this->Ketone_.set (x);
        }

        void UrinalysisData::
        Ketone (const Ketone_optional& x)
        {
          this->Ketone_ = x;
        }

        void UrinalysisData::
        Ketone (::std::unique_ptr< Ketone_type > x)
        {
          this->Ketone_.set (std::move (x));
        }

        const UrinalysisData::Bilirubin_optional& UrinalysisData::
        Bilirubin () const
        {
          return this->Bilirubin_;
        }

        UrinalysisData::Bilirubin_optional& UrinalysisData::
        Bilirubin ()
        {
          return this->Bilirubin_;
        }

        void UrinalysisData::
        Bilirubin (const Bilirubin_type& x)
        {
          this->Bilirubin_.set (x);
        }

        void UrinalysisData::
        Bilirubin (const Bilirubin_optional& x)
        {
          this->Bilirubin_ = x;
        }

        void UrinalysisData::
        Bilirubin (::std::unique_ptr< Bilirubin_type > x)
        {
          this->Bilirubin_.set (std::move (x));
        }

        const UrinalysisData::SpecificGravity_optional& UrinalysisData::
        SpecificGravity () const
        {
          return this->SpecificGravity_;
        }

        UrinalysisData::SpecificGravity_optional& UrinalysisData::
        SpecificGravity ()
        {
          return this->SpecificGravity_;
        }

        void UrinalysisData::
        SpecificGravity (const SpecificGravity_type& x)
        {
          this->SpecificGravity_.set (x);
        }

        void UrinalysisData::
        SpecificGravity (const SpecificGravity_optional& x)
        {
          this->SpecificGravity_ = x;
        }

        void UrinalysisData::
        SpecificGravity (::std::unique_ptr< SpecificGravity_type > x)
        {
          this->SpecificGravity_.set (std::move (x));
        }

        const UrinalysisData::Blood_optional& UrinalysisData::
        Blood () const
        {
          return this->Blood_;
        }

        UrinalysisData::Blood_optional& UrinalysisData::
        Blood ()
        {
          return this->Blood_;
        }

        void UrinalysisData::
        Blood (const Blood_type& x)
        {
          this->Blood_.set (x);
        }

        void UrinalysisData::
        Blood (const Blood_optional& x)
        {
          this->Blood_ = x;
        }

        void UrinalysisData::
        Blood (::std::unique_ptr< Blood_type > x)
        {
          this->Blood_.set (std::move (x));
        }

        const UrinalysisData::pH_optional& UrinalysisData::
        pH () const
        {
          return this->pH_;
        }

        UrinalysisData::pH_optional& UrinalysisData::
        pH ()
        {
          return this->pH_;
        }

        void UrinalysisData::
        pH (const pH_type& x)
        {
          this->pH_.set (x);
        }

        void UrinalysisData::
        pH (const pH_optional& x)
        {
          this->pH_ = x;
        }

        void UrinalysisData::
        pH (::std::unique_ptr< pH_type > x)
        {
          this->pH_.set (std::move (x));
        }

        const UrinalysisData::Protein_optional& UrinalysisData::
        Protein () const
        {
          return this->Protein_;
        }

        UrinalysisData::Protein_optional& UrinalysisData::
        Protein ()
        {
          return this->Protein_;
        }

        void UrinalysisData::
        Protein (const Protein_type& x)
        {
          this->Protein_.set (x);
        }

        void UrinalysisData::
        Protein (const Protein_optional& x)
        {
          this->Protein_ = x;
        }

        void UrinalysisData::
        Protein (::std::unique_ptr< Protein_type > x)
        {
          this->Protein_.set (std::move (x));
        }

        const UrinalysisData::Urobilinogen_optional& UrinalysisData::
        Urobilinogen () const
        {
          return this->Urobilinogen_;
        }

        UrinalysisData::Urobilinogen_optional& UrinalysisData::
        Urobilinogen ()
        {
          return this->Urobilinogen_;
        }

        void UrinalysisData::
        Urobilinogen (const Urobilinogen_type& x)
        {
          this->Urobilinogen_.set (x);
        }

        void UrinalysisData::
        Urobilinogen (const Urobilinogen_optional& x)
        {
          this->Urobilinogen_ = x;
        }

        void UrinalysisData::
        Urobilinogen (::std::unique_ptr< Urobilinogen_type > x)
        {
          this->Urobilinogen_.set (std::move (x));
        }

        const UrinalysisData::Nitrite_optional& UrinalysisData::
        Nitrite () const
        {
          return this->Nitrite_;
        }

        UrinalysisData::Nitrite_optional& UrinalysisData::
        Nitrite ()
        {
          return this->Nitrite_;
        }

        void UrinalysisData::
        Nitrite (const Nitrite_type& x)
        {
          this->Nitrite_.set (x);
        }

        void UrinalysisData::
        Nitrite (const Nitrite_optional& x)
        {
          this->Nitrite_ = x;
        }

        void UrinalysisData::
        Nitrite (::std::unique_ptr< Nitrite_type > x)
        {
          this->Nitrite_.set (std::move (x));
        }

        const UrinalysisData::LeukocyteEsterase_optional& UrinalysisData::
        LeukocyteEsterase () const
        {
          return this->LeukocyteEsterase_;
        }

        UrinalysisData::LeukocyteEsterase_optional& UrinalysisData::
        LeukocyteEsterase ()
        {
          return this->LeukocyteEsterase_;
        }

        void UrinalysisData::
        LeukocyteEsterase (const LeukocyteEsterase_type& x)
        {
          this->LeukocyteEsterase_.set (x);
        }

        void UrinalysisData::
        LeukocyteEsterase (const LeukocyteEsterase_optional& x)
        {
          this->LeukocyteEsterase_ = x;
        }

        void UrinalysisData::
        LeukocyteEsterase (::std::unique_ptr< LeukocyteEsterase_type > x)
        {
          this->LeukocyteEsterase_.set (std::move (x));
        }

        const UrinalysisData::Microscopic_optional& UrinalysisData::
        Microscopic () const
        {
          return this->Microscopic_;
        }

        UrinalysisData::Microscopic_optional& UrinalysisData::
        Microscopic ()
        {
          return this->Microscopic_;
        }

        void UrinalysisData::
        Microscopic (const Microscopic_type& x)
        {
          this->Microscopic_.set (x);
        }

        void UrinalysisData::
        Microscopic (const Microscopic_optional& x)
        {
          this->Microscopic_ = x;
        }

        void UrinalysisData::
        Microscopic (::std::unique_ptr< Microscopic_type > x)
        {
          this->Microscopic_.set (std::move (x));
        }


        // UrinalysisMicroscopicData
        // 

        const UrinalysisMicroscopicData::ObservationType_type& UrinalysisMicroscopicData::
        ObservationType () const
        {
          return this->ObservationType_.get ();
        }

        UrinalysisMicroscopicData::ObservationType_type& UrinalysisMicroscopicData::
        ObservationType ()
        {
          return this->ObservationType_.get ();
        }

        void UrinalysisMicroscopicData::
        ObservationType (const ObservationType_type& x)
        {
          this->ObservationType_.set (x);
        }

        void UrinalysisMicroscopicData::
        ObservationType (::std::unique_ptr< ObservationType_type > x)
        {
          this->ObservationType_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::RedBloodCells_optional& UrinalysisMicroscopicData::
        RedBloodCells () const
        {
          return this->RedBloodCells_;
        }

        UrinalysisMicroscopicData::RedBloodCells_optional& UrinalysisMicroscopicData::
        RedBloodCells ()
        {
          return this->RedBloodCells_;
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (const RedBloodCells_type& x)
        {
          this->RedBloodCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (const RedBloodCells_optional& x)
        {
          this->RedBloodCells_ = x;
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (::std::unique_ptr< RedBloodCells_type > x)
        {
          this->RedBloodCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::WhiteBloodCells_optional& UrinalysisMicroscopicData::
        WhiteBloodCells () const
        {
          return this->WhiteBloodCells_;
        }

        UrinalysisMicroscopicData::WhiteBloodCells_optional& UrinalysisMicroscopicData::
        WhiteBloodCells ()
        {
          return this->WhiteBloodCells_;
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (const WhiteBloodCells_type& x)
        {
          this->WhiteBloodCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (const WhiteBloodCells_optional& x)
        {
          this->WhiteBloodCells_ = x;
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (::std::unique_ptr< WhiteBloodCells_type > x)
        {
          this->WhiteBloodCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::EpithelialCells_optional& UrinalysisMicroscopicData::
        EpithelialCells () const
        {
          return this->EpithelialCells_;
        }

        UrinalysisMicroscopicData::EpithelialCells_optional& UrinalysisMicroscopicData::
        EpithelialCells ()
        {
          return this->EpithelialCells_;
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (const EpithelialCells_type& x)
        {
          this->EpithelialCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (const EpithelialCells_optional& x)
        {
          this->EpithelialCells_ = x;
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (::std::unique_ptr< EpithelialCells_type > x)
        {
          this->EpithelialCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Casts_optional& UrinalysisMicroscopicData::
        Casts () const
        {
          return this->Casts_;
        }

        UrinalysisMicroscopicData::Casts_optional& UrinalysisMicroscopicData::
        Casts ()
        {
          return this->Casts_;
        }

        void UrinalysisMicroscopicData::
        Casts (const Casts_type& x)
        {
          this->Casts_.set (x);
        }

        void UrinalysisMicroscopicData::
        Casts (const Casts_optional& x)
        {
          this->Casts_ = x;
        }

        void UrinalysisMicroscopicData::
        Casts (::std::unique_ptr< Casts_type > x)
        {
          this->Casts_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Crystals_optional& UrinalysisMicroscopicData::
        Crystals () const
        {
          return this->Crystals_;
        }

        UrinalysisMicroscopicData::Crystals_optional& UrinalysisMicroscopicData::
        Crystals ()
        {
          return this->Crystals_;
        }

        void UrinalysisMicroscopicData::
        Crystals (const Crystals_type& x)
        {
          this->Crystals_.set (x);
        }

        void UrinalysisMicroscopicData::
        Crystals (const Crystals_optional& x)
        {
          this->Crystals_ = x;
        }

        void UrinalysisMicroscopicData::
        Crystals (::std::unique_ptr< Crystals_type > x)
        {
          this->Crystals_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Bacteria_optional& UrinalysisMicroscopicData::
        Bacteria () const
        {
          return this->Bacteria_;
        }

        UrinalysisMicroscopicData::Bacteria_optional& UrinalysisMicroscopicData::
        Bacteria ()
        {
          return this->Bacteria_;
        }

        void UrinalysisMicroscopicData::
        Bacteria (const Bacteria_type& x)
        {
          this->Bacteria_.set (x);
        }

        void UrinalysisMicroscopicData::
        Bacteria (const Bacteria_optional& x)
        {
          this->Bacteria_ = x;
        }

        void UrinalysisMicroscopicData::
        Bacteria (::std::unique_ptr< Bacteria_type > x)
        {
          this->Bacteria_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Trichomonads_optional& UrinalysisMicroscopicData::
        Trichomonads () const
        {
          return this->Trichomonads_;
        }

        UrinalysisMicroscopicData::Trichomonads_optional& UrinalysisMicroscopicData::
        Trichomonads ()
        {
          return this->Trichomonads_;
        }

        void UrinalysisMicroscopicData::
        Trichomonads (const Trichomonads_type& x)
        {
          this->Trichomonads_.set (x);
        }

        void UrinalysisMicroscopicData::
        Trichomonads (const Trichomonads_optional& x)
        {
          this->Trichomonads_ = x;
        }

        void UrinalysisMicroscopicData::
        Trichomonads (::std::unique_ptr< Trichomonads_type > x)
        {
          this->Trichomonads_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Yeast_optional& UrinalysisMicroscopicData::
        Yeast () const
        {
          return this->Yeast_;
        }

        UrinalysisMicroscopicData::Yeast_optional& UrinalysisMicroscopicData::
        Yeast ()
        {
          return this->Yeast_;
        }

        void UrinalysisMicroscopicData::
        Yeast (const Yeast_type& x)
        {
          this->Yeast_.set (x);
        }

        void UrinalysisMicroscopicData::
        Yeast (const Yeast_optional& x)
        {
          this->Yeast_ = x;
        }

        void UrinalysisMicroscopicData::
        Yeast (::std::unique_ptr< Yeast_type > x)
        {
          this->Yeast_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PatientAssessmentData
        //

        PatientAssessmentData::
        PatientAssessmentData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData ()
        {
        }

        PatientAssessmentData::
        PatientAssessmentData (const PatientAssessmentData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c)
        {
        }

        PatientAssessmentData::
        PatientAssessmentData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f, c)
        {
        }

        PatientAssessmentData* PatientAssessmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PatientAssessmentData (*this, f, c);
        }

        PatientAssessmentData::
        ~PatientAssessmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PatientAssessmentData >
        _xsd_PatientAssessmentData_type_factory_init (
          "PatientAssessmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PulmonaryFunctionTestData
        //

        PulmonaryFunctionTestData::
        PulmonaryFunctionTestData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ExpiratoryReserveVolume_ (this),
          ForcedVitalCapacity_ (this),
          ForcedExpiratoryVolume_ (this),
          ForcedExpiratoryFlow_ (this),
          FunctionalResidualCapacity_ (this),
          InspiratoryCapacity_ (this),
          InspiratoryReserveVolume_ (this),
          MaximumVoluntaryVentilation_ (this),
          PeakExpiratoryFlow_ (this),
          ResidualVolume_ (this),
          SlowVitalCapacity_ (this),
          TotalLungCapacity_ (this),
          VitalCapacity_ (this),
          LungVolumePlot_ (this)
        {
        }

        PulmonaryFunctionTestData::
        PulmonaryFunctionTestData (const PulmonaryFunctionTestData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          ExpiratoryReserveVolume_ (x.ExpiratoryReserveVolume_, f, this),
          ForcedVitalCapacity_ (x.ForcedVitalCapacity_, f, this),
          ForcedExpiratoryVolume_ (x.ForcedExpiratoryVolume_, f, this),
          ForcedExpiratoryFlow_ (x.ForcedExpiratoryFlow_, f, this),
          FunctionalResidualCapacity_ (x.FunctionalResidualCapacity_, f, this),
          InspiratoryCapacity_ (x.InspiratoryCapacity_, f, this),
          InspiratoryReserveVolume_ (x.InspiratoryReserveVolume_, f, this),
          MaximumVoluntaryVentilation_ (x.MaximumVoluntaryVentilation_, f, this),
          PeakExpiratoryFlow_ (x.PeakExpiratoryFlow_, f, this),
          ResidualVolume_ (x.ResidualVolume_, f, this),
          SlowVitalCapacity_ (x.SlowVitalCapacity_, f, this),
          TotalLungCapacity_ (x.TotalLungCapacity_, f, this),
          VitalCapacity_ (x.VitalCapacity_, f, this),
          LungVolumePlot_ (x.LungVolumePlot_, f, this)
        {
        }

        PulmonaryFunctionTestData::
        PulmonaryFunctionTestData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          ExpiratoryReserveVolume_ (this),
          ForcedVitalCapacity_ (this),
          ForcedExpiratoryVolume_ (this),
          ForcedExpiratoryFlow_ (this),
          FunctionalResidualCapacity_ (this),
          InspiratoryCapacity_ (this),
          InspiratoryReserveVolume_ (this),
          MaximumVoluntaryVentilation_ (this),
          PeakExpiratoryFlow_ (this),
          ResidualVolume_ (this),
          SlowVitalCapacity_ (this),
          TotalLungCapacity_ (this),
          VitalCapacity_ (this),
          LungVolumePlot_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PulmonaryFunctionTestData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ExpiratoryReserveVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExpiratoryReserveVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExpiratoryReserveVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExpiratoryReserveVolume_)
                {
                  ::std::unique_ptr< ExpiratoryReserveVolume_type > r (
                    dynamic_cast< ExpiratoryReserveVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExpiratoryReserveVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ForcedVitalCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ForcedVitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ForcedVitalCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ForcedVitalCapacity_)
                {
                  ::std::unique_ptr< ForcedVitalCapacity_type > r (
                    dynamic_cast< ForcedVitalCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ForcedVitalCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ForcedExpiratoryVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ForcedExpiratoryVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ForcedExpiratoryVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ForcedExpiratoryVolume_)
                {
                  ::std::unique_ptr< ForcedExpiratoryVolume_type > r (
                    dynamic_cast< ForcedExpiratoryVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ForcedExpiratoryVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ForcedExpiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ForcedExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ForcedExpiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ForcedExpiratoryFlow_)
                {
                  ::std::unique_ptr< ForcedExpiratoryFlow_type > r (
                    dynamic_cast< ForcedExpiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ForcedExpiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FunctionalResidualCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FunctionalResidualCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FunctionalResidualCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FunctionalResidualCapacity_)
                {
                  ::std::unique_ptr< FunctionalResidualCapacity_type > r (
                    dynamic_cast< FunctionalResidualCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FunctionalResidualCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryCapacity_)
                {
                  ::std::unique_ptr< InspiratoryCapacity_type > r (
                    dynamic_cast< InspiratoryCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryReserveVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryReserveVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryReserveVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryReserveVolume_)
                {
                  ::std::unique_ptr< InspiratoryReserveVolume_type > r (
                    dynamic_cast< InspiratoryReserveVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryReserveVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MaximumVoluntaryVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MaximumVoluntaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MaximumVoluntaryVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MaximumVoluntaryVentilation_)
                {
                  ::std::unique_ptr< MaximumVoluntaryVentilation_type > r (
                    dynamic_cast< MaximumVoluntaryVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MaximumVoluntaryVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PeakExpiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PeakExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PeakExpiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PeakExpiratoryFlow_)
                {
                  ::std::unique_ptr< PeakExpiratoryFlow_type > r (
                    dynamic_cast< PeakExpiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PeakExpiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResidualVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResidualVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResidualVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResidualVolume_)
                {
                  ::std::unique_ptr< ResidualVolume_type > r (
                    dynamic_cast< ResidualVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResidualVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SlowVitalCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SlowVitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SlowVitalCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SlowVitalCapacity_)
                {
                  ::std::unique_ptr< SlowVitalCapacity_type > r (
                    dynamic_cast< SlowVitalCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SlowVitalCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalLungCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalLungCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalLungCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalLungCapacity_)
                {
                  ::std::unique_ptr< TotalLungCapacity_type > r (
                    dynamic_cast< TotalLungCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalLungCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VitalCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VitalCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VitalCapacity_)
                {
                  ::std::unique_ptr< VitalCapacity_type > r (
                    dynamic_cast< VitalCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VitalCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LungVolumePlot
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LungVolumePlot",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LungVolumePlot_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LungVolumePlot_)
                {
                  ::std::unique_ptr< LungVolumePlot_type > r (
                    dynamic_cast< LungVolumePlot_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LungVolumePlot_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        PulmonaryFunctionTestData* PulmonaryFunctionTestData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PulmonaryFunctionTestData (*this, f, c);
        }

        PulmonaryFunctionTestData& PulmonaryFunctionTestData::
        operator= (const PulmonaryFunctionTestData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->ExpiratoryReserveVolume_ = x.ExpiratoryReserveVolume_;
            this->ForcedVitalCapacity_ = x.ForcedVitalCapacity_;
            this->ForcedExpiratoryVolume_ = x.ForcedExpiratoryVolume_;
            this->ForcedExpiratoryFlow_ = x.ForcedExpiratoryFlow_;
            this->FunctionalResidualCapacity_ = x.FunctionalResidualCapacity_;
            this->InspiratoryCapacity_ = x.InspiratoryCapacity_;
            this->InspiratoryReserveVolume_ = x.InspiratoryReserveVolume_;
            this->MaximumVoluntaryVentilation_ = x.MaximumVoluntaryVentilation_;
            this->PeakExpiratoryFlow_ = x.PeakExpiratoryFlow_;
            this->ResidualVolume_ = x.ResidualVolume_;
            this->SlowVitalCapacity_ = x.SlowVitalCapacity_;
            this->TotalLungCapacity_ = x.TotalLungCapacity_;
            this->VitalCapacity_ = x.VitalCapacity_;
            this->LungVolumePlot_ = x.LungVolumePlot_;
          }

          return *this;
        }

        PulmonaryFunctionTestData::
        ~PulmonaryFunctionTestData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PulmonaryFunctionTestData >
        _xsd_PulmonaryFunctionTestData_type_factory_init (
          "PulmonaryFunctionTestData",
          "uri:/mil/tatrc/physiology/datamodel");

        // SequentialOrganFailureAssessmentData
        //

        SequentialOrganFailureAssessmentData::
        SequentialOrganFailureAssessmentData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          RespirationSOFA_ (this),
          CoagulationSOFA_ (this),
          LiverSOFA_ (this),
          CardiovascularSOFA_ (this),
          CentralNervousSOFA_ (this),
          RenalSOFA_ (this)
        {
        }

        SequentialOrganFailureAssessmentData::
        SequentialOrganFailureAssessmentData (const RespirationSOFA_type& RespirationSOFA,
                                              const CoagulationSOFA_type& CoagulationSOFA,
                                              const LiverSOFA_type& LiverSOFA,
                                              const CardiovascularSOFA_type& CardiovascularSOFA,
                                              const CentralNervousSOFA_type& CentralNervousSOFA,
                                              const RenalSOFA_type& RenalSOFA)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          RespirationSOFA_ (RespirationSOFA, this),
          CoagulationSOFA_ (CoagulationSOFA, this),
          LiverSOFA_ (LiverSOFA, this),
          CardiovascularSOFA_ (CardiovascularSOFA, this),
          CentralNervousSOFA_ (CentralNervousSOFA, this),
          RenalSOFA_ (RenalSOFA, this)
        {
        }

        SequentialOrganFailureAssessmentData::
        SequentialOrganFailureAssessmentData (::std::unique_ptr< RespirationSOFA_type > RespirationSOFA,
                                              ::std::unique_ptr< CoagulationSOFA_type > CoagulationSOFA,
                                              ::std::unique_ptr< LiverSOFA_type > LiverSOFA,
                                              ::std::unique_ptr< CardiovascularSOFA_type > CardiovascularSOFA,
                                              ::std::unique_ptr< CentralNervousSOFA_type > CentralNervousSOFA,
                                              ::std::unique_ptr< RenalSOFA_type > RenalSOFA)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          RespirationSOFA_ (std::move (RespirationSOFA), this),
          CoagulationSOFA_ (std::move (CoagulationSOFA), this),
          LiverSOFA_ (std::move (LiverSOFA), this),
          CardiovascularSOFA_ (std::move (CardiovascularSOFA), this),
          CentralNervousSOFA_ (std::move (CentralNervousSOFA), this),
          RenalSOFA_ (std::move (RenalSOFA), this)
        {
        }

        SequentialOrganFailureAssessmentData::
        SequentialOrganFailureAssessmentData (const SequentialOrganFailureAssessmentData& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          RespirationSOFA_ (x.RespirationSOFA_, f, this),
          CoagulationSOFA_ (x.CoagulationSOFA_, f, this),
          LiverSOFA_ (x.LiverSOFA_, f, this),
          CardiovascularSOFA_ (x.CardiovascularSOFA_, f, this),
          CentralNervousSOFA_ (x.CentralNervousSOFA_, f, this),
          RenalSOFA_ (x.RenalSOFA_, f, this)
        {
        }

        SequentialOrganFailureAssessmentData::
        SequentialOrganFailureAssessmentData (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          RespirationSOFA_ (this),
          CoagulationSOFA_ (this),
          LiverSOFA_ (this),
          CardiovascularSOFA_ (this),
          CentralNervousSOFA_ (this),
          RenalSOFA_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SequentialOrganFailureAssessmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RespirationSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RespirationSOFA_.present ())
                {
                  ::std::unique_ptr< RespirationSOFA_type > r (
                    dynamic_cast< RespirationSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoagulationSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoagulationSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoagulationSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CoagulationSOFA_.present ())
                {
                  ::std::unique_ptr< CoagulationSOFA_type > r (
                    dynamic_cast< CoagulationSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoagulationSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LiverSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiverSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiverSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LiverSOFA_.present ())
                {
                  ::std::unique_ptr< LiverSOFA_type > r (
                    dynamic_cast< LiverSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LiverSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiovascularSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiovascularSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiovascularSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CardiovascularSOFA_.present ())
                {
                  ::std::unique_ptr< CardiovascularSOFA_type > r (
                    dynamic_cast< CardiovascularSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiovascularSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralNervousSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralNervousSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralNervousSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CentralNervousSOFA_.present ())
                {
                  ::std::unique_ptr< CentralNervousSOFA_type > r (
                    dynamic_cast< CentralNervousSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralNervousSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalSOFA
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalSOFA_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RenalSOFA_.present ())
                {
                  ::std::unique_ptr< RenalSOFA_type > r (
                    dynamic_cast< RenalSOFA_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalSOFA_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!RespirationSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RespirationSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CoagulationSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CoagulationSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LiverSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LiverSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CardiovascularSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardiovascularSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CentralNervousSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CentralNervousSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RenalSOFA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RenalSOFA",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SequentialOrganFailureAssessmentData* SequentialOrganFailureAssessmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SequentialOrganFailureAssessmentData (*this, f, c);
        }

        SequentialOrganFailureAssessmentData& SequentialOrganFailureAssessmentData::
        operator= (const SequentialOrganFailureAssessmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->RespirationSOFA_ = x.RespirationSOFA_;
            this->CoagulationSOFA_ = x.CoagulationSOFA_;
            this->LiverSOFA_ = x.LiverSOFA_;
            this->CardiovascularSOFA_ = x.CardiovascularSOFA_;
            this->CentralNervousSOFA_ = x.CentralNervousSOFA_;
            this->RenalSOFA_ = x.RenalSOFA_;
          }

          return *this;
        }

        SequentialOrganFailureAssessmentData::
        ~SequentialOrganFailureAssessmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SequentialOrganFailureAssessmentData >
        _xsd_SequentialOrganFailureAssessmentData_type_factory_init (
          "SequentialOrganFailureAssessmentData",
          "uri:/mil/tatrc/physiology/datamodel");

        // CompleteBloodCountData
        //

        CompleteBloodCountData::
        CompleteBloodCountData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Hematocrit_ (this),
          Hemoglobin_ (this),
          PlateletCount_ (this),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularHemoglobinConcentration_ (this),
          MeanCorpuscularVolume_ (this),
          RedBloodCellCount_ (this),
          WhiteBloodCellCount_ (this)
        {
        }

        CompleteBloodCountData::
        CompleteBloodCountData (const CompleteBloodCountData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Hematocrit_ (x.Hematocrit_, f, this),
          Hemoglobin_ (x.Hemoglobin_, f, this),
          PlateletCount_ (x.PlateletCount_, f, this),
          MeanCorpuscularHemoglobin_ (x.MeanCorpuscularHemoglobin_, f, this),
          MeanCorpuscularHemoglobinConcentration_ (x.MeanCorpuscularHemoglobinConcentration_, f, this),
          MeanCorpuscularVolume_ (x.MeanCorpuscularVolume_, f, this),
          RedBloodCellCount_ (x.RedBloodCellCount_, f, this),
          WhiteBloodCellCount_ (x.WhiteBloodCellCount_, f, this)
        {
        }

        CompleteBloodCountData::
        CompleteBloodCountData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Hematocrit_ (this),
          Hemoglobin_ (this),
          PlateletCount_ (this),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularHemoglobinConcentration_ (this),
          MeanCorpuscularVolume_ (this),
          RedBloodCellCount_ (this),
          WhiteBloodCellCount_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompleteBloodCountData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Hematocrit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Hematocrit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Hematocrit_)
                {
                  ::std::unique_ptr< Hematocrit_type > r (
                    dynamic_cast< Hematocrit_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Hematocrit_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Hemoglobin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Hemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Hemoglobin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Hemoglobin_)
                {
                  ::std::unique_ptr< Hemoglobin_type > r (
                    dynamic_cast< Hemoglobin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Hemoglobin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlateletCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlateletCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlateletCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlateletCount_)
                {
                  ::std::unique_ptr< PlateletCount_type > r (
                    dynamic_cast< PlateletCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlateletCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularHemoglobin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularHemoglobin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularHemoglobin_)
                {
                  ::std::unique_ptr< MeanCorpuscularHemoglobin_type > r (
                    dynamic_cast< MeanCorpuscularHemoglobin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularHemoglobin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularHemoglobinConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularHemoglobinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularHemoglobinConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularHemoglobinConcentration_)
                {
                  ::std::unique_ptr< MeanCorpuscularHemoglobinConcentration_type > r (
                    dynamic_cast< MeanCorpuscularHemoglobinConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularHemoglobinConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularVolume_)
                {
                  ::std::unique_ptr< MeanCorpuscularVolume_type > r (
                    dynamic_cast< MeanCorpuscularVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCellCount_)
                {
                  ::std::unique_ptr< RedBloodCellCount_type > r (
                    dynamic_cast< RedBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCellCount_)
                {
                  ::std::unique_ptr< WhiteBloodCellCount_type > r (
                    dynamic_cast< WhiteBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CompleteBloodCountData* CompleteBloodCountData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompleteBloodCountData (*this, f, c);
        }

        CompleteBloodCountData& CompleteBloodCountData::
        operator= (const CompleteBloodCountData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Hematocrit_ = x.Hematocrit_;
            this->Hemoglobin_ = x.Hemoglobin_;
            this->PlateletCount_ = x.PlateletCount_;
            this->MeanCorpuscularHemoglobin_ = x.MeanCorpuscularHemoglobin_;
            this->MeanCorpuscularHemoglobinConcentration_ = x.MeanCorpuscularHemoglobinConcentration_;
            this->MeanCorpuscularVolume_ = x.MeanCorpuscularVolume_;
            this->RedBloodCellCount_ = x.RedBloodCellCount_;
            this->WhiteBloodCellCount_ = x.WhiteBloodCellCount_;
          }

          return *this;
        }

        CompleteBloodCountData::
        ~CompleteBloodCountData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_type_factory_init (
          "CompleteBloodCountData",
          "uri:/mil/tatrc/physiology/datamodel");

        // PsychomotorVigilanceTaskData
        //

        PsychomotorVigilanceTaskData::
        PsychomotorVigilanceTaskData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ReactionTime_ (this),
          AttentionLapses_ (this)
        {
        }

        PsychomotorVigilanceTaskData::
        PsychomotorVigilanceTaskData (const PsychomotorVigilanceTaskData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          ReactionTime_ (x.ReactionTime_, f, this),
          AttentionLapses_ (x.AttentionLapses_, f, this)
        {
        }

        PsychomotorVigilanceTaskData::
        PsychomotorVigilanceTaskData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          ReactionTime_ (this),
          AttentionLapses_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PsychomotorVigilanceTaskData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ReactionTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReactionTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReactionTime_)
                {
                  ::std::unique_ptr< ReactionTime_type > r (
                    dynamic_cast< ReactionTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReactionTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AttentionLapses
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AttentionLapses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AttentionLapses_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AttentionLapses_)
                {
                  ::std::unique_ptr< AttentionLapses_type > r (
                    dynamic_cast< AttentionLapses_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AttentionLapses_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        PsychomotorVigilanceTaskData* PsychomotorVigilanceTaskData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PsychomotorVigilanceTaskData (*this, f, c);
        }

        PsychomotorVigilanceTaskData& PsychomotorVigilanceTaskData::
        operator= (const PsychomotorVigilanceTaskData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->ReactionTime_ = x.ReactionTime_;
            this->AttentionLapses_ = x.AttentionLapses_;
          }

          return *this;
        }

        PsychomotorVigilanceTaskData::
        ~PsychomotorVigilanceTaskData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PsychomotorVigilanceTaskData >
        _xsd_PsychomotorVigilanceTaskData_type_factory_init (
          "PsychomotorVigilanceTaskData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ComprehensiveMetabolicPanelData
        //

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Albumin_ (this),
          ALP_ (this),
          ALT_ (this),
          AST_ (this),
          BUN_ (this),
          Calcium_ (this),
          Chloride_ (this),
          CO2_ (this),
          Creatinine_ (this),
          Glucose_ (this),
          Potassium_ (this),
          Sodium_ (this),
          TotalBilirubin_ (this),
          TotalProtein_ (this)
        {
        }

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData (const ComprehensiveMetabolicPanelData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Albumin_ (x.Albumin_, f, this),
          ALP_ (x.ALP_, f, this),
          ALT_ (x.ALT_, f, this),
          AST_ (x.AST_, f, this),
          BUN_ (x.BUN_, f, this),
          Calcium_ (x.Calcium_, f, this),
          Chloride_ (x.Chloride_, f, this),
          CO2_ (x.CO2_, f, this),
          Creatinine_ (x.Creatinine_, f, this),
          Glucose_ (x.Glucose_, f, this),
          Potassium_ (x.Potassium_, f, this),
          Sodium_ (x.Sodium_, f, this),
          TotalBilirubin_ (x.TotalBilirubin_, f, this),
          TotalProtein_ (x.TotalProtein_, f, this)
        {
        }

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Albumin_ (this),
          ALP_ (this),
          ALT_ (this),
          AST_ (this),
          BUN_ (this),
          Calcium_ (this),
          Chloride_ (this),
          CO2_ (this),
          Creatinine_ (this),
          Glucose_ (this),
          Potassium_ (this),
          Sodium_ (this),
          TotalBilirubin_ (this),
          TotalProtein_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ComprehensiveMetabolicPanelData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Albumin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Albumin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Albumin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Albumin_)
                {
                  ::std::unique_ptr< Albumin_type > r (
                    dynamic_cast< Albumin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Albumin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ALP
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ALP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ALP_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ALP_)
                {
                  ::std::unique_ptr< ALP_type > r (
                    dynamic_cast< ALP_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ALP_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ALT
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ALT",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ALT_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ALT_)
                {
                  ::std::unique_ptr< ALT_type > r (
                    dynamic_cast< ALT_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ALT_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AST
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AST",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AST_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AST_)
                {
                  ::std::unique_ptr< AST_type > r (
                    dynamic_cast< AST_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AST_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BUN
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BUN",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BUN_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BUN_)
                {
                  ::std::unique_ptr< BUN_type > r (
                    dynamic_cast< BUN_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BUN_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Calcium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Calcium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Calcium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Calcium_)
                {
                  ::std::unique_ptr< Calcium_type > r (
                    dynamic_cast< Calcium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Calcium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Chloride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Chloride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Chloride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Chloride_)
                {
                  ::std::unique_ptr< Chloride_type > r (
                    dynamic_cast< Chloride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Chloride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CO2
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CO2",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CO2_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CO2_)
                {
                  ::std::unique_ptr< CO2_type > r (
                    dynamic_cast< CO2_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CO2_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Creatinine
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Creatinine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Creatinine_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Creatinine_)
                {
                  ::std::unique_ptr< Creatinine_type > r (
                    dynamic_cast< Creatinine_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Creatinine_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Glucose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Glucose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Glucose_)
                {
                  ::std::unique_ptr< Glucose_type > r (
                    dynamic_cast< Glucose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Glucose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Potassium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Potassium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Potassium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Potassium_)
                {
                  ::std::unique_ptr< Potassium_type > r (
                    dynamic_cast< Potassium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Potassium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Sodium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Sodium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Sodium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Sodium_)
                {
                  ::std::unique_ptr< Sodium_type > r (
                    dynamic_cast< Sodium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Sodium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalBilirubin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBilirubin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalBilirubin_)
                {
                  ::std::unique_ptr< TotalBilirubin_type > r (
                    dynamic_cast< TotalBilirubin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBilirubin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalProtein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalProtein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalProtein_)
                {
                  ::std::unique_ptr< TotalProtein_type > r (
                    dynamic_cast< TotalProtein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalProtein_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ComprehensiveMetabolicPanelData* ComprehensiveMetabolicPanelData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ComprehensiveMetabolicPanelData (*this, f, c);
        }

        ComprehensiveMetabolicPanelData& ComprehensiveMetabolicPanelData::
        operator= (const ComprehensiveMetabolicPanelData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Albumin_ = x.Albumin_;
            this->ALP_ = x.ALP_;
            this->ALT_ = x.ALT_;
            this->AST_ = x.AST_;
            this->BUN_ = x.BUN_;
            this->Calcium_ = x.Calcium_;
            this->Chloride_ = x.Chloride_;
            this->CO2_ = x.CO2_;
            this->Creatinine_ = x.Creatinine_;
            this->Glucose_ = x.Glucose_;
            this->Potassium_ = x.Potassium_;
            this->Sodium_ = x.Sodium_;
            this->TotalBilirubin_ = x.TotalBilirubin_;
            this->TotalProtein_ = x.TotalProtein_;
          }

          return *this;
        }

        ComprehensiveMetabolicPanelData::
        ~ComprehensiveMetabolicPanelData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_type_factory_init (
          "ComprehensiveMetabolicPanelData",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumPresenceIndicator
        //

        enumPresenceIndicator::
        enumPresenceIndicator (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumPresenceIndicator_convert ();
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumPresenceIndicator_convert ();
        }

        enumPresenceIndicator::
        enumPresenceIndicator (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumPresenceIndicator_convert ();
        }

        enumPresenceIndicator* enumPresenceIndicator::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumPresenceIndicator (*this, f, c);
        }

        enumPresenceIndicator::value enumPresenceIndicator::
        _xsd_enumPresenceIndicator_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumPresenceIndicator_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumPresenceIndicator_indexes_,
                            _xsd_enumPresenceIndicator_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumPresenceIndicator_indexes_ + 2 || _xsd_enumPresenceIndicator_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumPresenceIndicator::
        _xsd_enumPresenceIndicator_literals_[2] =
        {
          "Positive",
          "Negative"
        };

        const enumPresenceIndicator::value enumPresenceIndicator::
        _xsd_enumPresenceIndicator_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumPresenceIndicator::Negative,
          ::mil::tatrc::physiology::datamodel::enumPresenceIndicator::Positive
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumPresenceIndicator >
        _xsd_enumPresenceIndicator_type_factory_init (
          "enumPresenceIndicator",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumClarityIndicator
        //

        enumClarityIndicator::
        enumClarityIndicator (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumClarityIndicator_convert ();
        }

        enumClarityIndicator::
        enumClarityIndicator (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumClarityIndicator_convert ();
        }

        enumClarityIndicator::
        enumClarityIndicator (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumClarityIndicator_convert ();
        }

        enumClarityIndicator* enumClarityIndicator::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumClarityIndicator (*this, f, c);
        }

        enumClarityIndicator::value enumClarityIndicator::
        _xsd_enumClarityIndicator_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumClarityIndicator_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumClarityIndicator_indexes_,
                            _xsd_enumClarityIndicator_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_enumClarityIndicator_indexes_ + 4 || _xsd_enumClarityIndicator_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumClarityIndicator::
        _xsd_enumClarityIndicator_literals_[4] =
        {
          "Clear",
          "SlightlyCloudy",
          "Cloudy",
          "Turbid"
        };

        const enumClarityIndicator::value enumClarityIndicator::
        _xsd_enumClarityIndicator_indexes_[4] =
        {
          ::mil::tatrc::physiology::datamodel::enumClarityIndicator::Clear,
          ::mil::tatrc::physiology::datamodel::enumClarityIndicator::Cloudy,
          ::mil::tatrc::physiology::datamodel::enumClarityIndicator::SlightlyCloudy,
          ::mil::tatrc::physiology::datamodel::enumClarityIndicator::Turbid
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumClarityIndicator >
        _xsd_enumClarityIndicator_type_factory_init (
          "enumClarityIndicator",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumUrineColor
        //

        enumUrineColor::
        enumUrineColor (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumUrineColor_convert ();
        }

        enumUrineColor::
        enumUrineColor (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumUrineColor_convert ();
        }

        enumUrineColor::
        enumUrineColor (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumUrineColor_convert ();
        }

        enumUrineColor* enumUrineColor::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumUrineColor (*this, f, c);
        }

        enumUrineColor::value enumUrineColor::
        _xsd_enumUrineColor_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumUrineColor_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumUrineColor_indexes_,
                            _xsd_enumUrineColor_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_enumUrineColor_indexes_ + 4 || _xsd_enumUrineColor_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumUrineColor::
        _xsd_enumUrineColor_literals_[4] =
        {
          "PaleYellow",
          "Yellow",
          "DarkYellow",
          "Pink"
        };

        const enumUrineColor::value enumUrineColor::
        _xsd_enumUrineColor_indexes_[4] =
        {
          ::mil::tatrc::physiology::datamodel::enumUrineColor::DarkYellow,
          ::mil::tatrc::physiology::datamodel::enumUrineColor::PaleYellow,
          ::mil::tatrc::physiology::datamodel::enumUrineColor::Pink,
          ::mil::tatrc::physiology::datamodel::enumUrineColor::Yellow
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumUrineColor >
        _xsd_enumUrineColor_type_factory_init (
          "enumUrineColor",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumMicroscopicObservationType
        //

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumMicroscopicObservationType_convert ();
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumMicroscopicObservationType_convert ();
        }

        enumMicroscopicObservationType::
        enumMicroscopicObservationType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumMicroscopicObservationType_convert ();
        }

        enumMicroscopicObservationType* enumMicroscopicObservationType::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumMicroscopicObservationType (*this, f, c);
        }

        enumMicroscopicObservationType::value enumMicroscopicObservationType::
        _xsd_enumMicroscopicObservationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumMicroscopicObservationType_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumMicroscopicObservationType_indexes_,
                            _xsd_enumMicroscopicObservationType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_enumMicroscopicObservationType_indexes_ + 2 || _xsd_enumMicroscopicObservationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumMicroscopicObservationType::
        _xsd_enumMicroscopicObservationType_literals_[2] =
        {
          "LowPowerField",
          "HighPowerField"
        };

        const enumMicroscopicObservationType::value enumMicroscopicObservationType::
        _xsd_enumMicroscopicObservationType_indexes_[2] =
        {
          ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationType::HighPowerField,
          ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationType::LowPowerField
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumMicroscopicObservationType >
        _xsd_enumMicroscopicObservationType_type_factory_init (
          "enumMicroscopicObservationType",
          "uri:/mil/tatrc/physiology/datamodel");

        // enumMicroscopicObservationAmount
        //

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::xml_schema::string (e, f, c)
        {
          _xsd_enumMicroscopicObservationAmount_convert ();
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::xml_schema::string (a, f, c)
        {
          _xsd_enumMicroscopicObservationAmount_convert ();
        }

        enumMicroscopicObservationAmount::
        enumMicroscopicObservationAmount (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
        : ::xml_schema::string (s, e, f, c)
        {
          _xsd_enumMicroscopicObservationAmount_convert ();
        }

        enumMicroscopicObservationAmount* enumMicroscopicObservationAmount::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class enumMicroscopicObservationAmount (*this, f, c);
        }

        enumMicroscopicObservationAmount::value enumMicroscopicObservationAmount::
        _xsd_enumMicroscopicObservationAmount_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enumMicroscopicObservationAmount_literals_);
          const value* i (::std::lower_bound (
                            _xsd_enumMicroscopicObservationAmount_indexes_,
                            _xsd_enumMicroscopicObservationAmount_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_enumMicroscopicObservationAmount_indexes_ + 3 || _xsd_enumMicroscopicObservationAmount_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const enumMicroscopicObservationAmount::
        _xsd_enumMicroscopicObservationAmount_literals_[3] =
        {
          "Few",
          "Moderate",
          "Many"
        };

        const enumMicroscopicObservationAmount::value enumMicroscopicObservationAmount::
        _xsd_enumMicroscopicObservationAmount_indexes_[3] =
        {
          ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount::Few,
          ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount::Many,
          ::mil::tatrc::physiology::datamodel::enumMicroscopicObservationAmount::Moderate
        };

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, enumMicroscopicObservationAmount >
        _xsd_enumMicroscopicObservationAmount_type_factory_init (
          "enumMicroscopicObservationAmount",
          "uri:/mil/tatrc/physiology/datamodel");

        // UrinalysisData
        //

        UrinalysisData::
        UrinalysisData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Color_ (this),
          Appearance_ (this),
          Glucose_ (this),
          Ketone_ (this),
          Bilirubin_ (this),
          SpecificGravity_ (this),
          Blood_ (this),
          pH_ (this),
          Protein_ (this),
          Urobilinogen_ (this),
          Nitrite_ (this),
          LeukocyteEsterase_ (this),
          Microscopic_ (this)
        {
        }

        UrinalysisData::
        UrinalysisData (const UrinalysisData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Color_ (x.Color_, f, this),
          Appearance_ (x.Appearance_, f, this),
          Glucose_ (x.Glucose_, f, this),
          Ketone_ (x.Ketone_, f, this),
          Bilirubin_ (x.Bilirubin_, f, this),
          SpecificGravity_ (x.SpecificGravity_, f, this),
          Blood_ (x.Blood_, f, this),
          pH_ (x.pH_, f, this),
          Protein_ (x.Protein_, f, this),
          Urobilinogen_ (x.Urobilinogen_, f, this),
          Nitrite_ (x.Nitrite_, f, this),
          LeukocyteEsterase_ (x.LeukocyteEsterase_, f, this),
          Microscopic_ (x.Microscopic_, f, this)
        {
        }

        UrinalysisData::
        UrinalysisData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Color_ (this),
          Appearance_ (this),
          Glucose_ (this),
          Ketone_ (this),
          Bilirubin_ (this),
          SpecificGravity_ (this),
          Blood_ (this),
          pH_ (this),
          Protein_ (this),
          Urobilinogen_ (this),
          Nitrite_ (this),
          LeukocyteEsterase_ (this),
          Microscopic_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void UrinalysisData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Color
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Color",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Color_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Color_)
                {
                  ::std::unique_ptr< Color_type > r (
                    dynamic_cast< Color_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Color_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Appearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Appearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Appearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Appearance_)
                {
                  ::std::unique_ptr< Appearance_type > r (
                    dynamic_cast< Appearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Appearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Glucose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Glucose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Glucose_)
                {
                  ::std::unique_ptr< Glucose_type > r (
                    dynamic_cast< Glucose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Glucose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Ketone
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Ketone",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Ketone_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Ketone_)
                {
                  ::std::unique_ptr< Ketone_type > r (
                    dynamic_cast< Ketone_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Ketone_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Bilirubin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Bilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Bilirubin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Bilirubin_)
                {
                  ::std::unique_ptr< Bilirubin_type > r (
                    dynamic_cast< Bilirubin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Bilirubin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SpecificGravity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SpecificGravity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SpecificGravity_)
                {
                  ::std::unique_ptr< SpecificGravity_type > r (
                    dynamic_cast< SpecificGravity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SpecificGravity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Blood
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Blood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Blood_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Blood_)
                {
                  ::std::unique_ptr< Blood_type > r (
                    dynamic_cast< Blood_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Blood_.set (::std::move (r));
                  continue;
                }
              }
            }

            // pH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< pH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->pH_)
                {
                  ::std::unique_ptr< pH_type > r (
                    dynamic_cast< pH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->pH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Protein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Protein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Protein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Protein_)
                {
                  ::std::unique_ptr< Protein_type > r (
                    dynamic_cast< Protein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Protein_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Urobilinogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Urobilinogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Urobilinogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Urobilinogen_)
                {
                  ::std::unique_ptr< Urobilinogen_type > r (
                    dynamic_cast< Urobilinogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Urobilinogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Nitrite
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Nitrite",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Nitrite_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Nitrite_)
                {
                  ::std::unique_ptr< Nitrite_type > r (
                    dynamic_cast< Nitrite_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Nitrite_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeukocyteEsterase
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeukocyteEsterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeukocyteEsterase_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeukocyteEsterase_)
                {
                  ::std::unique_ptr< LeukocyteEsterase_type > r (
                    dynamic_cast< LeukocyteEsterase_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeukocyteEsterase_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Microscopic
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Microscopic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Microscopic_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Microscopic_)
                {
                  ::std::unique_ptr< Microscopic_type > r (
                    dynamic_cast< Microscopic_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Microscopic_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        UrinalysisData* UrinalysisData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UrinalysisData (*this, f, c);
        }

        UrinalysisData& UrinalysisData::
        operator= (const UrinalysisData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Color_ = x.Color_;
            this->Appearance_ = x.Appearance_;
            this->Glucose_ = x.Glucose_;
            this->Ketone_ = x.Ketone_;
            this->Bilirubin_ = x.Bilirubin_;
            this->SpecificGravity_ = x.SpecificGravity_;
            this->Blood_ = x.Blood_;
            this->pH_ = x.pH_;
            this->Protein_ = x.Protein_;
            this->Urobilinogen_ = x.Urobilinogen_;
            this->Nitrite_ = x.Nitrite_;
            this->LeukocyteEsterase_ = x.LeukocyteEsterase_;
            this->Microscopic_ = x.Microscopic_;
          }

          return *this;
        }

        UrinalysisData::
        ~UrinalysisData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_type_factory_init (
          "UrinalysisData",
          "uri:/mil/tatrc/physiology/datamodel");

        // UrinalysisMicroscopicData
        //

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const ObservationType_type& ObservationType)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (ObservationType, this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (::std::unique_ptr< ObservationType_type > ObservationType)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (std::move (ObservationType), this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const UrinalysisMicroscopicData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          ObservationType_ (x.ObservationType_, f, this),
          RedBloodCells_ (x.RedBloodCells_, f, this),
          WhiteBloodCells_ (x.WhiteBloodCells_, f, this),
          EpithelialCells_ (x.EpithelialCells_, f, this),
          Casts_ (x.Casts_, f, this),
          Crystals_ (x.Crystals_, f, this),
          Bacteria_ (x.Bacteria_, f, this),
          Trichomonads_ (x.Trichomonads_, f, this),
          Yeast_ (x.Yeast_, f, this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          ObservationType_ (this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void UrinalysisMicroscopicData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ObservationType
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ObservationType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ObservationType_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ObservationType_.present ())
                {
                  ::std::unique_ptr< ObservationType_type > r (
                    dynamic_cast< ObservationType_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ObservationType_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCells_)
                {
                  ::std::unique_ptr< RedBloodCells_type > r (
                    dynamic_cast< RedBloodCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCells_)
                {
                  ::std::unique_ptr< WhiteBloodCells_type > r (
                    dynamic_cast< WhiteBloodCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EpithelialCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EpithelialCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EpithelialCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EpithelialCells_)
                {
                  ::std::unique_ptr< EpithelialCells_type > r (
                    dynamic_cast< EpithelialCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EpithelialCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Casts
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Casts",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Casts_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Casts_)
                {
                  ::std::unique_ptr< Casts_type > r (
                    dynamic_cast< Casts_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Casts_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Crystals
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Crystals",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Crystals_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Crystals_)
                {
                  ::std::unique_ptr< Crystals_type > r (
                    dynamic_cast< Crystals_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Crystals_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Bacteria
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Bacteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Bacteria_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Bacteria_)
                {
                  ::std::unique_ptr< Bacteria_type > r (
                    dynamic_cast< Bacteria_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Bacteria_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Trichomonads
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Trichomonads",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Trichomonads_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Trichomonads_)
                {
                  ::std::unique_ptr< Trichomonads_type > r (
                    dynamic_cast< Trichomonads_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Trichomonads_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Yeast
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Yeast",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Yeast_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Yeast_)
                {
                  ::std::unique_ptr< Yeast_type > r (
                    dynamic_cast< Yeast_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Yeast_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ObservationType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ObservationType",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        UrinalysisMicroscopicData* UrinalysisMicroscopicData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UrinalysisMicroscopicData (*this, f, c);
        }

        UrinalysisMicroscopicData& UrinalysisMicroscopicData::
        operator= (const UrinalysisMicroscopicData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->ObservationType_ = x.ObservationType_;
            this->RedBloodCells_ = x.RedBloodCells_;
            this->WhiteBloodCells_ = x.WhiteBloodCells_;
            this->EpithelialCells_ = x.EpithelialCells_;
            this->Casts_ = x.Casts_;
            this->Crystals_ = x.Crystals_;
            this->Bacteria_ = x.Bacteria_;
            this->Trichomonads_ = x.Trichomonads_;
            this->Yeast_ = x.Yeast_;
          }

          return *this;
        }

        UrinalysisMicroscopicData::
        ~UrinalysisMicroscopicData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_type_factory_init (
          "UrinalysisMicroscopicData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PatientAssessmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PatientAssessmentData >
        _xsd_PatientAssessmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PulmonaryFunctionTestData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExpiratoryReserveVolume ())
            {
              o << ::std::endl << "ExpiratoryReserveVolume: ";
              om.insert (o, *i.ExpiratoryReserveVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ForcedVitalCapacity ())
            {
              o << ::std::endl << "ForcedVitalCapacity: ";
              om.insert (o, *i.ForcedVitalCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ForcedExpiratoryVolume ())
            {
              o << ::std::endl << "ForcedExpiratoryVolume: ";
              om.insert (o, *i.ForcedExpiratoryVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ForcedExpiratoryFlow ())
            {
              o << ::std::endl << "ForcedExpiratoryFlow: ";
              om.insert (o, *i.ForcedExpiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FunctionalResidualCapacity ())
            {
              o << ::std::endl << "FunctionalResidualCapacity: ";
              om.insert (o, *i.FunctionalResidualCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryCapacity ())
            {
              o << ::std::endl << "InspiratoryCapacity: ";
              om.insert (o, *i.InspiratoryCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryReserveVolume ())
            {
              o << ::std::endl << "InspiratoryReserveVolume: ";
              om.insert (o, *i.InspiratoryReserveVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MaximumVoluntaryVentilation ())
            {
              o << ::std::endl << "MaximumVoluntaryVentilation: ";
              om.insert (o, *i.MaximumVoluntaryVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PeakExpiratoryFlow ())
            {
              o << ::std::endl << "PeakExpiratoryFlow: ";
              om.insert (o, *i.PeakExpiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResidualVolume ())
            {
              o << ::std::endl << "ResidualVolume: ";
              om.insert (o, *i.ResidualVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SlowVitalCapacity ())
            {
              o << ::std::endl << "SlowVitalCapacity: ";
              om.insert (o, *i.SlowVitalCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalLungCapacity ())
            {
              o << ::std::endl << "TotalLungCapacity: ";
              om.insert (o, *i.TotalLungCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VitalCapacity ())
            {
              o << ::std::endl << "VitalCapacity: ";
              om.insert (o, *i.VitalCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LungVolumePlot ())
            {
              o << ::std::endl << "LungVolumePlot: ";
              om.insert (o, *i.LungVolumePlot ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PulmonaryFunctionTestData >
        _xsd_PulmonaryFunctionTestData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const SequentialOrganFailureAssessmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RespirationSOFA: ";
            om.insert (o, i.RespirationSOFA ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CoagulationSOFA: ";
            om.insert (o, i.CoagulationSOFA ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LiverSOFA: ";
            om.insert (o, i.LiverSOFA ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CardiovascularSOFA: ";
            om.insert (o, i.CardiovascularSOFA ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CentralNervousSOFA: ";
            om.insert (o, i.CentralNervousSOFA ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RenalSOFA: ";
            om.insert (o, i.RenalSOFA ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SequentialOrganFailureAssessmentData >
        _xsd_SequentialOrganFailureAssessmentData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const CompleteBloodCountData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              o << ::std::endl << "Hematocrit: ";
              om.insert (o, *i.Hematocrit ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Hemoglobin ())
            {
              o << ::std::endl << "Hemoglobin: ";
              om.insert (o, *i.Hemoglobin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlateletCount ())
            {
              o << ::std::endl << "PlateletCount: ";
              om.insert (o, *i.PlateletCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              o << ::std::endl << "MeanCorpuscularHemoglobin: ";
              om.insert (o, *i.MeanCorpuscularHemoglobin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobinConcentration ())
            {
              o << ::std::endl << "MeanCorpuscularHemoglobinConcentration: ";
              om.insert (o, *i.MeanCorpuscularHemoglobinConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              o << ::std::endl << "MeanCorpuscularVolume: ";
              om.insert (o, *i.MeanCorpuscularVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              o << ::std::endl << "RedBloodCellCount: ";
              om.insert (o, *i.RedBloodCellCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              o << ::std::endl << "WhiteBloodCellCount: ";
              om.insert (o, *i.WhiteBloodCellCount ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const PsychomotorVigilanceTaskData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReactionTime ())
            {
              o << ::std::endl << "ReactionTime: ";
              om.insert (o, *i.ReactionTime ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AttentionLapses ())
            {
              o << ::std::endl << "AttentionLapses: ";
              om.insert (o, *i.AttentionLapses ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PsychomotorVigilanceTaskData >
        _xsd_PsychomotorVigilanceTaskData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ComprehensiveMetabolicPanelData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Albumin ())
            {
              o << ::std::endl << "Albumin: ";
              om.insert (o, *i.Albumin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ALP ())
            {
              o << ::std::endl << "ALP: ";
              om.insert (o, *i.ALP ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ALT ())
            {
              o << ::std::endl << "ALT: ";
              om.insert (o, *i.ALT ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AST ())
            {
              o << ::std::endl << "AST: ";
              om.insert (o, *i.AST ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BUN ())
            {
              o << ::std::endl << "BUN: ";
              om.insert (o, *i.BUN ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Calcium ())
            {
              o << ::std::endl << "Calcium: ";
              om.insert (o, *i.Calcium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Chloride ())
            {
              o << ::std::endl << "Chloride: ";
              om.insert (o, *i.Chloride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CO2 ())
            {
              o << ::std::endl << "CO2: ";
              om.insert (o, *i.CO2 ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Creatinine ())
            {
              o << ::std::endl << "Creatinine: ";
              om.insert (o, *i.Creatinine ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              o << ::std::endl << "Glucose: ";
              om.insert (o, *i.Glucose ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Potassium ())
            {
              o << ::std::endl << "Potassium: ";
              om.insert (o, *i.Potassium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Sodium ())
            {
              o << ::std::endl << "Sodium: ";
              om.insert (o, *i.Sodium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              o << ::std::endl << "TotalBilirubin: ";
              om.insert (o, *i.TotalBilirubin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalProtein ())
            {
              o << ::std::endl << "TotalProtein: ";
              om.insert (o, *i.TotalProtein ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumPresenceIndicator::value i)
        {
          return o << enumPresenceIndicator::_xsd_enumPresenceIndicator_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumPresenceIndicator& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumPresenceIndicator >
        _xsd_enumPresenceIndicator_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumClarityIndicator::value i)
        {
          return o << enumClarityIndicator::_xsd_enumClarityIndicator_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumClarityIndicator& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumClarityIndicator >
        _xsd_enumClarityIndicator_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumUrineColor::value i)
        {
          return o << enumUrineColor::_xsd_enumUrineColor_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumUrineColor& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumUrineColor >
        _xsd_enumUrineColor_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumMicroscopicObservationType::value i)
        {
          return o << enumMicroscopicObservationType::_xsd_enumMicroscopicObservationType_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumMicroscopicObservationType& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumMicroscopicObservationType >
        _xsd_enumMicroscopicObservationType_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, enumMicroscopicObservationAmount::value i)
        {
          return o << enumMicroscopicObservationAmount::_xsd_enumMicroscopicObservationAmount_literals_[i];
        }

        ::std::ostream&
        operator<< (::std::ostream& o, const enumMicroscopicObservationAmount& i)
        {
          return o << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, enumMicroscopicObservationAmount >
        _xsd_enumMicroscopicObservationAmount_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const UrinalysisData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Color ())
            {
              o << ::std::endl << "Color: ";
              om.insert (o, *i.Color ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Appearance ())
            {
              o << ::std::endl << "Appearance: ";
              om.insert (o, *i.Appearance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              o << ::std::endl << "Glucose: ";
              om.insert (o, *i.Glucose ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Ketone ())
            {
              o << ::std::endl << "Ketone: ";
              om.insert (o, *i.Ketone ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Bilirubin ())
            {
              o << ::std::endl << "Bilirubin: ";
              om.insert (o, *i.Bilirubin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SpecificGravity ())
            {
              o << ::std::endl << "SpecificGravity: ";
              om.insert (o, *i.SpecificGravity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Blood ())
            {
              o << ::std::endl << "Blood: ";
              om.insert (o, *i.Blood ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.pH ())
            {
              o << ::std::endl << "pH: ";
              om.insert (o, *i.pH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Protein ())
            {
              o << ::std::endl << "Protein: ";
              om.insert (o, *i.Protein ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Urobilinogen ())
            {
              o << ::std::endl << "Urobilinogen: ";
              om.insert (o, *i.Urobilinogen ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Nitrite ())
            {
              o << ::std::endl << "Nitrite: ";
              om.insert (o, *i.Nitrite ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeukocyteEsterase ())
            {
              o << ::std::endl << "LeukocyteEsterase: ";
              om.insert (o, *i.LeukocyteEsterase ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Microscopic ())
            {
              o << ::std::endl << "Microscopic: ";
              om.insert (o, *i.Microscopic ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const UrinalysisMicroscopicData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ObservationType: ";
            om.insert (o, i.ObservationType ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCells ())
            {
              o << ::std::endl << "RedBloodCells: ";
              om.insert (o, *i.RedBloodCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCells ())
            {
              o << ::std::endl << "WhiteBloodCells: ";
              om.insert (o, *i.WhiteBloodCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EpithelialCells ())
            {
              o << ::std::endl << "EpithelialCells: ";
              om.insert (o, *i.EpithelialCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Casts ())
            {
              o << ::std::endl << "Casts: ";
              om.insert (o, *i.Casts ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Crystals ())
            {
              o << ::std::endl << "Crystals: ";
              om.insert (o, *i.Crystals ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Bacteria ())
            {
              o << ::std::endl << "Bacteria: ";
              om.insert (o, *i.Bacteria ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Trichomonads ())
            {
              o << ::std::endl << "Trichomonads: ";
              om.insert (o, *i.Trichomonads ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Yeast ())
            {
              o << ::std::endl << "Yeast: ";
              om.insert (o, *i.Yeast ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > (
              ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "PulmonaryFunctionTest",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PulmonaryFunctionTest",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >
        PulmonaryFunctionTest (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "PulmonaryFunctionTest",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PulmonaryFunctionTest",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > (
              ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "SequentialOrganFailureAssessment",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SequentialOrganFailureAssessment",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >
        SequentialOrganFailureAssessment (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "SequentialOrganFailureAssessment",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SequentialOrganFailureAssessment",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::CompleteBloodCount (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > (
              ::mil::tatrc::physiology::datamodel::CompleteBloodCount (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CompleteBloodCount",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CompleteBloodCount",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >
        CompleteBloodCount (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "CompleteBloodCount",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::CompleteBloodCountData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CompleteBloodCount",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > (
              ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "PsychomotorVigilanceTask",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PsychomotorVigilanceTask",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >
        PsychomotorVigilanceTask (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "PsychomotorVigilanceTask",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PsychomotorVigilanceTask",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (const ::xercesc::DOMDocument& doc,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > (
              ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ComprehensiveMetabolicPanel",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ComprehensiveMetabolicPanel",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >
        ComprehensiveMetabolicPanel (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ComprehensiveMetabolicPanel",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ComprehensiveMetabolicPanel",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::Urinalysis (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
            ::mil::tatrc::physiology::datamodel::Urinalysis (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > (
              ::mil::tatrc::physiology::datamodel::Urinalysis (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Urinalysis",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::UrinalysisData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::UrinalysisData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Urinalysis",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData >
        Urinalysis (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Urinalysis",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::UrinalysisData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::UrinalysisData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::UrinalysisData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Urinalysis",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PatientAssessmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PatientAssessmentData >
        _xsd_PatientAssessmentData_type_serializer_init (
          "PatientAssessmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const PulmonaryFunctionTestData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // ExpiratoryReserveVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExpiratoryReserveVolume ())
            {
              const PulmonaryFunctionTestData::ExpiratoryReserveVolume_type& x (*i.ExpiratoryReserveVolume ());
              if (typeid (PulmonaryFunctionTestData::ExpiratoryReserveVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExpiratoryReserveVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExpiratoryReserveVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ForcedVitalCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ForcedVitalCapacity ())
            {
              const PulmonaryFunctionTestData::ForcedVitalCapacity_type& x (*i.ForcedVitalCapacity ());
              if (typeid (PulmonaryFunctionTestData::ForcedVitalCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ForcedVitalCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ForcedVitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ForcedExpiratoryVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ForcedExpiratoryVolume ())
            {
              const PulmonaryFunctionTestData::ForcedExpiratoryVolume_type& x (*i.ForcedExpiratoryVolume ());
              if (typeid (PulmonaryFunctionTestData::ForcedExpiratoryVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ForcedExpiratoryVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ForcedExpiratoryVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ForcedExpiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ForcedExpiratoryFlow ())
            {
              const PulmonaryFunctionTestData::ForcedExpiratoryFlow_type& x (*i.ForcedExpiratoryFlow ());
              if (typeid (PulmonaryFunctionTestData::ForcedExpiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ForcedExpiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ForcedExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FunctionalResidualCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FunctionalResidualCapacity ())
            {
              const PulmonaryFunctionTestData::FunctionalResidualCapacity_type& x (*i.FunctionalResidualCapacity ());
              if (typeid (PulmonaryFunctionTestData::FunctionalResidualCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FunctionalResidualCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FunctionalResidualCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryCapacity ())
            {
              const PulmonaryFunctionTestData::InspiratoryCapacity_type& x (*i.InspiratoryCapacity ());
              if (typeid (PulmonaryFunctionTestData::InspiratoryCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryReserveVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryReserveVolume ())
            {
              const PulmonaryFunctionTestData::InspiratoryReserveVolume_type& x (*i.InspiratoryReserveVolume ());
              if (typeid (PulmonaryFunctionTestData::InspiratoryReserveVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryReserveVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryReserveVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MaximumVoluntaryVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MaximumVoluntaryVentilation ())
            {
              const PulmonaryFunctionTestData::MaximumVoluntaryVentilation_type& x (*i.MaximumVoluntaryVentilation ());
              if (typeid (PulmonaryFunctionTestData::MaximumVoluntaryVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MaximumVoluntaryVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MaximumVoluntaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PeakExpiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PeakExpiratoryFlow ())
            {
              const PulmonaryFunctionTestData::PeakExpiratoryFlow_type& x (*i.PeakExpiratoryFlow ());
              if (typeid (PulmonaryFunctionTestData::PeakExpiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PeakExpiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PeakExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResidualVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResidualVolume ())
            {
              const PulmonaryFunctionTestData::ResidualVolume_type& x (*i.ResidualVolume ());
              if (typeid (PulmonaryFunctionTestData::ResidualVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResidualVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResidualVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SlowVitalCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SlowVitalCapacity ())
            {
              const PulmonaryFunctionTestData::SlowVitalCapacity_type& x (*i.SlowVitalCapacity ());
              if (typeid (PulmonaryFunctionTestData::SlowVitalCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SlowVitalCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SlowVitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalLungCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalLungCapacity ())
            {
              const PulmonaryFunctionTestData::TotalLungCapacity_type& x (*i.TotalLungCapacity ());
              if (typeid (PulmonaryFunctionTestData::TotalLungCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalLungCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalLungCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VitalCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VitalCapacity ())
            {
              const PulmonaryFunctionTestData::VitalCapacity_type& x (*i.VitalCapacity ());
              if (typeid (PulmonaryFunctionTestData::VitalCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VitalCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VitalCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LungVolumePlot
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LungVolumePlot ())
            {
              const PulmonaryFunctionTestData::LungVolumePlot_type& x (*i.LungVolumePlot ());
              if (typeid (PulmonaryFunctionTestData::LungVolumePlot_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LungVolumePlot",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LungVolumePlot",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PulmonaryFunctionTestData >
        _xsd_PulmonaryFunctionTestData_type_serializer_init (
          "PulmonaryFunctionTestData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        PulmonaryFunctionTest (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        PulmonaryFunctionTest (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PulmonaryFunctionTest (::std::ostream& o,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PulmonaryFunctionTest (::xercesc::XMLFormatTarget& t,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PulmonaryFunctionTest (::xercesc::DOMDocument& d,
                               const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData) == typeid (s))
          {
            if (n.name () == "PulmonaryFunctionTest" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "PulmonaryFunctionTest",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "PulmonaryFunctionTest",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PulmonaryFunctionTest (const ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::PulmonaryFunctionTestData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "PulmonaryFunctionTest",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "PulmonaryFunctionTest",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::PulmonaryFunctionTest (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const SequentialOrganFailureAssessmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // RespirationSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::RespirationSOFA_type& x (i.RespirationSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::RespirationSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RespirationSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RespirationSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CoagulationSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::CoagulationSOFA_type& x (i.CoagulationSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::CoagulationSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CoagulationSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CoagulationSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LiverSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::LiverSOFA_type& x (i.LiverSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::LiverSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LiverSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LiverSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CardiovascularSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::CardiovascularSOFA_type& x (i.CardiovascularSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::CardiovascularSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CardiovascularSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CardiovascularSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CentralNervousSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::CentralNervousSOFA_type& x (i.CentralNervousSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::CentralNervousSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CentralNervousSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CentralNervousSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RenalSOFA
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SequentialOrganFailureAssessmentData::RenalSOFA_type& x (i.RenalSOFA ());
            if (typeid (SequentialOrganFailureAssessmentData::RenalSOFA_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RenalSOFA",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RenalSOFA",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SequentialOrganFailureAssessmentData >
        _xsd_SequentialOrganFailureAssessmentData_type_serializer_init (
          "SequentialOrganFailureAssessmentData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        SequentialOrganFailureAssessment (::std::ostream& o,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::std::ostream& o,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          ::xml_schema::error_handler& h,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::std::ostream& o,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& t,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& t,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          ::xml_schema::error_handler& h,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::xercesc::XMLFormatTarget& t,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::xml_schema::namespace_infomap& m,
                                          const ::std::string& e,
                                          ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        SequentialOrganFailureAssessment (::xercesc::DOMDocument& d,
                                          const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData) == typeid (s))
          {
            if (n.name () == "SequentialOrganFailureAssessment" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "SequentialOrganFailureAssessment",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "SequentialOrganFailureAssessment",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        SequentialOrganFailureAssessment (const ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData& s,
                                          const ::xml_schema::namespace_infomap& m,
                                          ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessmentData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "SequentialOrganFailureAssessment",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "SequentialOrganFailureAssessment",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::SequentialOrganFailureAssessment (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const CompleteBloodCountData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Hematocrit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              const CompleteBloodCountData::Hematocrit_type& x (*i.Hematocrit ());
              if (typeid (CompleteBloodCountData::Hematocrit_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Hematocrit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Hemoglobin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Hemoglobin ())
            {
              const CompleteBloodCountData::Hemoglobin_type& x (*i.Hemoglobin ());
              if (typeid (CompleteBloodCountData::Hemoglobin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Hemoglobin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Hemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlateletCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlateletCount ())
            {
              const CompleteBloodCountData::PlateletCount_type& x (*i.PlateletCount ());
              if (typeid (CompleteBloodCountData::PlateletCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlateletCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlateletCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularHemoglobin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              const CompleteBloodCountData::MeanCorpuscularHemoglobin_type& x (*i.MeanCorpuscularHemoglobin ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularHemoglobin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularHemoglobin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularHemoglobinConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobinConcentration ())
            {
              const CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_type& x (*i.MeanCorpuscularHemoglobinConcentration ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularHemoglobinConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularHemoglobinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              const CompleteBloodCountData::MeanCorpuscularVolume_type& x (*i.MeanCorpuscularVolume ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RedBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              const CompleteBloodCountData::RedBloodCellCount_type& x (*i.RedBloodCellCount ());
              if (typeid (CompleteBloodCountData::RedBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              const CompleteBloodCountData::WhiteBloodCellCount_type& x (*i.WhiteBloodCellCount ());
              if (typeid (CompleteBloodCountData::WhiteBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_type_serializer_init (
          "CompleteBloodCountData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        CompleteBloodCount (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CompleteBloodCount (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompleteBloodCount (::std::ostream& o,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompleteBloodCount (::xercesc::XMLFormatTarget& t,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::CompleteBloodCount (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        CompleteBloodCount (::xercesc::DOMDocument& d,
                            const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::CompleteBloodCountData) == typeid (s))
          {
            if (n.name () == "CompleteBloodCount" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "CompleteBloodCount",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CompleteBloodCount",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        CompleteBloodCount (const ::mil::tatrc::physiology::datamodel::CompleteBloodCountData& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::CompleteBloodCountData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "CompleteBloodCount",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "CompleteBloodCount",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::CompleteBloodCount (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const PsychomotorVigilanceTaskData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // ReactionTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReactionTime ())
            {
              const PsychomotorVigilanceTaskData::ReactionTime_type& x (*i.ReactionTime ());
              if (typeid (PsychomotorVigilanceTaskData::ReactionTime_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReactionTime",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AttentionLapses
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AttentionLapses ())
            {
              const PsychomotorVigilanceTaskData::AttentionLapses_type& x (*i.AttentionLapses ());
              if (typeid (PsychomotorVigilanceTaskData::AttentionLapses_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AttentionLapses",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AttentionLapses",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PsychomotorVigilanceTaskData >
        _xsd_PsychomotorVigilanceTaskData_type_serializer_init (
          "PsychomotorVigilanceTaskData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        PsychomotorVigilanceTask (::std::ostream& o,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        PsychomotorVigilanceTask (::std::ostream& o,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PsychomotorVigilanceTask (::std::ostream& o,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& t,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& t,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PsychomotorVigilanceTask (::xercesc::XMLFormatTarget& t,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        PsychomotorVigilanceTask (::xercesc::DOMDocument& d,
                                  const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData) == typeid (s))
          {
            if (n.name () == "PsychomotorVigilanceTask" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "PsychomotorVigilanceTask",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "PsychomotorVigilanceTask",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        PsychomotorVigilanceTask (const ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTaskData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "PsychomotorVigilanceTask",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "PsychomotorVigilanceTask",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::PsychomotorVigilanceTask (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ComprehensiveMetabolicPanelData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Albumin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Albumin ())
            {
              const ComprehensiveMetabolicPanelData::Albumin_type& x (*i.Albumin ());
              if (typeid (ComprehensiveMetabolicPanelData::Albumin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Albumin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Albumin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ALP
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ALP ())
            {
              const ComprehensiveMetabolicPanelData::ALP_type& x (*i.ALP ());
              if (typeid (ComprehensiveMetabolicPanelData::ALP_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ALP",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ALP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ALT
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ALT ())
            {
              const ComprehensiveMetabolicPanelData::ALT_type& x (*i.ALT ());
              if (typeid (ComprehensiveMetabolicPanelData::ALT_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ALT",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ALT",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AST
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AST ())
            {
              const ComprehensiveMetabolicPanelData::AST_type& x (*i.AST ());
              if (typeid (ComprehensiveMetabolicPanelData::AST_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AST",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AST",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BUN
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BUN ())
            {
              const ComprehensiveMetabolicPanelData::BUN_type& x (*i.BUN ());
              if (typeid (ComprehensiveMetabolicPanelData::BUN_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BUN",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BUN",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Calcium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Calcium ())
            {
              const ComprehensiveMetabolicPanelData::Calcium_type& x (*i.Calcium ());
              if (typeid (ComprehensiveMetabolicPanelData::Calcium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Calcium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Calcium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Chloride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Chloride ())
            {
              const ComprehensiveMetabolicPanelData::Chloride_type& x (*i.Chloride ());
              if (typeid (ComprehensiveMetabolicPanelData::Chloride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Chloride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Chloride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CO2
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CO2 ())
            {
              const ComprehensiveMetabolicPanelData::CO2_type& x (*i.CO2 ());
              if (typeid (ComprehensiveMetabolicPanelData::CO2_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CO2",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CO2",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Creatinine
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Creatinine ())
            {
              const ComprehensiveMetabolicPanelData::Creatinine_type& x (*i.Creatinine ());
              if (typeid (ComprehensiveMetabolicPanelData::Creatinine_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Creatinine",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Creatinine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Glucose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              const ComprehensiveMetabolicPanelData::Glucose_type& x (*i.Glucose ());
              if (typeid (ComprehensiveMetabolicPanelData::Glucose_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Glucose",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Potassium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Potassium ())
            {
              const ComprehensiveMetabolicPanelData::Potassium_type& x (*i.Potassium ());
              if (typeid (ComprehensiveMetabolicPanelData::Potassium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Potassium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Potassium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Sodium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Sodium ())
            {
              const ComprehensiveMetabolicPanelData::Sodium_type& x (*i.Sodium ());
              if (typeid (ComprehensiveMetabolicPanelData::Sodium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Sodium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Sodium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalBilirubin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              const ComprehensiveMetabolicPanelData::TotalBilirubin_type& x (*i.TotalBilirubin ());
              if (typeid (ComprehensiveMetabolicPanelData::TotalBilirubin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalBilirubin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalProtein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalProtein ())
            {
              const ComprehensiveMetabolicPanelData::TotalProtein_type& x (*i.TotalProtein ());
              if (typeid (ComprehensiveMetabolicPanelData::TotalProtein_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalProtein",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_type_serializer_init (
          "ComprehensiveMetabolicPanelData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        ComprehensiveMetabolicPanel (::std::ostream& o,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::std::ostream& o,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     ::xml_schema::error_handler& h,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::std::ostream& o,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& t,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& t,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     ::xml_schema::error_handler& h,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::xercesc::XMLFormatTarget& t,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::xml_schema::namespace_infomap& m,
                                     const ::std::string& e,
                                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ComprehensiveMetabolicPanel (::xercesc::DOMDocument& d,
                                     const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData) == typeid (s))
          {
            if (n.name () == "ComprehensiveMetabolicPanel" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "ComprehensiveMetabolicPanel",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ComprehensiveMetabolicPanel",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ComprehensiveMetabolicPanel (const ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData& s,
                                     const ::xml_schema::namespace_infomap& m,
                                     ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanelData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "ComprehensiveMetabolicPanel",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ComprehensiveMetabolicPanel",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::ComprehensiveMetabolicPanel (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const enumPresenceIndicator& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumPresenceIndicator& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumPresenceIndicator& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumPresenceIndicator >
        _xsd_enumPresenceIndicator_type_serializer_init (
          "enumPresenceIndicator",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumClarityIndicator& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumClarityIndicator& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumClarityIndicator& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumClarityIndicator >
        _xsd_enumClarityIndicator_type_serializer_init (
          "enumClarityIndicator",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumUrineColor& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumUrineColor& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumUrineColor& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumUrineColor >
        _xsd_enumUrineColor_type_serializer_init (
          "enumUrineColor",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumMicroscopicObservationType& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumMicroscopicObservationType& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumMicroscopicObservationType& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumMicroscopicObservationType >
        _xsd_enumMicroscopicObservationType_type_serializer_init (
          "enumMicroscopicObservationType",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const enumMicroscopicObservationAmount& i)
        {
          e << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const enumMicroscopicObservationAmount& i)
        {
          a << static_cast< const ::xml_schema::string& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const enumMicroscopicObservationAmount& i)
        {
          l << static_cast< const ::xml_schema::string& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, enumMicroscopicObservationAmount >
        _xsd_enumMicroscopicObservationAmount_type_serializer_init (
          "enumMicroscopicObservationAmount",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const UrinalysisData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Color
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Color ())
            {
              const UrinalysisData::Color_type& x (*i.Color ());
              if (typeid (UrinalysisData::Color_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Color",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Color",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Appearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Appearance ())
            {
              const UrinalysisData::Appearance_type& x (*i.Appearance ());
              if (typeid (UrinalysisData::Appearance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Appearance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Appearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Glucose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              const UrinalysisData::Glucose_type& x (*i.Glucose ());
              if (typeid (UrinalysisData::Glucose_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Glucose",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Ketone
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Ketone ())
            {
              const UrinalysisData::Ketone_type& x (*i.Ketone ());
              if (typeid (UrinalysisData::Ketone_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Ketone",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Ketone",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Bilirubin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Bilirubin ())
            {
              const UrinalysisData::Bilirubin_type& x (*i.Bilirubin ());
              if (typeid (UrinalysisData::Bilirubin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Bilirubin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Bilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SpecificGravity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SpecificGravity ())
            {
              const UrinalysisData::SpecificGravity_type& x (*i.SpecificGravity ());
              if (typeid (UrinalysisData::SpecificGravity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SpecificGravity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Blood
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Blood ())
            {
              const UrinalysisData::Blood_type& x (*i.Blood ());
              if (typeid (UrinalysisData::Blood_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Blood",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Blood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // pH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.pH ())
            {
              const UrinalysisData::pH_type& x (*i.pH ());
              if (typeid (UrinalysisData::pH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "pH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Protein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Protein ())
            {
              const UrinalysisData::Protein_type& x (*i.Protein ());
              if (typeid (UrinalysisData::Protein_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Protein",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Protein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Urobilinogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Urobilinogen ())
            {
              const UrinalysisData::Urobilinogen_type& x (*i.Urobilinogen ());
              if (typeid (UrinalysisData::Urobilinogen_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Urobilinogen",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Urobilinogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Nitrite
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Nitrite ())
            {
              const UrinalysisData::Nitrite_type& x (*i.Nitrite ());
              if (typeid (UrinalysisData::Nitrite_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Nitrite",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Nitrite",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeukocyteEsterase
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeukocyteEsterase ())
            {
              const UrinalysisData::LeukocyteEsterase_type& x (*i.LeukocyteEsterase ());
              if (typeid (UrinalysisData::LeukocyteEsterase_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeukocyteEsterase",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeukocyteEsterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Microscopic
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Microscopic ())
            {
              const UrinalysisData::Microscopic_type& x (*i.Microscopic ());
              if (typeid (UrinalysisData::Microscopic_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Microscopic",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Microscopic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_type_serializer_init (
          "UrinalysisData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const UrinalysisMicroscopicData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // ObservationType
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const UrinalysisMicroscopicData::ObservationType_type& x (i.ObservationType ());
            if (typeid (UrinalysisMicroscopicData::ObservationType_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ObservationType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ObservationType",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RedBloodCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCells ())
            {
              const UrinalysisMicroscopicData::RedBloodCells_type& x (*i.RedBloodCells ());
              if (typeid (UrinalysisMicroscopicData::RedBloodCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCells ())
            {
              const UrinalysisMicroscopicData::WhiteBloodCells_type& x (*i.WhiteBloodCells ());
              if (typeid (UrinalysisMicroscopicData::WhiteBloodCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EpithelialCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EpithelialCells ())
            {
              const UrinalysisMicroscopicData::EpithelialCells_type& x (*i.EpithelialCells ());
              if (typeid (UrinalysisMicroscopicData::EpithelialCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EpithelialCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EpithelialCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Casts
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Casts ())
            {
              const UrinalysisMicroscopicData::Casts_type& x (*i.Casts ());
              if (typeid (UrinalysisMicroscopicData::Casts_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Casts",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Casts",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Crystals
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Crystals ())
            {
              const UrinalysisMicroscopicData::Crystals_type& x (*i.Crystals ());
              if (typeid (UrinalysisMicroscopicData::Crystals_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Crystals",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Crystals",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Bacteria
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Bacteria ())
            {
              const UrinalysisMicroscopicData::Bacteria_type& x (*i.Bacteria ());
              if (typeid (UrinalysisMicroscopicData::Bacteria_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Bacteria",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Bacteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Trichomonads
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Trichomonads ())
            {
              const UrinalysisMicroscopicData::Trichomonads_type& x (*i.Trichomonads ());
              if (typeid (UrinalysisMicroscopicData::Trichomonads_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Trichomonads",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Trichomonads",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Yeast
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Yeast ())
            {
              const UrinalysisMicroscopicData::Yeast_type& x (*i.Yeast ());
              if (typeid (UrinalysisMicroscopicData::Yeast_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Yeast",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Yeast",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_type_serializer_init (
          "UrinalysisMicroscopicData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        Urinalysis (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Urinalysis (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Urinalysis (::std::ostream& o,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Urinalysis (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        Urinalysis (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Urinalysis (::xercesc::XMLFormatTarget& t,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::Urinalysis (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        Urinalysis (::xercesc::DOMDocument& d,
                    const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::UrinalysisData) == typeid (s))
          {
            if (n.name () == "Urinalysis" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "Urinalysis",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Urinalysis",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        Urinalysis (const ::mil::tatrc::physiology::datamodel::UrinalysisData& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::UrinalysisData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "Urinalysis",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "Urinalysis",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::Urinalysis (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

