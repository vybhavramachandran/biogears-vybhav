// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ElectroCardioGram.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ElectroCardioGramData
        // 

        const ElectroCardioGramData::Lead1ElectricPotential_optional& ElectroCardioGramData::
        Lead1ElectricPotential () const
        {
          return this->Lead1ElectricPotential_;
        }

        ElectroCardioGramData::Lead1ElectricPotential_optional& ElectroCardioGramData::
        Lead1ElectricPotential ()
        {
          return this->Lead1ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead1ElectricPotential (const Lead1ElectricPotential_type& x)
        {
          this->Lead1ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead1ElectricPotential (const Lead1ElectricPotential_optional& x)
        {
          this->Lead1ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead1ElectricPotential (::std::unique_ptr< Lead1ElectricPotential_type > x)
        {
          this->Lead1ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead2ElectricPotential_optional& ElectroCardioGramData::
        Lead2ElectricPotential () const
        {
          return this->Lead2ElectricPotential_;
        }

        ElectroCardioGramData::Lead2ElectricPotential_optional& ElectroCardioGramData::
        Lead2ElectricPotential ()
        {
          return this->Lead2ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead2ElectricPotential (const Lead2ElectricPotential_type& x)
        {
          this->Lead2ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead2ElectricPotential (const Lead2ElectricPotential_optional& x)
        {
          this->Lead2ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead2ElectricPotential (::std::unique_ptr< Lead2ElectricPotential_type > x)
        {
          this->Lead2ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead3ElectricPotential_optional& ElectroCardioGramData::
        Lead3ElectricPotential () const
        {
          return this->Lead3ElectricPotential_;
        }

        ElectroCardioGramData::Lead3ElectricPotential_optional& ElectroCardioGramData::
        Lead3ElectricPotential ()
        {
          return this->Lead3ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead3ElectricPotential (const Lead3ElectricPotential_type& x)
        {
          this->Lead3ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead3ElectricPotential (const Lead3ElectricPotential_optional& x)
        {
          this->Lead3ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead3ElectricPotential (::std::unique_ptr< Lead3ElectricPotential_type > x)
        {
          this->Lead3ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead4ElectricPotential_optional& ElectroCardioGramData::
        Lead4ElectricPotential () const
        {
          return this->Lead4ElectricPotential_;
        }

        ElectroCardioGramData::Lead4ElectricPotential_optional& ElectroCardioGramData::
        Lead4ElectricPotential ()
        {
          return this->Lead4ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead4ElectricPotential (const Lead4ElectricPotential_type& x)
        {
          this->Lead4ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead4ElectricPotential (const Lead4ElectricPotential_optional& x)
        {
          this->Lead4ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead4ElectricPotential (::std::unique_ptr< Lead4ElectricPotential_type > x)
        {
          this->Lead4ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead5ElectricPotential_optional& ElectroCardioGramData::
        Lead5ElectricPotential () const
        {
          return this->Lead5ElectricPotential_;
        }

        ElectroCardioGramData::Lead5ElectricPotential_optional& ElectroCardioGramData::
        Lead5ElectricPotential ()
        {
          return this->Lead5ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead5ElectricPotential (const Lead5ElectricPotential_type& x)
        {
          this->Lead5ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead5ElectricPotential (const Lead5ElectricPotential_optional& x)
        {
          this->Lead5ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead5ElectricPotential (::std::unique_ptr< Lead5ElectricPotential_type > x)
        {
          this->Lead5ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead6ElectricPotential_optional& ElectroCardioGramData::
        Lead6ElectricPotential () const
        {
          return this->Lead6ElectricPotential_;
        }

        ElectroCardioGramData::Lead6ElectricPotential_optional& ElectroCardioGramData::
        Lead6ElectricPotential ()
        {
          return this->Lead6ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead6ElectricPotential (const Lead6ElectricPotential_type& x)
        {
          this->Lead6ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead6ElectricPotential (const Lead6ElectricPotential_optional& x)
        {
          this->Lead6ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead6ElectricPotential (::std::unique_ptr< Lead6ElectricPotential_type > x)
        {
          this->Lead6ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead7ElectricPotential_optional& ElectroCardioGramData::
        Lead7ElectricPotential () const
        {
          return this->Lead7ElectricPotential_;
        }

        ElectroCardioGramData::Lead7ElectricPotential_optional& ElectroCardioGramData::
        Lead7ElectricPotential ()
        {
          return this->Lead7ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead7ElectricPotential (const Lead7ElectricPotential_type& x)
        {
          this->Lead7ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead7ElectricPotential (const Lead7ElectricPotential_optional& x)
        {
          this->Lead7ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead7ElectricPotential (::std::unique_ptr< Lead7ElectricPotential_type > x)
        {
          this->Lead7ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead8ElectricPotential_optional& ElectroCardioGramData::
        Lead8ElectricPotential () const
        {
          return this->Lead8ElectricPotential_;
        }

        ElectroCardioGramData::Lead8ElectricPotential_optional& ElectroCardioGramData::
        Lead8ElectricPotential ()
        {
          return this->Lead8ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead8ElectricPotential (const Lead8ElectricPotential_type& x)
        {
          this->Lead8ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead8ElectricPotential (const Lead8ElectricPotential_optional& x)
        {
          this->Lead8ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead8ElectricPotential (::std::unique_ptr< Lead8ElectricPotential_type > x)
        {
          this->Lead8ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead9ElectricPotential_optional& ElectroCardioGramData::
        Lead9ElectricPotential () const
        {
          return this->Lead9ElectricPotential_;
        }

        ElectroCardioGramData::Lead9ElectricPotential_optional& ElectroCardioGramData::
        Lead9ElectricPotential ()
        {
          return this->Lead9ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead9ElectricPotential (const Lead9ElectricPotential_type& x)
        {
          this->Lead9ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead9ElectricPotential (const Lead9ElectricPotential_optional& x)
        {
          this->Lead9ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead9ElectricPotential (::std::unique_ptr< Lead9ElectricPotential_type > x)
        {
          this->Lead9ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead10ElectricPotential_optional& ElectroCardioGramData::
        Lead10ElectricPotential () const
        {
          return this->Lead10ElectricPotential_;
        }

        ElectroCardioGramData::Lead10ElectricPotential_optional& ElectroCardioGramData::
        Lead10ElectricPotential ()
        {
          return this->Lead10ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead10ElectricPotential (const Lead10ElectricPotential_type& x)
        {
          this->Lead10ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead10ElectricPotential (const Lead10ElectricPotential_optional& x)
        {
          this->Lead10ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead10ElectricPotential (::std::unique_ptr< Lead10ElectricPotential_type > x)
        {
          this->Lead10ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead11ElectricPotential_optional& ElectroCardioGramData::
        Lead11ElectricPotential () const
        {
          return this->Lead11ElectricPotential_;
        }

        ElectroCardioGramData::Lead11ElectricPotential_optional& ElectroCardioGramData::
        Lead11ElectricPotential ()
        {
          return this->Lead11ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead11ElectricPotential (const Lead11ElectricPotential_type& x)
        {
          this->Lead11ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead11ElectricPotential (const Lead11ElectricPotential_optional& x)
        {
          this->Lead11ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead11ElectricPotential (::std::unique_ptr< Lead11ElectricPotential_type > x)
        {
          this->Lead11ElectricPotential_.set (std::move (x));
        }

        const ElectroCardioGramData::Lead12ElectricPotential_optional& ElectroCardioGramData::
        Lead12ElectricPotential () const
        {
          return this->Lead12ElectricPotential_;
        }

        ElectroCardioGramData::Lead12ElectricPotential_optional& ElectroCardioGramData::
        Lead12ElectricPotential ()
        {
          return this->Lead12ElectricPotential_;
        }

        void ElectroCardioGramData::
        Lead12ElectricPotential (const Lead12ElectricPotential_type& x)
        {
          this->Lead12ElectricPotential_.set (x);
        }

        void ElectroCardioGramData::
        Lead12ElectricPotential (const Lead12ElectricPotential_optional& x)
        {
          this->Lead12ElectricPotential_ = x;
        }

        void ElectroCardioGramData::
        Lead12ElectricPotential (::std::unique_ptr< Lead12ElectricPotential_type > x)
        {
          this->Lead12ElectricPotential_.set (std::move (x));
        }


        // ElectroCardioGramWaveformLeadNumber
        // 


        // ElectroCardioGramInterpolationWaveformData
        // 

        const ElectroCardioGramInterpolationWaveformData::Data_type& ElectroCardioGramInterpolationWaveformData::
        Data () const
        {
          return this->Data_.get ();
        }

        ElectroCardioGramInterpolationWaveformData::Data_type& ElectroCardioGramInterpolationWaveformData::
        Data ()
        {
          return this->Data_.get ();
        }

        void ElectroCardioGramInterpolationWaveformData::
        Data (const Data_type& x)
        {
          this->Data_.set (x);
        }

        void ElectroCardioGramInterpolationWaveformData::
        Data (::std::unique_ptr< Data_type > x)
        {
          this->Data_.set (std::move (x));
        }

        const ElectroCardioGramInterpolationWaveformData::TimeStep_optional& ElectroCardioGramInterpolationWaveformData::
        TimeStep () const
        {
          return this->TimeStep_;
        }

        ElectroCardioGramInterpolationWaveformData::TimeStep_optional& ElectroCardioGramInterpolationWaveformData::
        TimeStep ()
        {
          return this->TimeStep_;
        }

        void ElectroCardioGramInterpolationWaveformData::
        TimeStep (const TimeStep_type& x)
        {
          this->TimeStep_.set (x);
        }

        void ElectroCardioGramInterpolationWaveformData::
        TimeStep (const TimeStep_optional& x)
        {
          this->TimeStep_ = x;
        }

        void ElectroCardioGramInterpolationWaveformData::
        TimeStep (::std::unique_ptr< TimeStep_type > x)
        {
          this->TimeStep_.set (std::move (x));
        }

        const ElectroCardioGramInterpolationWaveformData::ActiveIndicies_optional& ElectroCardioGramInterpolationWaveformData::
        ActiveIndicies () const
        {
          return this->ActiveIndicies_;
        }

        ElectroCardioGramInterpolationWaveformData::ActiveIndicies_optional& ElectroCardioGramInterpolationWaveformData::
        ActiveIndicies ()
        {
          return this->ActiveIndicies_;
        }

        void ElectroCardioGramInterpolationWaveformData::
        ActiveIndicies (const ActiveIndicies_type& x)
        {
          this->ActiveIndicies_.set (x);
        }

        void ElectroCardioGramInterpolationWaveformData::
        ActiveIndicies (const ActiveIndicies_optional& x)
        {
          this->ActiveIndicies_ = x;
        }

        void ElectroCardioGramInterpolationWaveformData::
        ActiveIndicies (::std::unique_ptr< ActiveIndicies_type > x)
        {
          this->ActiveIndicies_.set (std::move (x));
        }

        const ElectroCardioGramInterpolationWaveformData::Lead_type& ElectroCardioGramInterpolationWaveformData::
        Lead () const
        {
          return this->Lead_.get ();
        }

        ElectroCardioGramInterpolationWaveformData::Lead_type& ElectroCardioGramInterpolationWaveformData::
        Lead ()
        {
          return this->Lead_.get ();
        }

        void ElectroCardioGramInterpolationWaveformData::
        Lead (const Lead_type& x)
        {
          this->Lead_.set (x);
        }

        void ElectroCardioGramInterpolationWaveformData::
        Lead (::std::unique_ptr< Lead_type > x)
        {
          this->Lead_.set (std::move (x));
        }

        const ElectroCardioGramInterpolationWaveformData::Rhythm_type& ElectroCardioGramInterpolationWaveformData::
        Rhythm () const
        {
          return this->Rhythm_.get ();
        }

        ElectroCardioGramInterpolationWaveformData::Rhythm_type& ElectroCardioGramInterpolationWaveformData::
        Rhythm ()
        {
          return this->Rhythm_.get ();
        }

        void ElectroCardioGramInterpolationWaveformData::
        Rhythm (const Rhythm_type& x)
        {
          this->Rhythm_.set (x);
        }

        void ElectroCardioGramInterpolationWaveformData::
        Rhythm (::std::unique_ptr< Rhythm_type > x)
        {
          this->Rhythm_.set (std::move (x));
        }


        // ElectroCardioGramWaveformInterpolatorData
        // 

        const ElectroCardioGramWaveformInterpolatorData::Waveform_sequence& ElectroCardioGramWaveformInterpolatorData::
        Waveform () const
        {
          return this->Waveform_;
        }

        ElectroCardioGramWaveformInterpolatorData::Waveform_sequence& ElectroCardioGramWaveformInterpolatorData::
        Waveform ()
        {
          return this->Waveform_;
        }

        void ElectroCardioGramWaveformInterpolatorData::
        Waveform (const Waveform_sequence& s)
        {
          this->Waveform_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ElectroCardioGramData
        //

        ElectroCardioGramData::
        ElectroCardioGramData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          Lead1ElectricPotential_ (this),
          Lead2ElectricPotential_ (this),
          Lead3ElectricPotential_ (this),
          Lead4ElectricPotential_ (this),
          Lead5ElectricPotential_ (this),
          Lead6ElectricPotential_ (this),
          Lead7ElectricPotential_ (this),
          Lead8ElectricPotential_ (this),
          Lead9ElectricPotential_ (this),
          Lead10ElectricPotential_ (this),
          Lead11ElectricPotential_ (this),
          Lead12ElectricPotential_ (this)
        {
        }

        ElectroCardioGramData::
        ElectroCardioGramData (const ElectroCardioGramData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          Lead1ElectricPotential_ (x.Lead1ElectricPotential_, f, this),
          Lead2ElectricPotential_ (x.Lead2ElectricPotential_, f, this),
          Lead3ElectricPotential_ (x.Lead3ElectricPotential_, f, this),
          Lead4ElectricPotential_ (x.Lead4ElectricPotential_, f, this),
          Lead5ElectricPotential_ (x.Lead5ElectricPotential_, f, this),
          Lead6ElectricPotential_ (x.Lead6ElectricPotential_, f, this),
          Lead7ElectricPotential_ (x.Lead7ElectricPotential_, f, this),
          Lead8ElectricPotential_ (x.Lead8ElectricPotential_, f, this),
          Lead9ElectricPotential_ (x.Lead9ElectricPotential_, f, this),
          Lead10ElectricPotential_ (x.Lead10ElectricPotential_, f, this),
          Lead11ElectricPotential_ (x.Lead11ElectricPotential_, f, this),
          Lead12ElectricPotential_ (x.Lead12ElectricPotential_, f, this)
        {
        }

        ElectroCardioGramData::
        ElectroCardioGramData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          Lead1ElectricPotential_ (this),
          Lead2ElectricPotential_ (this),
          Lead3ElectricPotential_ (this),
          Lead4ElectricPotential_ (this),
          Lead5ElectricPotential_ (this),
          Lead6ElectricPotential_ (this),
          Lead7ElectricPotential_ (this),
          Lead8ElectricPotential_ (this),
          Lead9ElectricPotential_ (this),
          Lead10ElectricPotential_ (this),
          Lead11ElectricPotential_ (this),
          Lead12ElectricPotential_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectroCardioGramData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Lead1ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead1ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead1ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead1ElectricPotential_)
                {
                  ::std::unique_ptr< Lead1ElectricPotential_type > r (
                    dynamic_cast< Lead1ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead1ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead2ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead2ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead2ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead2ElectricPotential_)
                {
                  ::std::unique_ptr< Lead2ElectricPotential_type > r (
                    dynamic_cast< Lead2ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead2ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead3ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead3ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead3ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead3ElectricPotential_)
                {
                  ::std::unique_ptr< Lead3ElectricPotential_type > r (
                    dynamic_cast< Lead3ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead3ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead4ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead4ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead4ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead4ElectricPotential_)
                {
                  ::std::unique_ptr< Lead4ElectricPotential_type > r (
                    dynamic_cast< Lead4ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead4ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead5ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead5ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead5ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead5ElectricPotential_)
                {
                  ::std::unique_ptr< Lead5ElectricPotential_type > r (
                    dynamic_cast< Lead5ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead5ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead6ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead6ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead6ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead6ElectricPotential_)
                {
                  ::std::unique_ptr< Lead6ElectricPotential_type > r (
                    dynamic_cast< Lead6ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead6ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead7ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead7ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead7ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead7ElectricPotential_)
                {
                  ::std::unique_ptr< Lead7ElectricPotential_type > r (
                    dynamic_cast< Lead7ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead7ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead8ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead8ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead8ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead8ElectricPotential_)
                {
                  ::std::unique_ptr< Lead8ElectricPotential_type > r (
                    dynamic_cast< Lead8ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead8ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead9ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead9ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead9ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead9ElectricPotential_)
                {
                  ::std::unique_ptr< Lead9ElectricPotential_type > r (
                    dynamic_cast< Lead9ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead9ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead10ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead10ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead10ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead10ElectricPotential_)
                {
                  ::std::unique_ptr< Lead10ElectricPotential_type > r (
                    dynamic_cast< Lead10ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead10ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead11ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead11ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead11ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead11ElectricPotential_)
                {
                  ::std::unique_ptr< Lead11ElectricPotential_type > r (
                    dynamic_cast< Lead11ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead11ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Lead12ElectricPotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Lead12ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Lead12ElectricPotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Lead12ElectricPotential_)
                {
                  ::std::unique_ptr< Lead12ElectricPotential_type > r (
                    dynamic_cast< Lead12ElectricPotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Lead12ElectricPotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ElectroCardioGramData* ElectroCardioGramData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectroCardioGramData (*this, f, c);
        }

        ElectroCardioGramData& ElectroCardioGramData::
        operator= (const ElectroCardioGramData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->Lead1ElectricPotential_ = x.Lead1ElectricPotential_;
            this->Lead2ElectricPotential_ = x.Lead2ElectricPotential_;
            this->Lead3ElectricPotential_ = x.Lead3ElectricPotential_;
            this->Lead4ElectricPotential_ = x.Lead4ElectricPotential_;
            this->Lead5ElectricPotential_ = x.Lead5ElectricPotential_;
            this->Lead6ElectricPotential_ = x.Lead6ElectricPotential_;
            this->Lead7ElectricPotential_ = x.Lead7ElectricPotential_;
            this->Lead8ElectricPotential_ = x.Lead8ElectricPotential_;
            this->Lead9ElectricPotential_ = x.Lead9ElectricPotential_;
            this->Lead10ElectricPotential_ = x.Lead10ElectricPotential_;
            this->Lead11ElectricPotential_ = x.Lead11ElectricPotential_;
            this->Lead12ElectricPotential_ = x.Lead12ElectricPotential_;
          }

          return *this;
        }

        ElectroCardioGramData::
        ~ElectroCardioGramData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectroCardioGramData >
        _xsd_ElectroCardioGramData_type_factory_init (
          "ElectroCardioGramData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ElectroCardioGramWaveformLeadNumber
        //

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber ()
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > ()
        {
        }

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber (const ::xml_schema::int_& _xsd_int__base)
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > (_xsd_int__base)
        {
        }

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber (const ElectroCardioGramWaveformLeadNumber& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > (x, f, c)
        {
        }

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > (e, f, c)
        {
        }

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > (a, f, c)
        {
        }

        ElectroCardioGramWaveformLeadNumber::
        ElectroCardioGramWaveformLeadNumber (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
        : ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type > (s, e, f, c)
        {
        }

        ElectroCardioGramWaveformLeadNumber* ElectroCardioGramWaveformLeadNumber::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectroCardioGramWaveformLeadNumber (*this, f, c);
        }

        ElectroCardioGramWaveformLeadNumber::
        ~ElectroCardioGramWaveformLeadNumber ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectroCardioGramWaveformLeadNumber >
        _xsd_ElectroCardioGramWaveformLeadNumber_type_factory_init (
          "ElectroCardioGramWaveformLeadNumber",
          "uri:/mil/tatrc/physiology/datamodel");

        // ElectroCardioGramInterpolationWaveformData
        //

        ElectroCardioGramInterpolationWaveformData::
        ElectroCardioGramInterpolationWaveformData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Data_ (this),
          TimeStep_ (this),
          ActiveIndicies_ (this),
          Lead_ (this),
          Rhythm_ (this)
        {
        }

        ElectroCardioGramInterpolationWaveformData::
        ElectroCardioGramInterpolationWaveformData (const Data_type& Data,
                                                    const Lead_type& Lead,
                                                    const Rhythm_type& Rhythm)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Data_ (Data, this),
          TimeStep_ (this),
          ActiveIndicies_ (this),
          Lead_ (Lead, this),
          Rhythm_ (Rhythm, this)
        {
        }

        ElectroCardioGramInterpolationWaveformData::
        ElectroCardioGramInterpolationWaveformData (::std::unique_ptr< Data_type > Data,
                                                    const Lead_type& Lead,
                                                    const Rhythm_type& Rhythm)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Data_ (std::move (Data), this),
          TimeStep_ (this),
          ActiveIndicies_ (this),
          Lead_ (Lead, this),
          Rhythm_ (Rhythm, this)
        {
        }

        ElectroCardioGramInterpolationWaveformData::
        ElectroCardioGramInterpolationWaveformData (const ElectroCardioGramInterpolationWaveformData& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Data_ (x.Data_, f, this),
          TimeStep_ (x.TimeStep_, f, this),
          ActiveIndicies_ (x.ActiveIndicies_, f, this),
          Lead_ (x.Lead_, f, this),
          Rhythm_ (x.Rhythm_, f, this)
        {
        }

        ElectroCardioGramInterpolationWaveformData::
        ElectroCardioGramInterpolationWaveformData (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Data_ (this),
          TimeStep_ (this),
          ActiveIndicies_ (this),
          Lead_ (this),
          Rhythm_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectroCardioGramInterpolationWaveformData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Data
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Data",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Data_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Data_.present ())
                {
                  ::std::unique_ptr< Data_type > r (
                    dynamic_cast< Data_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Data_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TimeStep
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TimeStep",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TimeStep_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TimeStep_)
                {
                  ::std::unique_ptr< TimeStep_type > r (
                    dynamic_cast< TimeStep_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TimeStep_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ActiveIndicies
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveIndicies",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveIndicies_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ActiveIndicies_)
                {
                  ::std::unique_ptr< ActiveIndicies_type > r (
                    dynamic_cast< ActiveIndicies_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ActiveIndicies_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Data_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Data",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Lead" && n.namespace_ ().empty ())
            {
              this->Lead_.set (Lead_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Rhythm" && n.namespace_ ().empty ())
            {
              this->Rhythm_.set (Rhythm_traits::create (i, f, this));
              continue;
            }
          }

          if (!Lead_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Lead",
              "");
          }

          if (!Rhythm_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Rhythm",
              "");
          }
        }

        ElectroCardioGramInterpolationWaveformData* ElectroCardioGramInterpolationWaveformData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectroCardioGramInterpolationWaveformData (*this, f, c);
        }

        ElectroCardioGramInterpolationWaveformData& ElectroCardioGramInterpolationWaveformData::
        operator= (const ElectroCardioGramInterpolationWaveformData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Data_ = x.Data_;
            this->TimeStep_ = x.TimeStep_;
            this->ActiveIndicies_ = x.ActiveIndicies_;
            this->Lead_ = x.Lead_;
            this->Rhythm_ = x.Rhythm_;
          }

          return *this;
        }

        ElectroCardioGramInterpolationWaveformData::
        ~ElectroCardioGramInterpolationWaveformData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectroCardioGramInterpolationWaveformData >
        _xsd_ElectroCardioGramInterpolationWaveformData_type_factory_init (
          "ElectroCardioGramInterpolationWaveformData",
          "uri:/mil/tatrc/physiology/datamodel");

        // ElectroCardioGramWaveformInterpolatorData
        //

        ElectroCardioGramWaveformInterpolatorData::
        ElectroCardioGramWaveformInterpolatorData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Waveform_ (this)
        {
        }

        ElectroCardioGramWaveformInterpolatorData::
        ElectroCardioGramWaveformInterpolatorData (const ElectroCardioGramWaveformInterpolatorData& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Waveform_ (x.Waveform_, f, this)
        {
        }

        ElectroCardioGramWaveformInterpolatorData::
        ElectroCardioGramWaveformInterpolatorData (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Waveform_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectroCardioGramWaveformInterpolatorData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Waveform
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Waveform",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Waveform_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Waveform_type > r (
                  dynamic_cast< Waveform_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Waveform_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        ElectroCardioGramWaveformInterpolatorData* ElectroCardioGramWaveformInterpolatorData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectroCardioGramWaveformInterpolatorData (*this, f, c);
        }

        ElectroCardioGramWaveformInterpolatorData& ElectroCardioGramWaveformInterpolatorData::
        operator= (const ElectroCardioGramWaveformInterpolatorData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Waveform_ = x.Waveform_;
          }

          return *this;
        }

        ElectroCardioGramWaveformInterpolatorData::
        ~ElectroCardioGramWaveformInterpolatorData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectroCardioGramWaveformInterpolatorData >
        _xsd_ElectroCardioGramWaveformInterpolatorData_type_factory_init (
          "ElectroCardioGramWaveformInterpolatorData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ElectroCardioGramData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead1ElectricPotential ())
            {
              o << ::std::endl << "Lead1ElectricPotential: ";
              om.insert (o, *i.Lead1ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead2ElectricPotential ())
            {
              o << ::std::endl << "Lead2ElectricPotential: ";
              om.insert (o, *i.Lead2ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead3ElectricPotential ())
            {
              o << ::std::endl << "Lead3ElectricPotential: ";
              om.insert (o, *i.Lead3ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead4ElectricPotential ())
            {
              o << ::std::endl << "Lead4ElectricPotential: ";
              om.insert (o, *i.Lead4ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead5ElectricPotential ())
            {
              o << ::std::endl << "Lead5ElectricPotential: ";
              om.insert (o, *i.Lead5ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead6ElectricPotential ())
            {
              o << ::std::endl << "Lead6ElectricPotential: ";
              om.insert (o, *i.Lead6ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead7ElectricPotential ())
            {
              o << ::std::endl << "Lead7ElectricPotential: ";
              om.insert (o, *i.Lead7ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead8ElectricPotential ())
            {
              o << ::std::endl << "Lead8ElectricPotential: ";
              om.insert (o, *i.Lead8ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead9ElectricPotential ())
            {
              o << ::std::endl << "Lead9ElectricPotential: ";
              om.insert (o, *i.Lead9ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead10ElectricPotential ())
            {
              o << ::std::endl << "Lead10ElectricPotential: ";
              om.insert (o, *i.Lead10ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead11ElectricPotential ())
            {
              o << ::std::endl << "Lead11ElectricPotential: ";
              om.insert (o, *i.Lead11ElectricPotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Lead12ElectricPotential ())
            {
              o << ::std::endl << "Lead12ElectricPotential: ";
              om.insert (o, *i.Lead12ElectricPotential ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectroCardioGramData >
        _xsd_ElectroCardioGramData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ElectroCardioGramWaveformLeadNumber& i)
        {
          o << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >& > (i);

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectroCardioGramWaveformLeadNumber >
        _xsd_ElectroCardioGramWaveformLeadNumber_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ElectroCardioGramInterpolationWaveformData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Data: ";
            om.insert (o, i.Data ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TimeStep ())
            {
              o << ::std::endl << "TimeStep: ";
              om.insert (o, *i.TimeStep ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ActiveIndicies ())
            {
              o << ::std::endl << "ActiveIndicies: ";
              om.insert (o, *i.ActiveIndicies ());
            }
          }

          o << ::std::endl << "Lead: " << i.Lead ();
          o << ::std::endl << "Rhythm: " << i.Rhythm ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectroCardioGramInterpolationWaveformData >
        _xsd_ElectroCardioGramInterpolationWaveformData_std_ostream_init;

        ::std::ostream&
        operator<< (::std::ostream& o, const ElectroCardioGramWaveformInterpolatorData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ElectroCardioGramWaveformInterpolatorData::Waveform_const_iterator
                 b (i.Waveform ().begin ()), e (i.Waveform ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Waveform: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectroCardioGramWaveformInterpolatorData >
        _xsd_ElectroCardioGramWaveformInterpolatorData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGram (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > (
              ::mil::tatrc::physiology::datamodel::ElectroCardioGram (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ElectroCardioGram",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectroCardioGram",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >
        ElectroCardioGram (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ElectroCardioGram",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ElectroCardioGramData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectroCardioGram",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0,
            (f & ::xml_schema::flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (isrc, h, f, p);
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
              std::move (d), f | ::xml_schema::flags::own_dom, p));
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (const ::xercesc::DOMDocument& doc,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
        {
          if (f & ::xml_schema::flags::keep_dom)
          {
            ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
              static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

            return ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > (
              ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (
                std::move (d), f | ::xml_schema::flags::own_dom, p));
          }

          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ElectroCardioGramWaveformInterpolator",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectroCardioGramWaveformInterpolator",
            "uri:/mil/tatrc/physiology/datamodel");
        }

        ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >
        ElectroCardioGramWaveformInterpolator (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
            ((f & ::xml_schema::flags::keep_dom) &&
             !(f & ::xml_schema::flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::xml_schema::flags::keep_dom)
            doc.setUserData (::xml_schema::dom::tree_node_key,
                             (c.get () ? &c : &d),
                             0);

          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ElectroCardioGramWaveformInterpolator",
              "uri:/mil/tatrc/physiology/datamodel",
              &::xsd::cxx::tree::factory_impl< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData >,
              true, true, e, n, f, 0));

          if (tmp.get () != 0)
          {

            ::std::unique_ptr< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData > r (
              dynamic_cast< ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectroCardioGramWaveformInterpolator",
            "uri:/mil/tatrc/physiology/datamodel");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ElectroCardioGramData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // Lead1ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead1ElectricPotential ())
            {
              const ElectroCardioGramData::Lead1ElectricPotential_type& x (*i.Lead1ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead1ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead1ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead1ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead2ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead2ElectricPotential ())
            {
              const ElectroCardioGramData::Lead2ElectricPotential_type& x (*i.Lead2ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead2ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead2ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead2ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead3ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead3ElectricPotential ())
            {
              const ElectroCardioGramData::Lead3ElectricPotential_type& x (*i.Lead3ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead3ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead3ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead3ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead4ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead4ElectricPotential ())
            {
              const ElectroCardioGramData::Lead4ElectricPotential_type& x (*i.Lead4ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead4ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead4ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead4ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead5ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead5ElectricPotential ())
            {
              const ElectroCardioGramData::Lead5ElectricPotential_type& x (*i.Lead5ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead5ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead5ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead5ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead6ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead6ElectricPotential ())
            {
              const ElectroCardioGramData::Lead6ElectricPotential_type& x (*i.Lead6ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead6ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead6ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead6ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead7ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead7ElectricPotential ())
            {
              const ElectroCardioGramData::Lead7ElectricPotential_type& x (*i.Lead7ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead7ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead7ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead7ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead8ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead8ElectricPotential ())
            {
              const ElectroCardioGramData::Lead8ElectricPotential_type& x (*i.Lead8ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead8ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead8ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead8ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead9ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead9ElectricPotential ())
            {
              const ElectroCardioGramData::Lead9ElectricPotential_type& x (*i.Lead9ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead9ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead9ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead9ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead10ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead10ElectricPotential ())
            {
              const ElectroCardioGramData::Lead10ElectricPotential_type& x (*i.Lead10ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead10ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead10ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead10ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead11ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead11ElectricPotential ())
            {
              const ElectroCardioGramData::Lead11ElectricPotential_type& x (*i.Lead11ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead11ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead11ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead11ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead12ElectricPotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Lead12ElectricPotential ())
            {
              const ElectroCardioGramData::Lead12ElectricPotential_type& x (*i.Lead12ElectricPotential ());
              if (typeid (ElectroCardioGramData::Lead12ElectricPotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Lead12ElectricPotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Lead12ElectricPotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectroCardioGramData >
        _xsd_ElectroCardioGramData_type_serializer_init (
          "ElectroCardioGramData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        ElectroCardioGram (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ElectroCardioGram (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGram (::std::ostream& o,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGram (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ElectroCardioGram (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGram (::xercesc::XMLFormatTarget& t,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGram (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGram (::xercesc::DOMDocument& d,
                           const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ElectroCardioGramData) == typeid (s))
          {
            if (n.name () == "ElectroCardioGram" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "ElectroCardioGram",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ElectroCardioGram",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ElectroCardioGram (const ::mil::tatrc::physiology::datamodel::ElectroCardioGramData& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ElectroCardioGramData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "ElectroCardioGram",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ElectroCardioGram",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::ElectroCardioGram (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ElectroCardioGramWaveformLeadNumber& i)
        {
          e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const ElectroCardioGramWaveformLeadNumber& i)
        {
          a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >& > (i);
        }

        void
        operator<< (::xml_schema::list_stream& l,
                    const ElectroCardioGramWaveformLeadNumber& i)
        {
          l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >& > (i);
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectroCardioGramWaveformLeadNumber >
        _xsd_ElectroCardioGramWaveformLeadNumber_type_serializer_init (
          "ElectroCardioGramWaveformLeadNumber",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ElectroCardioGramInterpolationWaveformData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Data
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ElectroCardioGramInterpolationWaveformData::Data_type& x (i.Data ());
            if (typeid (ElectroCardioGramInterpolationWaveformData::Data_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Data",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Data",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TimeStep
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TimeStep ())
            {
              const ElectroCardioGramInterpolationWaveformData::TimeStep_type& x (*i.TimeStep ());
              if (typeid (ElectroCardioGramInterpolationWaveformData::TimeStep_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TimeStep",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TimeStep",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ActiveIndicies
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ActiveIndicies ())
            {
              const ElectroCardioGramInterpolationWaveformData::ActiveIndicies_type& x (*i.ActiveIndicies ());
              if (typeid (ElectroCardioGramInterpolationWaveformData::ActiveIndicies_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveIndicies",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ActiveIndicies",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Lead
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Lead",
                e));

            a << i.Lead ();
          }

          // Rhythm
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Rhythm",
                e));

            a << i.Rhythm ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectroCardioGramInterpolationWaveformData >
        _xsd_ElectroCardioGramInterpolationWaveformData_type_serializer_init (
          "ElectroCardioGramInterpolationWaveformData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        operator<< (::xercesc::DOMElement& e, const ElectroCardioGramWaveformInterpolatorData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Waveform
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ElectroCardioGramWaveformInterpolatorData::Waveform_const_iterator
                 b (i.Waveform ().begin ()), n (i.Waveform ().end ());
                 b != n; ++b)
            {
              if (typeid (ElectroCardioGramWaveformInterpolatorData::Waveform_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Waveform",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Waveform",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectroCardioGramWaveformInterpolatorData >
        _xsd_ElectroCardioGramWaveformInterpolatorData_type_serializer_init (
          "ElectroCardioGramWaveformInterpolatorData",
          "uri:/mil/tatrc/physiology/datamodel");


        void
        ElectroCardioGramWaveformInterpolator (::std::ostream& o,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::std::ostream& o,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               ::xml_schema::error_handler& h,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::xml_schema::flags::dont_initialize) == 0);

          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::std::ostream& o,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               ::xercesc::DOMErrorHandler& h,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::xercesc::XMLFormatTarget& t,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::xercesc::XMLFormatTarget& t,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               ::xml_schema::error_handler& h,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::xercesc::XMLFormatTarget& t,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               ::xercesc::DOMErrorHandler& h,
                                               const ::xml_schema::namespace_infomap& m,
                                               const ::std::string& e,
                                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        ElectroCardioGramWaveformInterpolator (::xercesc::DOMDocument& d,
                                               const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               ::xml_schema::flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (typeid (::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData) == typeid (s))
          {
            if (n.name () == "ElectroCardioGramWaveformInterpolator" &&
                n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              e << s;
            }
            else
            {
              throw ::xsd::cxx::tree::unexpected_element < char > (
                n.name (),
                n.namespace_ (),
                "ElectroCardioGramWaveformInterpolator",
                "uri:/mil/tatrc/physiology/datamodel");
            }
          }
          else
          {
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ElectroCardioGramWaveformInterpolator",
              "uri:/mil/tatrc/physiology/datamodel",
              e, n, s);
          }
        }

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
        ElectroCardioGramWaveformInterpolator (const ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData& s,
                                               const ::xml_schema::namespace_infomap& m,
                                               ::xml_schema::flags f)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

          if (typeid (::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolatorData) == typeid (s))
          {
            d = ::xsd::cxx::xml::dom::serialize< char > (
              "ElectroCardioGramWaveformInterpolator",
              "uri:/mil/tatrc/physiology/datamodel",
              m, f);
          }
          else
          {
            d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
              "ElectroCardioGramWaveformInterpolator",
              "uri:/mil/tatrc/physiology/datamodel",
              m, s, f);
          }

          ::mil::tatrc::physiology::datamodel::ElectroCardioGramWaveformInterpolator (*d, s, f);
          return d;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

